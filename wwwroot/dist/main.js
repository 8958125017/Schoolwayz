/******/ (function(modules) { // webpackBootstrap
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = this["webpackHotUpdate"];
/******/ 	this["webpackHotUpdate"] = 
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if(parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/ 	
/******/ 	function hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars
/******/ 		var head = document.getElementsByTagName("head")[0];
/******/ 		var script = document.createElement("script");
/******/ 		script.type = "text/javascript";
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		head.appendChild(script);
/******/ 	}
/******/ 	
/******/ 	function hotDownloadManifest() { // eslint-disable-line no-unused-vars
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if(typeof XMLHttpRequest === "undefined")
/******/ 				return reject(new Error("No browser support"));
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = 10000;
/******/ 				request.send(null);
/******/ 			} catch(err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if(request.readyState !== 4) return;
/******/ 				if(request.status === 0) {
/******/ 					// timeout
/******/ 					reject(new Error("Manifest request to " + requestPath + " timed out."));
/******/ 				} else if(request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if(request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch(e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	
/******/ 	
/******/ 	var hotApplyOnUpdate = true;
/******/ 	var hotCurrentHash = "65b57ae7c4aa70562745"; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentParents = []; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = []; // eslint-disable-line no-unused-vars
/******/ 	
/******/ 	function hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var me = installedModules[moduleId];
/******/ 		if(!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if(me.hot.active) {
/******/ 				if(installedModules[request]) {
/******/ 					if(installedModules[request].parents.indexOf(moduleId) < 0)
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if(me.children.indexOf(request) < 0)
/******/ 					me.children.push(request);
/******/ 			} else {
/******/ 				console.warn("[HMR] unexpected require(" + request + ") from disposed module " + moduleId);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for(var name in __webpack_require__) {
/******/ 			if(Object.prototype.hasOwnProperty.call(__webpack_require__, name) && name !== "e") {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if(hotStatus === "ready")
/******/ 				hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/ 	
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if(hotStatus === "prepare") {
/******/ 					if(!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if(hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/ 	
/******/ 	function hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/ 	
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfAccepted = true;
/******/ 				else if(typeof dep === "function")
/******/ 					hot._selfAccepted = dep;
/******/ 				else if(typeof dep === "object")
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else
/******/ 					hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfDeclined = true;
/******/ 				else if(typeof dep === "object")
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else
/******/ 					hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if(idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if(!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if(idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/ 	
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/ 	
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for(var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/ 	
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/ 	
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/ 	
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = (+id) + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/ 	
/******/ 	function hotCheck(apply) {
/******/ 		if(hotStatus !== "idle") throw new Error("check() is only allowed in idle status");
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest().then(function(update) {
/******/ 			if(!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/ 	
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			var chunkId = 0;
/******/ 			{ // eslint-disable-line no-lone-blocks
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if(hotStatus === "prepare" && hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/ 	
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		if(!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for(var moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if(!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if(!deferred) return;
/******/ 		if(hotApplyOnUpdate) {
/******/ 			hotApply(hotApplyOnUpdate).then(function(result) {
/******/ 				deferred.resolve(result);
/******/ 			}, function(err) {
/******/ 				deferred.reject(err);
/******/ 			});
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for(var id in hotUpdate) {
/******/ 				if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotApply(options) {
/******/ 		if(hotStatus !== "ready") throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/ 	
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/ 	
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/ 	
/******/ 			var queue = outdatedModules.slice().map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while(queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if(!module || module.hot._selfAccepted)
/******/ 					continue;
/******/ 				if(module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if(module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for(var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if(!parent) continue;
/******/ 					if(parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if(outdatedModules.indexOf(parentId) >= 0) continue;
/******/ 					if(parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if(!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/ 	
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/ 	
/******/ 		function addAllToSet(a, b) {
/******/ 			for(var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if(a.indexOf(item) < 0)
/******/ 					a.push(item);
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/ 	
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn("[HMR] unexpected require(" + result.moduleId + ") to disposed module");
/******/ 		};
/******/ 	
/******/ 		for(var id in hotUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				var result;
/******/ 				if(hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if(result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch(result.type) {
/******/ 					case "self-declined":
/******/ 						if(options.onDeclined)
/******/ 							options.onDeclined(result);
/******/ 						if(!options.ignoreDeclined)
/******/ 							abortError = new Error("Aborted because of self decline: " + result.moduleId + chainInfo);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if(options.onDeclined)
/******/ 							options.onDeclined(result);
/******/ 						if(!options.ignoreDeclined)
/******/ 							abortError = new Error("Aborted because of declined dependency: " + result.moduleId + " in " + result.parentId + chainInfo);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if(options.onUnaccepted)
/******/ 							options.onUnaccepted(result);
/******/ 						if(!options.ignoreUnaccepted)
/******/ 							abortError = new Error("Aborted because " + moduleId + " is not accepted" + chainInfo);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if(options.onAccepted)
/******/ 							options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if(options.onDisposed)
/******/ 							options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if(abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if(doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for(moduleId in result.outdatedDependencies) {
/******/ 						if(Object.prototype.hasOwnProperty.call(result.outdatedDependencies, moduleId)) {
/******/ 							if(!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(outdatedDependencies[moduleId], result.outdatedDependencies[moduleId]);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if(doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for(i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 		}
/******/ 	
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if(hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/ 	
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while(queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if(!module) continue;
/******/ 	
/******/ 			var data = {};
/******/ 	
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for(j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/ 	
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/ 	
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/ 	
/******/ 			// remove "parents" references from all children
/******/ 			for(j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if(!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if(idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for(moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				module = installedModules[moduleId];
/******/ 				if(module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for(j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if(idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Not in "apply" phase
/******/ 		hotSetStatus("apply");
/******/ 	
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/ 	
/******/ 		// insert new code
/******/ 		for(moduleId in appliedUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for(moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				module = installedModules[moduleId];
/******/ 				moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				var callbacks = [];
/******/ 				for(i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 					dependency = moduleOutdatedDependencies[i];
/******/ 					cb = module.hot._acceptedDependencies[dependency];
/******/ 					if(callbacks.indexOf(cb) >= 0) continue;
/******/ 					callbacks.push(cb);
/******/ 				}
/******/ 				for(i = 0; i < callbacks.length; i++) {
/******/ 					cb = callbacks[i];
/******/ 					try {
/******/ 						cb(moduleOutdatedDependencies);
/******/ 					} catch(err) {
/******/ 						if(options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "accept-errored",
/******/ 								moduleId: moduleId,
/******/ 								dependencyId: moduleOutdatedDependencies[i],
/******/ 								error: err
/******/ 							});
/******/ 						}
/******/ 						if(!options.ignoreErrored) {
/******/ 							if(!error)
/******/ 								error = err;
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Load self accepted modules
/******/ 		for(i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch(err) {
/******/ 				if(typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch(err2) {
/******/ 						if(options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								orginalError: err
/******/ 							});
/******/ 						}
/******/ 						if(!options.ignoreErrored) {
/******/ 							if(!error)
/******/ 								error = err2;
/******/ 						}
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if(options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if(!options.ignoreErrored) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if(error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/ 	
/******/ 		hotSetStatus("idle");
/******/ 		return Promise.resolve(outdatedModules);
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire(340)(__webpack_require__.s = 340);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
//! version : 2.18.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
     true ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

var hookCallback;

function hooks () {
    return hookCallback.apply(null, arguments);
}

// This is done to register the method called with moment()
// without creating circular dependencies.
function setHookCallback (callback) {
    hookCallback = callback;
}

function isArray(input) {
    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
}

function isObject(input) {
    // IE8 will treat undefined and null as object if it wasn't for
    // input != null
    return input != null && Object.prototype.toString.call(input) === '[object Object]';
}

function isObjectEmpty(obj) {
    var k;
    for (k in obj) {
        // even if its not own property I'd still call it non-empty
        return false;
    }
    return true;
}

function isUndefined(input) {
    return input === void 0;
}

function isNumber(input) {
    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
}

function isDate(input) {
    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
}

function map(arr, fn) {
    var res = [], i;
    for (i = 0; i < arr.length; ++i) {
        res.push(fn(arr[i], i));
    }
    return res;
}

function hasOwnProp(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
}

function extend(a, b) {
    for (var i in b) {
        if (hasOwnProp(b, i)) {
            a[i] = b[i];
        }
    }

    if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString;
    }

    if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf;
    }

    return a;
}

function createUTC (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, true).utc();
}

function defaultParsingFlags() {
    // We need to deep clone this object.
    return {
        empty           : false,
        unusedTokens    : [],
        unusedInput     : [],
        overflow        : -2,
        charsLeftOver   : 0,
        nullInput       : false,
        invalidMonth    : null,
        invalidFormat   : false,
        userInvalidated : false,
        iso             : false,
        parsedDateParts : [],
        meridiem        : null,
        rfc2822         : false,
        weekdayMismatch : false
    };
}

function getParsingFlags(m) {
    if (m._pf == null) {
        m._pf = defaultParsingFlags();
    }
    return m._pf;
}

var some;
if (Array.prototype.some) {
    some = Array.prototype.some;
} else {
    some = function (fun) {
        var t = Object(this);
        var len = t.length >>> 0;

        for (var i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
                return true;
            }
        }

        return false;
    };
}

var some$1 = some;

function isValid(m) {
    if (m._isValid == null) {
        var flags = getParsingFlags(m);
        var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
            return i != null;
        });
        var isNowValid = !isNaN(m._d.getTime()) &&
            flags.overflow < 0 &&
            !flags.empty &&
            !flags.invalidMonth &&
            !flags.invalidWeekday &&
            !flags.nullInput &&
            !flags.invalidFormat &&
            !flags.userInvalidated &&
            (!flags.meridiem || (flags.meridiem && parsedParts));

        if (m._strict) {
            isNowValid = isNowValid &&
                flags.charsLeftOver === 0 &&
                flags.unusedTokens.length === 0 &&
                flags.bigHour === undefined;
        }

        if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
        }
        else {
            return isNowValid;
        }
    }
    return m._isValid;
}

function createInvalid (flags) {
    var m = createUTC(NaN);
    if (flags != null) {
        extend(getParsingFlags(m), flags);
    }
    else {
        getParsingFlags(m).userInvalidated = true;
    }

    return m;
}

// Plugins that add properties should also add the key here (null value),
// so we can properly clone ourselves.
var momentProperties = hooks.momentProperties = [];

function copyConfig(to, from) {
    var i, prop, val;

    if (!isUndefined(from._isAMomentObject)) {
        to._isAMomentObject = from._isAMomentObject;
    }
    if (!isUndefined(from._i)) {
        to._i = from._i;
    }
    if (!isUndefined(from._f)) {
        to._f = from._f;
    }
    if (!isUndefined(from._l)) {
        to._l = from._l;
    }
    if (!isUndefined(from._strict)) {
        to._strict = from._strict;
    }
    if (!isUndefined(from._tzm)) {
        to._tzm = from._tzm;
    }
    if (!isUndefined(from._isUTC)) {
        to._isUTC = from._isUTC;
    }
    if (!isUndefined(from._offset)) {
        to._offset = from._offset;
    }
    if (!isUndefined(from._pf)) {
        to._pf = getParsingFlags(from);
    }
    if (!isUndefined(from._locale)) {
        to._locale = from._locale;
    }

    if (momentProperties.length > 0) {
        for (i = 0; i < momentProperties.length; i++) {
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) {
                to[prop] = val;
            }
        }
    }

    return to;
}

var updateInProgress = false;

// Moment prototype object
function Moment(config) {
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    if (!this.isValid()) {
        this._d = new Date(NaN);
    }
    // Prevent infinite loop in case updateOffset creates new moment
    // objects.
    if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
    }
}

function isMoment (obj) {
    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
}

function absFloor (number) {
    if (number < 0) {
        // -0 -> 0
        return Math.ceil(number) || 0;
    } else {
        return Math.floor(number);
    }
}

function toInt(argumentForCoercion) {
    var coercedNumber = +argumentForCoercion,
        value = 0;

    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber);
    }

    return value;
}

// compare two arrays, return the number of differences
function compareArrays(array1, array2, dontConvert) {
    var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;
    for (i = 0; i < len; i++) {
        if ((dontConvert && array1[i] !== array2[i]) ||
            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
            diffs++;
        }
    }
    return diffs + lengthDiff;
}

function warn(msg) {
    if (hooks.suppressDeprecationWarnings === false &&
            (typeof console !==  'undefined') && console.warn) {
        console.warn('Deprecation warning: ' + msg);
    }
}

function deprecate(msg, fn) {
    var firstTime = true;

    return extend(function () {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
            var args = [];
            var arg;
            for (var i = 0; i < arguments.length; i++) {
                arg = '';
                if (typeof arguments[i] === 'object') {
                    arg += '\n[' + i + '] ';
                    for (var key in arguments[0]) {
                        arg += key + ': ' + arguments[0][key] + ', ';
                    }
                    arg = arg.slice(0, -2); // Remove trailing comma and space
                } else {
                    arg = arguments[i];
                }
                args.push(arg);
            }
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
            firstTime = false;
        }
        return fn.apply(this, arguments);
    }, fn);
}

var deprecations = {};

function deprecateSimple(name, msg) {
    if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
    }
    if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
    }
}

hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;

function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
}

function set (config) {
    var prop, i;
    for (i in config) {
        prop = config[i];
        if (isFunction(prop)) {
            this[i] = prop;
        } else {
            this['_' + i] = prop;
        }
    }
    this._config = config;
    // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
    // TODO: Remove "ordinalParse" fallback in next major release.
    this._dayOfMonthOrdinalParseLenient = new RegExp(
        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
            '|' + (/\d{1,2}/).source);
}

function mergeConfigs(parentConfig, childConfig) {
    var res = extend({}, parentConfig), prop;
    for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                res[prop] = {};
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
                res[prop] = childConfig[prop];
            } else {
                delete res[prop];
            }
        }
    }
    for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop]);
        }
    }
    return res;
}

function Locale(config) {
    if (config != null) {
        this.set(config);
    }
}

var keys;

if (Object.keys) {
    keys = Object.keys;
} else {
    keys = function (obj) {
        var i, res = [];
        for (i in obj) {
            if (hasOwnProp(obj, i)) {
                res.push(i);
            }
        }
        return res;
    };
}

var keys$1 = keys;

var defaultCalendar = {
    sameDay : '[Today at] LT',
    nextDay : '[Tomorrow at] LT',
    nextWeek : 'dddd [at] LT',
    lastDay : '[Yesterday at] LT',
    lastWeek : '[Last] dddd [at] LT',
    sameElse : 'L'
};

function calendar (key, mom, now) {
    var output = this._calendar[key] || this._calendar['sameElse'];
    return isFunction(output) ? output.call(mom, now) : output;
}

var defaultLongDateFormat = {
    LTS  : 'h:mm:ss A',
    LT   : 'h:mm A',
    L    : 'MM/DD/YYYY',
    LL   : 'MMMM D, YYYY',
    LLL  : 'MMMM D, YYYY h:mm A',
    LLLL : 'dddd, MMMM D, YYYY h:mm A'
};

function longDateFormat (key) {
    var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];

    if (format || !formatUpper) {
        return format;
    }

    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
        return val.slice(1);
    });

    return this._longDateFormat[key];
}

var defaultInvalidDate = 'Invalid date';

function invalidDate () {
    return this._invalidDate;
}

var defaultOrdinal = '%d';
var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

function ordinal (number) {
    return this._ordinal.replace('%d', number);
}

var defaultRelativeTime = {
    future : 'in %s',
    past   : '%s ago',
    s  : 'a few seconds',
    ss : '%d seconds',
    m  : 'a minute',
    mm : '%d minutes',
    h  : 'an hour',
    hh : '%d hours',
    d  : 'a day',
    dd : '%d days',
    M  : 'a month',
    MM : '%d months',
    y  : 'a year',
    yy : '%d years'
};

function relativeTime (number, withoutSuffix, string, isFuture) {
    var output = this._relativeTime[string];
    return (isFunction(output)) ?
        output(number, withoutSuffix, string, isFuture) :
        output.replace(/%d/i, number);
}

function pastFuture (diff, output) {
    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
}

var aliases = {};

function addUnitAlias (unit, shorthand) {
    var lowerCase = unit.toLowerCase();
    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
}

function normalizeUnits(units) {
    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
}

function normalizeObjectUnits(inputObject) {
    var normalizedInput = {},
        normalizedProp,
        prop;

    for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
                normalizedInput[normalizedProp] = inputObject[prop];
            }
        }
    }

    return normalizedInput;
}

var priorities = {};

function addUnitPriority(unit, priority) {
    priorities[unit] = priority;
}

function getPrioritizedUnits(unitsObj) {
    var units = [];
    for (var u in unitsObj) {
        units.push({unit: u, priority: priorities[u]});
    }
    units.sort(function (a, b) {
        return a.priority - b.priority;
    });
    return units;
}

function makeGetSet (unit, keepTime) {
    return function (value) {
        if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
        } else {
            return get(this, unit);
        }
    };
}

function get (mom, unit) {
    return mom.isValid() ?
        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
}

function set$1 (mom, unit, value) {
    if (mom.isValid()) {
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }
}

// MOMENTS

function stringGet (units) {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
        return this[units]();
    }
    return this;
}


function stringSet (units, value) {
    if (typeof units === 'object') {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units);
        for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
        }
    } else {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units](value);
        }
    }
    return this;
}

function zeroFill(number, targetLength, forceSign) {
    var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
    return (sign ? (forceSign ? '+' : '') : '-') +
        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}

var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

var formatFunctions = {};

var formatTokenFunctions = {};

// token:    'M'
// padded:   ['MM', 2]
// ordinal:  'Mo'
// callback: function () { this.month() + 1 }
function addFormatToken (token, padded, ordinal, callback) {
    var func = callback;
    if (typeof callback === 'string') {
        func = function () {
            return this[callback]();
        };
    }
    if (token) {
        formatTokenFunctions[token] = func;
    }
    if (padded) {
        formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
    }
    if (ordinal) {
        formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token);
        };
    }
}

function removeFormattingTokens(input) {
    if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '');
    }
    return input.replace(/\\/g, '');
}

function makeFormatFunction(format) {
    var array = format.match(formattingTokens), i, length;

    for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
        } else {
            array[i] = removeFormattingTokens(array[i]);
        }
    }

    return function (mom) {
        var output = '', i;
        for (i = 0; i < length; i++) {
            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
        }
        return output;
    };
}

// format date using native date object
function formatMoment(m, format) {
    if (!m.isValid()) {
        return m.localeData().invalidDate();
    }

    format = expandFormat(format, m.localeData());
    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

    return formatFunctions[format](m);
}

function expandFormat(format, locale) {
    var i = 5;

    function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input;
    }

    localFormattingTokens.lastIndex = 0;
    while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1;
    }

    return format;
}

var match1         = /\d/;            //       0 - 9
var match2         = /\d\d/;          //      00 - 99
var match3         = /\d{3}/;         //     000 - 999
var match4         = /\d{4}/;         //    0000 - 9999
var match6         = /[+-]?\d{6}/;    // -999999 - 999999
var match1to2      = /\d\d?/;         //       0 - 99
var match3to4      = /\d\d\d\d?/;     //     999 - 9999
var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
var match1to3      = /\d{1,3}/;       //       0 - 999
var match1to4      = /\d{1,4}/;       //       0 - 9999
var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

var matchUnsigned  = /\d+/;           //       0 - inf
var matchSigned    = /[+-]?\d+/;      //    -inf - inf

var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

// any word (or two) characters or numbers including two/three word month in arabic.
// includes scottish gaelic two word and hyphenated months
var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


var regexes = {};

function addRegexToken (token, regex, strictRegex) {
    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
        return (isStrict && strictRegex) ? strictRegex : regex;
    };
}

function getParseRegexForToken (token, config) {
    if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token));
    }

    return regexes[token](config._strict, config._locale);
}

// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
function unescapeFormat(s) {
    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
    }));
}

function regexEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}

var tokens = {};

function addParseToken (token, callback) {
    var i, func = callback;
    if (typeof token === 'string') {
        token = [token];
    }
    if (isNumber(callback)) {
        func = function (input, array) {
            array[callback] = toInt(input);
        };
    }
    for (i = 0; i < token.length; i++) {
        tokens[token[i]] = func;
    }
}

function addWeekParseToken (token, callback) {
    addParseToken(token, function (input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token);
    });
}

function addTimeToArrayFromToken(token, input, config) {
    if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token);
    }
}

var YEAR = 0;
var MONTH = 1;
var DATE = 2;
var HOUR = 3;
var MINUTE = 4;
var SECOND = 5;
var MILLISECOND = 6;
var WEEK = 7;
var WEEKDAY = 8;

var indexOf;

if (Array.prototype.indexOf) {
    indexOf = Array.prototype.indexOf;
} else {
    indexOf = function (o) {
        // I know
        var i;
        for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
                return i;
            }
        }
        return -1;
    };
}

var indexOf$1 = indexOf;

function daysInMonth(year, month) {
    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
}

// FORMATTING

addFormatToken('M', ['MM', 2], 'Mo', function () {
    return this.month() + 1;
});

addFormatToken('MMM', 0, 0, function (format) {
    return this.localeData().monthsShort(this, format);
});

addFormatToken('MMMM', 0, 0, function (format) {
    return this.localeData().months(this, format);
});

// ALIASES

addUnitAlias('month', 'M');

// PRIORITY

addUnitPriority('month', 8);

// PARSING

addRegexToken('M',    match1to2);
addRegexToken('MM',   match1to2, match2);
addRegexToken('MMM',  function (isStrict, locale) {
    return locale.monthsShortRegex(isStrict);
});
addRegexToken('MMMM', function (isStrict, locale) {
    return locale.monthsRegex(isStrict);
});

addParseToken(['M', 'MM'], function (input, array) {
    array[MONTH] = toInt(input) - 1;
});

addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
    var month = config._locale.monthsParse(input, token, config._strict);
    // if we didn't find a month name, mark the date as invalid.
    if (month != null) {
        array[MONTH] = month;
    } else {
        getParsingFlags(config).invalidMonth = input;
    }
});

// LOCALES

var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
function localeMonths (m, format) {
    if (!m) {
        return isArray(this._months) ? this._months :
            this._months['standalone'];
    }
    return isArray(this._months) ? this._months[m.month()] :
        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
}

var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
function localeMonthsShort (m, format) {
    if (!m) {
        return isArray(this._monthsShort) ? this._monthsShort :
            this._monthsShort['standalone'];
    }
    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
}

function handleStrictParse(monthName, format, strict) {
    var i, ii, mom, llc = monthName.toLocaleLowerCase();
    if (!this._monthsParse) {
        // this is not used
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeMonthsParse (monthName, format, strict) {
    var i, mom, regex;

    if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format, strict);
    }

    if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
    }

    // TODO: add sorting
    // Sorting makes sure if one month (or abbr) is a prefix of another
    // see sorting in computeMonthsParse
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        }
        if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
        }
    }
}

// MOMENTS

function setMonth (mom, value) {
    var dayOfMonth;

    if (!mom.isValid()) {
        // No op
        return mom;
    }

    if (typeof value === 'string') {
        if (/^\d+$/.test(value)) {
            value = toInt(value);
        } else {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (!isNumber(value)) {
                return mom;
            }
        }
    }

    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
    return mom;
}

function getSetMonth (value) {
    if (value != null) {
        setMonth(this, value);
        hooks.updateOffset(this, true);
        return this;
    } else {
        return get(this, 'Month');
    }
}

function getDaysInMonth () {
    return daysInMonth(this.year(), this.month());
}

var defaultMonthsShortRegex = matchWord;
function monthsShortRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsShortStrictRegex;
        } else {
            return this._monthsShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ?
            this._monthsShortStrictRegex : this._monthsShortRegex;
    }
}

var defaultMonthsRegex = matchWord;
function monthsRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsStrictRegex;
        } else {
            return this._monthsRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ?
            this._monthsStrictRegex : this._monthsRegex;
    }
}

function computeMonthsParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom;
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        shortPieces.push(this.monthsShort(mom, ''));
        longPieces.push(this.months(mom, ''));
        mixedPieces.push(this.months(mom, ''));
        mixedPieces.push(this.monthsShort(mom, ''));
    }
    // Sorting makes sure if one month (or abbr) is a prefix of another it
    // will match the longer piece.
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 12; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
    }
    for (i = 0; i < 24; i++) {
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
}

// FORMATTING

addFormatToken('Y', 0, 0, function () {
    var y = this.year();
    return y <= 9999 ? '' + y : '+' + y;
});

addFormatToken(0, ['YY', 2], 0, function () {
    return this.year() % 100;
});

addFormatToken(0, ['YYYY',   4],       0, 'year');
addFormatToken(0, ['YYYYY',  5],       0, 'year');
addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

// ALIASES

addUnitAlias('year', 'y');

// PRIORITIES

addUnitPriority('year', 1);

// PARSING

addRegexToken('Y',      matchSigned);
addRegexToken('YY',     match1to2, match2);
addRegexToken('YYYY',   match1to4, match4);
addRegexToken('YYYYY',  match1to6, match6);
addRegexToken('YYYYYY', match1to6, match6);

addParseToken(['YYYYY', 'YYYYYY'], YEAR);
addParseToken('YYYY', function (input, array) {
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
});
addParseToken('YY', function (input, array) {
    array[YEAR] = hooks.parseTwoDigitYear(input);
});
addParseToken('Y', function (input, array) {
    array[YEAR] = parseInt(input, 10);
});

// HELPERS

function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
}

function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
}

// HOOKS

hooks.parseTwoDigitYear = function (input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
};

// MOMENTS

var getSetYear = makeGetSet('FullYear', true);

function getIsLeapYear () {
    return isLeapYear(this.year());
}

function createDate (y, m, d, h, M, s, ms) {
    // can't just apply() to create a date:
    // https://stackoverflow.com/q/181348
    var date = new Date(y, m, d, h, M, s, ms);

    // the date constructor remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
        date.setFullYear(y);
    }
    return date;
}

function createUTCDate (y) {
    var date = new Date(Date.UTC.apply(null, arguments));

    // the Date.UTC function remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
        date.setUTCFullYear(y);
    }
    return date;
}

// start-of-first-week - start-of-year
function firstWeekOffset(year, dow, doy) {
    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

    return -fwdlw + fwd - 1;
}

// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    var localWeekday = (7 + weekday - dow) % 7,
        weekOffset = firstWeekOffset(year, dow, doy),
        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
        resYear, resDayOfYear;

    if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
    } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
    } else {
        resYear = year;
        resDayOfYear = dayOfYear;
    }

    return {
        year: resYear,
        dayOfYear: resDayOfYear
    };
}

function weekOfYear(mom, dow, doy) {
    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
        resWeek, resYear;

    if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
    } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
    } else {
        resYear = mom.year();
        resWeek = week;
    }

    return {
        week: resWeek,
        year: resYear
    };
}

function weeksInYear(year, dow, doy) {
    var weekOffset = firstWeekOffset(year, dow, doy),
        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}

// FORMATTING

addFormatToken('w', ['ww', 2], 'wo', 'week');
addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

// ALIASES

addUnitAlias('week', 'w');
addUnitAlias('isoWeek', 'W');

// PRIORITIES

addUnitPriority('week', 5);
addUnitPriority('isoWeek', 5);

// PARSING

addRegexToken('w',  match1to2);
addRegexToken('ww', match1to2, match2);
addRegexToken('W',  match1to2);
addRegexToken('WW', match1to2, match2);

addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
    week[token.substr(0, 1)] = toInt(input);
});

// HELPERS

// LOCALES

function localeWeek (mom) {
    return weekOfYear(mom, this._week.dow, this._week.doy).week;
}

var defaultLocaleWeek = {
    dow : 0, // Sunday is the first day of the week.
    doy : 6  // The week that contains Jan 1st is the first week of the year.
};

function localeFirstDayOfWeek () {
    return this._week.dow;
}

function localeFirstDayOfYear () {
    return this._week.doy;
}

// MOMENTS

function getSetWeek (input) {
    var week = this.localeData().week(this);
    return input == null ? week : this.add((input - week) * 7, 'd');
}

function getSetISOWeek (input) {
    var week = weekOfYear(this, 1, 4).week;
    return input == null ? week : this.add((input - week) * 7, 'd');
}

// FORMATTING

addFormatToken('d', 0, 'do', 'day');

addFormatToken('dd', 0, 0, function (format) {
    return this.localeData().weekdaysMin(this, format);
});

addFormatToken('ddd', 0, 0, function (format) {
    return this.localeData().weekdaysShort(this, format);
});

addFormatToken('dddd', 0, 0, function (format) {
    return this.localeData().weekdays(this, format);
});

addFormatToken('e', 0, 0, 'weekday');
addFormatToken('E', 0, 0, 'isoWeekday');

// ALIASES

addUnitAlias('day', 'd');
addUnitAlias('weekday', 'e');
addUnitAlias('isoWeekday', 'E');

// PRIORITY
addUnitPriority('day', 11);
addUnitPriority('weekday', 11);
addUnitPriority('isoWeekday', 11);

// PARSING

addRegexToken('d',    match1to2);
addRegexToken('e',    match1to2);
addRegexToken('E',    match1to2);
addRegexToken('dd',   function (isStrict, locale) {
    return locale.weekdaysMinRegex(isStrict);
});
addRegexToken('ddd',   function (isStrict, locale) {
    return locale.weekdaysShortRegex(isStrict);
});
addRegexToken('dddd',   function (isStrict, locale) {
    return locale.weekdaysRegex(isStrict);
});

addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
    var weekday = config._locale.weekdaysParse(input, token, config._strict);
    // if we didn't get a weekday name, mark the date as invalid
    if (weekday != null) {
        week.d = weekday;
    } else {
        getParsingFlags(config).invalidWeekday = input;
    }
});

addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
    week[token] = toInt(input);
});

// HELPERS

function parseWeekday(input, locale) {
    if (typeof input !== 'string') {
        return input;
    }

    if (!isNaN(input)) {
        return parseInt(input, 10);
    }

    input = locale.weekdaysParse(input);
    if (typeof input === 'number') {
        return input;
    }

    return null;
}

function parseIsoWeekday(input, locale) {
    if (typeof input === 'string') {
        return locale.weekdaysParse(input) % 7 || 7;
    }
    return isNaN(input) ? null : input;
}

// LOCALES

var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
function localeWeekdays (m, format) {
    if (!m) {
        return isArray(this._weekdays) ? this._weekdays :
            this._weekdays['standalone'];
    }
    return isArray(this._weekdays) ? this._weekdays[m.day()] :
        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
}

var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
function localeWeekdaysShort (m) {
    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}

var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
function localeWeekdaysMin (m) {
    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}

function handleStrictParse$1(weekdayName, format, strict) {
    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];

        for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeWeekdaysParse (weekdayName, format, strict) {
    var i, mom, regex;

    if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format, strict);
    }

    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
    }

    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already

        mom = createUTC([2000, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
        }
        if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
        }
    }
}

// MOMENTS

function getSetDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
    if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
    } else {
        return day;
    }
}

function getSetLocaleDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
}

function getSetISODayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }

    // behaves the same as moment#day except
    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    // as a setter, sunday should belong to the previous week.

    if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
    } else {
        return this.day() || 7;
    }
}

var defaultWeekdaysRegex = matchWord;
function weekdaysRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysStrictRegex;
        } else {
            return this._weekdaysRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ?
            this._weekdaysStrictRegex : this._weekdaysRegex;
    }
}

var defaultWeekdaysShortRegex = matchWord;
function weekdaysShortRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysShortStrictRegex;
        } else {
            return this._weekdaysShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ?
            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    }
}

var defaultWeekdaysMinRegex = matchWord;
function weekdaysMinRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysMinStrictRegex;
        } else {
            return this._weekdaysMinRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ?
            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    }
}


function computeWeekdaysParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom, minp, shortp, longp;
    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, 1]).day(i);
        minp = this.weekdaysMin(mom, '');
        shortp = this.weekdaysShort(mom, '');
        longp = this.weekdays(mom, '');
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
    }
    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    // will match the longer piece.
    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 7; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;

    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
}

// FORMATTING

function hFormat() {
    return this.hours() % 12 || 12;
}

function kFormat() {
    return this.hours() || 24;
}

addFormatToken('H', ['HH', 2], 0, 'hour');
addFormatToken('h', ['hh', 2], 0, hFormat);
addFormatToken('k', ['kk', 2], 0, kFormat);

addFormatToken('hmm', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
});

addFormatToken('hmmss', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

addFormatToken('Hmm', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2);
});

addFormatToken('Hmmss', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

function meridiem (token, lowercase) {
    addFormatToken(token, 0, 0, function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    });
}

meridiem('a', true);
meridiem('A', false);

// ALIASES

addUnitAlias('hour', 'h');

// PRIORITY
addUnitPriority('hour', 13);

// PARSING

function matchMeridiem (isStrict, locale) {
    return locale._meridiemParse;
}

addRegexToken('a',  matchMeridiem);
addRegexToken('A',  matchMeridiem);
addRegexToken('H',  match1to2);
addRegexToken('h',  match1to2);
addRegexToken('k',  match1to2);
addRegexToken('HH', match1to2, match2);
addRegexToken('hh', match1to2, match2);
addRegexToken('kk', match1to2, match2);

addRegexToken('hmm', match3to4);
addRegexToken('hmmss', match5to6);
addRegexToken('Hmm', match3to4);
addRegexToken('Hmmss', match5to6);

addParseToken(['H', 'HH'], HOUR);
addParseToken(['k', 'kk'], function (input, array, config) {
    var kInput = toInt(input);
    array[HOUR] = kInput === 24 ? 0 : kInput;
});
addParseToken(['a', 'A'], function (input, array, config) {
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
});
addParseToken(['h', 'hh'], function (input, array, config) {
    array[HOUR] = toInt(input);
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
    getParsingFlags(config).bigHour = true;
});
addParseToken('Hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
});
addParseToken('Hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
});

// LOCALES

function localeIsPM (input) {
    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    // Using charAt should be more compatible.
    return ((input + '').toLowerCase().charAt(0) === 'p');
}

var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
function localeMeridiem (hours, minutes, isLower) {
    if (hours > 11) {
        return isLower ? 'pm' : 'PM';
    } else {
        return isLower ? 'am' : 'AM';
    }
}


// MOMENTS

// Setting the hour should keep the time, because the user explicitly
// specified which hour he wants. So trying to maintain the same hour (in
// a new timezone) makes sense. Adding/subtracting hours does not follow
// this rule.
var getSetHour = makeGetSet('Hours', true);

// months
// week
// weekdays
// meridiem
var baseConfig = {
    calendar: defaultCalendar,
    longDateFormat: defaultLongDateFormat,
    invalidDate: defaultInvalidDate,
    ordinal: defaultOrdinal,
    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
    relativeTime: defaultRelativeTime,

    months: defaultLocaleMonths,
    monthsShort: defaultLocaleMonthsShort,

    week: defaultLocaleWeek,

    weekdays: defaultLocaleWeekdays,
    weekdaysMin: defaultLocaleWeekdaysMin,
    weekdaysShort: defaultLocaleWeekdaysShort,

    meridiemParse: defaultLocaleMeridiemParse
};

// internal storage for locale config files
var locales = {};
var localeFamilies = {};
var globalLocale;

function normalizeLocale(key) {
    return key ? key.toLowerCase().replace('_', '-') : key;
}

// pick the locale from the array
// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
function chooseLocale(names) {
    var i = 0, j, next, locale, split;

    while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) {
                return locale;
            }
            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                //the next array item is better than a shallower substring of this one
                break;
            }
            j--;
        }
        i++;
    }
    return null;
}

function loadLocale(name) {
    var oldLocale = null;
    // TODO: Find a better way to register and load all the locales in Node
    if (!locales[name] && (typeof module !== 'undefined') &&
            module && module.exports) {
        try {
            oldLocale = globalLocale._abbr;
            __webpack_require__(221)("./" + name);
            // because defineLocale currently also sets the global locale, we
            // want to undo that for lazy loaded locales
            getSetGlobalLocale(oldLocale);
        } catch (e) { }
    }
    return locales[name];
}

// This function will load locale and then set the global locale.  If
// no arguments are passed in, it will simply return the current global
// locale key.
function getSetGlobalLocale (key, values) {
    var data;
    if (key) {
        if (isUndefined(values)) {
            data = getLocale(key);
        }
        else {
            data = defineLocale(key, values);
        }

        if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
        }
    }

    return globalLocale._abbr;
}

function defineLocale (name, config) {
    if (config !== null) {
        var parentConfig = baseConfig;
        config.abbr = name;
        if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                    'an existing locale. moment.defineLocale(localeName, ' +
                    'config) should only be used for creating a new locale ' +
                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
        } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
                parentConfig = locales[config.parentLocale]._config;
            } else {
                if (!localeFamilies[config.parentLocale]) {
                    localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                    name: name,
                    config: config
                });
                return null;
            }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config));

        if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
                defineLocale(x.name, x.config);
            });
        }

        // backwards compat for now: also set the locale
        // make sure we set the locale AFTER all child locales have been
        // created, so we won't end up with the child locale set.
        getSetGlobalLocale(name);


        return locales[name];
    } else {
        // useful for testing
        delete locales[name];
        return null;
    }
}

function updateLocale(name, config) {
    if (config != null) {
        var locale, parentConfig = baseConfig;
        // MERGE
        if (locales[name] != null) {
            parentConfig = locales[name]._config;
        }
        config = mergeConfigs(parentConfig, config);
        locale = new Locale(config);
        locale.parentLocale = locales[name];
        locales[name] = locale;

        // backwards compat for now: also set the locale
        getSetGlobalLocale(name);
    } else {
        // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
            } else if (locales[name] != null) {
                delete locales[name];
            }
        }
    }
    return locales[name];
}

// returns locale data
function getLocale (key) {
    var locale;

    if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
    }

    if (!key) {
        return globalLocale;
    }

    if (!isArray(key)) {
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) {
            return locale;
        }
        key = [key];
    }

    return chooseLocale(key);
}

function listLocales() {
    return keys$1(locales);
}

function checkOverflow (m) {
    var overflow;
    var a = m._a;

    if (a && getParsingFlags(m).overflow === -2) {
        overflow =
            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
            -1;

        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
        }

        getParsingFlags(m).overflow = overflow;
    }

    return m;
}

// iso 8601 regex
// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

var isoDates = [
    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
    ['YYYY-DDD', /\d{4}-\d{3}/],
    ['YYYY-MM', /\d{4}-\d\d/, false],
    ['YYYYYYMMDD', /[+-]\d{10}/],
    ['YYYYMMDD', /\d{8}/],
    // YYYYMM is NOT allowed by the standard
    ['GGGG[W]WWE', /\d{4}W\d{3}/],
    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
    ['YYYYDDD', /\d{7}/]
];

// iso time formats and regexes
var isoTimes = [
    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
    ['HH:mm', /\d\d:\d\d/],
    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
    ['HHmmss', /\d\d\d\d\d\d/],
    ['HHmm', /\d\d\d\d/],
    ['HH', /\d\d/]
];

var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

// date from iso format
function configFromISO(config) {
    var i, l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime, dateFormat, timeFormat, tzFormat;

    if (match) {
        getParsingFlags(config).iso = true;

        for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
            }
        }
        if (dateFormat == null) {
            config._isValid = false;
            return;
        }
        if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (timeFormat == null) {
                config._isValid = false;
                return;
            }
        }
        if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
        }
        if (match[4]) {
            if (tzRegex.exec(match[4])) {
                tzFormat = 'Z';
            } else {
                config._isValid = false;
                return;
            }
        }
        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
        configFromStringAndFormat(config);
    } else {
        config._isValid = false;
    }
}

// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
var basicRfcRegex = /^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;

// date and time from ref 2822 format
function configFromRFC2822(config) {
    var string, match, dayFormat,
        dateFormat, timeFormat, tzFormat;
    var timezones = {
        ' GMT': ' +0000',
        ' EDT': ' -0400',
        ' EST': ' -0500',
        ' CDT': ' -0500',
        ' CST': ' -0600',
        ' MDT': ' -0600',
        ' MST': ' -0700',
        ' PDT': ' -0700',
        ' PST': ' -0800'
    };
    var military = 'YXWVUTSRQPONZABCDEFGHIKLM';
    var timezone, timezoneIndex;

    string = config._i
        .replace(/\([^\)]*\)|[\n\t]/g, ' ') // Remove comments and folding whitespace
        .replace(/(\s\s+)/g, ' ') // Replace multiple-spaces with a single space
        .replace(/^\s|\s$/g, ''); // Remove leading and trailing spaces
    match = basicRfcRegex.exec(string);

    if (match) {
        dayFormat = match[1] ? 'ddd' + ((match[1].length === 5) ? ', ' : ' ') : '';
        dateFormat = 'D MMM ' + ((match[2].length > 10) ? 'YYYY ' : 'YY ');
        timeFormat = 'HH:mm' + (match[4] ? ':ss' : '');

        // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
        if (match[1]) { // day of week given
            var momentDate = new Date(match[2]);
            var momentDay = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'][momentDate.getDay()];

            if (match[1].substr(0,3) !== momentDay) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return;
            }
        }

        switch (match[5].length) {
            case 2: // military
                if (timezoneIndex === 0) {
                    timezone = ' +0000';
                } else {
                    timezoneIndex = military.indexOf(match[5][1].toUpperCase()) - 12;
                    timezone = ((timezoneIndex < 0) ? ' -' : ' +') +
                        (('' + timezoneIndex).replace(/^-?/, '0')).match(/..$/)[0] + '00';
                }
                break;
            case 4: // Zone
                timezone = timezones[match[5]];
                break;
            default: // UT or +/-9999
                timezone = timezones[' GMT'];
        }
        match[5] = timezone;
        config._i = match.splice(1).join('');
        tzFormat = ' ZZ';
        config._f = dayFormat + dateFormat + timeFormat + tzFormat;
        configFromStringAndFormat(config);
        getParsingFlags(config).rfc2822 = true;
    } else {
        config._isValid = false;
    }
}

// date from iso format or fallback
function configFromString(config) {
    var matched = aspNetJsonRegex.exec(config._i);

    if (matched !== null) {
        config._d = new Date(+matched[1]);
        return;
    }

    configFromISO(config);
    if (config._isValid === false) {
        delete config._isValid;
    } else {
        return;
    }

    configFromRFC2822(config);
    if (config._isValid === false) {
        delete config._isValid;
    } else {
        return;
    }

    // Final attempt, use Input Fallback
    hooks.createFromInputFallback(config);
}

hooks.createFromInputFallback = deprecate(
    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
    'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
    'discouraged and will be removed in an upcoming major release. Please refer to ' +
    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
    function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    }
);

// Pick the first defined of two or three arguments.
function defaults(a, b, c) {
    if (a != null) {
        return a;
    }
    if (b != null) {
        return b;
    }
    return c;
}

function currentDateArray(config) {
    // hooks is actually the exported moment object
    var nowValue = new Date(hooks.now());
    if (config._useUTC) {
        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    }
    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}

// convert an array to a date.
// the array should mirror the parameters below
// note: all values past the year are optional and will default to the lowest possible value.
// [year, month, day , hour, minute, second, millisecond]
function configFromArray (config) {
    var i, date, input = [], currentDate, yearToUse;

    if (config._d) {
        return;
    }

    currentDate = currentDateArray(config);

    //compute day of the year from weeks and weekdays
    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config);
    }

    //if the day of the year is set, figure out what it is
    if (config._dayOfYear != null) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
        }

        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
    }

    // Default to current date.
    // * if no year, month, day of month are given, default to today
    // * if day of month is given, default month and year
    // * if month is given, default only year
    // * if year is given, don't default anything
    for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i];
    }

    // Zero out whatever was not defaulted, including time
    for (; i < 7; i++) {
        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
    }

    // Check for 24:00:00.000
    if (config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0;
    }

    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    // Apply timezone offset from input. The actual utcOffset can be changed
    // with parseZone.
    if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    }

    if (config._nextDay) {
        config._a[HOUR] = 24;
    }
}

function dayOfYearFromWeekInfo(config) {
    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

    w = config._w;
    if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;

        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
        }
    } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;

        var curWeek = weekOfYear(createLocal(), dow, doy);

        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

        // Default to current week.
        week = defaults(w.w, curWeek.week);

        if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
                weekdayOverflow = true;
            }
        } else if (w.e != null) {
            // local weekday -- counting starts from begining of week
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
                weekdayOverflow = true;
            }
        } else {
            // default to begining of week
            weekday = dow;
        }
    }
    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config)._overflowWeeks = true;
    } else if (weekdayOverflow != null) {
        getParsingFlags(config)._overflowWeekday = true;
    } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }
}

// constant that refers to the ISO standard
hooks.ISO_8601 = function () {};

// constant that refers to the RFC 2822 form
hooks.RFC_2822 = function () {};

// date from string and format string
function configFromStringAndFormat(config) {
    // TODO: Move this to another part of the creation flow to prevent circular deps
    if (config._f === hooks.ISO_8601) {
        configFromISO(config);
        return;
    }
    if (config._f === hooks.RFC_2822) {
        configFromRFC2822(config);
        return;
    }
    config._a = [];
    getParsingFlags(config).empty = true;

    // This array is used to make a Date, either with `new Date` or `Date.UTC`
    var string = '' + config._i,
        i, parsedInput, tokens, token, skipped,
        stringLength = string.length,
        totalParsedInputLength = 0;

    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

    for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        // console.log('token', token, 'parsedInput', parsedInput,
        //         'regex', getParseRegexForToken(token, config));
        if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
                getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
        }
        // don't parse if it's not a known token
        if (formatTokenFunctions[token]) {
            if (parsedInput) {
                getParsingFlags(config).empty = false;
            }
            else {
                getParsingFlags(config).unusedTokens.push(token);
            }
            addTimeToArrayFromToken(token, parsedInput, config);
        }
        else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token);
        }
    }

    // add remaining unparsed input length to the string
    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
    if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string);
    }

    // clear _12h flag if hour is <= 12
    if (config._a[HOUR] <= 12 &&
        getParsingFlags(config).bigHour === true &&
        config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined;
    }

    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    getParsingFlags(config).meridiem = config._meridiem;
    // handle meridiem
    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

    configFromArray(config);
    checkOverflow(config);
}


function meridiemFixWrap (locale, hour, meridiem) {
    var isPm;

    if (meridiem == null) {
        // nothing to do
        return hour;
    }
    if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem);
    } else if (locale.isPM != null) {
        // Fallback
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
            hour += 12;
        }
        if (!isPm && hour === 12) {
            hour = 0;
        }
        return hour;
    } else {
        // this is not supposed to happen
        return hour;
    }
}

// date from string and array of format strings
function configFromStringAndArray(config) {
    var tempConfig,
        bestMoment,

        scoreToBeat,
        i,
        currentScore;

    if (config._f.length === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return;
    }

    for (i = 0; i < config._f.length; i++) {
        currentScore = 0;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);

        if (!isValid(tempConfig)) {
            continue;
        }

        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;

        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

        getParsingFlags(tempConfig).score = currentScore;

        if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
        }
    }

    extend(config, bestMoment || tempConfig);
}

function configFromObject(config) {
    if (config._d) {
        return;
    }

    var i = normalizeObjectUnits(config._i);
    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
        return obj && parseInt(obj, 10);
    });

    configFromArray(config);
}

function createFromConfig (config) {
    var res = new Moment(checkOverflow(prepareConfig(config)));
    if (res._nextDay) {
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined;
    }

    return res;
}

function prepareConfig (config) {
    var input = config._i,
        format = config._f;

    config._locale = config._locale || getLocale(config._l);

    if (input === null || (format === undefined && input === '')) {
        return createInvalid({nullInput: true});
    }

    if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input);
    }

    if (isMoment(input)) {
        return new Moment(checkOverflow(input));
    } else if (isDate(input)) {
        config._d = input;
    } else if (isArray(format)) {
        configFromStringAndArray(config);
    } else if (format) {
        configFromStringAndFormat(config);
    }  else {
        configFromInput(config);
    }

    if (!isValid(config)) {
        config._d = null;
    }

    return config;
}

function configFromInput(config) {
    var input = config._i;
    if (isUndefined(input)) {
        config._d = new Date(hooks.now());
    } else if (isDate(input)) {
        config._d = new Date(input.valueOf());
    } else if (typeof input === 'string') {
        configFromString(config);
    } else if (isArray(input)) {
        config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
        });
        configFromArray(config);
    } else if (isObject(input)) {
        configFromObject(config);
    } else if (isNumber(input)) {
        // from milliseconds
        config._d = new Date(input);
    } else {
        hooks.createFromInputFallback(config);
    }
}

function createLocalOrUTC (input, format, locale, strict, isUTC) {
    var c = {};

    if (locale === true || locale === false) {
        strict = locale;
        locale = undefined;
    }

    if ((isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)) {
        input = undefined;
    }
    // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423
    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;

    return createFromConfig(c);
}

function createLocal (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, false);
}

var prototypeMin = deprecate(
    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

var prototypeMax = deprecate(
    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

// Pick a moment m from moments so that m[fn](other) is true for all
// other. This relies on the function fn to be transitive.
//
// moments should either be an array of moment objects or an array, whose
// first element is an array of moment objects.
function pickBy(fn, moments) {
    var res, i;
    if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0];
    }
    if (!moments.length) {
        return createLocal();
    }
    res = moments[0];
    for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
        }
    }
    return res;
}

// TODO: Use [].sort instead?
function min () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isBefore', args);
}

function max () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isAfter', args);
}

var now = function () {
    return Date.now ? Date.now() : +(new Date());
};

var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

function isDurationValid(m) {
    for (var key in m) {
        if (!(ordering.indexOf(key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
        }
    }

    var unitHasDecimal = false;
    for (var i = 0; i < ordering.length; ++i) {
        if (m[ordering[i]]) {
            if (unitHasDecimal) {
                return false; // only allow non-integers for smallest unit
            }
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                unitHasDecimal = true;
            }
        }
    }

    return true;
}

function isValid$1() {
    return this._isValid;
}

function createInvalid$1() {
    return createDuration(NaN);
}

function Duration (duration) {
    var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;

    this._isValid = isDurationValid(normalizedInput);

    // representation for dateAddRemove
    this._milliseconds = +milliseconds +
        seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
    // Because of dateAddRemove treats 24 hours as different from a
    // day when working around DST, we need to store them separately
    this._days = +days +
        weeks * 7;
    // It is impossible translate months into days without knowing
    // which months you are are talking about, so we have to store
    // it separately.
    this._months = +months +
        quarters * 3 +
        years * 12;

    this._data = {};

    this._locale = getLocale();

    this._bubble();
}

function isDuration (obj) {
    return obj instanceof Duration;
}

function absRound (number) {
    if (number < 0) {
        return Math.round(-1 * number) * -1;
    } else {
        return Math.round(number);
    }
}

// FORMATTING

function offset (token, separator) {
    addFormatToken(token, 0, 0, function () {
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) {
            offset = -offset;
            sign = '-';
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
    });
}

offset('Z', ':');
offset('ZZ', '');

// PARSING

addRegexToken('Z',  matchShortOffset);
addRegexToken('ZZ', matchShortOffset);
addParseToken(['Z', 'ZZ'], function (input, array, config) {
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
});

// HELPERS

// timezone chunker
// '+10:00' > ['10',  '00']
// '-1530'  > ['-15', '30']
var chunkOffset = /([\+\-]|\d\d)/gi;

function offsetFromString(matcher, string) {
    var matches = (string || '').match(matcher);

    if (matches === null) {
        return null;
    }

    var chunk   = matches[matches.length - 1] || [];
    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    var minutes = +(parts[1] * 60) + toInt(parts[2]);

    return minutes === 0 ?
      0 :
      parts[0] === '+' ? minutes : -minutes;
}

// Return a moment from input, that is local/utc/zone equivalent to model.
function cloneWithOffset(input, model) {
    var res, diff;
    if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(res._d.valueOf() + diff);
        hooks.updateOffset(res, false);
        return res;
    } else {
        return createLocal(input).local();
    }
}

function getDateOffset (m) {
    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    // https://github.com/moment/moment/pull/1871
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
}

// HOOKS

// This function will be called whenever a moment is mutated.
// It is intended to keep the offset in sync with the timezone.
hooks.updateOffset = function () {};

// MOMENTS

// keepLocalTime = true means only change the timezone, without
// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
// +0200, so we adjust the time as needed, to be valid.
//
// Keeping the time actually adds/subtracts (one hour)
// from the actual represented time. That is why we call updateOffset
// a second time. In case it wants us to change the offset again
// _changeInProgress == true case, then we have to adjust, because
// there is no such time in the given timezone.
function getSetOffset (input, keepLocalTime, keepMinutes) {
    var offset = this._offset || 0,
        localAdjust;
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    if (input != null) {
        if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
                return this;
            }
        } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
            this.add(localAdjust, 'm');
        }
        if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            } else if (!this._changeInProgress) {
                this._changeInProgress = true;
                hooks.updateOffset(this, true);
                this._changeInProgress = null;
            }
        }
        return this;
    } else {
        return this._isUTC ? offset : getDateOffset(this);
    }
}

function getSetZone (input, keepLocalTime) {
    if (input != null) {
        if (typeof input !== 'string') {
            input = -input;
        }

        this.utcOffset(input, keepLocalTime);

        return this;
    } else {
        return -this.utcOffset();
    }
}

function setOffsetToUTC (keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
}

function setOffsetToLocal (keepLocalTime) {
    if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;

        if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
        }
    }
    return this;
}

function setOffsetToParsedOffset () {
    if (this._tzm != null) {
        this.utcOffset(this._tzm, false, true);
    } else if (typeof this._i === 'string') {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
            this.utcOffset(tZone);
        }
        else {
            this.utcOffset(0, true);
        }
    }
    return this;
}

function hasAlignedHourOffset (input) {
    if (!this.isValid()) {
        return false;
    }
    input = input ? createLocal(input).utcOffset() : 0;

    return (this.utcOffset() - input) % 60 === 0;
}

function isDaylightSavingTime () {
    return (
        this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset()
    );
}

function isDaylightSavingTimeShifted () {
    if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
    }

    var c = {};

    copyConfig(c, this);
    c = prepareConfig(c);

    if (c._a) {
        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() &&
            compareArrays(c._a, other.toArray()) > 0;
    } else {
        this._isDSTShifted = false;
    }

    return this._isDSTShifted;
}

function isLocal () {
    return this.isValid() ? !this._isUTC : false;
}

function isUtcOffset () {
    return this.isValid() ? this._isUTC : false;
}

function isUtc () {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
}

// ASP.NET json date format regex
var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
// and further modified to allow for strings containing both week and day
var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

function createDuration (input, key) {
    var duration = input,
        // matching against regexp is expensive, do it on demand
        match = null,
        sign,
        ret,
        diffRes;

    if (isDuration(input)) {
        duration = {
            ms : input._milliseconds,
            d  : input._days,
            M  : input._months
        };
    } else if (isNumber(input)) {
        duration = {};
        if (key) {
            duration[key] = input;
        } else {
            duration.milliseconds = input;
        }
    } else if (!!(match = aspNetRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y  : 0,
            d  : toInt(match[DATE])                         * sign,
            h  : toInt(match[HOUR])                         * sign,
            m  : toInt(match[MINUTE])                       * sign,
            s  : toInt(match[SECOND])                       * sign,
            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
        };
    } else if (!!(match = isoRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y : parseIso(match[2], sign),
            M : parseIso(match[3], sign),
            w : parseIso(match[4], sign),
            d : parseIso(match[5], sign),
            h : parseIso(match[6], sign),
            m : parseIso(match[7], sign),
            s : parseIso(match[8], sign)
        };
    } else if (duration == null) {// checks for null or undefined
        duration = {};
    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
    }

    ret = new Duration(duration);

    if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale;
    }

    return ret;
}

createDuration.fn = Duration.prototype;
createDuration.invalid = createInvalid$1;

function parseIso (inp, sign) {
    // We'd normally use ~~inp for this, but unfortunately it also
    // converts floats to ints.
    // inp may be undefined, so careful calling replace on it.
    var res = inp && parseFloat(inp.replace(',', '.'));
    // apply sign while we're at it
    return (isNaN(res) ? 0 : res) * sign;
}

function positiveMomentsDifference(base, other) {
    var res = {milliseconds: 0, months: 0};

    res.months = other.month() - base.month() +
        (other.year() - base.year()) * 12;
    if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months;
    }

    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

    return res;
}

function momentsDifference(base, other) {
    var res;
    if (!(base.isValid() && other.isValid())) {
        return {milliseconds: 0, months: 0};
    }

    other = cloneWithOffset(other, base);
    if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
    } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
    }

    return res;
}

// TODO: remove 'name' arg after deprecation is removed
function createAdder(direction, name) {
    return function (val, period) {
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val; val = period; period = tmp;
        }

        val = typeof val === 'string' ? +val : val;
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
    };
}

function addSubtract (mom, duration, isAdding, updateOffset) {
    var milliseconds = duration._milliseconds,
        days = absRound(duration._days),
        months = absRound(duration._months);

    if (!mom.isValid()) {
        // No op
        return;
    }

    updateOffset = updateOffset == null ? true : updateOffset;

    if (milliseconds) {
        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    }
    if (days) {
        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    }
    if (months) {
        setMonth(mom, get(mom, 'Month') + months * isAdding);
    }
    if (updateOffset) {
        hooks.updateOffset(mom, days || months);
    }
}

var add      = createAdder(1, 'add');
var subtract = createAdder(-1, 'subtract');

function getCalendarFormat(myMoment, now) {
    var diff = myMoment.diff(now, 'days', true);
    return diff < -6 ? 'sameElse' :
            diff < -1 ? 'lastWeek' :
            diff < 0 ? 'lastDay' :
            diff < 1 ? 'sameDay' :
            diff < 2 ? 'nextDay' :
            diff < 7 ? 'nextWeek' : 'sameElse';
}

function calendar$1 (time, formats) {
    // We want to compare the start of today, vs this.
    // Getting start-of-today depends on whether we're local/utc/offset or not.
    var now = time || createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        format = hooks.calendarFormat(this, sod) || 'sameElse';

    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
}

function clone () {
    return new Moment(this);
}

function isAfter (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() > localInput.valueOf();
    } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
}

function isBefore (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() < localInput.valueOf();
    } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
}

function isBetween (from, to, units, inclusivity) {
    inclusivity = inclusivity || '()';
    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
}

function isSame (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(units || 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() === localInput.valueOf();
    } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    }
}

function isSameOrAfter (input, units) {
    return this.isSame(input, units) || this.isAfter(input,units);
}

function isSameOrBefore (input, units) {
    return this.isSame(input, units) || this.isBefore(input,units);
}

function diff (input, units, asFloat) {
    var that,
        zoneDelta,
        delta, output;

    if (!this.isValid()) {
        return NaN;
    }

    that = cloneWithOffset(input, this);

    if (!that.isValid()) {
        return NaN;
    }

    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

    units = normalizeUnits(units);

    if (units === 'year' || units === 'month' || units === 'quarter') {
        output = monthDiff(this, that);
        if (units === 'quarter') {
            output = output / 3;
        } else if (units === 'year') {
            output = output / 12;
        }
    } else {
        delta = this - that;
        output = units === 'second' ? delta / 1e3 : // 1000
            units === 'minute' ? delta / 6e4 : // 1000 * 60
            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
            delta;
    }
    return asFloat ? output : absFloor(output);
}

function monthDiff (a, b) {
    // difference in months
    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2, adjust;

    if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor - anchor2);
    } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor2 - anchor);
    }

    //check for negative zero, return zero if negative zero
    return -(wholeMonthDiff + adjust) || 0;
}

hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

function toString () {
    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
}

function toISOString() {
    if (!this.isValid()) {
        return null;
    }
    var m = this.clone().utc();
    if (m.year() < 0 || m.year() > 9999) {
        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
    }
    if (isFunction(Date.prototype.toISOString)) {
        // native implementation is ~50x faster, use it when we can
        return this.toDate().toISOString();
    }
    return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
}

/**
 * Return a human readable representation of a moment that can
 * also be evaluated to get a new moment which is the same
 *
 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
 */
function inspect () {
    if (!this.isValid()) {
        return 'moment.invalid(/* ' + this._i + ' */)';
    }
    var func = 'moment';
    var zone = '';
    if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
        zone = 'Z';
    }
    var prefix = '[' + func + '("]';
    var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
    var suffix = zone + '[")]';

    return this.format(prefix + year + datetime + suffix);
}

function format (inputString) {
    if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    }
    var output = formatMoment(this, inputString);
    return this.localeData().postformat(output);
}

function from (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function fromNow (withoutSuffix) {
    return this.from(createLocal(), withoutSuffix);
}

function to (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function toNow (withoutSuffix) {
    return this.to(createLocal(), withoutSuffix);
}

// If passed a locale key, it will set the locale for this
// instance.  Otherwise, it will return the locale configuration
// variables for this instance.
function locale (key) {
    var newLocaleData;

    if (key === undefined) {
        return this._locale._abbr;
    } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
            this._locale = newLocaleData;
        }
        return this;
    }
}

var lang = deprecate(
    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
    function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    }
);

function localeData () {
    return this._locale;
}

function startOf (units) {
    units = normalizeUnits(units);
    // the following switch intentionally omits break keywords
    // to utilize falling through the cases.
    switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
        case 'date':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
    }

    // weeks are a special case
    if (units === 'week') {
        this.weekday(0);
    }
    if (units === 'isoWeek') {
        this.isoWeekday(1);
    }

    // quarters are also special
    if (units === 'quarter') {
        this.month(Math.floor(this.month() / 3) * 3);
    }

    return this;
}

function endOf (units) {
    units = normalizeUnits(units);
    if (units === undefined || units === 'millisecond') {
        return this;
    }

    // 'date' is an alias for 'day', so it should be considered as such.
    if (units === 'date') {
        units = 'day';
    }

    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
}

function valueOf () {
    return this._d.valueOf() - ((this._offset || 0) * 60000);
}

function unix () {
    return Math.floor(this.valueOf() / 1000);
}

function toDate () {
    return new Date(this.valueOf());
}

function toArray () {
    var m = this;
    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
}

function toObject () {
    var m = this;
    return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
    };
}

function toJSON () {
    // new Date(NaN).toJSON() === null
    return this.isValid() ? this.toISOString() : null;
}

function isValid$2 () {
    return isValid(this);
}

function parsingFlags () {
    return extend({}, getParsingFlags(this));
}

function invalidAt () {
    return getParsingFlags(this).overflow;
}

function creationData() {
    return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
    };
}

// FORMATTING

addFormatToken(0, ['gg', 2], 0, function () {
    return this.weekYear() % 100;
});

addFormatToken(0, ['GG', 2], 0, function () {
    return this.isoWeekYear() % 100;
});

function addWeekYearFormatToken (token, getter) {
    addFormatToken(0, [token, token.length], 0, getter);
}

addWeekYearFormatToken('gggg',     'weekYear');
addWeekYearFormatToken('ggggg',    'weekYear');
addWeekYearFormatToken('GGGG',  'isoWeekYear');
addWeekYearFormatToken('GGGGG', 'isoWeekYear');

// ALIASES

addUnitAlias('weekYear', 'gg');
addUnitAlias('isoWeekYear', 'GG');

// PRIORITY

addUnitPriority('weekYear', 1);
addUnitPriority('isoWeekYear', 1);


// PARSING

addRegexToken('G',      matchSigned);
addRegexToken('g',      matchSigned);
addRegexToken('GG',     match1to2, match2);
addRegexToken('gg',     match1to2, match2);
addRegexToken('GGGG',   match1to4, match4);
addRegexToken('gggg',   match1to4, match4);
addRegexToken('GGGGG',  match1to6, match6);
addRegexToken('ggggg',  match1to6, match6);

addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
    week[token.substr(0, 2)] = toInt(input);
});

addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
    week[token] = hooks.parseTwoDigitYear(input);
});

// MOMENTS

function getSetWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy);
}

function getSetISOWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input, this.isoWeek(), this.isoWeekday(), 1, 4);
}

function getISOWeeksInYear () {
    return weeksInYear(this.year(), 1, 4);
}

function getWeeksInYear () {
    var weekInfo = this.localeData()._week;
    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}

function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    var weeksTarget;
    if (input == null) {
        return weekOfYear(this, dow, doy).year;
    } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
            week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
    }
}

function setWeekAll(weekYear, week, weekday, dow, doy) {
    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
}

// FORMATTING

addFormatToken('Q', 0, 'Qo', 'quarter');

// ALIASES

addUnitAlias('quarter', 'Q');

// PRIORITY

addUnitPriority('quarter', 7);

// PARSING

addRegexToken('Q', match1);
addParseToken('Q', function (input, array) {
    array[MONTH] = (toInt(input) - 1) * 3;
});

// MOMENTS

function getSetQuarter (input) {
    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}

// FORMATTING

addFormatToken('D', ['DD', 2], 'Do', 'date');

// ALIASES

addUnitAlias('date', 'D');

// PRIOROITY
addUnitPriority('date', 9);

// PARSING

addRegexToken('D',  match1to2);
addRegexToken('DD', match1to2, match2);
addRegexToken('Do', function (isStrict, locale) {
    // TODO: Remove "ordinalParse" fallback in next major release.
    return isStrict ?
      (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
      locale._dayOfMonthOrdinalParseLenient;
});

addParseToken(['D', 'DD'], DATE);
addParseToken('Do', function (input, array) {
    array[DATE] = toInt(input.match(match1to2)[0], 10);
});

// MOMENTS

var getSetDayOfMonth = makeGetSet('Date', true);

// FORMATTING

addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

// ALIASES

addUnitAlias('dayOfYear', 'DDD');

// PRIORITY
addUnitPriority('dayOfYear', 4);

// PARSING

addRegexToken('DDD',  match1to3);
addRegexToken('DDDD', match3);
addParseToken(['DDD', 'DDDD'], function (input, array, config) {
    config._dayOfYear = toInt(input);
});

// HELPERS

// MOMENTS

function getSetDayOfYear (input) {
    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
}

// FORMATTING

addFormatToken('m', ['mm', 2], 0, 'minute');

// ALIASES

addUnitAlias('minute', 'm');

// PRIORITY

addUnitPriority('minute', 14);

// PARSING

addRegexToken('m',  match1to2);
addRegexToken('mm', match1to2, match2);
addParseToken(['m', 'mm'], MINUTE);

// MOMENTS

var getSetMinute = makeGetSet('Minutes', false);

// FORMATTING

addFormatToken('s', ['ss', 2], 0, 'second');

// ALIASES

addUnitAlias('second', 's');

// PRIORITY

addUnitPriority('second', 15);

// PARSING

addRegexToken('s',  match1to2);
addRegexToken('ss', match1to2, match2);
addParseToken(['s', 'ss'], SECOND);

// MOMENTS

var getSetSecond = makeGetSet('Seconds', false);

// FORMATTING

addFormatToken('S', 0, 0, function () {
    return ~~(this.millisecond() / 100);
});

addFormatToken(0, ['SS', 2], 0, function () {
    return ~~(this.millisecond() / 10);
});

addFormatToken(0, ['SSS', 3], 0, 'millisecond');
addFormatToken(0, ['SSSS', 4], 0, function () {
    return this.millisecond() * 10;
});
addFormatToken(0, ['SSSSS', 5], 0, function () {
    return this.millisecond() * 100;
});
addFormatToken(0, ['SSSSSS', 6], 0, function () {
    return this.millisecond() * 1000;
});
addFormatToken(0, ['SSSSSSS', 7], 0, function () {
    return this.millisecond() * 10000;
});
addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
    return this.millisecond() * 100000;
});
addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
    return this.millisecond() * 1000000;
});


// ALIASES

addUnitAlias('millisecond', 'ms');

// PRIORITY

addUnitPriority('millisecond', 16);

// PARSING

addRegexToken('S',    match1to3, match1);
addRegexToken('SS',   match1to3, match2);
addRegexToken('SSS',  match1to3, match3);

var token;
for (token = 'SSSS'; token.length <= 9; token += 'S') {
    addRegexToken(token, matchUnsigned);
}

function parseMs(input, array) {
    array[MILLISECOND] = toInt(('0.' + input) * 1000);
}

for (token = 'S'; token.length <= 9; token += 'S') {
    addParseToken(token, parseMs);
}
// MOMENTS

var getSetMillisecond = makeGetSet('Milliseconds', false);

// FORMATTING

addFormatToken('z',  0, 0, 'zoneAbbr');
addFormatToken('zz', 0, 0, 'zoneName');

// MOMENTS

function getZoneAbbr () {
    return this._isUTC ? 'UTC' : '';
}

function getZoneName () {
    return this._isUTC ? 'Coordinated Universal Time' : '';
}

var proto = Moment.prototype;

proto.add               = add;
proto.calendar          = calendar$1;
proto.clone             = clone;
proto.diff              = diff;
proto.endOf             = endOf;
proto.format            = format;
proto.from              = from;
proto.fromNow           = fromNow;
proto.to                = to;
proto.toNow             = toNow;
proto.get               = stringGet;
proto.invalidAt         = invalidAt;
proto.isAfter           = isAfter;
proto.isBefore          = isBefore;
proto.isBetween         = isBetween;
proto.isSame            = isSame;
proto.isSameOrAfter     = isSameOrAfter;
proto.isSameOrBefore    = isSameOrBefore;
proto.isValid           = isValid$2;
proto.lang              = lang;
proto.locale            = locale;
proto.localeData        = localeData;
proto.max               = prototypeMax;
proto.min               = prototypeMin;
proto.parsingFlags      = parsingFlags;
proto.set               = stringSet;
proto.startOf           = startOf;
proto.subtract          = subtract;
proto.toArray           = toArray;
proto.toObject          = toObject;
proto.toDate            = toDate;
proto.toISOString       = toISOString;
proto.inspect           = inspect;
proto.toJSON            = toJSON;
proto.toString          = toString;
proto.unix              = unix;
proto.valueOf           = valueOf;
proto.creationData      = creationData;

// Year
proto.year       = getSetYear;
proto.isLeapYear = getIsLeapYear;

// Week Year
proto.weekYear    = getSetWeekYear;
proto.isoWeekYear = getSetISOWeekYear;

// Quarter
proto.quarter = proto.quarters = getSetQuarter;

// Month
proto.month       = getSetMonth;
proto.daysInMonth = getDaysInMonth;

// Week
proto.week           = proto.weeks        = getSetWeek;
proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
proto.weeksInYear    = getWeeksInYear;
proto.isoWeeksInYear = getISOWeeksInYear;

// Day
proto.date       = getSetDayOfMonth;
proto.day        = proto.days             = getSetDayOfWeek;
proto.weekday    = getSetLocaleDayOfWeek;
proto.isoWeekday = getSetISODayOfWeek;
proto.dayOfYear  = getSetDayOfYear;

// Hour
proto.hour = proto.hours = getSetHour;

// Minute
proto.minute = proto.minutes = getSetMinute;

// Second
proto.second = proto.seconds = getSetSecond;

// Millisecond
proto.millisecond = proto.milliseconds = getSetMillisecond;

// Offset
proto.utcOffset            = getSetOffset;
proto.utc                  = setOffsetToUTC;
proto.local                = setOffsetToLocal;
proto.parseZone            = setOffsetToParsedOffset;
proto.hasAlignedHourOffset = hasAlignedHourOffset;
proto.isDST                = isDaylightSavingTime;
proto.isLocal              = isLocal;
proto.isUtcOffset          = isUtcOffset;
proto.isUtc                = isUtc;
proto.isUTC                = isUtc;

// Timezone
proto.zoneAbbr = getZoneAbbr;
proto.zoneName = getZoneName;

// Deprecations
proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

function createUnix (input) {
    return createLocal(input * 1000);
}

function createInZone () {
    return createLocal.apply(null, arguments).parseZone();
}

function preParsePostFormat (string) {
    return string;
}

var proto$1 = Locale.prototype;

proto$1.calendar        = calendar;
proto$1.longDateFormat  = longDateFormat;
proto$1.invalidDate     = invalidDate;
proto$1.ordinal         = ordinal;
proto$1.preparse        = preParsePostFormat;
proto$1.postformat      = preParsePostFormat;
proto$1.relativeTime    = relativeTime;
proto$1.pastFuture      = pastFuture;
proto$1.set             = set;

// Month
proto$1.months            =        localeMonths;
proto$1.monthsShort       =        localeMonthsShort;
proto$1.monthsParse       =        localeMonthsParse;
proto$1.monthsRegex       = monthsRegex;
proto$1.monthsShortRegex  = monthsShortRegex;

// Week
proto$1.week = localeWeek;
proto$1.firstDayOfYear = localeFirstDayOfYear;
proto$1.firstDayOfWeek = localeFirstDayOfWeek;

// Day of Week
proto$1.weekdays       =        localeWeekdays;
proto$1.weekdaysMin    =        localeWeekdaysMin;
proto$1.weekdaysShort  =        localeWeekdaysShort;
proto$1.weekdaysParse  =        localeWeekdaysParse;

proto$1.weekdaysRegex       =        weekdaysRegex;
proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

// Hours
proto$1.isPM = localeIsPM;
proto$1.meridiem = localeMeridiem;

function get$1 (format, index, field, setter) {
    var locale = getLocale();
    var utc = createUTC().set(setter, index);
    return locale[field](utc, format);
}

function listMonthsImpl (format, index, field) {
    if (isNumber(format)) {
        index = format;
        format = undefined;
    }

    format = format || '';

    if (index != null) {
        return get$1(format, index, field, 'month');
    }

    var i;
    var out = [];
    for (i = 0; i < 12; i++) {
        out[i] = get$1(format, i, field, 'month');
    }
    return out;
}

// ()
// (5)
// (fmt, 5)
// (fmt)
// (true)
// (true, 5)
// (true, fmt, 5)
// (true, fmt)
function listWeekdaysImpl (localeSorted, format, index, field) {
    if (typeof localeSorted === 'boolean') {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    } else {
        format = localeSorted;
        index = format;
        localeSorted = false;

        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    }

    var locale = getLocale(),
        shift = localeSorted ? locale._week.dow : 0;

    if (index != null) {
        return get$1(format, (index + shift) % 7, field, 'day');
    }

    var i;
    var out = [];
    for (i = 0; i < 7; i++) {
        out[i] = get$1(format, (i + shift) % 7, field, 'day');
    }
    return out;
}

function listMonths (format, index) {
    return listMonthsImpl(format, index, 'months');
}

function listMonthsShort (format, index) {
    return listMonthsImpl(format, index, 'monthsShort');
}

function listWeekdays (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
}

function listWeekdaysShort (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
}

function listWeekdaysMin (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
}

getSetGlobalLocale('en', {
    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (toInt(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

// Side effect imports
hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

var mathAbs = Math.abs;

function abs () {
    var data           = this._data;

    this._milliseconds = mathAbs(this._milliseconds);
    this._days         = mathAbs(this._days);
    this._months       = mathAbs(this._months);

    data.milliseconds  = mathAbs(data.milliseconds);
    data.seconds       = mathAbs(data.seconds);
    data.minutes       = mathAbs(data.minutes);
    data.hours         = mathAbs(data.hours);
    data.months        = mathAbs(data.months);
    data.years         = mathAbs(data.years);

    return this;
}

function addSubtract$1 (duration, input, value, direction) {
    var other = createDuration(input, value);

    duration._milliseconds += direction * other._milliseconds;
    duration._days         += direction * other._days;
    duration._months       += direction * other._months;

    return duration._bubble();
}

// supports only 2.0-style add(1, 's') or add(duration)
function add$1 (input, value) {
    return addSubtract$1(this, input, value, 1);
}

// supports only 2.0-style subtract(1, 's') or subtract(duration)
function subtract$1 (input, value) {
    return addSubtract$1(this, input, value, -1);
}

function absCeil (number) {
    if (number < 0) {
        return Math.floor(number);
    } else {
        return Math.ceil(number);
    }
}

function bubble () {
    var milliseconds = this._milliseconds;
    var days         = this._days;
    var months       = this._months;
    var data         = this._data;
    var seconds, minutes, hours, years, monthsFromDays;

    // if we have a mix of positive and negative values, bubble down first
    // check: https://github.com/moment/moment/issues/2166
    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
            (milliseconds <= 0 && days <= 0 && months <= 0))) {
        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
        days = 0;
        months = 0;
    }

    // The following code bubbles up values, see the tests for
    // examples of what that means.
    data.milliseconds = milliseconds % 1000;

    seconds           = absFloor(milliseconds / 1000);
    data.seconds      = seconds % 60;

    minutes           = absFloor(seconds / 60);
    data.minutes      = minutes % 60;

    hours             = absFloor(minutes / 60);
    data.hours        = hours % 24;

    days += absFloor(hours / 24);

    // convert days to months
    monthsFromDays = absFloor(daysToMonths(days));
    months += monthsFromDays;
    days -= absCeil(monthsToDays(monthsFromDays));

    // 12 months -> 1 year
    years = absFloor(months / 12);
    months %= 12;

    data.days   = days;
    data.months = months;
    data.years  = years;

    return this;
}

function daysToMonths (days) {
    // 400 years have 146097 days (taking into account leap year rules)
    // 400 years have 12 months === 4800
    return days * 4800 / 146097;
}

function monthsToDays (months) {
    // the reverse of daysToMonths
    return months * 146097 / 4800;
}

function as (units) {
    if (!this.isValid()) {
        return NaN;
    }
    var days;
    var months;
    var milliseconds = this._milliseconds;

    units = normalizeUnits(units);

    if (units === 'month' || units === 'year') {
        days   = this._days   + milliseconds / 864e5;
        months = this._months + daysToMonths(days);
        return units === 'month' ? months : months / 12;
    } else {
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
            case 'week'   : return days / 7     + milliseconds / 6048e5;
            case 'day'    : return days         + milliseconds / 864e5;
            case 'hour'   : return days * 24    + milliseconds / 36e5;
            case 'minute' : return days * 1440  + milliseconds / 6e4;
            case 'second' : return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here
            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
            default: throw new Error('Unknown unit ' + units);
        }
    }
}

// TODO: Use this.as('ms')?
function valueOf$1 () {
    if (!this.isValid()) {
        return NaN;
    }
    return (
        this._milliseconds +
        this._days * 864e5 +
        (this._months % 12) * 2592e6 +
        toInt(this._months / 12) * 31536e6
    );
}

function makeAs (alias) {
    return function () {
        return this.as(alias);
    };
}

var asMilliseconds = makeAs('ms');
var asSeconds      = makeAs('s');
var asMinutes      = makeAs('m');
var asHours        = makeAs('h');
var asDays         = makeAs('d');
var asWeeks        = makeAs('w');
var asMonths       = makeAs('M');
var asYears        = makeAs('y');

function get$2 (units) {
    units = normalizeUnits(units);
    return this.isValid() ? this[units + 's']() : NaN;
}

function makeGetter(name) {
    return function () {
        return this.isValid() ? this._data[name] : NaN;
    };
}

var milliseconds = makeGetter('milliseconds');
var seconds      = makeGetter('seconds');
var minutes      = makeGetter('minutes');
var hours        = makeGetter('hours');
var days         = makeGetter('days');
var months       = makeGetter('months');
var years        = makeGetter('years');

function weeks () {
    return absFloor(this.days() / 7);
}

var round = Math.round;
var thresholds = {
    ss: 44,         // a few seconds to seconds
    s : 45,         // seconds to minute
    m : 45,         // minutes to hour
    h : 22,         // hours to day
    d : 26,         // days to month
    M : 11          // months to year
};

// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
}

function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
    var duration = createDuration(posNegDuration).abs();
    var seconds  = round(duration.as('s'));
    var minutes  = round(duration.as('m'));
    var hours    = round(duration.as('h'));
    var days     = round(duration.as('d'));
    var months   = round(duration.as('M'));
    var years    = round(duration.as('y'));

    var a = seconds <= thresholds.ss && ['s', seconds]  ||
            seconds < thresholds.s   && ['ss', seconds] ||
            minutes <= 1             && ['m']           ||
            minutes < thresholds.m   && ['mm', minutes] ||
            hours   <= 1             && ['h']           ||
            hours   < thresholds.h   && ['hh', hours]   ||
            days    <= 1             && ['d']           ||
            days    < thresholds.d   && ['dd', days]    ||
            months  <= 1             && ['M']           ||
            months  < thresholds.M   && ['MM', months]  ||
            years   <= 1             && ['y']           || ['yy', years];

    a[2] = withoutSuffix;
    a[3] = +posNegDuration > 0;
    a[4] = locale;
    return substituteTimeAgo.apply(null, a);
}

// This function allows you to set the rounding function for relative time strings
function getSetRelativeTimeRounding (roundingFunction) {
    if (roundingFunction === undefined) {
        return round;
    }
    if (typeof(roundingFunction) === 'function') {
        round = roundingFunction;
        return true;
    }
    return false;
}

// This function allows you to set a threshold for relative time strings
function getSetRelativeTimeThreshold (threshold, limit) {
    if (thresholds[threshold] === undefined) {
        return false;
    }
    if (limit === undefined) {
        return thresholds[threshold];
    }
    thresholds[threshold] = limit;
    if (threshold === 's') {
        thresholds.ss = limit - 1;
    }
    return true;
}

function humanize (withSuffix) {
    if (!this.isValid()) {
        return this.localeData().invalidDate();
    }

    var locale = this.localeData();
    var output = relativeTime$1(this, !withSuffix, locale);

    if (withSuffix) {
        output = locale.pastFuture(+this, output);
    }

    return locale.postformat(output);
}

var abs$1 = Math.abs;

function toISOString$1() {
    // for ISO strings we do not use the normal bubbling rules:
    //  * milliseconds bubble up until they become hours
    //  * days do not bubble at all
    //  * months bubble up until they become years
    // This is because there is no context-free conversion between hours and days
    // (think of clock changes)
    // and also not between days and months (28-31 days per month)
    if (!this.isValid()) {
        return this.localeData().invalidDate();
    }

    var seconds = abs$1(this._milliseconds) / 1000;
    var days         = abs$1(this._days);
    var months       = abs$1(this._months);
    var minutes, hours, years;

    // 3600 seconds -> 60 minutes -> 1 hour
    minutes           = absFloor(seconds / 60);
    hours             = absFloor(minutes / 60);
    seconds %= 60;
    minutes %= 60;

    // 12 months -> 1 year
    years  = absFloor(months / 12);
    months %= 12;


    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
    var Y = years;
    var M = months;
    var D = days;
    var h = hours;
    var m = minutes;
    var s = seconds;
    var total = this.asSeconds();

    if (!total) {
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
    }

    return (total < 0 ? '-' : '') +
        'P' +
        (Y ? Y + 'Y' : '') +
        (M ? M + 'M' : '') +
        (D ? D + 'D' : '') +
        ((h || m || s) ? 'T' : '') +
        (h ? h + 'H' : '') +
        (m ? m + 'M' : '') +
        (s ? s + 'S' : '');
}

var proto$2 = Duration.prototype;

proto$2.isValid        = isValid$1;
proto$2.abs            = abs;
proto$2.add            = add$1;
proto$2.subtract       = subtract$1;
proto$2.as             = as;
proto$2.asMilliseconds = asMilliseconds;
proto$2.asSeconds      = asSeconds;
proto$2.asMinutes      = asMinutes;
proto$2.asHours        = asHours;
proto$2.asDays         = asDays;
proto$2.asWeeks        = asWeeks;
proto$2.asMonths       = asMonths;
proto$2.asYears        = asYears;
proto$2.valueOf        = valueOf$1;
proto$2._bubble        = bubble;
proto$2.get            = get$2;
proto$2.milliseconds   = milliseconds;
proto$2.seconds        = seconds;
proto$2.minutes        = minutes;
proto$2.hours          = hours;
proto$2.days           = days;
proto$2.weeks          = weeks;
proto$2.months         = months;
proto$2.years          = years;
proto$2.humanize       = humanize;
proto$2.toISOString    = toISOString$1;
proto$2.toString       = toISOString$1;
proto$2.toJSON         = toISOString$1;
proto$2.locale         = locale;
proto$2.localeData     = localeData;

// Deprecations
proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
proto$2.lang = lang;

// Side effect imports

// FORMATTING

addFormatToken('X', 0, 0, 'unix');
addFormatToken('x', 0, 0, 'valueOf');

// PARSING

addRegexToken('x', matchSigned);
addRegexToken('X', matchTimestamp);
addParseToken('X', function (input, array, config) {
    config._d = new Date(parseFloat(input, 10) * 1000);
});
addParseToken('x', function (input, array, config) {
    config._d = new Date(toInt(input));
});

// Side effect imports


hooks.version = '2.18.1';

setHookCallback(createLocal);

hooks.fn                    = proto;
hooks.min                   = min;
hooks.max                   = max;
hooks.now                   = now;
hooks.utc                   = createUTC;
hooks.unix                  = createUnix;
hooks.months                = listMonths;
hooks.isDate                = isDate;
hooks.locale                = getSetGlobalLocale;
hooks.invalid               = createInvalid;
hooks.duration              = createDuration;
hooks.isMoment              = isMoment;
hooks.weekdays              = listWeekdays;
hooks.parseZone             = createInZone;
hooks.localeData            = getLocale;
hooks.isDuration            = isDuration;
hooks.monthsShort           = listMonthsShort;
hooks.weekdaysMin           = listWeekdaysMin;
hooks.defineLocale          = defineLocale;
hooks.updateLocale          = updateLocale;
hooks.locales               = listLocales;
hooks.weekdaysShort         = listWeekdaysShort;
hooks.normalizeUnits        = normalizeUnits;
hooks.relativeTimeRounding = getSetRelativeTimeRounding;
hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
hooks.calendarFormat        = getCalendarFormat;
hooks.prototype             = proto;

return hooks;

})));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(182)(module)))

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(2)

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* Shorthand */

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(242));
__export(__webpack_require__(7));
__export(__webpack_require__(230));
__export(__webpack_require__(231));
__export(__webpack_require__(232));
__export(__webpack_require__(233));
__export(__webpack_require__(16));
__export(__webpack_require__(235));
__export(__webpack_require__(234));
__export(__webpack_require__(236));
__export(__webpack_require__(237));
__export(__webpack_require__(238));
__export(__webpack_require__(239));
__export(__webpack_require__(240));
__export(__webpack_require__(241));
__export(__webpack_require__(244));
__export(__webpack_require__(245));
__export(__webpack_require__(246));
__export(__webpack_require__(247));
__export(__webpack_require__(248));
__export(__webpack_require__(249));
__export(__webpack_require__(243));
__export(__webpack_require__(250));
__export(__webpack_require__(251));
__export(__webpack_require__(252));
__export(__webpack_require__(253));
__export(__webpack_require__(254));
__export(__webpack_require__(255));
__export(__webpack_require__(256));
__export(__webpack_require__(257));
__export(__webpack_require__(258));
__export(__webpack_require__(259));
__export(__webpack_require__(260));
__export(__webpack_require__(261));
__export(__webpack_require__(20));
__export(__webpack_require__(262));
__export(__webpack_require__(263));
__export(__webpack_require__(264));
__export(__webpack_require__(265));
__export(__webpack_require__(266));
__export(__webpack_require__(267));
__export(__webpack_require__(180));
__export(__webpack_require__(268));
__export(__webpack_require__(269));
__export(__webpack_require__(270));
__export(__webpack_require__(271));
__export(__webpack_require__(24));
__export(__webpack_require__(272));
__export(__webpack_require__(273));
__export(__webpack_require__(274));
__export(__webpack_require__(275));
__export(__webpack_require__(181));
__export(__webpack_require__(276));
__export(__webpack_require__(277));
__export(__webpack_require__(278));
__export(__webpack_require__(279));
__export(__webpack_require__(280));
__export(__webpack_require__(281));
__export(__webpack_require__(282));
__export(__webpack_require__(283));
__export(__webpack_require__(284));
__export(__webpack_require__(286));
__export(__webpack_require__(285));
__export(__webpack_require__(287));
__export(__webpack_require__(288));
__export(__webpack_require__(289));
__export(__webpack_require__(290));
__export(__webpack_require__(291));
__export(__webpack_require__(292));
__export(__webpack_require__(293));
__export(__webpack_require__(294));

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(23)

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var DomHandler = (function () {
    function DomHandler() {
        this.calculatedScrollbarWidth = null;
    }
    DomHandler.prototype.addClass = function (element, className) {
        if (element.classList)
            element.classList.add(className);
        else
            element.className += ' ' + className;
    };
    DomHandler.prototype.addMultipleClasses = function (element, className) {
        if (element.classList) {
            var styles = className.split(' ');
            for (var i = 0; i < styles.length; i++) {
                element.classList.add(styles[i]);
            }
        }
        else {
            var styles = className.split(' ');
            for (var i = 0; i < styles.length; i++) {
                element.className += ' ' + styles[i];
            }
        }
    };
    DomHandler.prototype.removeClass = function (element, className) {
        if (element.classList)
            element.classList.remove(className);
        else
            element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
    };
    DomHandler.prototype.hasClass = function (element, className) {
        if (element.classList)
            return element.classList.contains(className);
        else
            return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);
    };
    DomHandler.prototype.siblings = function (element) {
        return Array.prototype.filter.call(element.parentNode.children, function (child) {
            return child !== element;
        });
    };
    DomHandler.prototype.find = function (element, selector) {
        return element.querySelectorAll(selector);
    };
    DomHandler.prototype.findSingle = function (element, selector) {
        return element.querySelector(selector);
    };
    DomHandler.prototype.index = function (element) {
        var children = element.parentNode.childNodes;
        var num = 0;
        for (var i = 0; i < children.length; i++) {
            if (children[i] == element)
                return num;
            if (children[i].nodeType == 1)
                num++;
        }
        return -1;
    };
    DomHandler.prototype.relativePosition = function (element, target) {
        var elementDimensions = element.offsetParent ? { width: element.offsetWidth, height: element.offsetHeight } : this.getHiddenElementDimensions(element);
        var targetHeight = target.offsetHeight;
        var targetWidth = target.offsetWidth;
        var targetOffset = target.getBoundingClientRect();
        var windowScrollTop = this.getWindowScrollTop();
        var viewport = this.getViewport();
        var top, left;
        if ((targetOffset.top + targetHeight + elementDimensions.height) > viewport.height) {
            top = -1 * (elementDimensions.height);
            if (targetOffset.top + top < 0) {
                top = 0;
            }
        }
        else {
            top = targetHeight;
        }
        if ((targetOffset.left + elementDimensions.width) > viewport.width)
            left = targetWidth - elementDimensions.width;
        else
            left = 0;
        element.style.top = top + 'px';
        element.style.left = left + 'px';
    };
    DomHandler.prototype.absolutePosition = function (element, target) {
        var elementDimensions = element.offsetParent ? { width: element.offsetWidth, height: element.offsetHeight } : this.getHiddenElementDimensions(element);
        var elementOuterHeight = elementDimensions.height;
        var elementOuterWidth = elementDimensions.width;
        var targetOuterHeight = target.offsetHeight;
        var targetOuterWidth = target.offsetWidth;
        var targetOffset = target.getBoundingClientRect();
        var windowScrollTop = this.getWindowScrollTop();
        var windowScrollLeft = this.getWindowScrollLeft();
        var viewport = this.getViewport();
        var top, left;
        if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {
            top = targetOffset.top + windowScrollTop - elementOuterHeight;
            if (top < 0) {
                top = 0 + windowScrollTop;
            }
        }
        else {
            top = targetOuterHeight + targetOffset.top + windowScrollTop;
        }
        if (targetOffset.left + targetOuterWidth + elementOuterWidth > viewport.width)
            left = targetOffset.left + windowScrollLeft + targetOuterWidth - elementOuterWidth;
        else
            left = targetOffset.left + windowScrollLeft;
        element.style.top = top + 'px';
        element.style.left = left + 'px';
    };
    DomHandler.prototype.getHiddenElementOuterHeight = function (element) {
        element.style.visibility = 'hidden';
        element.style.display = 'block';
        var elementHeight = element.offsetHeight;
        element.style.display = 'none';
        element.style.visibility = 'visible';
        return elementHeight;
    };
    DomHandler.prototype.getHiddenElementOuterWidth = function (element) {
        element.style.visibility = 'hidden';
        element.style.display = 'block';
        var elementWidth = element.offsetWidth;
        element.style.display = 'none';
        element.style.visibility = 'visible';
        return elementWidth;
    };
    DomHandler.prototype.getHiddenElementDimensions = function (element) {
        var dimensions = {};
        element.style.visibility = 'hidden';
        element.style.display = 'block';
        dimensions.width = element.offsetWidth;
        dimensions.height = element.offsetHeight;
        element.style.display = 'none';
        element.style.visibility = 'visible';
        return dimensions;
    };
    DomHandler.prototype.scrollInView = function (container, item) {
        var borderTopValue = getComputedStyle(container).getPropertyValue('borderTopWidth');
        var borderTop = borderTopValue ? parseFloat(borderTopValue) : 0;
        var paddingTopValue = getComputedStyle(container).getPropertyValue('paddingTop');
        var paddingTop = paddingTopValue ? parseFloat(paddingTopValue) : 0;
        var containerRect = container.getBoundingClientRect();
        var itemRect = item.getBoundingClientRect();
        var offset = (itemRect.top + document.body.scrollTop) - (containerRect.top + document.body.scrollTop) - borderTop - paddingTop;
        var scroll = container.scrollTop;
        var elementHeight = container.clientHeight;
        var itemHeight = this.getOuterHeight(item);
        if (offset < 0) {
            container.scrollTop = scroll + offset;
        }
        else if ((offset + itemHeight) > elementHeight) {
            container.scrollTop = scroll + offset - elementHeight + itemHeight;
        }
    };
    DomHandler.prototype.fadeIn = function (element, duration) {
        element.style.opacity = 0;
        var last = +new Date();
        var opacity = 0;
        var tick = function () {
            opacity = +element.style.opacity + (new Date().getTime() - last) / duration;
            element.style.opacity = opacity;
            last = +new Date();
            if (+opacity < 1) {
                (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);
            }
        };
        tick();
    };
    DomHandler.prototype.fadeOut = function (element, ms) {
        var opacity = 1, interval = 50, duration = ms, gap = interval / duration;
        var fading = setInterval(function () {
            opacity = opacity - gap;
            if (opacity <= 0) {
                opacity = 0;
                clearInterval(fading);
            }
            element.style.opacity = opacity;
        }, interval);
    };
    DomHandler.prototype.getWindowScrollTop = function () {
        var doc = document.documentElement;
        return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
    };
    DomHandler.prototype.getWindowScrollLeft = function () {
        var doc = document.documentElement;
        return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
    };
    DomHandler.prototype.matches = function (element, selector) {
        var p = Element.prototype;
        var f = p['matches'] || p.webkitMatchesSelector || p['mozMatchesSelector'] || p.msMatchesSelector || function (s) {
            return [].indexOf.call(document.querySelectorAll(s), this) !== -1;
        };
        return f.call(element, selector);
    };
    DomHandler.prototype.getOuterWidth = function (el, margin) {
        var width = el.offsetWidth;
        if (margin) {
            var style = getComputedStyle(el);
            width += parseFloat(style.marginLeft) + parseFloat(style.marginRight);
        }
        return width;
    };
    DomHandler.prototype.getHorizontalPadding = function (el) {
        var style = getComputedStyle(el);
        return parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
    };
    DomHandler.prototype.getHorizontalMargin = function (el) {
        var style = getComputedStyle(el);
        return parseFloat(style.marginLeft) + parseFloat(style.marginRight);
    };
    DomHandler.prototype.innerWidth = function (el) {
        var width = el.offsetWidth;
        var style = getComputedStyle(el);
        width += parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
        return width;
    };
    DomHandler.prototype.width = function (el) {
        var width = el.offsetWidth;
        var style = getComputedStyle(el);
        width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
        return width;
    };
    DomHandler.prototype.getInnerHeight = function (el) {
        var height = el.offsetHeight;
        var style = getComputedStyle(el);
        height += parseFloat(style.paddingTop) + parseFloat(style.paddingBottom);
        return height;
    };
    DomHandler.prototype.getOuterHeight = function (el, margin) {
        var height = el.offsetHeight;
        if (margin) {
            var style = getComputedStyle(el);
            height += parseFloat(style.marginTop) + parseFloat(style.marginBottom);
        }
        return height;
    };
    DomHandler.prototype.getHeight = function (el) {
        var height = el.offsetHeight;
        var style = getComputedStyle(el);
        height -= parseFloat(style.paddingTop) + parseFloat(style.paddingBottom) + parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);
        return height;
    };
    DomHandler.prototype.getWidth = function (el) {
        var width = el.offsetWidth;
        var style = getComputedStyle(el);
        width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight) + parseFloat(style.borderLeftWidth) + parseFloat(style.borderRightWidth);
        return width;
    };
    DomHandler.prototype.getViewport = function () {
        var win = window, d = document, e = d.documentElement, g = d.getElementsByTagName('body')[0], w = win.innerWidth || e.clientWidth || g.clientWidth, h = win.innerHeight || e.clientHeight || g.clientHeight;
        return { width: w, height: h };
    };
    DomHandler.prototype.getOffset = function (el) {
        var x = el.offsetLeft;
        var y = el.offsetTop;
        while (el = el.offsetParent) {
            x += el.offsetLeft;
            y += el.offsetTop;
        }
        return { left: x, top: y };
    };
    DomHandler.prototype.getUserAgent = function () {
        return navigator.userAgent;
    };
    DomHandler.prototype.isIE = function () {
        var ua = window.navigator.userAgent;
        var msie = ua.indexOf('MSIE ');
        if (msie > 0) {
            // IE 10 or older => return version number
            return true;
        }
        var trident = ua.indexOf('Trident/');
        if (trident > 0) {
            // IE 11 => return version number
            var rv = ua.indexOf('rv:');
            return true;
        }
        var edge = ua.indexOf('Edge/');
        if (edge > 0) {
            // Edge (IE 12+) => return version number
            return true;
        }
        // other browser
        return false;
    };
    DomHandler.prototype.appendChild = function (element, target) {
        if (this.isElement(target))
            target.appendChild(element);
        else if (target.el && target.el.nativeElement)
            target.el.nativeElement.appendChild(element);
        else
            throw 'Cannot append ' + target + ' to ' + element;
    };
    DomHandler.prototype.removeChild = function (element, target) {
        if (this.isElement(target))
            target.removeChild(element);
        else if (target.el && target.el.nativeElement)
            target.el.nativeElement.removeChild(element);
        else
            throw 'Cannot remove ' + element + ' from ' + target;
    };
    DomHandler.prototype.isElement = function (obj) {
        return (typeof HTMLElement === "object" ? obj instanceof HTMLElement :
            obj && typeof obj === "object" && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === "string");
    };
    DomHandler.prototype.calculateScrollbarWidth = function () {
        if (this.calculatedScrollbarWidth !== null)
            return this.calculatedScrollbarWidth;
        var scrollDiv = document.createElement("div");
        scrollDiv.className = "ui-scrollbar-measure";
        document.body.appendChild(scrollDiv);
        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
        this.calculatedScrollbarWidth = scrollbarWidth;
        return scrollbarWidth;
    };
    DomHandler.prototype.invokeElementMethod = function (element, methodName, args) {
        element[methodName].apply(element, args);
    };
    DomHandler.prototype.clearSelection = function () {
        if (window.getSelection) {
            if (window.getSelection().empty) {
                window.getSelection().empty();
            }
            else if (window.getSelection().removeAllRanges && window.getSelection().rangeCount > 0 && window.getSelection().getRangeAt(0).getClientRects().length > 0) {
                window.getSelection().removeAllRanges();
            }
        }
        else if (document['selection'] && document['selection'].empty) {
            try {
                document['selection'].empty();
            }
            catch (error) {
                //ignore IE bug
            }
        }
    };
    return DomHandler;
}());
DomHandler.zindex = 1000;
DomHandler = __decorate([
    core_1.Injectable()
], DomHandler);
exports.DomHandler = DomHandler;
//# sourceMappingURL=domhandler.js.map

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(314)

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(46)

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var core_2 = __webpack_require__(1);
var Header = (function () {
    function Header() {
    }
    return Header;
}());
Header = __decorate([
    core_2.Component({
        selector: 'p-header',
        template: '<ng-content></ng-content>'
    })
], Header);
exports.Header = Header;
var Footer = (function () {
    function Footer() {
    }
    return Footer;
}());
Footer = __decorate([
    core_2.Component({
        selector: 'p-footer',
        template: '<ng-content></ng-content>'
    })
], Footer);
exports.Footer = Footer;
var PrimeTemplate = (function () {
    function PrimeTemplate(template) {
        this.template = template;
    }
    PrimeTemplate.prototype.getType = function () {
        return this.name;
    };
    return PrimeTemplate;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], PrimeTemplate.prototype, "type", void 0);
__decorate([
    core_1.Input('pTemplate'),
    __metadata("design:type", String)
], PrimeTemplate.prototype, "name", void 0);
PrimeTemplate = __decorate([
    core_1.Directive({
        selector: '[pTemplate]',
        host: {}
    }),
    __metadata("design:paramtypes", [core_1.TemplateRef])
], PrimeTemplate);
exports.PrimeTemplate = PrimeTemplate;
var TemplateWrapper = (function () {
    function TemplateWrapper(viewContainer) {
        this.viewContainer = viewContainer;
    }
    TemplateWrapper.prototype.ngOnInit = function () {
        this.view = this.viewContainer.createEmbeddedView(this.templateRef, {
            '\$implicit': this.item,
            'index': this.index
        });
    };
    TemplateWrapper.prototype.ngOnDestroy = function () {
        this.view.destroy();
    };
    return TemplateWrapper;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], TemplateWrapper.prototype, "item", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], TemplateWrapper.prototype, "index", void 0);
__decorate([
    core_1.Input('pTemplateWrapper'),
    __metadata("design:type", core_1.TemplateRef)
], TemplateWrapper.prototype, "templateRef", void 0);
TemplateWrapper = __decorate([
    core_1.Directive({
        selector: '[pTemplateWrapper]'
    }),
    __metadata("design:paramtypes", [core_1.ViewContainerRef])
], TemplateWrapper);
exports.TemplateWrapper = TemplateWrapper;
var Column = (function () {
    function Column() {
        this.filterType = 'text';
        this.sortFunction = new core_1.EventEmitter();
    }
    Column.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.templates.forEach(function (item) {
            switch (item.getType()) {
                case 'header':
                    _this.headerTemplate = item.template;
                    break;
                case 'body':
                    _this.bodyTemplate = item.template;
                    break;
                case 'footer':
                    _this.footerTemplate = item.template;
                    break;
                case 'filter':
                    _this.filterTemplate = item.template;
                    break;
                case 'editor':
                    _this.editorTemplate = item.template;
                    break;
                default:
                    _this.bodyTemplate = item.template;
                    break;
            }
        });
    };
    return Column;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Column.prototype, "field", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Column.prototype, "colId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Column.prototype, "sortField", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Column.prototype, "header", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Column.prototype, "footer", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Column.prototype, "sortable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Column.prototype, "editable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Column.prototype, "filter", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Column.prototype, "filterMatchMode", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Column.prototype, "filterType", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Column.prototype, "rowspan", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Column.prototype, "colspan", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Column.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Column.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Column.prototype, "hidden", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Column.prototype, "expander", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Column.prototype, "selectionMode", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Column.prototype, "filterPlaceholder", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Column.prototype, "filterMaxlength", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Column.prototype, "frozen", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Column.prototype, "sortFunction", void 0);
__decorate([
    core_1.ContentChildren(PrimeTemplate),
    __metadata("design:type", core_1.QueryList)
], Column.prototype, "templates", void 0);
__decorate([
    core_1.ContentChild(core_1.TemplateRef),
    __metadata("design:type", core_1.TemplateRef)
], Column.prototype, "template", void 0);
Column = __decorate([
    core_2.Component({
        selector: 'p-column',
        template: ""
    })
], Column);
exports.Column = Column;
var Row = (function () {
    function Row() {
    }
    return Row;
}());
__decorate([
    core_1.ContentChildren(Column),
    __metadata("design:type", core_1.QueryList)
], Row.prototype, "columns", void 0);
Row = __decorate([
    core_2.Component({
        selector: 'p-row',
        template: ""
    })
], Row);
exports.Row = Row;
var HeaderColumnGroup = (function () {
    function HeaderColumnGroup() {
    }
    return HeaderColumnGroup;
}());
__decorate([
    core_1.ContentChildren(Row),
    __metadata("design:type", core_1.QueryList)
], HeaderColumnGroup.prototype, "rows", void 0);
HeaderColumnGroup = __decorate([
    core_2.Component({
        selector: 'p-headerColumnGroup',
        template: ""
    })
], HeaderColumnGroup);
exports.HeaderColumnGroup = HeaderColumnGroup;
var FooterColumnGroup = (function () {
    function FooterColumnGroup() {
    }
    return FooterColumnGroup;
}());
__decorate([
    core_1.ContentChildren(Row),
    __metadata("design:type", core_1.QueryList)
], FooterColumnGroup.prototype, "rows", void 0);
FooterColumnGroup = __decorate([
    core_2.Component({
        selector: 'p-footerColumnGroup',
        template: ""
    })
], FooterColumnGroup);
exports.FooterColumnGroup = FooterColumnGroup;
var ColumnBodyTemplateLoader = (function () {
    function ColumnBodyTemplateLoader(viewContainer) {
        this.viewContainer = viewContainer;
    }
    ColumnBodyTemplateLoader.prototype.ngOnInit = function () {
        this.view = this.viewContainer.createEmbeddedView(this.column.bodyTemplate, {
            '\$implicit': this.column,
            'rowData': this.rowData,
            'rowIndex': this.rowIndex
        });
    };
    ColumnBodyTemplateLoader.prototype.ngOnChanges = function (changes) {
        if (!this.view) {
            return;
        }
        if ('rowIndex' in changes) {
            this.view.context.rowIndex = changes['rowIndex'].currentValue;
        }
    };
    ColumnBodyTemplateLoader.prototype.ngOnDestroy = function () {
        this.view.destroy();
    };
    return ColumnBodyTemplateLoader;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ColumnBodyTemplateLoader.prototype, "column", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ColumnBodyTemplateLoader.prototype, "rowData", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], ColumnBodyTemplateLoader.prototype, "rowIndex", void 0);
ColumnBodyTemplateLoader = __decorate([
    core_2.Component({
        selector: 'p-columnBodyTemplateLoader',
        template: ""
    }),
    __metadata("design:paramtypes", [core_1.ViewContainerRef])
], ColumnBodyTemplateLoader);
exports.ColumnBodyTemplateLoader = ColumnBodyTemplateLoader;
var ColumnHeaderTemplateLoader = (function () {
    function ColumnHeaderTemplateLoader(viewContainer) {
        this.viewContainer = viewContainer;
    }
    ColumnHeaderTemplateLoader.prototype.ngOnInit = function () {
        this.view = this.viewContainer.createEmbeddedView(this.column.headerTemplate, {
            '\$implicit': this.column
        });
    };
    ColumnHeaderTemplateLoader.prototype.ngOnDestroy = function () {
        this.view.destroy();
    };
    return ColumnHeaderTemplateLoader;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ColumnHeaderTemplateLoader.prototype, "column", void 0);
ColumnHeaderTemplateLoader = __decorate([
    core_2.Component({
        selector: 'p-columnHeaderTemplateLoader',
        template: ""
    }),
    __metadata("design:paramtypes", [core_1.ViewContainerRef])
], ColumnHeaderTemplateLoader);
exports.ColumnHeaderTemplateLoader = ColumnHeaderTemplateLoader;
var ColumnFooterTemplateLoader = (function () {
    function ColumnFooterTemplateLoader(viewContainer) {
        this.viewContainer = viewContainer;
    }
    ColumnFooterTemplateLoader.prototype.ngOnInit = function () {
        this.view = this.viewContainer.createEmbeddedView(this.column.footerTemplate, {
            '\$implicit': this.column
        });
    };
    ColumnFooterTemplateLoader.prototype.ngOnDestroy = function () {
        this.view.destroy();
    };
    return ColumnFooterTemplateLoader;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ColumnFooterTemplateLoader.prototype, "column", void 0);
ColumnFooterTemplateLoader = __decorate([
    core_2.Component({
        selector: 'p-columnFooterTemplateLoader',
        template: ""
    }),
    __metadata("design:paramtypes", [core_1.ViewContainerRef])
], ColumnFooterTemplateLoader);
exports.ColumnFooterTemplateLoader = ColumnFooterTemplateLoader;
var ColumnFilterTemplateLoader = (function () {
    function ColumnFilterTemplateLoader(viewContainer) {
        this.viewContainer = viewContainer;
    }
    ColumnFilterTemplateLoader.prototype.ngOnInit = function () {
        this.view = this.viewContainer.createEmbeddedView(this.column.filterTemplate, {
            '\$implicit': this.column
        });
    };
    ColumnFilterTemplateLoader.prototype.ngOnDestroy = function () {
        this.view.destroy();
    };
    return ColumnFilterTemplateLoader;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ColumnFilterTemplateLoader.prototype, "column", void 0);
ColumnFilterTemplateLoader = __decorate([
    core_2.Component({
        selector: 'p-columnFilterTemplateLoader',
        template: ""
    }),
    __metadata("design:paramtypes", [core_1.ViewContainerRef])
], ColumnFilterTemplateLoader);
exports.ColumnFilterTemplateLoader = ColumnFilterTemplateLoader;
var ColumnEditorTemplateLoader = (function () {
    function ColumnEditorTemplateLoader(viewContainer) {
        this.viewContainer = viewContainer;
    }
    ColumnEditorTemplateLoader.prototype.ngOnInit = function () {
        this.view = this.viewContainer.createEmbeddedView(this.column.editorTemplate, {
            '\$implicit': this.column,
            'rowData': this.rowData,
            'rowIndex': this.rowIndex
        });
    };
    ColumnEditorTemplateLoader.prototype.ngOnDestroy = function () {
        this.view.destroy();
    };
    return ColumnEditorTemplateLoader;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ColumnEditorTemplateLoader.prototype, "column", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ColumnEditorTemplateLoader.prototype, "rowData", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ColumnEditorTemplateLoader.prototype, "rowIndex", void 0);
ColumnEditorTemplateLoader = __decorate([
    core_2.Component({
        selector: 'p-columnEditorTemplateLoader',
        template: ""
    }),
    __metadata("design:paramtypes", [core_1.ViewContainerRef])
], ColumnEditorTemplateLoader);
exports.ColumnEditorTemplateLoader = ColumnEditorTemplateLoader;
var TemplateLoader = (function () {
    function TemplateLoader(viewContainer) {
        this.viewContainer = viewContainer;
    }
    TemplateLoader.prototype.ngOnInit = function () {
        if (this.template) {
            this.view = this.viewContainer.createEmbeddedView(this.template, {
                '\$implicit': this.data
            });
        }
    };
    TemplateLoader.prototype.ngOnDestroy = function () {
        if (this.view)
            this.view.destroy();
    };
    return TemplateLoader;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", core_1.TemplateRef)
], TemplateLoader.prototype, "template", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], TemplateLoader.prototype, "data", void 0);
TemplateLoader = __decorate([
    core_2.Component({
        selector: 'p-templateLoader',
        template: ""
    }),
    __metadata("design:paramtypes", [core_1.ViewContainerRef])
], TemplateLoader);
exports.TemplateLoader = TemplateLoader;
var SharedModule = (function () {
    function SharedModule() {
    }
    return SharedModule;
}());
SharedModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Header, Footer, Column, TemplateWrapper, ColumnHeaderTemplateLoader, ColumnBodyTemplateLoader, ColumnFooterTemplateLoader, ColumnFilterTemplateLoader, PrimeTemplate, TemplateLoader, Row, HeaderColumnGroup, FooterColumnGroup, ColumnEditorTemplateLoader],
        declarations: [Header, Footer, Column, TemplateWrapper, ColumnHeaderTemplateLoader, ColumnBodyTemplateLoader, ColumnFooterTemplateLoader, ColumnFilterTemplateLoader, PrimeTemplate, TemplateLoader, Row, HeaderColumnGroup, FooterColumnGroup, ColumnEditorTemplateLoader]
    })
], SharedModule);
exports.SharedModule = SharedModule;
//# sourceMappingURL=shared.js.map

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["__extends"] = __extends;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (immutable) */ __webpack_exports__["__rest"] = __rest;
/* harmony export (immutable) */ __webpack_exports__["__decorate"] = __decorate;
/* harmony export (immutable) */ __webpack_exports__["__param"] = __param;
/* harmony export (immutable) */ __webpack_exports__["__metadata"] = __metadata;
/* harmony export (immutable) */ __webpack_exports__["__awaiter"] = __awaiter;
/* harmony export (immutable) */ __webpack_exports__["__generator"] = __generator;
/* harmony export (immutable) */ __webpack_exports__["__exportStar"] = __exportStar;
/* harmony export (immutable) */ __webpack_exports__["__values"] = __values;
/* harmony export (immutable) */ __webpack_exports__["__read"] = __read;
/* harmony export (immutable) */ __webpack_exports__["__spread"] = __spread;
/* harmony export (immutable) */ __webpack_exports__["__asyncGenerator"] = __asyncGenerator;
/* harmony export (immutable) */ __webpack_exports__["__asyncDelegator"] = __asyncDelegator;
/* harmony export (immutable) */ __webpack_exports__["__asyncValues"] = __asyncValues;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __exportStar(m, exports) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
};

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), q = [], c, i;
    return i = { next: verb("next"), "throw": verb("throw"), "return": verb("return") }, i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { return function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]), next(); }); }; }
    function next() { if (!c && q.length) resume((c = q.shift())[0], c[1]); }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(c[3], e); } }
    function step(r) { r.done ? settle(c[2], r) : r.value[0] === "yield" ? settle(c[2], { value: r.value[1], done: false }) : Promise.resolve(r.value[1]).then(r.value[0] === "delegate" ? delegate : fulfill, reject); }
    function delegate(r) { step(r.done ? r : { value: ["yield", r.value], done: false }); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { c = void 0, f(v), next(); }
};

function __asyncDelegator(o) {
    var i = { next: verb("next"), "throw": verb("throw", function (e) { throw e; }), "return": verb("return", function (v) { return { value: v, done: true }; }) };
    return o = __asyncValues(o), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { return function (v) { return { value: ["delegate", (o[n] || f).call(o, v)], done: false }; }; }
};

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator];
    return m ? m.call(o) : typeof __values === "function" ? __values(o) : o[Symbol.iterator]();
};

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = vendor_lib;

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = polyfills_lib;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var http_1 = __webpack_require__(12);
var Rx_1 = __webpack_require__(14);
__webpack_require__(185);
var global_constants_1 = __webpack_require__(15);
var SetupService = (function () {
    function SetupService(http, _Jsonp) {
        this.http = http;
        this._Jsonp = _Jsonp;
        //end constructor operation
        this.endpoint_url = global_constants_1.AppSettings.API_ENDPOINT;
        this.organizationId = global_constants_1.AppSettings.ORGANIZATION_ID; //get organization id From active session
        this.http = http;
    }
    SetupService.prototype.getHeaders = function () {
        var headers = new http_1.Headers();
        headers.append('Accept', 'application/json');
        return headers;
    };
    SetupService.prototype.getCountries = function () {
        return [
            new Country(2, 'India'),
        ];
    };
    SetupService.prototype.getStates = function () {
        return [
            new State(1, 'Andhra Pradesh'),
            new State(2, 'Arunachal Pradesh'),
            new State(3, 'Assam'),
            new State(4, 'Gujarat'),
            new State(5, 'Chhattisgarh'),
            new State(6, 'Haryana'),
            new State(7, 'Himachal Pradesh'),
            new State(8, 'Karnataka'),
            new State(9, 'Madhya Pradesh'),
            new State(10, 'Maharashtra'),
            new State(11, 'Jharkhand'),
            new State(12, 'Uttarakhand'),
            new State(13, 'Punjab'),
            new State(14, 'Uttar Pradesh'),
            new State(15, 'Delhi'),
            new State(16, 'Rajasthan'),
            new State(17, 'Orissa'),
            new State(18, 'Manipur'),
            new State(19, 'Meghalaya'),
            new State(20, 'Mizoram'),
            new State(21, 'Nagaland'),
            new State(22, 'Chandigarh'),
            new State(23, 'Tamilnadu'),
            new State(24, 'Kerala'),
            new State(25, 'Tripura'),
            new State(26, 'Goa'),
            new State(27, 'Jammu & Kashmir'),
        ];
    };
    SetupService.prototype.getSequence = function () {
        return [
            new Sequence(1, 1),
            new Sequence(2, 2),
            new Sequence(3, 3),
            new Sequence(4, 4),
            new Sequence(5, 5),
            new Sequence(6, 6),
            new Sequence(7, 7),
            new Sequence(8, 8),
            new Sequence(9, 9),
            new Sequence(10, 10),
            new Sequence(11, 11),
            new Sequence(12, 12),
            new Sequence(13, 13),
            new Sequence(14, 14),
            new Sequence(15, 15),
        ];
    };
    //call to deleteRoute from patron
    SetupService.prototype.deleteRoutesFromPatron = function (tRoutes) {
        return this.http.put(this.endpoint_url + 'Patron/DeleteRouteFromPatron/' + this.organizationId + "/" + tRoutes.id, { headers: this.getHeaders() })
            .map(function (res) { return res.json(); });
    };
    SetupService.prototype.updateAdminPassword = function (id, ChangePassword) {
        return this.http.put(this.endpoint_url + 'AdminCredential/ChangeUserPassword/' + this.organizationId + "/" + id, ChangePassword, { headers: this.getHeaders() })
            .map(function (res) { return res.json(); });
    };
    // Begin Organization services
    // call to get organization detail
    SetupService.prototype.getOrganization = function () {
        return this.http.get(this.endpoint_url + 'Organization/GetOrg/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    //call to update organization
    SetupService.prototype.updateOrganization = function (id, organizationDetail) {
        return this.http.put(this.endpoint_url + 'Organization/' + this.organizationId + "/" + id, organizationDetail, { headers: this.getHeaders() })
            .map(function (res) { return res.status; });
    };
    //call to update organization logo (image) name
    SetupService.prototype.updateOrganizationLogoImageName = function (orgId, fileExt) {
        return this.http
            .put(this.endpoint_url + 'Organization/UpdateOrganizationImageName/' + this.organizationId + "/" + orgId + "/" + fileExt, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    //call to upload logo (Image) in cloude
    SetupService.prototype.logoImageUploadToCloude = function (fileToUpload, organizationId) {
        var input = new FormData();
        input.append("file", fileToUpload);
        return this.http.post(this.endpoint_url + 'Organization/UploadImage/' + this.organizationId + "/" + organizationId, input)
            .map(function (res) { return res.status; })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    // End Organization services
    // Begin Schedule Services
    // Begin session operations
    // Call for get session detail 
    SetupService.prototype.getSession = function () {
        return this.http.get(this.endpoint_url + 'Session/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    // Call for create new session and get saved session id
    SetupService.prototype.saveAndGetSessionId = function (sessionDetail) {
        return this.http.post(this.endpoint_url + 'Session/saveAndGetSessionId/', sessionDetail, { headers: this.getHeaders() })
            .map(function (res) { return res.json(); });
    };
    //Update Session status () Active or Completed
    SetupService.prototype.updateSessionStatus = function (savedSessionId) {
        return this.http
            .put(this.endpoint_url + 'Session/UpdateSessionDetailStatus/' + this.organizationId + "/" + savedSessionId, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.getSessionById = function (sessionId) {
        return this.http.get(this.endpoint_url + 'Session/' + this.organizationId + "/" + sessionId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.updateBreakInSessionDetail = function (breakId, breakDetail) {
        return this.http.put(this.endpoint_url + 'Session/UpdateBreakInSession/' + this.organizationId + "/" + breakId, breakDetail, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.updateTermInSessionDetail = function (termId, termDetail) {
        return this.http.put(this.endpoint_url + 'Session/UpdateTermInSession/' + this.organizationId + "/" + termId, termDetail, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.updateSession = function (sessionId, sessionDetail) {
        return this.http
            .put(this.endpoint_url + 'Session/' + this.organizationId + "/" + sessionId, sessionDetail, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.deleteSession = function (sessionDetail) {
        return this.http.delete(this.endpoint_url + 'Session/' + this.organizationId + "/" + sessionDetail.id) // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    SetupService.prototype.deleteBreakFromSession = function (breakdetail) {
        return this.http.put(this.endpoint_url + 'Session/DeleteBreakFromSession/' + this.organizationId + "/" + breakdetail.id, { headers: this.getHeaders() })
            .map(function (res) { return res.json(); });
    };
    // End session operations
    // Begin Term operations
    SetupService.prototype.getTerm = function () {
        return this.http.get(this.endpoint_url + 'Term/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getTermById = function (termId) {
        return this.http.get(this.endpoint_url + 'Term/' + this.organizationId + "/" + termId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.saveAndGetTermId = function (termDetail) {
        return this.http.post(this.endpoint_url + 'Term/saveAndGetTermId/', termDetail, { headers: this.getHeaders() })
            .map(function (res) { return res.json(); });
    };
    SetupService.prototype.updateSessionTermDetail = function (termDetail) {
        return this.http.put(this.endpoint_url + 'Session/UpdateSessionWithTerm/' + this.organizationId, termDetail, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.createTerm = function (termDetail) {
        return this.http.post(this.endpoint_url + 'Term', termDetail, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.updateTerm = function (termId, termDetail) {
        return this.http
            .put(this.endpoint_url + 'Term/' + this.organizationId + "/" + termId, termDetail, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.deleteTerm = function (termDetail) {
        return this.http.delete(this.endpoint_url + 'Term/' + this.organizationId + "/" + termDetail.id) // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    SetupService.prototype.deleteTermFromSession = function (termDetail) {
        return this.http.put(this.endpoint_url + 'Session/DeleteTermFromSession/' + this.organizationId + "/" + termDetail.id, { headers: this.getHeaders() })
            .map(function (res) { return res.json(); });
    };
    // End Term operations
    // Begin Break operations
    SetupService.prototype.getBreak = function () {
        return this.http.get(this.endpoint_url + 'Break/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getBreakById = function (breakId) {
        return this.http.get(this.endpoint_url + 'Break/' + this.organizationId + "/" + breakId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.saveAndGetBreakId = function (breakDetail) {
        return this.http.post(this.endpoint_url + 'Break/saveAndGetBreakId/', breakDetail, { headers: this.getHeaders() })
            .map(function (res) { return res.json(); });
    };
    SetupService.prototype.createBreak = function (breakDetail) {
        return this.http.post(this.endpoint_url + 'Break', breakDetail, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.updateSessionBreakDetail = function (breakDetail) {
        return this.http.put(this.endpoint_url + 'Session/UpdateSessionWithBreak/' + this.organizationId, breakDetail, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.updateBreak = function (breakId, breakDetail) {
        return this.http
            .put(this.endpoint_url + 'Break/' + this.organizationId + "/" + breakId, breakDetail, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.deleteBreak = function (breakDetail) {
        return this.http.delete(this.endpoint_url + 'Break/' + this.organizationId + "/" + breakDetail.id) // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    // end Break operations 
    // Begin Grade operations
    SetupService.prototype.getGrade = function () {
        return this.http.get(this.endpoint_url + 'Grade/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getSection = function (patronClass) {
        return this.http.get(this.endpoint_url + 'Grade/GetAll/' + this.organizationId + "/" + patronClass)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getUniqueClasses = function () {
        //alert("call service");
        return this.http.get(this.endpoint_url + 'Grade/GetClasses/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getGradeById = function (gradeId) {
        return this.http.get(this.endpoint_url + 'Grade/' + this.organizationId + "/" + gradeId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.createGrade = function (selectedGrade, selectedSection) {
        return this.http.post(this.endpoint_url + 'Grade', { Grade: selectedGrade, Section: selectedSection, createdate: new Date(), organizationid: this.organizationId }, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.deleteGrade = function (gradeDetail) {
        return this.http.delete(this.endpoint_url + 'Grade/' + this.organizationId + "/" + gradeDetail.id) // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    // End Grade operations
    // Begin Week operations
    SetupService.prototype.getWeek = function () {
        return this.http.get(this.endpoint_url + 'Week/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.createWeek = function (daysOfWeek) {
        return this.http.post(this.endpoint_url + 'Week', { dayofweek: daysOfWeek, createDate: new Date(), organizationid: this.organizationId }, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.updateWeek = function (daysOfWeekId, daysOfWeek, daysCreatedDate) {
        return this.http
            .put(this.endpoint_url + 'Week/' + this.organizationId + "/" + daysOfWeekId, { id: daysOfWeekId, dayofweek: daysOfWeek, lastupdated: new Date(), createdate: daysCreatedDate, organizationid: this.organizationId }, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.updateSessionWeekDetail = function (daysOfWeek) {
        return this.http.put(this.endpoint_url + 'Session/UpdateSessionWithWeek/' + this.organizationId + "/" + daysOfWeek, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    // End Week operations
    //End Schedule Services
    SetupService.prototype.patronContactPersonFileUploads = function (fileToUpload, contactPersonId) {
        var input = new FormData();
        input.append("file", fileToUpload);
        return this.http.post(this.endpoint_url + 'Patron/UploadPatronContactPersonImage/' + this.organizationId + "/" + contactPersonId, input)
            .map(function (res) { return res.status; })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.updateContactPersonImageName = function (patronID, contactPersonId, fileExt) {
        return this.http.put(this.endpoint_url + 'Patron/UpdatePatronContactPersonImageName/' + this.organizationId + "/" + patronID + "/" + contactPersonId + "/" + fileExt, { headers: this.getHeaders() }).map(function (res) { return res.json(); });
    };
    SetupService.prototype.fileuploads = function (fileToUpload, patronId) {
        var input = new FormData();
        input.append("file", fileToUpload);
        return this.http.post(this.endpoint_url + 'Patron/UploadImage/' + this.organizationId + "/" + patronId, input)
            .map(function (res) { return res.status; })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.updatePatronImageName = function (patronId, fileExt) {
        return this.http.put(this.endpoint_url + 'Patron/UpdatePatronImageName/' + this.organizationId + "/" + patronId + "/" + fileExt, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.saveAndGetId = function (patronDetail) {
        return this.http.post(this.endpoint_url + 'Patron/GetSavedId/', patronDetail, { headers: this.getHeaders() })
            .map(function (res) { return res.json(); });
    };
    SetupService.prototype.fileuploadsforPerson = function (fileToUpload, personId) {
        var input = new FormData();
        input.append("file", fileToUpload);
        return this.http.post(this.endpoint_url + 'Person/UploadImage/' + this.organizationId + "/" + personId, input)
            .map(function (res) { return res.status; })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.saveAndGetIdforPerson = function (personDetail) {
        return this.http.post(this.endpoint_url + 'Person/GetSavedId/', personDetail, { headers: this.getHeaders() })
            .map(function (res) { return res.json(); });
    };
    SetupService.prototype.updatePersonImageName = function (personId, fileExt) {
        return this.http
            .put(this.endpoint_url + 'Person/UpdatePersonImageName/' + this.organizationId + "/" + personId + "/" + fileExt, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.personContactPersonFileUploads = function (fileToUpload, contactPersonId) {
        var input = new FormData();
        input.append("file", fileToUpload);
        return this.http.post(this.endpoint_url + 'Person/UploadPersonContactPersonImage/' + this.organizationId + "/" + contactPersonId, input)
            .map(function (res) { return res.status; })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.updatePersonContactPersonImageName = function (personID, contactPersonId, fileExt) {
        return this.http.put(this.endpoint_url + 'Person/UpdatePersonContactPersonImageName/' + this.organizationId + "/" + personID + "/" + contactPersonId + "/" + fileExt, { headers: this.getHeaders() }).map(function (res) { return res.json(); });
    };
    SetupService.prototype.removeFileuploads = function (fileName) {
        return this.http.put(this.endpoint_url + 'Patron/RemoveImage/' + this.organizationId + "/" + fileName, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    //Begin of Patron Operations
    SetupService.prototype.getPatron = function () {
        return this.http.get(this.endpoint_url + 'Patron/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getPatronById = function (patronId) {
        return this.http.get(this.endpoint_url + 'Patron/' + this.organizationId + "/" + patronId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getPatronBirthday = function (selectedDate) {
        return this.http.get(this.endpoint_url + 'Patron/GetPatronBybirthday' + this.organizationId + "/" + selectedDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    //getResticatedPatron(): Observable<PatronDetail[]> {
    //    return this.http.get(this.endpoint_url + 'Patron/GetResticatedPatron/' + this.organizationId )
    //        .map((res: Response) => res.json())
    //        .catch((error: any) => Observable.throw(error.json().error || 'Server error'));
    //}
    SetupService.prototype.getPersonnById = function (personId) {
        return this.http.get(this.endpoint_url + 'Person/' + this.organizationId + "/" + personId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.createPatron = function (patronDetail) {
        return this.http.post(this.endpoint_url + 'Patron', patronDetail, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.updatePatron = function (patronId, patronDetail) {
        return this.http
            .put(this.endpoint_url + 'Patron/' + this.organizationId + "/" + patronId, patronDetail, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.deletePatron = function (patronDetail) {
        return this.http.delete(this.endpoint_url + 'Patron/' + this.organizationId + "/" + patronDetail.id) // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    SetupService.prototype.deletePatronContactPerson = function (patronId, personDetailId) {
        return this.http.put(this.endpoint_url + 'Patron/RemovePerson/' + this.organizationId + "/" + patronId + "/" + personDetailId, "") // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    SetupService.prototype.deletePatronAutheticationType = function (patronId, authId) {
        return this.http.put(this.endpoint_url + 'Patron/RemoveAuth/' + this.organizationId + "/" + patronId + "/" + authId, "") // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    SetupService.prototype.createPatronContactPerson = function (patronId, personDetail) {
        return this.http.put(this.endpoint_url + 'Patron/AddPerson/' + this.organizationId + "/" + patronId, personDetail, { headers: this.getHeaders() })
            .map(function (res) { return res.json(); });
    };
    //End of Patron Operations
    //Begin of Person Operations
    SetupService.prototype.getPerson = function () {
        return this.http.get(this.endpoint_url + 'Person/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.createPerson = function (personDetail) {
        return this.http.post(this.endpoint_url + 'Person', personDetail, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.updatePerson = function (personId, personDetail) {
        return this.http
            .put(this.endpoint_url + 'Person/' + this.organizationId + "/" + personId, personDetail, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.getPersonById = function (personId) {
        return this.http.get(this.endpoint_url + 'Person/' + this.organizationId + "/" + personId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getPersonViewById = function (personId) {
        return this.http.get(this.endpoint_url + 'Person/' + this.organizationId + "/" + personId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.deletePersonContactPerson = function (personId, personObjId) {
        return this.http.put(this.endpoint_url + 'Person/RemovePerson/' + this.organizationId + "/" + personId + "/" + personObjId, "") // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    SetupService.prototype.deletePersonAutheticationType = function (personId, authId) {
        return this.http.put(this.endpoint_url + 'Person/RemoveAuth/' + this.organizationId + "/" + personId + "/" + authId, "") // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    SetupService.prototype.getPersonAuth = function (personViewId) {
        return this.http.get(this.endpoint_url + 'Person/GetAuthOfPerson' + this.organizationId + "/" + personViewId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.createPersonContactPerson = function (personViewId, personDetail) {
        return this.http.put(this.endpoint_url + 'Person/AddPerson/' + this.organizationId + "/" + personViewId, personDetail, { headers: this.getHeaders() })
            .map(function (res) { return res.json(); });
    };
    SetupService.prototype.createPersonAuth = function (personViewId, authDetail) {
        return this.http
            .put(this.endpoint_url + 'Person/AddAuth/' + this.organizationId + "/" + personViewId, authDetail, { headers: this.getHeaders() }).map(function (res) { return res.json(); });
    };
    SetupService.prototype.createPatronAuth = function (patronId, authDetail) {
        return this.http.put(this.endpoint_url + 'Patron/AddAuth/' + this.organizationId + "/" + patronId, authDetail, { headers: this.getHeaders() })
            .map(function (res) { return res.json(); });
    };
    SetupService.prototype.editPersonContactPerson = function (personViewId, personId) {
        return this.http.get(this.endpoint_url + 'Person/EditPerson/' + this.organizationId + "/" + personViewId + "/" + personId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.editPatronContactPerson = function (patronId, personId) {
        return this.http.get(this.endpoint_url + 'Patron/EditPerson/' + this.organizationId + "/" + patronId + "/" + personId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.deletePerson = function (personDetail) {
        return this.http.delete(this.endpoint_url + 'Person/' + this.organizationId + "/" + personDetail.id) // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    // Begin Tracking Operations
    SetupService.prototype.getPatronTracking = function () {
        return this.http.get(this.endpoint_url + 'Patron/Tracking/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.markPresent = function (patronTracking) {
        return this.http
            .post(this.endpoint_url + 'Patron/Tracking', patronTracking, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.markPresent1 = function (personTracking) {
        return this.http
            .post(this.endpoint_url + 'Person/Tracking', personTracking, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.removeOnLeavePatron = function (patronId, selectedDate) {
        return this.http.delete(this.endpoint_url + 'Patron/Leave' + this.organizationId + "/" + patronId) // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    SetupService.prototype.removePresentPatron = function (patronId) {
        return this.http.delete(this.endpoint_url + 'Patron/Tracking/' + this.organizationId + "/" + patronId) // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    SetupService.prototype.removePresentPerson = function (personId) {
        return this.http.delete(this.endpoint_url + 'Person/Tracking/' + this.organizationId + "/" + personId) // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    // End Tracking Operations
    // Begin Event Operations
    SetupService.prototype.getEvent = function () {
        return this.http.get(this.endpoint_url + 'Event/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getCurrentEvent = function () {
        return this.http.get(this.endpoint_url + 'Event/GetCurrentEvent/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    //getEventbBycurrentDate(date:string): Observable<EventDetail[]> {
    //    return this.http.get(this.endpoint_url + 'Event/GetCurrentEventByDate/' + this.organizationId + "/" + date)
    //        .map((res: Response) => res.json())
    //        .catch((error: any) => Observable.throw(error.json().error || 'Server error'));
    //}
    SetupService.prototype.getEventById = function (eventId) {
        return this.http.get(this.endpoint_url + 'Event/' + this.organizationId + "/" + eventId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.addPatronToEvent = function (eventId, patronId) {
        return this.http
            .put(this.endpoint_url + 'Event/AddPatron/' + this.organizationId + "/" + eventId + "/" + patronId, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.RemovePatronToEvent = function (eventId, patronId) {
        return this.http
            .put(this.endpoint_url + 'Event/RemovePatron/' + this.organizationId + "/" + eventId + "/" + patronId, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.DeclinePatronToEvent = function (eventId, declineRequest) {
        return this.http
            .put(this.endpoint_url + 'Event/DeclinePatron/' + this.organizationId + "/" + eventId, declineRequest, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.createEvent = function (eventDetail) {
        return this.http.post(this.endpoint_url + 'Event', eventDetail, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.updateEvent = function (eventId, eventDetail) {
        return this.http
            .put(this.endpoint_url + 'Event/' + this.organizationId + "/" + eventId, eventDetail, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.deleteEvent = function (eventId) {
        return this.http.delete(this.endpoint_url + 'Event/' + this.organizationId + "/" + eventId) // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    // End Event Operations
    // Begin Authetication Operations
    SetupService.prototype.getAuth = function () {
        return this.http.get(this.endpoint_url + 'Event/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getAuthById = function (eventId) {
        return this.http.get(this.endpoint_url + 'Event/' + this.organizationId + "/" + eventId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.deleteAuth = function (eventId) {
        return this.http.delete(this.endpoint_url + 'Event/' + this.organizationId + "/" + eventId) // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    SetupService.prototype.editPersonAuth = function (personViewId, authId) {
        return this.http.get(this.endpoint_url + 'Person/EditAuth/' + this.organizationId + "/" + personViewId + "/" + authId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.editPatronAuth = function (patronId, authId) {
        return this.http.get(this.endpoint_url + 'Patron/EditAuth/' + this.organizationId + "/" + patronId + "/" + authId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    // End Authetication Operations
    // Start Chart Operations for patron
    SetupService.prototype.onLeavePatronDetail = function (patronId, selectedDate) {
        return this.http.get(this.endpoint_url + 'Patron/Leave/OnLeave/' + this.organizationId + "/" + selectedDate + "/" + patronId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getPatronOnLeave = function (selectedDate) {
        return this.http.get(this.endpoint_url + 'Patron/Leave/OnLeave/' + this.organizationId + "/" + selectedDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getPatronOnLeaveByClass = function (patronClass, section, selectedDate) {
        return this.http.get(this.endpoint_url + 'Patron/Leave/OnLeave/' + this.organizationId + "/" + patronClass + "/" + section + "/" + selectedDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getPresentPatron = function (selectedDate) {
        return this.http.get(this.endpoint_url + 'Patron/Tracking/GetAll/' + this.organizationId + "/" + selectedDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    /* getEventTracking(selectedDate: any): Observable<EventTracking[]> {
         return this.http.get(this.endpoint_url + 'EventTracking/GetAll/' + this.organizationId + "/" + selectedDate)
             .map((res: Response) => res.json())
             .catch((error: any) => Observable.throw(error.json().error || 'Server error'));
     }
     getEventTrackingByEvent(selectedEvent: string, selectedDate: any): Observable<EventTracking[]> {
         return this.http.get(this.endpoint_url + 'EventTracking/GetAll/' + this.organizationId + "/" + selectedEvent + "/" + selectedDate)
             .map((res: Response) => res.json())
             .catch((error: any) => Observable.throw(error.json().error || 'Server error'));
     }*/
    SetupService.prototype.getEventTracking = function () {
        return this.http.get(this.endpoint_url + 'EventTracking/GetAll/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getEventTrackingByEvent = function (selectedEvent) {
        return this.http.get(this.endpoint_url + 'EventTracking/GetAll/' + this.organizationId + "/" + selectedEvent)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getClassPatron = function (patronClass, section, selectedDate) {
        return this.http.get(this.endpoint_url + 'Patron/GetAll/' + this.organizationId + "/" + patronClass + "/" + section + "/" + selectedDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.isStudentExistInClass = function (patronClass, section) {
        return this.http.get(this.endpoint_url + 'Patron/IsStudentExistInClass/' + this.organizationId + "/" + patronClass + "/" + section)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getClassByPatrons = function (patronClass) {
        return this.http.get(this.endpoint_url + 'Patron/ClassPatron/' + this.organizationId + "/" + patronClass)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getPresentPatronByClass = function (patronClass, section, selectedDate) {
        return this.http.get(this.endpoint_url + 'Patron/Tracking/GetAll/' + this.organizationId + "/" + patronClass + "/" + section + "/" + selectedDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getPatronTrackingSummary = function (selectedDate) {
        return this.http.get(this.endpoint_url + 'Patron/Tracking/Summary/' + this.organizationId + "/" + selectedDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getPatronTrackingForDate = function (patronId, selectedDate) {
        return this.http.get(this.endpoint_url + 'Patron/Tracking/GetPatron/' + this.organizationId + "/" + patronId + "/" + selectedDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getPatronTrackingSummaryByClass = function (patronClass, section, selectedDate) {
        return this.http.get(this.endpoint_url + 'Patron/Tracking/Summary/' + this.organizationId + "/" + patronClass + "/" + section + "/" + selectedDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    // Start Chart Operations for person
    SetupService.prototype.getPresentPerson = function (selectedDate) {
        return this.http.get(this.endpoint_url + 'Person/Tracking/GetAll/' + this.organizationId + "/" + selectedDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getPersonOnLeave = function (selectedDate) {
        return this.http.get(this.endpoint_url + 'Person/Leave/OnLeave/' + this.organizationId + "/" + selectedDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getPersonTrackingSummary = function (selectedDate) {
        return this.http.get(this.endpoint_url + 'Person/Tracking/Summary/' + this.organizationId + "/" + selectedDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    // End Chart Operations
    // Begin Map Operations
    SetupService.prototype.getTransportRouteBydate = function (routeId, currentDate) {
        return this.http.get(this.endpoint_url + 'RouteRun/Tracking/GetRunDirection/' + this.organizationId + "/" + routeId + "/" + currentDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getTranportRoute = function () {
        return this.http.get(this.endpoint_url + 'TransportRoute/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getTranportRouteWithDetails = function () {
        return this.http.get(this.endpoint_url + 'TransportRoute/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getTransportRouteById = function (routeId) {
        return this.http.get(this.endpoint_url + 'TransportRoute/' + this.organizationId + "/" + routeId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.createTransportRoute = function (transportRouteDetail) {
        return this.http.post(this.endpoint_url + 'TransportRoute', transportRouteDetail, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.updatetransportroute = function (transportid, transportroutedetail) {
        return this.http.put(this.endpoint_url + 'transportroute/' + this.organizationId + "/" + transportid, transportroutedetail, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.editPatronContactPerson1 = function (patronId, personId) {
        return this.http.get(this.endpoint_url + 'Patron/EditPerson/' + this.organizationId + "/" + patronId + "/" + personId, { headers: this.getHeaders() })
            .map(function (res) { return res.json(); });
    };
    SetupService.prototype.deleteTransportRoute = function (transportId) {
        return this.http.delete(this.endpoint_url + 'TransportRoute/' + this.organizationId + "/" + transportId) // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    SetupService.prototype.getTransportStoppageById = function (stoppageId) {
        return this.http.get(this.endpoint_url + 'TransportStoppage/' + this.organizationId + "/" + stoppageId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.createTransportStoppage = function (routeId, transportStoppageDetail) {
        return this.http.put(this.endpoint_url + 'Route/Stoppage/' + this.organizationId + "/" + routeId, transportStoppageDetail, { headers: this.getHeaders() })
            .map(function (res) { return res.json(); });
    };
    SetupService.prototype.editTransportStoppage = function (routeId, stoppageId) {
        return this.http.get(this.endpoint_url + 'Route/EditStoppage/' + this.organizationId + "/" + routeId + "/" + stoppageId, { headers: this.getHeaders() })
            .map(function (res) { return res.json(); });
    };
    SetupService.prototype.moveUpSequence = function (routeId, stoppageId, sequenceNo) {
        return this.http.get(this.endpoint_url + 'Route/MoveUp/' + this.organizationId + "/" + routeId + "/" + stoppageId + "/" + sequenceNo, { headers: this.getHeaders() })
            .map(function (res) { return res.json(); });
    };
    SetupService.prototype.moveDownSequence = function (routeId, stoppageId, sequenceNo) {
        return this.http.get(this.endpoint_url + 'Route/MoveDown/' + this.organizationId + "/" + routeId + "/" + stoppageId + "/" + sequenceNo, { headers: this.getHeaders() })
            .map(function (res) { return res.json(); });
    };
    SetupService.prototype.deleteTransportStoppage = function (transportRouteId, stoppageId) {
        return this.http.put(this.endpoint_url + 'Route/RemoveStoppage/' + this.organizationId + "/" + transportRouteId + "/" + stoppageId, "") // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    SetupService.prototype.getAllLocation = function (currentDate) {
        return this.http.get(this.endpoint_url + 'RouteMonitoring/GetLocations/' + this.organizationId + "/" + currentDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getRouteLocation = function (routeId, currentDate) {
        return this.http.get(this.endpoint_url + 'RouteMonitoring/GetLocation/' + this.organizationId + "/" + routeId + "/" + currentDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getRoutePatrons = function (routeId) {
        return this.http.get(this.endpoint_url + 'Route/Patrons/' + this.organizationId + "/" + routeId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.addPatronToStoppage = function (routeId, stoppageId, patronId) {
        return this.http
            .put(this.endpoint_url + 'Route/Stoppage/AddPatron/' + this.organizationId + "/" + routeId + "/" + stoppageId + "/" + patronId, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.RemovePatronToStoppage = function (routeId, stoppageId, patronId) {
        return this.http
            .put(this.endpoint_url + 'Route/Stoppage/RemovePatron/' + this.organizationId + "/" + routeId + "/" + stoppageId + "/" + patronId, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.getAllRouteInfo = function (currentDate) {
        return this.http.get(this.endpoint_url + 'Route/Tracking/Summary' + this.organizationId + "/" + currentDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getRouteStoppages = function (routeId) {
        return this.http.get(this.endpoint_url + 'Route/Stoppages/' + this.organizationId + "/" + routeId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getStoppagePatrons = function (stoppageId) {
        return this.http.get(this.endpoint_url + 'Route/Stoppage/Patrons/' + this.organizationId + "/" + stoppageId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getCount = function (routeNumber, currentDate) {
        return this.http.get(this.endpoint_url + 'Route/Tracking/Summary/' + this.organizationId + "/" + routeNumber + "/" + currentDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getAllRouteSummary = function (currentDate) {
        return this.http.get(this.endpoint_url + 'Route/Tracking/Summary/' + this.organizationId + "/" + currentDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getPersonTracking = function (routeNumber, currentDate) {
        return this.http.get(this.endpoint_url + 'Route/Tracking/PersonSummary/' + this.organizationId + "/" + routeNumber + "/" + currentDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    // End Map Operations
    //getTotalStudent() {
    //    this.http.get('/api/patron').subscribe(result => {
    //        this.patronList = result.json();
    //    });
    //    return this.patronList;
    //}
    SetupService.prototype.getAllRoutes = function () {
        var transportRoueDetail;
        this.http.get(this.endpoint_url + 'TransportRoute').subscribe(function (result) {
            transportRoueDetail = result.json();
        });
        //return transportRoueDetail
    };
    SetupService.prototype.getActiveDevice = function () {
        return this.http.get(this.endpoint_url + 'SetupDevice/GetAll/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.createTransportOutgoingMessage = function (outgoingMessage) {
        return this.http.post(this.endpoint_url + 'TransportMessage/CreateMessage', outgoingMessage, { headers: this.getHeaders() })
            .map(function (res) { return res.status; });
    };
    SetupService.prototype.getOutgoingTransportMessage = function () {
        return this.http.get(this.endpoint_url + 'TransportMessage/GetAllMessage/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getMessage = function () {
        return this.http.get(this.endpoint_url + 'MessageCenter/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getOutgoingMessage = function () {
        return this.http.get(this.endpoint_url + 'OutgoingMessage/GetAllMessage/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.deleteOutgoingMessages = function (messageId) {
        return this.http.delete(this.endpoint_url + 'OutgoingMessage/' + this.organizationId + "/" + messageId) // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    SetupService.prototype.deleteIncomingMessages = function (messageId) {
        return this.http.delete(this.endpoint_url + 'IncomingMessage/' + this.organizationId + "/" + messageId) // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    SetupService.prototype.getSavedMessage = function () {
        return this.http.get(this.endpoint_url + 'OutgoingMessage/SavedMessages/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getIncomingMessage = function () {
        return this.http.get(this.endpoint_url + 'IncomingMessage/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getMessageById = function (messageId) {
        return this.http.get(this.endpoint_url + 'MessageCenter/' + this.organizationId + "/" + messageId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.createMessage = function (messageCenter) {
        return this.http.post(this.endpoint_url + 'MessageCenter/CreateMessage', messageCenter, { headers: this.getHeaders() })
            .map(function (res) { return res.status; });
    };
    SetupService.prototype.createOutgoingMessage = function (outgoingMessage) {
        return this.http.post(this.endpoint_url + 'OutgoingMessage/CreateMessage', outgoingMessage, { headers: this.getHeaders() })
            .map(function (res) { return res.status; });
    };
    SetupService.prototype.updateMessage = function (messageid, messageCenter) {
        return this.http.put(this.endpoint_url + 'MessageCenter/' + this.organizationId + "/" + messageid, messageCenter, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.deleteMessage = function (messageid) {
        return this.http.delete(this.endpoint_url + 'MessageCenter/' + this.organizationId + "/" + messageid) // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    SetupService.prototype.updatePatronTransport = function (routeId, stoppageId, patronId) {
        return this.http.put(this.endpoint_url + 'Patron/UpdateTransport/' + this.organizationId + "/" + routeId + "/" + stoppageId + "/" + patronId, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.removePatronTransport = function (patronId) {
        return this.http.put(this.endpoint_url + 'Patron/RemoveTransport/' + this.organizationId + "/" + patronId, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.getTransportWalkingRequest = function (startDate, endDate) {
        //alert("startDate " + startDate);
        //alert("endDate " + endDate);
        return this.http.get(this.endpoint_url + 'TransportWalker/GetAllWalker/' + this.organizationId + "/" + startDate + "/" + endDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getTransportWalkingRequestByDate = function (selectedDate) {
        return this.http.get(this.endpoint_url + 'TransportWalker/GetWalkerBydate/' + this.organizationId + "/" + selectedDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.createTransportWalkingRequest = function (transportWalkingRequest) {
        return this.http.post(this.endpoint_url + 'TransportWalker', transportWalkingRequest, { headers: this.getHeaders() })
            .map(function (res) { return res.status; });
    };
    SetupService.prototype.deleteWalker = function (walkerId) {
        return this.http.delete(this.endpoint_url + 'TransportWalker/' + this.organizationId + "/" + walkerId) // ...using put request
            .map(function (res) { return res.status; }) // ...and calling .json() on the response to return data
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); }); //...errors if any
    };
    SetupService.prototype.updateAcknowledge = function (id, isAck) {
        return this.http.put(this.endpoint_url + 'TransportWalker/acknowledge/' + this.organizationId + "/" + id + "/" + isAck, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.getAllClassDevice = function (patronClass) {
        return this.http.get(this.endpoint_url + 'SetupDevice/ClassDevice/' + this.organizationId + "/" + patronClass)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getSectionDevice = function (patronClass, section) {
        return this.http.get(this.endpoint_url + 'SetupDevice/SectionDevice/' + this.organizationId + "/" + patronClass + "/" + section)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getTransportDevice = function () {
        return this.http.get(this.endpoint_url + 'SetupDevice/TransportDevice/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getAttendanceDevice = function () {
        return this.http.get(this.endpoint_url + 'SetupDevice/AttendanceDevice/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.sendToCloud = function (deviceId, message) {
        return this.http.post(this.endpoint_url + 'SendToCloud/' + deviceId, message, { headers: this.getHeaders() }).map(function (res) { return res.status; });
    };
    SetupService.prototype.getoutgoingMessageById = function (messageId) {
        return this.http.get(this.endpoint_url + 'OutgoingMessage/' + this.organizationId + "/" + messageId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getoutgoingMessageById1 = function (messageId, id) {
        return this.http.get(this.endpoint_url + 'OutgoingMessage/GetMessage' + this.organizationId + "/" + messageId + "/" + id)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getTransportRouteRun = function (currentDate) {
        return this.http.get(this.endpoint_url + 'RouteRun/Tracking/GetTransportRunDirection/' + this.organizationId + "/" + currentDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getPicupRun = function (currentDate) {
        return this.http.get(this.endpoint_url + 'RouteRun/Tracking/GetPickupRouteRun/' + this.organizationId + "/" + currentDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.getIP = function () {
        return this._Jsonp.get('//api.ipify.org/?format=jsonp&callback=JSONP_CALLBACK')
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    //getTransportStoppagesummary(transportRouteRunID: string, currentDate: string): Observable<TransportStoppageTracking[]> {
    //    return this.http.get(this.endpoint_url + 'Stoppage/Tracking/GetTransportStoppage/' + this.organizationId + "/" + transportRouteRunID + "/" + currentDate)
    //        .map((res: Response) => res.json())
    //        .catch((error: any) => Observable.throw(error.json().error || 'Server error'));
    //}
    SetupService.prototype.getTransportPatron = function () {
        return this.http.get(this.endpoint_url + 'Patron/GetTransportPatron/' + this.organizationId)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    //static dateValidator(control) {
    //    // RFC 2822 compliant regex
    //    if (this.sessionDetail.startDate > this.sessionDetail.endDate) {
    //        return null;
    //    } else {
    //        return { 'invalidEmailAddress': true };
    //    }
    //}
    SetupService.prototype.GetCurrentRouteRun = function (currentDate) {
        return this.http.get(this.endpoint_url + 'RouteRun/Tracking/GetCurrentRouteRun/' + this.organizationId + "/" + currentDate)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return Rx_1.Observable.throw(error.json().error || 'Server error'); });
    };
    SetupService.prototype.addCoordinates = function (routeRunMonitoring) {
        return this.http.post(this.endpoint_url + 'RouteMonitoring', routeRunMonitoring, { headers: this.getHeaders() })
            .map(function (res) { return res.status; });
    };
    return SetupService;
}());
SetupService = tslib_1.__decorate([
    core_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [http_1.Http, http_1.Jsonp])
], SetupService);
exports.SetupService = SetupService;
var Country = (function () {
    function Country(id, name) {
        this.id = id;
        this.name = name;
    }
    return Country;
}());
exports.Country = Country;
var State = (function () {
    function State(id, name) {
        this.id = id;
        this.name = name;
    }
    return State;
}());
exports.State = State;
var Sequence = (function () {
    function Sequence(id, name) {
        this.id = id;
        this.name = name;
    }
    return Sequence;
}());
exports.Sequence = Sequence;
// Services Not in used
// Login Services
//getAdminData(userId: string, password: string): Observable<AdminCredential> {
//    return this.http.get(this.endpoint_url + 'AdminCredential/GetAdminData/' + this.organizationId + "/" + userId + "/" + password)
//        .map((res: Response) => res.json())
//        .catch((error: any) => Observable.throw(error.json().error || 'server error'));
//}
//createLoginDetail(loginDetail: LoginDetail): Observable<number> {
//    return this.http.post(this.endpoint_url + 'LoginDetail', loginDetail, { headers: this.getHeaders() })
//        .map((res: Response) => res.status);
//}
//getLoginDetail(userId: string): Observable<LoginDetail> {
//    return this.http.get(this.endpoint_url + 'LoginDetail/LastLogin/' + this.organizationId + "/" + userId)
//        .map((res: Response) => res.json())
//        .catch((error: any) => Observable.throw(error.json().error || 'Server error'));
//}
////End Login Services 


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(173)

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(312)

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(320)

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var moment = __webpack_require__(0);
var AppSettings = (function () {
    function AppSettings() {
    }
    return AppSettings;
}());
AppSettings.ORGANIZATION_ID = localStorage.getItem("OrganizationId");
AppSettings.ADMIN_NAME = localStorage.getItem("GivenName") + " " + localStorage.getItem("SurName");
AppSettings.ADMIN_IMAGE = localStorage.getItem("ImgUrl");
AppSettings.ORGANIZATION_lOGO = localStorage.getItem("LogoUrl");
AppSettings.LAST_LOGIN = localStorage.getItem("LastLogin");
AppSettings.ADMIN_ID = localStorage.getItem("UserId");
AppSettings.API_ENDPOINT = 'http://dev.schoolwayz.com/api/';
AppSettings.IMAGE_ENDPOINT = 'https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/';
AppSettings.STOPPAGE_IMAGE = AppSettings.IMAGE_ENDPOINT + 'stop.png';
AppSettings.CHECK_IMAGE = AppSettings.IMAGE_ENDPOINT + 'check.png';
AppSettings.UNCHECK_IMAGE = AppSettings.IMAGE_ENDPOINT + 'uncheck.png';
AppSettings.CURRENT_DATE = moment(new Date()).format('YYYY-MM-DD');
AppSettings.CURRENT_TIME = moment(new Date()).format('HH:mm');
AppSettings.SELECTED_YEAR = moment(new Date()).format('YYYY');
AppSettings.SCHOOL_IMAGE = AppSettings.IMAGE_ENDPOINT + 'school.png';
AppSettings.NOTFOUND = "NotFound";
AppSettings.DEFAULT_IMAGE = "DefaultImage.jpg";
AppSettings.ALLROUTE_MARKER = AppSettings.IMAGE_ENDPOINT + 'allRouteIcon.png'; //'bus2.png';
AppSettings.COMMING_STOP_MARKER = AppSettings.IMAGE_ENDPOINT + 'commingStopIcon.png';
AppSettings.COVERED_STOP_MARKER = AppSettings.IMAGE_ENDPOINT + 'coverdStopIcon.png';
AppSettings.ROUTE_BUS = AppSettings.IMAGE_ENDPOINT + 'school-bus.png';
AppSettings.DRIVER = "Driver";
AppSettings.COORDINATOR = "Coordinator";
AppSettings.TEACHER = "Teacher";
AppSettings.INVALID_SEQUENCE = 'Not a valid Sequence';
AppSettings.SEQUENCE_CHANGED = 'Sequence Change Successfully';
AppSettings.STOPPGAE_SAVED = 'Stoppage Saved Successfully';
AppSettings.CHECK = AppSettings.IMAGE_ENDPOINT + 'Check.png';
AppSettings.UNCHECK = AppSettings.IMAGE_ENDPOINT + 'Uncheck.png';
exports.AppSettings = AppSettings;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var domhandler_1 = __webpack_require__(4);
var common_1 = __webpack_require__(3);
var Button = (function () {
    function Button(el, domHandler) {
        this.el = el;
        this.domHandler = domHandler;
        this.iconPos = 'left';
        this.cornerStyleClass = 'ui-corner-all';
    }
    Button.prototype.ngAfterViewInit = function () {
        this.domHandler.addMultipleClasses(this.el.nativeElement, this.getStyleClass());
        if (this.icon) {
            var iconElement = document.createElement("span");
            var iconPosClass = (this.iconPos == 'right') ? 'ui-button-icon-right' : 'ui-button-icon-left';
            iconElement.className = iconPosClass + ' ui-clickable fa fa-fw ' + this.icon;
            this.el.nativeElement.appendChild(iconElement);
        }
        var labelElement = document.createElement("span");
        labelElement.className = 'ui-button-text ui-clickable';
        labelElement.appendChild(document.createTextNode(this.label || 'ui-btn'));
        this.el.nativeElement.appendChild(labelElement);
        this.initialized = true;
    };
    Button.prototype.getStyleClass = function () {
        var styleClass = 'ui-button ui-widget ui-state-default ' + this.cornerStyleClass;
        if (this.icon) {
            if (this.label != null && this.label != undefined) {
                if (this.iconPos == 'left')
                    styleClass = styleClass + ' ui-button-text-icon-left';
                else
                    styleClass = styleClass + ' ui-button-text-icon-right';
            }
            else {
                styleClass = styleClass + ' ui-button-icon-only';
            }
        }
        else {
            styleClass = styleClass + ' ui-button-text-only';
        }
        return styleClass;
    };
    Object.defineProperty(Button.prototype, "label", {
        get: function () {
            return this._label;
        },
        set: function (val) {
            this._label = val;
            if (this.initialized) {
                this.domHandler.findSingle(this.el.nativeElement, '.ui-button-text').textContent = this._label;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        set: function (val) {
            this._icon = val;
            if (this.initialized) {
                var iconPosClass = (this.iconPos == 'right') ? 'ui-button-icon-right' : 'ui-button-icon-left';
                this.domHandler.findSingle(this.el.nativeElement, '.fa').className =
                    iconPosClass + ' ui-clickable fa fa-fw ' + this.icon;
            }
        },
        enumerable: true,
        configurable: true
    });
    Button.prototype.ngOnDestroy = function () {
        while (this.el.nativeElement.hasChildNodes()) {
            this.el.nativeElement.removeChild(this.el.nativeElement.lastChild);
        }
        this.initialized = false;
    };
    return Button;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Button.prototype, "iconPos", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Button.prototype, "cornerStyleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], Button.prototype, "label", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], Button.prototype, "icon", null);
Button = __decorate([
    core_1.Directive({
        selector: '[pButton]',
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler])
], Button);
exports.Button = Button;
var ButtonModule = (function () {
    function ButtonModule() {
    }
    return ButtonModule;
}());
ButtonModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Button],
        declarations: [Button]
    })
], ButtonModule);
exports.ButtonModule = ButtonModule;
//# sourceMappingURL=button.js.map

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__(1);
var Observable_1 = __webpack_require__(19);
var maps_api_loader_1 = __webpack_require__(22);
/**
 * Wrapper class that handles the communication with the Google Maps Javascript
 * API v3
 */
var GoogleMapsAPIWrapper = (function () {
    function GoogleMapsAPIWrapper(_loader, _zone) {
        var _this = this;
        this._loader = _loader;
        this._zone = _zone;
        this._map =
            new Promise(function (resolve) { _this._mapResolver = resolve; });
    }
    GoogleMapsAPIWrapper.prototype.createMap = function (el, mapOptions) {
        var _this = this;
        return this._loader.load().then(function () {
            var map = new google.maps.Map(el, mapOptions);
            _this._mapResolver(map);
            return;
        });
    };
    GoogleMapsAPIWrapper.prototype.setMapOptions = function (options) {
        this._map.then(function (m) { m.setOptions(options); });
    };
    /**
     * Creates a google map marker with the map context
     */
    GoogleMapsAPIWrapper.prototype.createMarker = function (options) {
        if (options === void 0) { options = {}; }
        return this._map.then(function (map) {
            options.map = map;
            return new google.maps.Marker(options);
        });
    };
    GoogleMapsAPIWrapper.prototype.createInfoWindow = function (options) {
        return this._map.then(function () { return new google.maps.InfoWindow(options); });
    };
    /**
     * Creates a google.map.Circle for the current map.
     */
    GoogleMapsAPIWrapper.prototype.createCircle = function (options) {
        return this._map.then(function (map) {
            options.map = map;
            return new google.maps.Circle(options);
        });
    };
    GoogleMapsAPIWrapper.prototype.createPolyline = function (options) {
        return this.getNativeMap().then(function (map) {
            var line = new google.maps.Polyline(options);
            line.setMap(map);
            return line;
        });
    };
    GoogleMapsAPIWrapper.prototype.createPolygon = function (options) {
        return this.getNativeMap().then(function (map) {
            var polygon = new google.maps.Polygon(options);
            polygon.setMap(map);
            return polygon;
        });
    };
    /**
     * Determines if given coordinates are insite a Polygon path.
     */
    GoogleMapsAPIWrapper.prototype.containsLocation = function (latLng, polygon) {
        return google.maps.geometry.poly.containsLocation(latLng, polygon);
    };
    GoogleMapsAPIWrapper.prototype.subscribeToMapEvent = function (eventName) {
        var _this = this;
        return Observable_1.Observable.create(function (observer) {
            _this._map.then(function (m) {
                m.addListener(eventName, function (arg) { _this._zone.run(function () { return observer.next(arg); }); });
            });
        });
    };
    GoogleMapsAPIWrapper.prototype.setCenter = function (latLng) {
        return this._map.then(function (map) { return map.setCenter(latLng); });
    };
    GoogleMapsAPIWrapper.prototype.getZoom = function () { return this._map.then(function (map) { return map.getZoom(); }); };
    GoogleMapsAPIWrapper.prototype.getBounds = function () {
        return this._map.then(function (map) { return map.getBounds(); });
    };
    GoogleMapsAPIWrapper.prototype.setZoom = function (zoom) {
        return this._map.then(function (map) { return map.setZoom(zoom); });
    };
    GoogleMapsAPIWrapper.prototype.getCenter = function () {
        return this._map.then(function (map) { return map.getCenter(); });
    };
    GoogleMapsAPIWrapper.prototype.panTo = function (latLng) {
        return this._map.then(function (map) { return map.panTo(latLng); });
    };
    GoogleMapsAPIWrapper.prototype.fitBounds = function (latLng) {
        return this._map.then(function (map) { return map.fitBounds(latLng); });
    };
    GoogleMapsAPIWrapper.prototype.panToBounds = function (latLng) {
        return this._map.then(function (map) { return map.panToBounds(latLng); });
    };
    /**
     * Returns the native Google Maps Map instance. Be careful when using this instance directly.
     */
    GoogleMapsAPIWrapper.prototype.getNativeMap = function () { return this._map; };
    /**
     * Triggers the given event name on the map instance.
     */
    GoogleMapsAPIWrapper.prototype.triggerMapEvent = function (eventName) {
        return this._map.then(function (m) { return google.maps.event.trigger(m, eventName); });
    };
    GoogleMapsAPIWrapper.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    GoogleMapsAPIWrapper.ctorParameters = function () { return [
        { type: maps_api_loader_1.MapsAPILoader, },
        { type: core_1.NgZone, },
    ]; };
    return GoogleMapsAPIWrapper;
}());
exports.GoogleMapsAPIWrapper = GoogleMapsAPIWrapper;
//# sourceMappingURL=google-maps-api-wrapper.js.map

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var ObjectUtils = (function () {
    function ObjectUtils() {
    }
    ObjectUtils.prototype.equals = function (obj1, obj2, field) {
        if (field)
            return (this.resolveFieldData(obj1, field) === this.resolveFieldData(obj2, field));
        else
            return this.equalsByValue(obj1, obj2);
    };
    ObjectUtils.prototype.equalsByValue = function (obj1, obj2) {
        if (obj1 == null && obj2 == null) {
            return true;
        }
        if (obj1 == null || obj2 == null) {
            return false;
        }
        if (obj1 == obj2) {
            delete obj1._$visited;
            return true;
        }
        if (typeof obj1 == 'object' && typeof obj2 == 'object') {
            obj1._$visited = true;
            for (var p in obj1) {
                if (p === "_$visited")
                    continue;
                if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) {
                    return false;
                }
                switch (typeof (obj1[p])) {
                    case 'object':
                        if (obj1[p] && obj1[p]._$visited || !this.equals(obj1[p], obj2[p]))
                            return false;
                        break;
                    case 'function':
                        if (typeof (obj2[p]) == 'undefined' || (p != 'compare' && obj1[p].toString() != obj2[p].toString()))
                            return false;
                        break;
                    default:
                        if (obj1[p] != obj2[p])
                            return false;
                        break;
                }
            }
            for (var p in obj2) {
                if (typeof (obj1[p]) == 'undefined')
                    return false;
            }
            delete obj1._$visited;
            return true;
        }
        return false;
    };
    ObjectUtils.prototype.resolveFieldData = function (data, field) {
        if (data && field) {
            if (field.indexOf('.') == -1) {
                return data[field];
            }
            else {
                var fields = field.split('.');
                var value = data;
                for (var i = 0, len = fields.length; i < len; ++i) {
                    if (value == null) {
                        return null;
                    }
                    value = value[fields[i]];
                }
                return value;
            }
        }
        else {
            return null;
        }
    };
    ObjectUtils.prototype.filter = function (value, fields, filterValue) {
        var filteredItems = [];
        if (value) {
            for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {
                var item = value_1[_i];
                for (var _a = 0, fields_1 = fields; _a < fields_1.length; _a++) {
                    var field = fields_1[_a];
                    if (String(this.resolveFieldData(item, field)).toLowerCase().indexOf(filterValue.toLowerCase()) > -1) {
                        filteredItems.push(item);
                        break;
                    }
                }
            }
        }
        return filteredItems;
    };
    ObjectUtils.prototype.reorderArray = function (value, from, to) {
        var target;
        if (value && (from !== to)) {
            if (to >= value.length) {
                target = to - value.length;
                while ((target--) + 1) {
                    value.push(undefined);
                }
            }
            value.splice(to, 0, value.splice(from, 1)[0]);
        }
    };
    return ObjectUtils;
}());
ObjectUtils = __decorate([
    core_1.Injectable()
], ObjectUtils);
exports.ObjectUtils = ObjectUtils;
//# sourceMappingURL=objectutils.js.map

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(0)

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var InputText = (function () {
    function InputText(el) {
        this.el = el;
    }
    InputText.prototype.ngDoCheck = function () {
        this.updateFilledState();
    };
    //To trigger change detection to manage ui-state-filled for material labels when there is no value binding
    InputText.prototype.onInput = function (e) {
        this.updateFilledState();
    };
    InputText.prototype.updateFilledState = function () {
        this.filled = this.el.nativeElement.value && this.el.nativeElement.value.length;
    };
    return InputText;
}());
__decorate([
    core_1.HostListener('input', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], InputText.prototype, "onInput", null);
InputText = __decorate([
    core_1.Directive({
        selector: '[pInputText]',
        host: {
            '[class.ui-inputtext]': 'true',
            '[class.ui-corner-all]': 'true',
            '[class.ui-state-default]': 'true',
            '[class.ui-widget]': 'true',
            '[class.ui-state-filled]': 'filled'
        }
    }),
    __metadata("design:paramtypes", [core_1.ElementRef])
], InputText);
exports.InputText = InputText;
var InputTextModule = (function () {
    function InputTextModule() {
    }
    return InputTextModule;
}());
InputTextModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [InputText],
        declarations: [InputText]
    })
], InputTextModule);
exports.InputTextModule = InputTextModule;
//# sourceMappingURL=inputtext.js.map

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__(1);
var Observable_1 = __webpack_require__(19);
var google_maps_api_wrapper_1 = __webpack_require__(17);
var MarkerManager = (function () {
    function MarkerManager(_mapsWrapper, _zone) {
        this._mapsWrapper = _mapsWrapper;
        this._zone = _zone;
        this._markers = new Map();
    }
    MarkerManager.prototype.deleteMarker = function (marker) {
        var _this = this;
        var m = this._markers.get(marker);
        if (m == null) {
            // marker already deleted
            return Promise.resolve();
        }
        return m.then(function (m) {
            return _this._zone.run(function () {
                m.setMap(null);
                _this._markers.delete(marker);
            });
        });
    };
    MarkerManager.prototype.updateMarkerPosition = function (marker) {
        return this._markers.get(marker).then(function (m) { return m.setPosition({ lat: marker.latitude, lng: marker.longitude }); });
    };
    MarkerManager.prototype.updateTitle = function (marker) {
        return this._markers.get(marker).then(function (m) { return m.setTitle(marker.title); });
    };
    MarkerManager.prototype.updateLabel = function (marker) {
        return this._markers.get(marker).then(function (m) { m.setLabel(marker.label); });
    };
    MarkerManager.prototype.updateDraggable = function (marker) {
        return this._markers.get(marker).then(function (m) { return m.setDraggable(marker.draggable); });
    };
    MarkerManager.prototype.updateIcon = function (marker) {
        return this._markers.get(marker).then(function (m) { return m.setIcon(marker.iconUrl); });
    };
    MarkerManager.prototype.updateOpacity = function (marker) {
        return this._markers.get(marker).then(function (m) { return m.setOpacity(marker.opacity); });
    };
    MarkerManager.prototype.updateVisible = function (marker) {
        return this._markers.get(marker).then(function (m) { return m.setVisible(marker.visible); });
    };
    MarkerManager.prototype.updateZIndex = function (marker) {
        return this._markers.get(marker).then(function (m) { return m.setZIndex(marker.zIndex); });
    };
    MarkerManager.prototype.addMarker = function (marker) {
        var markerPromise = this._mapsWrapper.createMarker({
            position: { lat: marker.latitude, lng: marker.longitude },
            label: marker.label,
            draggable: marker.draggable,
            icon: marker.iconUrl,
            opacity: marker.opacity,
            visible: marker.visible,
            zIndex: marker.zIndex,
            title: marker.title
        });
        this._markers.set(marker, markerPromise);
    };
    MarkerManager.prototype.getNativeMarker = function (marker) {
        return this._markers.get(marker);
    };
    MarkerManager.prototype.createEventObservable = function (eventName, marker) {
        var _this = this;
        return Observable_1.Observable.create(function (observer) {
            _this._markers.get(marker).then(function (m) {
                m.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });
            });
        });
    };
    MarkerManager.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    MarkerManager.ctorParameters = function () { return [
        { type: google_maps_api_wrapper_1.GoogleMapsAPIWrapper, },
        { type: core_1.NgZone, },
    ]; };
    return MarkerManager;
}());
exports.MarkerManager = MarkerManager;
//# sourceMappingURL=marker-manager.js.map

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__(1);
var MapsAPILoader = (function () {
    function MapsAPILoader() {
    }
    MapsAPILoader.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    MapsAPILoader.ctorParameters = function () { return []; };
    return MapsAPILoader;
}());
exports.MapsAPILoader = MapsAPILoader;
//# sourceMappingURL=maps-api-loader.js.map

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var UUID = (function () {
    function UUID() {
        // no-op
    }
    UUID.UUID = function () {
        if (typeof (window) !== "undefined" && typeof (window.crypto) !== "undefined" && typeof (window.crypto.getRandomValues) !== "undefined") {
            // If we have a cryptographically secure PRNG, use that
            // http://stackoverflow.com/questions/6906916/collisions-when-generating-uuids-in-javascript
            var buf = new Uint16Array(8);
            window.crypto.getRandomValues(buf);
            return (this.pad4(buf[0]) + this.pad4(buf[1]) + "-" + this.pad4(buf[2]) + "-" + this.pad4(buf[3]) + "-" + this.pad4(buf[4]) + "-" + this.pad4(buf[5]) + this.pad4(buf[6]) + this.pad4(buf[7]));
        }
        else {
            // Otherwise, just use Math.random
            // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
            // https://stackoverflow.com/questions/11605068/why-does-jshint-argue-against-bitwise-operators-how-should-i-express-this-code
            return this.random4() + this.random4() + "-" + this.random4() + "-" + this.random4() + "-" +
                this.random4() + "-" + this.random4() + this.random4() + this.random4();
        }
    };
    UUID.pad4 = function (num) {
        var ret = num.toString(16);
        while (ret.length < 4) {
            ret = "0" + ret;
        }
        return ret;
    };
    UUID.random4 = function () {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    };
    return UUID;
}());
exports.UUID = UUID;
//# sourceMappingURL=index.js.map

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var Paginator = (function () {
    function Paginator() {
        this.pageLinkSize = 5;
        this.onPageChange = new core_1.EventEmitter();
        this.alwaysShow = true;
        this._totalRecords = 0;
        this._first = 0;
        this._rows = 0;
    }
    Object.defineProperty(Paginator.prototype, "totalRecords", {
        get: function () {
            return this._totalRecords;
        },
        set: function (val) {
            this._totalRecords = val;
            this.updatePageLinks();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Paginator.prototype, "first", {
        get: function () {
            return this._first;
        },
        set: function (val) {
            this._first = val;
            this.updatePageLinks();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Paginator.prototype, "rows", {
        get: function () {
            return this._rows;
        },
        set: function (val) {
            this._rows = val;
            this.updatePageLinks();
        },
        enumerable: true,
        configurable: true
    });
    Paginator.prototype.isFirstPage = function () {
        return this.getPage() === 0;
    };
    Paginator.prototype.isLastPage = function () {
        return this.getPage() === this.getPageCount() - 1;
    };
    Paginator.prototype.getPageCount = function () {
        return Math.ceil(this.totalRecords / this.rows) || 1;
    };
    Paginator.prototype.calculatePageLinkBoundaries = function () {
        var numberOfPages = this.getPageCount(), visiblePages = Math.min(this.pageLinkSize, numberOfPages);
        //calculate range, keep current in middle if necessary
        var start = Math.max(0, Math.ceil(this.getPage() - ((visiblePages) / 2))), end = Math.min(numberOfPages - 1, start + visiblePages - 1);
        //check when approaching to last page
        var delta = this.pageLinkSize - (end - start + 1);
        start = Math.max(0, start - delta);
        return [start, end];
    };
    Paginator.prototype.updatePageLinks = function () {
        this.pageLinks = [];
        var boundaries = this.calculatePageLinkBoundaries(), start = boundaries[0], end = boundaries[1];
        for (var i = start; i <= end; i++) {
            this.pageLinks.push(i + 1);
        }
    };
    Paginator.prototype.changePage = function (p, event) {
        var pc = this.getPageCount();
        if (p >= 0 && p < pc) {
            this.first = this.rows * p;
            var state = {
                page: p,
                first: this.first,
                rows: this.rows,
                pageCount: pc
            };
            this.updatePageLinks();
            this.onPageChange.emit(state);
        }
        if (event) {
            event.preventDefault();
        }
    };
    Paginator.prototype.getPage = function () {
        return Math.floor(this.first / this.rows);
    };
    Paginator.prototype.changePageToFirst = function (event) {
        this.changePage(0, event);
    };
    Paginator.prototype.changePageToPrev = function (event) {
        this.changePage(this.getPage() - 1, event);
    };
    Paginator.prototype.changePageToNext = function (event) {
        this.changePage(this.getPage() + 1, event);
    };
    Paginator.prototype.changePageToLast = function (event) {
        this.changePage(this.getPageCount() - 1, event);
    };
    Paginator.prototype.onRppChange = function (event) {
        this.rows = this.rowsPerPageOptions[event.target.selectedIndex];
        this.changePageToFirst(event);
    };
    return Paginator;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Paginator.prototype, "pageLinkSize", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Paginator.prototype, "onPageChange", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Paginator.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Paginator.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], Paginator.prototype, "rowsPerPageOptions", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Paginator.prototype, "alwaysShow", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], Paginator.prototype, "totalRecords", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], Paginator.prototype, "first", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], Paginator.prototype, "rows", null);
Paginator = __decorate([
    core_1.Component({
        selector: 'p-paginator',
        template: "\n        <div [class]=\"styleClass\" [ngStyle]=\"style\" [ngClass]=\"'ui-paginator ui-widget ui-widget-header ui-unselectable-text'\"\n            *ngIf=\"alwaysShow ? true : (pageLinks && pageLinks.length > 1)\">\n            <a href=\"#\" class=\"ui-paginator-first ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToFirst($event)\" [ngClass]=\"{'ui-state-disabled':isFirstPage()}\" [tabindex]=\"isFirstPage() ? -1 : null\">\n                <span class=\"fa fa-step-backward\"></span>\n            </a>\n            <a href=\"#\" class=\"ui-paginator-prev ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToPrev($event)\" [ngClass]=\"{'ui-state-disabled':isFirstPage()}\" [tabindex]=\"isFirstPage() ? -1 : null\">\n                <span class=\"fa fa-backward\"></span>\n            </a>\n            <span class=\"ui-paginator-pages\">\n                <a href=\"#\" *ngFor=\"let pageLink of pageLinks\" class=\"ui-paginator-page ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePage(pageLink - 1, $event)\" [ngClass]=\"{'ui-state-active': (pageLink-1 == getPage())}\">{{pageLink}}</a>\n            </span>\n            <a href=\"#\" class=\"ui-paginator-next ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToNext($event)\" [ngClass]=\"{'ui-state-disabled':isLastPage()}\" [tabindex]=\"isLastPage() ? -1 : null\">\n                <span class=\"fa fa-forward\"></span>\n            </a>\n            <a href=\"#\" class=\"ui-paginator-last ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToLast($event)\" [ngClass]=\"{'ui-state-disabled':isLastPage()}\" [tabindex]=\"isLastPage() ? -1 : null\">\n                <span class=\"fa fa-step-forward\"></span>\n            </a>\n            <select class=\"ui-paginator-rpp-options ui-widget ui-state-default\" *ngIf=\"rowsPerPageOptions\" (change)=\"onRppChange($event)\">\n                <option *ngFor=\"let opt of rowsPerPageOptions\" [value]=\"opt\" [selected]=\"rows == opt\">{{opt}}</option>\n            </select>\n        </div>\n    "
    })
], Paginator);
exports.Paginator = Paginator;
var PaginatorModule = (function () {
    function PaginatorModule() {
    }
    return PaginatorModule;
}());
PaginatorModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Paginator],
        declarations: [Paginator]
    })
], PaginatorModule);
exports.PaginatorModule = PaginatorModule;
//# sourceMappingURL=paginator.js.map

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(70)

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__(1);
var info_window_manager_1 = __webpack_require__(29);
var infoWindowId = 0;
/**
 * SebmGoogleMapInfoWindow renders a info window inside a {@link SebmGoogleMapMarker} or standalone.
 *
 * ### Example
 * ```typescript
 * import { Component } from 'angular2/core';
 * import { SebmGoogleMap, SebmGoogleMapMarker, SebmGoogleMapInfoWindow } from
 * 'angular2-google-maps/core';
 *
 * @Component({
 *  selector: 'my-map-cmp',
 *  directives: [SebmGoogleMap, SebmGoogleMapMarker, SebmGoogleMapInfoWindow],
 *  styles: [`
 *    .sebm-google-map-container {
 *      height: 300px;
 *    }
 * `],
 *  template: `
 *    <sebm-google-map [latitude]="lat" [longitude]="lng" [zoom]="zoom">
 *      <sebm-google-map-marker [latitude]="lat" [longitude]="lng" [label]="'M'">
 *        <sebm-google-map-info-window [disableAutoPan]="true">
 *          Hi, this is the content of the <strong>info window</strong>
 *        </sebm-google-map-info-window>
 *      </sebm-google-map-marker>
 *    </sebm-google-map>
 *  `
 * })
 * ```
 */
var SebmGoogleMapInfoWindow = (function () {
    function SebmGoogleMapInfoWindow(_infoWindowManager, _el) {
        this._infoWindowManager = _infoWindowManager;
        this._el = _el;
        /**
         * Sets the open state for the InfoWindow. You can also call the open() and close() methods.
         */
        this.isOpen = false;
        /**
         * Emits an event when the info window is closed.
         */
        this.infoWindowClose = new core_1.EventEmitter();
        this._infoWindowAddedToManager = false;
        this._id = (infoWindowId++).toString();
    }
    SebmGoogleMapInfoWindow.prototype.ngOnInit = function () {
        this.content = this._el.nativeElement.querySelector('.sebm-google-map-info-window-content');
        this._infoWindowManager.addInfoWindow(this);
        this._infoWindowAddedToManager = true;
        this._updateOpenState();
        this._registerEventListeners();
    };
    /** @internal */
    SebmGoogleMapInfoWindow.prototype.ngOnChanges = function (changes) {
        if (!this._infoWindowAddedToManager) {
            return;
        }
        if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' &&
            typeof this.longitude === 'number') {
            this._infoWindowManager.setPosition(this);
        }
        if (changes['zIndex']) {
            this._infoWindowManager.setZIndex(this);
        }
        if (changes['isOpen']) {
            this._updateOpenState();
        }
        this._setInfoWindowOptions(changes);
    };
    SebmGoogleMapInfoWindow.prototype._registerEventListeners = function () {
        var _this = this;
        this._infoWindowManager.createEventObservable('closeclick', this).subscribe(function () {
            _this.isOpen = false;
            _this.infoWindowClose.emit();
        });
    };
    SebmGoogleMapInfoWindow.prototype._updateOpenState = function () {
        this.isOpen ? this.open() : this.close();
    };
    SebmGoogleMapInfoWindow.prototype._setInfoWindowOptions = function (changes) {
        var options = {};
        var optionKeys = Object.keys(changes).filter(function (k) { return SebmGoogleMapInfoWindow._infoWindowOptionsInputs.indexOf(k) !== -1; });
        optionKeys.forEach(function (k) { options[k] = changes[k].currentValue; });
        this._infoWindowManager.setOptions(this, options);
    };
    /**
     * Opens the info window.
     */
    SebmGoogleMapInfoWindow.prototype.open = function () { return this._infoWindowManager.open(this); };
    /**
     * Closes the info window.
     */
    SebmGoogleMapInfoWindow.prototype.close = function () {
        var _this = this;
        return this._infoWindowManager.close(this).then(function () { _this.infoWindowClose.emit(); });
    };
    /** @internal */
    SebmGoogleMapInfoWindow.prototype.id = function () { return this._id; };
    /** @internal */
    SebmGoogleMapInfoWindow.prototype.toString = function () { return 'SebmGoogleMapInfoWindow-' + this._id.toString(); };
    /** @internal */
    SebmGoogleMapInfoWindow.prototype.ngOnDestroy = function () { this._infoWindowManager.deleteInfoWindow(this); };
    SebmGoogleMapInfoWindow._infoWindowOptionsInputs = ['disableAutoPan', 'maxWidth'];
    SebmGoogleMapInfoWindow.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'sebm-google-map-info-window',
                    inputs: ['latitude', 'longitude', 'disableAutoPan', 'isOpen', 'zIndex', 'maxWidth'],
                    outputs: ['infoWindowClose'],
                    template: "<div class='sebm-google-map-info-window-content'>\n      <ng-content></ng-content>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    SebmGoogleMapInfoWindow.ctorParameters = function () { return [
        { type: info_window_manager_1.InfoWindowManager, },
        { type: core_1.ElementRef, },
    ]; };
    return SebmGoogleMapInfoWindow;
}());
exports.SebmGoogleMapInfoWindow = SebmGoogleMapInfoWindow;
//# sourceMappingURL=google-map-info-window.js.map

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__(1);
/**
 * SebmGoogleMapPolylinePoint represents one element of a polyline within a  {@link
 * SembGoogleMapPolyline}
 */
var SebmGoogleMapPolylinePoint = (function () {
    function SebmGoogleMapPolylinePoint() {
        /**
         * This event emitter gets emitted when the position of the point changed.
         */
        this.positionChanged = new core_1.EventEmitter();
    }
    SebmGoogleMapPolylinePoint.prototype.ngOnChanges = function (changes) {
        if (changes['latitude'] || changes['longitude']) {
            var position = {
                lat: changes['latitude'].currentValue,
                lng: changes['longitude'].currentValue
            };
            this.positionChanged.emit(position);
        }
    };
    SebmGoogleMapPolylinePoint.decorators = [
        { type: core_1.Directive, args: [{ selector: 'sebm-google-map-polyline-point' },] },
    ];
    /** @nocollapse */
    SebmGoogleMapPolylinePoint.ctorParameters = function () { return []; };
    SebmGoogleMapPolylinePoint.propDecorators = {
        'latitude': [{ type: core_1.Input },],
        'longitude': [{ type: core_1.Input },],
        'positionChanged': [{ type: core_1.Output },],
    };
    return SebmGoogleMapPolylinePoint;
}());
exports.SebmGoogleMapPolylinePoint = SebmGoogleMapPolylinePoint;
//# sourceMappingURL=google-map-polyline-point.js.map

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__(1);
var Observable_1 = __webpack_require__(19);
var google_maps_api_wrapper_1 = __webpack_require__(17);
var CircleManager = (function () {
    function CircleManager(_apiWrapper, _zone) {
        this._apiWrapper = _apiWrapper;
        this._zone = _zone;
        this._circles = new Map();
    }
    CircleManager.prototype.addCircle = function (circle) {
        this._circles.set(circle, this._apiWrapper.createCircle({
            center: { lat: circle.latitude, lng: circle.longitude },
            clickable: circle.clickable,
            draggable: circle.draggable,
            editable: circle.editable,
            fillColor: circle.fillColor,
            fillOpacity: circle.fillOpacity,
            radius: circle.radius,
            strokeColor: circle.strokeColor,
            strokeOpacity: circle.strokeOpacity,
            strokePosition: circle.strokePosition,
            strokeWeight: circle.strokeWeight,
            visible: circle.visible,
            zIndex: circle.zIndex
        }));
    };
    ;
    /**
     * Removes the given circle from the map.
     */
    CircleManager.prototype.removeCircle = function (circle) {
        var _this = this;
        return this._circles.get(circle).then(function (c) {
            c.setMap(null);
            _this._circles.delete(circle);
        });
    };
    CircleManager.prototype.setOptions = function (circle, options) {
        return this._circles.get(circle).then(function (c) { return c.setOptions(options); });
    };
    ;
    CircleManager.prototype.getBounds = function (circle) {
        return this._circles.get(circle).then(function (c) { return c.getBounds(); });
    };
    ;
    CircleManager.prototype.getCenter = function (circle) {
        return this._circles.get(circle).then(function (c) { return c.getCenter(); });
    };
    ;
    CircleManager.prototype.getRadius = function (circle) {
        return this._circles.get(circle).then(function (c) { return c.getRadius(); });
    };
    CircleManager.prototype.setCenter = function (circle) {
        return this._circles.get(circle).then(function (c) { return c.setCenter({ lat: circle.latitude, lng: circle.longitude }); });
    };
    ;
    CircleManager.prototype.setEditable = function (circle) {
        return this._circles.get(circle).then(function (c) { return c.setEditable(circle.editable); });
    };
    ;
    CircleManager.prototype.setDraggable = function (circle) {
        return this._circles.get(circle).then(function (c) { return c.setDraggable(circle.draggable); });
    };
    ;
    CircleManager.prototype.setVisible = function (circle) {
        return this._circles.get(circle).then(function (c) { return c.setVisible(circle.visible); });
    };
    ;
    CircleManager.prototype.setRadius = function (circle) {
        return this._circles.get(circle).then(function (c) { return c.setRadius(circle.radius); });
    };
    ;
    CircleManager.prototype.createEventObservable = function (eventName, circle) {
        var _this = this;
        return Observable_1.Observable.create(function (observer) {
            var listener = null;
            _this._circles.get(circle).then(function (c) {
                listener = c.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });
            });
            return function () {
                if (listener !== null) {
                    listener.remove();
                }
            };
        });
    };
    CircleManager.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    CircleManager.ctorParameters = function () { return [
        { type: google_maps_api_wrapper_1.GoogleMapsAPIWrapper, },
        { type: core_1.NgZone, },
    ]; };
    return CircleManager;
}());
exports.CircleManager = CircleManager;
//# sourceMappingURL=circle-manager.js.map

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(19);
var core_1 = __webpack_require__(1);
var google_maps_api_wrapper_1 = __webpack_require__(17);
var marker_manager_1 = __webpack_require__(21);
var InfoWindowManager = (function () {
    function InfoWindowManager(_mapsWrapper, _zone, _markerManager) {
        this._mapsWrapper = _mapsWrapper;
        this._zone = _zone;
        this._markerManager = _markerManager;
        this._infoWindows = new Map();
    }
    InfoWindowManager.prototype.deleteInfoWindow = function (infoWindow) {
        var _this = this;
        var iWindow = this._infoWindows.get(infoWindow);
        if (iWindow == null) {
            // info window already deleted
            return Promise.resolve();
        }
        return iWindow.then(function (i) {
            return _this._zone.run(function () {
                i.close();
                _this._infoWindows.delete(infoWindow);
            });
        });
    };
    InfoWindowManager.prototype.setPosition = function (infoWindow) {
        return this._infoWindows.get(infoWindow).then(function (i) { return i.setPosition({
            lat: infoWindow.latitude,
            lng: infoWindow.longitude
        }); });
    };
    InfoWindowManager.prototype.setZIndex = function (infoWindow) {
        return this._infoWindows.get(infoWindow)
            .then(function (i) { return i.setZIndex(infoWindow.zIndex); });
    };
    InfoWindowManager.prototype.open = function (infoWindow) {
        var _this = this;
        return this._infoWindows.get(infoWindow).then(function (w) {
            if (infoWindow.hostMarker != null) {
                return _this._markerManager.getNativeMarker(infoWindow.hostMarker).then(function (marker) {
                    return _this._mapsWrapper.getNativeMap().then(function (map) { return w.open(map, marker); });
                });
            }
            return _this._mapsWrapper.getNativeMap().then(function (map) { return w.open(map); });
        });
    };
    InfoWindowManager.prototype.close = function (infoWindow) {
        return this._infoWindows.get(infoWindow).then(function (w) { return w.close(); });
    };
    InfoWindowManager.prototype.setOptions = function (infoWindow, options) {
        return this._infoWindows.get(infoWindow).then(function (i) { return i.setOptions(options); });
    };
    InfoWindowManager.prototype.addInfoWindow = function (infoWindow) {
        var options = {
            content: infoWindow.content,
            maxWidth: infoWindow.maxWidth,
            zIndex: infoWindow.zIndex,
        };
        if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {
            options.position = { lat: infoWindow.latitude, lng: infoWindow.longitude };
        }
        var infoWindowPromise = this._mapsWrapper.createInfoWindow(options);
        this._infoWindows.set(infoWindow, infoWindowPromise);
    };
    /**
     * Creates a Google Maps event listener for the given InfoWindow as an Observable
     */
    InfoWindowManager.prototype.createEventObservable = function (eventName, infoWindow) {
        var _this = this;
        return Observable_1.Observable.create(function (observer) {
            _this._infoWindows.get(infoWindow).then(function (i) {
                i.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });
            });
        });
    };
    InfoWindowManager.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    InfoWindowManager.ctorParameters = function () { return [
        { type: google_maps_api_wrapper_1.GoogleMapsAPIWrapper, },
        { type: core_1.NgZone, },
        { type: marker_manager_1.MarkerManager, },
    ]; };
    return InfoWindowManager;
}());
exports.InfoWindowManager = InfoWindowManager;
//# sourceMappingURL=info-window-manager.js.map

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__(1);
var Observable_1 = __webpack_require__(19);
var google_maps_api_wrapper_1 = __webpack_require__(17);
/**
 * Manages all KML Layers for a Google Map instance.
 */
var KmlLayerManager = (function () {
    function KmlLayerManager(_wrapper, _zone) {
        this._wrapper = _wrapper;
        this._zone = _zone;
        this._layers = new Map();
    }
    /**
     * Adds a new KML Layer to the map.
     */
    KmlLayerManager.prototype.addKmlLayer = function (layer) {
        var newLayer = this._wrapper.getNativeMap().then(function (m) {
            return new google.maps.KmlLayer({
                clickable: layer.clickable,
                map: m,
                preserveViewport: layer.preserveViewport,
                screenOverlays: layer.screenOverlays,
                suppressInfoWindows: layer.suppressInfoWindows,
                url: layer.url,
                zIndex: layer.zIndex
            });
        });
        this._layers.set(layer, newLayer);
    };
    KmlLayerManager.prototype.setOptions = function (layer, options) {
        this._layers.get(layer).then(function (l) { return l.setOptions(options); });
    };
    KmlLayerManager.prototype.deleteKmlLayer = function (layer) {
        var _this = this;
        this._layers.get(layer).then(function (l) {
            l.setMap(null);
            _this._layers.delete(layer);
        });
    };
    /**
     * Creates a Google Maps event listener for the given KmlLayer as an Observable
     */
    KmlLayerManager.prototype.createEventObservable = function (eventName, layer) {
        var _this = this;
        return Observable_1.Observable.create(function (observer) {
            _this._layers.get(layer).then(function (m) {
                m.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });
            });
        });
    };
    KmlLayerManager.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    KmlLayerManager.ctorParameters = function () { return [
        { type: google_maps_api_wrapper_1.GoogleMapsAPIWrapper, },
        { type: core_1.NgZone, },
    ]; };
    return KmlLayerManager;
}());
exports.KmlLayerManager = KmlLayerManager;
//# sourceMappingURL=kml-layer-manager.js.map

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__(1);
var Observable_1 = __webpack_require__(19);
var google_maps_api_wrapper_1 = __webpack_require__(17);
var PolygonManager = (function () {
    function PolygonManager(_mapsWrapper, _zone) {
        this._mapsWrapper = _mapsWrapper;
        this._zone = _zone;
        this._polygons = new Map();
    }
    PolygonManager.prototype.addPolygon = function (path) {
        var polygonPromise = this._mapsWrapper.createPolygon({
            clickable: path.clickable,
            draggable: path.draggable,
            editable: path.editable,
            fillColor: path.fillColor,
            fillOpacity: path.fillOpacity,
            geodesic: path.geodesic,
            paths: path.paths,
            strokeColor: path.strokeColor,
            strokeOpacity: path.strokeOpacity,
            strokeWeight: path.strokeWeight,
            visible: path.visible,
            zIndex: path.zIndex,
        });
        this._polygons.set(path, polygonPromise);
    };
    PolygonManager.prototype.updatePolygon = function (polygon) {
        var _this = this;
        var m = this._polygons.get(polygon);
        if (m == null) {
            return Promise.resolve();
        }
        return m.then(function (l) { return _this._zone.run(function () { l.setPaths(polygon.paths); }); });
    };
    PolygonManager.prototype.setPolygonOptions = function (path, options) {
        return this._polygons.get(path).then(function (l) { l.setOptions(options); });
    };
    PolygonManager.prototype.deletePolygon = function (paths) {
        var _this = this;
        var m = this._polygons.get(paths);
        if (m == null) {
            return Promise.resolve();
        }
        return m.then(function (l) {
            return _this._zone.run(function () {
                l.setMap(null);
                _this._polygons.delete(paths);
            });
        });
    };
    PolygonManager.prototype.createEventObservable = function (eventName, path) {
        var _this = this;
        return Observable_1.Observable.create(function (observer) {
            _this._polygons.get(path).then(function (l) {
                l.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });
            });
        });
    };
    PolygonManager.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    PolygonManager.ctorParameters = function () { return [
        { type: google_maps_api_wrapper_1.GoogleMapsAPIWrapper, },
        { type: core_1.NgZone, },
    ]; };
    return PolygonManager;
}());
exports.PolygonManager = PolygonManager;
//# sourceMappingURL=polygon-manager.js.map

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__(1);
var Observable_1 = __webpack_require__(19);
var google_maps_api_wrapper_1 = __webpack_require__(17);
var PolylineManager = (function () {
    function PolylineManager(_mapsWrapper, _zone) {
        this._mapsWrapper = _mapsWrapper;
        this._zone = _zone;
        this._polylines = new Map();
    }
    PolylineManager._convertPoints = function (line) {
        var path = line._getPoints().map(function (point) {
            return { lat: point.latitude, lng: point.longitude };
        });
        return path;
    };
    PolylineManager.prototype.addPolyline = function (line) {
        var path = PolylineManager._convertPoints(line);
        var polylinePromise = this._mapsWrapper.createPolyline({
            clickable: line.clickable,
            draggable: line.draggable,
            editable: line.editable,
            geodesic: line.geodesic,
            strokeColor: line.strokeColor,
            strokeOpacity: line.strokeOpacity,
            strokeWeight: line.strokeWeight,
            visible: line.visible,
            zIndex: line.zIndex,
            path: path
        });
        this._polylines.set(line, polylinePromise);
    };
    PolylineManager.prototype.updatePolylinePoints = function (line) {
        var _this = this;
        var path = PolylineManager._convertPoints(line);
        var m = this._polylines.get(line);
        if (m == null) {
            return Promise.resolve();
        }
        return m.then(function (l) { return _this._zone.run(function () { l.setPath(path); }); });
    };
    PolylineManager.prototype.setPolylineOptions = function (line, options) {
        return this._polylines.get(line).then(function (l) { l.setOptions(options); });
    };
    PolylineManager.prototype.deletePolyline = function (line) {
        var _this = this;
        var m = this._polylines.get(line);
        if (m == null) {
            return Promise.resolve();
        }
        return m.then(function (l) {
            return _this._zone.run(function () {
                l.setMap(null);
                _this._polylines.delete(line);
            });
        });
    };
    PolylineManager.prototype.createEventObservable = function (eventName, line) {
        var _this = this;
        return Observable_1.Observable.create(function (observer) {
            _this._polylines.get(line).then(function (l) {
                l.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });
            });
        });
    };
    PolylineManager.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    PolylineManager.ctorParameters = function () { return [
        { type: google_maps_api_wrapper_1.GoogleMapsAPIWrapper, },
        { type: core_1.NgZone, },
    ]; };
    return PolylineManager;
}());
exports.PolylineManager = PolylineManager;
//# sourceMappingURL=polyline-manager.js.map

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(1);
var browser_globals_1 = __webpack_require__(42);
var maps_api_loader_1 = __webpack_require__(22);
(function (GoogleMapsScriptProtocol) {
    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol["HTTP"] = 1] = "HTTP";
    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol["HTTPS"] = 2] = "HTTPS";
    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol["AUTO"] = 3] = "AUTO";
})(exports.GoogleMapsScriptProtocol || (exports.GoogleMapsScriptProtocol = {}));
var GoogleMapsScriptProtocol = exports.GoogleMapsScriptProtocol;
/**
 * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link
 * LazyMapsAPILoaderConfig}.
 */
exports.LAZY_MAPS_API_CONFIG = new core_1.OpaqueToken('angular2-google-maps LAZY_MAPS_API_CONFIG');
var LazyMapsAPILoader = (function (_super) {
    __extends(LazyMapsAPILoader, _super);
    function LazyMapsAPILoader(config, w, d) {
        _super.call(this);
        this._config = config || {};
        this._windowRef = w;
        this._documentRef = d;
    }
    LazyMapsAPILoader.prototype.load = function () {
        var _this = this;
        if (this._scriptLoadingPromise) {
            return this._scriptLoadingPromise;
        }
        var script = this._documentRef.getNativeDocument().createElement('script');
        script.type = 'text/javascript';
        script.async = true;
        script.defer = true;
        var callbackName = "angular2GoogleMapsLazyMapsAPILoader";
        script.src = this._getScriptSrc(callbackName);
        this._scriptLoadingPromise = new Promise(function (resolve, reject) {
            _this._windowRef.getNativeWindow()[callbackName] = function () { resolve(); };
            script.onerror = function (error) { reject(error); };
        });
        this._documentRef.getNativeDocument().body.appendChild(script);
        return this._scriptLoadingPromise;
    };
    LazyMapsAPILoader.prototype._getScriptSrc = function (callbackName) {
        var protocolType = (this._config && this._config.protocol) || GoogleMapsScriptProtocol.HTTPS;
        var protocol;
        switch (protocolType) {
            case GoogleMapsScriptProtocol.AUTO:
                protocol = '';
                break;
            case GoogleMapsScriptProtocol.HTTP:
                protocol = 'http:';
                break;
            case GoogleMapsScriptProtocol.HTTPS:
                protocol = 'https:';
                break;
        }
        var hostAndPath = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';
        var queryParams = {
            v: this._config.apiVersion || '3',
            callback: callbackName,
            key: this._config.apiKey,
            client: this._config.clientId,
            channel: this._config.channel,
            libraries: this._config.libraries,
            region: this._config.region,
            language: this._config.language
        };
        var params = Object.keys(queryParams)
            .filter(function (k) { return queryParams[k] != null; })
            .filter(function (k) {
            // remove empty arrays
            return !Array.isArray(queryParams[k]) ||
                (Array.isArray(queryParams[k]) && queryParams[k].length > 0);
        })
            .map(function (k) {
            // join arrays as comma seperated strings
            var i = queryParams[k];
            if (Array.isArray(i)) {
                return { key: k, value: i.join(',') };
            }
            return { key: k, value: queryParams[k] };
        })
            .map(function (entry) { return entry.key + "=" + entry.value; })
            .join('&');
        return protocol + "//" + hostAndPath + "?" + params;
    };
    LazyMapsAPILoader.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    LazyMapsAPILoader.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core_1.Inject, args: [exports.LAZY_MAPS_API_CONFIG,] },] },
        { type: browser_globals_1.WindowRef, },
        { type: browser_globals_1.DocumentRef, },
    ]; };
    return LazyMapsAPILoader;
}(maps_api_loader_1.MapsAPILoader));
exports.LazyMapsAPILoader = LazyMapsAPILoader;
//# sourceMappingURL=lazy-maps-api-loader.js.map

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var router_1 = __webpack_require__(5);
var primeng_1 = __webpack_require__(2);
var setup_service_1 = __webpack_require__(11);
__webpack_require__(14);
var moment = __webpack_require__(0);
var global_constants_1 = __webpack_require__(15);
var HomeComponent = (function () {
    function HomeComponent(_router, _setupService, activatedRoute) {
        var _this = this;
        this._router = _router;
        this._setupService = _setupService;
        this.activatedRoute = activatedRoute;
        this.orgId = global_constants_1.AppSettings.ORGANIZATION_ID;
        this.msgs = [];
        this.presentPatronCount = 0;
        this.absconedPatronCount = 0;
        this.absentpatron = 0;
        this.lat = 28.633161137544214;
        this.lng = 77.08655834197998;
        this.zoom = 12;
        this.missinglength = 0;
        this.leaveLength = 0;
        this.walkerlength = 0;
        this.messagelength = 0;
        this.busStatusLength = 0;
        this.allRouteIcon = global_constants_1.AppSettings.ALLROUTE_MARKER;
        this.div = false;
        this.schoolIcon = global_constants_1.AppSettings.SCHOOL_IMAGE;
        this.isChecked = false;
        this.button = false;
        //this.createCoordinateArr();
        this.mapType = "All";
        this.bgColor = "White";
        this.timerImage1 = "assets/layout/images/timer.png";
        this.leaveLength = 0;
        this.missinglength = 0;
        this.walkerlength = 0;
        this.selectedDate = global_constants_1.AppSettings.CURRENT_DATE;
        this.currentTime = global_constants_1.AppSettings.CURRENT_TIME;
        this._setupService.getOrganization().subscribe(function (result) {
            _this.orgDetails = result;
            if (_this.orgDetails != null) {
                _this.orgMarkers = [];
                _this.orgMarkers.push({ lat: Number(_this.orgDetails.location.latitude), lng: Number(_this.orgDetails.location.longitude), label: _this.orgDetails.name, title: _this.orgDetails.name, icon: _this.schoolIcon, draggable: false, });
            }
        });
        this._setupService.getPerson().subscribe(function (result) {
            _this.personDetails = result;
        });
        //for transportWalker list
        this._setupService.getPatron().subscribe(function (result) {
            _this.patronDetailList = result;
            _this._setupService.getTranportRoute().subscribe(function (result) {
                _this.transportRouteList = result;
                _this._setupService.getTransportWalkingRequestByDate(_this.selectedDate).subscribe(function (result) {
                    _this.totalTransportWalkerPatronList = result;
                });
                _this._setupService.getPatronOnLeave(_this.selectedDate).subscribe(function (result) {
                    _this.patronLeaveDetail = result;
                    _this.showPatronLeave();
                    _this._setupService.getTransportRouteRun(_this.selectedDate).subscribe(function (result) {
                        _this.totalTransportRouteRunList = result;
                        if (_this.totalTransportRouteRunList.find(function (x) { return x.runDirection == 2; })) {
                            _this.transportRouteRunList = _this.totalTransportRouteRunList.filter(function (x) { return x.runDirection == 2; });
                            _this.transportWalkerPatronList = _this.totalTransportWalkerPatronList.filter(function (x) { return x.drop; });
                            _this.createTransportWalkerList();
                        }
                        else {
                            _this.transportRouteRunList = _this.totalTransportRouteRunList.filter(function (x) { return x.runDirection == 1; });
                            _this.transportWalkerPatronList = _this.totalTransportWalkerPatronList.filter(function (x) { return x.pick; });
                            _this.createTransportWalkerList();
                        }
                        _this._setupService.getAllLocation(_this.selectedDate).subscribe(function (result) {
                            _this.routeMonitoringDetails = result;
                            //alert("this.routeMonitoringDetails = " + this.routeMonitoringDetails.length)
                            _this.initOverlay(_this.mapType);
                            _this.missingPatronOntheBus();
                            _this.showCurrentRouteDetail();
                            //Observable.interval(10000).subscribe(x => {
                            //    this._setupService.getAllLocation(this.selectedDate).subscribe(result => {
                            //        this.routeMonitoringDetails = result;
                            //        this.initOverlay(this.mapType);
                            //        this.missingPatronOntheBus();
                            //        this._setupService.getTransportRouteRun(this.selectedDate).subscribe(result => {
                            //            this.totalTransportRouteRunList = result;
                            //            if (this.totalTransportRouteRunList.find(x => x.runDirection == 2)) {
                            //                this.transportRouteRunList = this.totalTransportRouteRunList.filter(x => x.runDirection == 2);
                            //            } else {
                            //                this.transportRouteRunList = this.totalTransportRouteRunList.filter(x => x.runDirection == 1);
                            //            }
                            //            this.showCurrentRouteDetail();
                            //            this.showPatronLeave();
                            //            this.createTransportWalkerList();
                            //         });
                            //    });
                            //});
                        });
                    });
                });
            });
        });
        this.transportWalkingRequest = {
            id: '',
            patronId: '',
            requestBy: '',
            requestMode: '',
            reason: '',
            description: '',
            requestDate: '',
            requestTime: '',
            pick: false,
            drop: false,
            isAcknowledged: true,
            transpportRouteId: '',
            stoppageId: '',
            createDate: new Date(),
            lastUpdated: new Date(),
            organizationId: this.orgId
        };
        this.RouteOverlays = new Array();
        this.showMessageCount();
        this.showTransportRouteBusReachTime();
        //var count: number = 0;
        //Observable.interval(10000).subscribe(x => {
        //    this.insertCoordinates(count);
        //    count++;
        //});
    }
    // End Constructor
    HomeComponent.prototype.onSearchChange = function (searchValue) {
        var tempLocations = [];
        //alert("searchValue =" + searchValue);
        if (searchValue == '') {
            //alert("complete")
            return this.transportRouteCurrentLocationList;
        }
        if (searchValue) {
            for (var _i = 0, _a = this.transportRouteCurrentLocationList; _i < _a.length; _i++) {
                var currentLocation = _a[_i];
                if (currentLocation.RouteDriver.firstName.lastIndexOf(searchValue) > -1 || currentLocation.RouteDriver.lastName.lastIndexOf(searchValue) > -1) {
                    //alert("route  =" + currentLocation.Route);
                    tempLocations.push(currentLocation);
                }
            }
            this.transportRouteCurrentLocationList = tempLocations;
        }
        return this.transportRouteCurrentLocationList;
    };
    HomeComponent.prototype.handleChange = function (e) {
        this.isChecked = e.checked;
        if (this.isChecked) {
            this.tempTransportRouteCurrentLocationList = this.transportRouteCurrentLocationList;
            this.filteredTransportRouteCurrentLocationList = this.transportRouteCurrentLocationList.filter(function (x) { return x.Status == true; });
            this.transportRouteCurrentLocationList = this.filteredTransportRouteCurrentLocationList;
        }
        else {
            this.transportRouteCurrentLocationList = this.tempTransportRouteCurrentLocationList;
        }
    };
    HomeComponent.prototype.showCurrentRouteDetail = function () {
        var currentTime = new Date();
        var month = currentTime.getMonth();
        var day = currentTime.getDate();
        var year = currentTime.getFullYear();
        var transportRoute;
        this.transportRouteCurrentLocationList = [];
        var abort;
        var Driver;
        var Staff;
        var Coordinator;
        var patronList = [];
        for (var _i = 0, _a = this.transportRouteRunList; _i < _a.length; _i++) {
            var routeRun = _a[_i];
            this.LocationLoading = true;
            abort = false;
            transportRoute = this.transportRouteList.find(function (x) { return x.id == routeRun.routeId; });
            //masterTransportRoute = this.
            if (transportRoute != null) {
                if (routeRun.runDirection.toString() == "1") {
                    transportRoute.transportStoppages = transportRoute.transportStoppages.sort(function (a, b) {
                        return a.sequence - b.sequence;
                    });
                }
                if (routeRun.runDirection.toString() == "2") {
                    transportRoute.transportStoppages = transportRoute.transportStoppages.sort(function (a, b) {
                        return b.sequence - a.sequence;
                    });
                }
                if (routeRun.stoppages.length == transportRoute.transportStoppages.length && routeRun.runEndTime == null) {
                    this.transportRouteCurrentLocation = {};
                    this.transportRouteCurrentLocation.Route = routeRun.routeNumber;
                    this.transportRouteCurrentLocation.TransportRouteRun = routeRun;
                    this.transportRouteCurrentLocation.RouteImage = this.transportRouteCurrentLocation.Route + ".jpg";
                    if (this.transportRouteCurrentLocation.Route == "1") {
                        this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/one.png";
                    }
                    else if (this.transportRouteCurrentLocation.Route == "2") {
                        this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/two.png";
                    }
                    else if (this.transportRouteCurrentLocation.Route == "3") {
                        this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/three.png";
                    }
                    else if (this.transportRouteCurrentLocation.Route == "4") {
                        this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/four.png";
                    }
                    else if (this.transportRouteCurrentLocation.Route == "5") {
                        this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/five.png";
                    }
                    else if (this.transportRouteCurrentLocation.Route == "6") {
                        this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/six.png";
                    }
                    else if (this.transportRouteCurrentLocation.Route == "7") {
                        this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/seven.png";
                    }
                    else if (this.transportRouteCurrentLocation.Route == "8") {
                        this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/eight.png";
                    }
                    else if (this.transportRouteCurrentLocation.Route == "9") {
                        this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/nine.png";
                    }
                    patronList = this.patronDetailList.filter(function (x) { return x.transportRouteId == transportRoute.id; });
                    if (patronList != null) {
                        for (var _b = 0, patronList_1 = patronList; _b < patronList_1.length; _b++) {
                            var patron = patronList_1[_b];
                            this.transportRouteCurrentLocation.PatronFirstName += patron.firstName + ",";
                            this.transportRouteCurrentLocation.PatronLastName += patron.lastName + ",";
                        }
                    }
                    this.transportRouteCurrentLocation.ComingStoppage = "School";
                    this.transportRouteCurrentLocation.SchduledTime = "NA";
                    this.transportRouteCurrentLocation.EstimatedTime = "NA";
                    this.transportRouteCurrentLocation.PatronCount = "0";
                    this.transportRouteCurrentLocation.RoutePatrons = [];
                    this.transportRouteCurrentLocation.Status = false;
                    Driver = this.personDetails.find(function (x) { return x.id == routeRun.driverId; });
                    Staff = this.personDetails.find(function (x) { return x.id == routeRun.routeStaffId; });
                    Coordinator = this.personDetails.find(function (x) { return x.id == routeRun.coordinatorId; });
                    this.transportRouteCurrentLocation.Severity = 1;
                    if (Driver != null) {
                        this.transportRouteCurrentLocation.RouteDriver = Driver;
                    }
                    if (Staff != null) {
                        this.transportRouteCurrentLocation.RouteStaff = Staff;
                    }
                    if (Coordinator != null) {
                        this.transportRouteCurrentLocation.RouteCoordinator = Coordinator;
                    }
                    if (routeRun.runEndTime == null) {
                        this.transportRouteCurrentLocation.Status = true;
                    }
                    this.transportRouteCurrentLocation.ComingStopImage = "assets/layout/images/routeStop2.png";
                    this.transportRouteCurrentLocation.StopImage = "assets/layout/images/timer.png";
                    this.transportRouteCurrentLocationList.push(this.transportRouteCurrentLocation);
                    this.LocationLoading = false;
                }
                for (var stoppage = 0; stoppage < transportRoute.transportStoppages.length && !abort; stoppage++) {
                    //alert("ID = " + transportRoute.transportStoppages[stoppage].name);
                    var currentStoppage = {};
                    currentStoppage = routeRun.stoppages.find(function (x) { return x.transportStoppageID == transportRoute.transportStoppages[stoppage].id; });
                    //for (var y = 0; y < routeRun.stoppages.length && !abort; y++) {
                    this.transportRouteCurrentLocation = {};
                    if (routeRun.runEndTime == null) {
                        this.transportRouteCurrentLocation.StopImage = "assets/layout/images/timer.png";
                        this.transportRouteCurrentLocation.TransportRouteRun = routeRun;
                        //alert("master stoppage ID = " + transportRoute.transportStoppages[x].id);
                        //alert("Route Run stoppage ID = " + routeRun.stoppages[y].transportStoppageID);
                        if (currentStoppage == null) {
                            //alert("currentStoppage = " + transportRoute.transportStoppages[stoppage].name);
                            //if (transportRoute.transportStoppages[x].id != routeRun.stoppages[y].transportStoppageID) {
                            this.transportRouteCurrentLocation.Route = routeRun.routeNumber;
                            if (this.transportRouteCurrentLocation.Route == "1") {
                                this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/one.png";
                            }
                            else if (this.transportRouteCurrentLocation.Route == "2") {
                                this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/two.png";
                            }
                            else if (this.transportRouteCurrentLocation.Route == "3") {
                                this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/three.png";
                            }
                            else if (this.transportRouteCurrentLocation.Route == "4") {
                                this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/four.png";
                            }
                            else if (this.transportRouteCurrentLocation.Route == "5") {
                                this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/five.png";
                            }
                            else if (this.transportRouteCurrentLocation.Route == "6") {
                                this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/six.png";
                            }
                            else if (this.transportRouteCurrentLocation.Route == "7") {
                                this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/seven.png";
                            }
                            else if (this.transportRouteCurrentLocation.Route == "8") {
                                this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/eight.png";
                            }
                            else if (this.transportRouteCurrentLocation.Route == "9") {
                                this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/nine.png";
                            }
                            this.transportRouteCurrentLocation.ComingStopImage = "assets/layout/images/routeStop2.png";
                            this.transportRouteCurrentLocation.ComingStoppage = transportRoute.transportStoppages[stoppage].name;
                            this.transportRouteCurrentLocation.SchduledTime = transportRoute.transportStoppages[stoppage].pickupTime;
                            this.transportRouteCurrentLocation.EstimatedTime = this.calculateEstimatedTime(transportRoute.transportStoppages[stoppage].lattitude, transportRoute.transportStoppages[stoppage].longitude, transportRoute.id);
                            this.transportRouteCurrentLocation.PatronCount = transportRoute.transportStoppages[stoppage].patronId.length.toString();
                            this.transportRouteCurrentLocation.RoutePatrons = transportRoute.transportStoppages[stoppage].patronId;
                            this.transportRouteCurrentLocation.Status = false;
                            Driver = this.personDetails.find(function (x) { return x.id == routeRun.driverId; });
                            Staff = this.personDetails.find(function (x) { return x.id == routeRun.routeStaffId; });
                            Coordinator = this.personDetails.find(function (x) { return x.id == routeRun.coordinatorId; });
                            this.transportRouteCurrentLocation.Severity = 1;
                            if (Driver != null) {
                                this.transportRouteCurrentLocation.RouteDriver = Driver;
                            }
                            if (Staff != null) {
                                this.transportRouteCurrentLocation.RouteStaff = Staff;
                            }
                            if (Coordinator != null) {
                                this.transportRouteCurrentLocation.RouteCoordinator = Coordinator;
                            }
                            if (routeRun.runEndTime == null) {
                                this.transportRouteCurrentLocation.Status = true;
                            }
                            var fields = this.transportRouteCurrentLocation.EstimatedTime.split(':');
                            var hour = fields[0];
                            var minute = Number(fields[1]);
                            var EstimatedTime = new Date(year, month, day, +hour, +minute);
                            var fields = this.transportRouteCurrentLocation.SchduledTime.split(':');
                            var hour = fields[0];
                            var minute = Number(fields[1]);
                            var SchduledTime = new Date(year, month, day, +hour, +minute);
                            if (EstimatedTime > SchduledTime) {
                                this.transportRouteCurrentLocation.ColumnColor = "#ff4c4c";
                                this.transportRouteCurrentLocation.StopImage = "assets/layout/images/timer2.png";
                                this.transportRouteCurrentLocation.Severity = 0;
                            }
                            if (routeRun.runDirection.toString() == "2") {
                                this.transportRouteCurrentLocation.SchduledTime = transportRoute.transportStoppages[stoppage].dropTime;
                                this.transportRouteCurrentLocation.PatronCount = transportRoute.transportStoppages[stoppage].patronId.length.toString();
                                this.transportRouteCurrentLocation.RoutePatrons = transportRoute.transportStoppages[stoppage].patronId;
                                //this.transportRouteCurrentLocation.PatronCount = routeRun.stoppages[y].patrons.length.toString();
                                //this.transportRouteCurrentLocation.RoutePatrons = routeRun.stoppages[y].patrons;
                            }
                            patronList = this.patronDetailList.filter(function (x) { return x.transportRouteId == transportRoute.id; });
                            if (patronList != null) {
                                for (var _c = 0, patronList_2 = patronList; _c < patronList_2.length; _c++) {
                                    var patron = patronList_2[_c];
                                    this.transportRouteCurrentLocation.PatronFirstName += patron.firstName + ",";
                                    this.transportRouteCurrentLocation.PatronLastName += patron.lastName + ",";
                                }
                            }
                            this.transportRouteCurrentLocationList.push(this.transportRouteCurrentLocation);
                            this.LocationLoading = false;
                            abort = true;
                            //break;
                        }
                    }
                    else {
                        this.transportRouteCurrentLocation.Route = routeRun.routeNumber;
                        this.transportRouteCurrentLocation.TransportRouteRun = routeRun;
                        if (this.transportRouteCurrentLocation.Route == "1") {
                            this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/one.png";
                        }
                        else if (this.transportRouteCurrentLocation.Route == "2") {
                            this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/two.png";
                        }
                        else if (this.transportRouteCurrentLocation.Route == "3") {
                            this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/three.png";
                        }
                        else if (this.transportRouteCurrentLocation.Route == "4") {
                            this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/four.png";
                        }
                        else if (this.transportRouteCurrentLocation.Route == "5") {
                            this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/five.png";
                        }
                        else if (this.transportRouteCurrentLocation.Route == "6") {
                            this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/six.png";
                        }
                        else if (this.transportRouteCurrentLocation.Route == "7") {
                            this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/seven.png";
                        }
                        else if (this.transportRouteCurrentLocation.Route == "8") {
                            this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/eight.png";
                        }
                        else if (this.transportRouteCurrentLocation.Route == "9") {
                            this.transportRouteCurrentLocation.RouteImage = "assets/layout/images/nine.png";
                        }
                        this.transportRouteCurrentLocation.ComingStoppage = "Completed";
                        this.transportRouteCurrentLocation.SchduledTime = "NA";
                        this.transportRouteCurrentLocation.EstimatedTime = "NA";
                        this.transportRouteCurrentLocation.PatronCount = "0";
                        this.transportRouteCurrentLocation.RoutePatrons = [];
                        this.transportRouteCurrentLocation.Status = false;
                        Driver = this.personDetails.find(function (x) { return x.id == routeRun.driverId; });
                        Staff = this.personDetails.find(function (x) { return x.id == routeRun.routeStaffId; });
                        Coordinator = this.personDetails.find(function (x) { return x.id == routeRun.coordinatorId; });
                        this.transportRouteCurrentLocation.Severity = 1;
                        if (Driver != null) {
                            this.transportRouteCurrentLocation.RouteDriver = Driver;
                        }
                        if (Staff != null) {
                            this.transportRouteCurrentLocation.RouteStaff = Staff;
                        }
                        if (Coordinator != null) {
                            this.transportRouteCurrentLocation.RouteCoordinator = Coordinator;
                        }
                        if (routeRun.runEndTime == null) {
                            this.transportRouteCurrentLocation.Status = true;
                        }
                        this.transportRouteCurrentLocation.StopImage = "assets/layout/images/timer.png";
                        if (routeRun.runDirection.toString() == "2") {
                            this.transportRouteCurrentLocation.SchduledTime = transportRoute.transportStoppages[stoppage].dropTime;
                            this.transportRouteCurrentLocation.PatronCount = transportRoute.transportStoppages[stoppage].patronId.length.toString();
                            this.transportRouteCurrentLocation.RoutePatrons = transportRoute.transportStoppages[stoppage].patronId;
                            //this.transportRouteCurrentLocation.PatronCount = routeRun.stoppages[y].patrons.length.toString();
                            //this.transportRouteCurrentLocation.RoutePatrons = routeRun.stoppages[y].patrons;
                        }
                        patronList = this.patronDetailList.filter(function (x) { return x.transportRouteId == transportRoute.id; });
                        if (patronList != null) {
                            for (var _d = 0, patronList_3 = patronList; _d < patronList_3.length; _d++) {
                                var patron = patronList_3[_d];
                                this.transportRouteCurrentLocation.PatronFirstName += patron.firstName + ",";
                                this.transportRouteCurrentLocation.PatronLastName += patron.lastName + ",";
                            }
                        }
                        this.transportRouteCurrentLocationList.push(this.transportRouteCurrentLocation);
                        this.LocationLoading = false;
                        abort = true;
                    }
                }
                //}
            }
        }
        //alert("checkked = " + this.isChecked)
        if (this.isChecked) {
            this.transportRouteCurrentLocationList = this.transportRouteCurrentLocationList.filter(function (x) { return x.Status == true; });
        }
        this.transportRouteCurrentLocationList.sort(function (a, b) {
            return a.Severity - b.Severity;
        });
    };
    HomeComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.activatedRoute.params.subscribe(function (params) {
            _this.navigatedRouteNumber = params["growlMsgs"];
        });
        if (this.navigatedRouteNumber == "1") {
            this.msgs = [];
            this.msgs.push({ severity: 'success', summary: 'Password changed sucessfully' });
            setTimeout(function () {
                _this.msgs = [];
            }, 4000);
        }
    };
    HomeComponent.prototype.calculateEstimatedTime = function (lat, long, routeId) {
        var routeMonitor = {};
        var geoPosition;
        var distance;
        var estimatedTime;
        var speed;
        routeMonitor = this.routeMonitoringDetails.find(function (x) { return x.routeID == routeId; });
        if (routeMonitor != null) {
            speed = 40; //routeMonitor.location.speed;
            geoPosition = routeMonitor.location;
            distance = this.calculateDistance(Number(lat), Number(long), Number(geoPosition.latitude), Number(geoPosition.longitude));
            estimatedTime = (distance / speed * 60).toString();
            estimatedTime = moment(new Date()).add(estimatedTime, 'minutes').format('HH:mm');
            return estimatedTime;
        }
        return "NA";
    };
    HomeComponent.prototype.calculateDistance = function (lat1, lon1, lat2, lon2) {
        var p = 0.017453292519943295; // Math.PI / 180
        var c = Math.cos;
        var a = 0.5 - c((lat2 - lat1) * p) / 2 +
            c(lat1 * p) * c(lat2 * p) *
                (1 - c((lon2 - lon1) * p)) / 2;
        return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km
    };
    //Missing Patron In the buses
    HomeComponent.prototype.missingPatronOntheBus = function () {
        var _this = this;
        this.MissingPatronLoading = true;
        var patronAfterLeave = [];
        var patronAfterWalker = [];
        //var patron: PatronLeaveDetail | undefined = <PatronLeaveDetail>{};
        var missingPatron = {};
        var presentPatron = {};
        this.onBoardPatron = [];
        var transportStoppageDetail = [];
        var patrons;
        var offBoardPatron = [];
        this.finalMissingList = [];
        this.onBoardPatronList = [];
        var totalPatron = [];
        for (var _i = 0, _a = this.transportRouteList; _i < _a.length; _i++) {
            var route = _a[_i];
            transportStoppageDetail = route.transportStoppages;
            for (var _b = 0, transportStoppageDetail_1 = transportStoppageDetail; _b < transportStoppageDetail_1.length; _b++) {
                var stoppage = transportStoppageDetail_1[_b];
                patrons = {};
                patrons = stoppage.patronId;
                for (var _c = 0, patrons_1 = patrons; _c < patrons_1.length; _c++) {
                    var patronId = patrons_1[_c];
                    totalPatron.push(patronId);
                    for (var _d = 0, _e = this.transportRouteRunList; _d < _e.length; _d++) {
                        var routePatrons = _e[_d];
                        if (routePatrons.patrons.lastIndexOf(patronId) >= 0) {
                            this.onBoardPatron.push(patronId);
                        }
                        //else {
                        //    offBoardPatron.push(patronId);                           
                        //}
                    }
                }
            }
        }
        offBoardPatron = totalPatron.filter(function (item) { return _this.onBoardPatron.indexOf(item) < 0; });
        this.presentPatronCount = this.onBoardPatron.length;
        for (var _f = 0, offBoardPatron_1 = offBoardPatron; _f < offBoardPatron_1.length; _f++) {
            var offBoardPatronId = offBoardPatron_1[_f];
            if (this.patronLeaveDetail.find(function (a) { return a.patronId == offBoardPatronId; }) == null) {
                patronAfterLeave.push(offBoardPatronId);
            }
        }
        for (var _g = 0, patronAfterLeave_1 = patronAfterLeave; _g < patronAfterLeave_1.length; _g++) {
            var leavePatronId = patronAfterLeave_1[_g];
            if (!this.transportWalkerPatronList.find(function (a) { return a.patronId == leavePatronId; })) {
                patronAfterWalker.push(leavePatronId);
            }
        }
        for (var _h = 0, _j = this.onBoardPatron; _h < _j.length; _h++) {
            var onBoardPatronId = _j[_h];
            presentPatron = this.patronDetailList.find(function (x) { return x.id == onBoardPatronId; });
            if (presentPatron != null) {
                this.patronWithTransportInfo = {};
                var transportInfo = {};
                var transportStoppageInfo = {};
                this.transportPatron = {};
                transportInfo = this.transportRouteList.find(function (x) { return x.id == presentPatron.transportRouteId; });
                if (transportInfo != null) {
                    this.patronWithTransportInfo.routeNumber = transportInfo.routeNumber;
                    transportStoppageInfo = transportInfo.transportStoppages.find(function (x) { return x.id == presentPatron.stoppageId; });
                    if (transportStoppageInfo != null) {
                        this.patronWithTransportInfo.stoppagename = transportStoppageInfo.name;
                    }
                }
                this.patronWithTransportInfo.imagePath = presentPatron.imgUrl;
                this.patronWithTransportInfo.name = presentPatron.firstName + " " + presentPatron.lastName;
                this.onBoardPatronList.push(this.patronWithTransportInfo);
            }
        }
        for (var _k = 0, patronAfterWalker_1 = patronAfterWalker; _k < patronAfterWalker_1.length; _k++) {
            var patronId = patronAfterWalker_1[_k];
            missingPatron = this.patronDetailList.find(function (x) { return x.id == patronId; });
            if (missingPatron != null) {
                this.patronWithTransportInfo = {};
                var transportInfo = {};
                var transportStoppageInfo = {};
                this.transportPatron = {};
                transportInfo = this.transportRouteList.find(function (x) { return x.id == missingPatron.transportRouteId; });
                if (transportInfo != null) {
                    this.patronWithTransportInfo.routeNumber = transportInfo.routeNumber;
                    transportStoppageInfo = transportInfo.transportStoppages.find(function (x) { return x.id == missingPatron.stoppageId; });
                    if (transportStoppageInfo != null) {
                        this.patronWithTransportInfo.stoppagename = transportStoppageInfo.name;
                    }
                }
                this.patronWithTransportInfo.imagePath = missingPatron.imgUrl;
                this.patronWithTransportInfo.name = missingPatron.firstName + " " + missingPatron.lastName;
                //this.patronWithTransportInfo.lastName = this.patronDetail.lastName;
                this.patronWithTransportInfo.class = missingPatron.class.toString();
                this.patronWithTransportInfo.section = missingPatron.section;
                this.finalMissingList.push(this.patronWithTransportInfo);
                this.missinglength = this.finalMissingList.length;
            }
        }
        this.MissingPatronLoading = false;
    };
    //Patron Leave
    HomeComponent.prototype.showPatronLeave = function () {
        var transportStoppage = {};
        var patronOnLeaveDescription;
        var patron = {};
        var presentPatronList = [];
        var route = {};
        this.patronOnLeaveDescriptionList = [];
        var actualPatronLeaveList = [];
        for (var _i = 0, _a = this.patronLeaveDetail; _i < _a.length; _i++) {
            var patronLeave = _a[_i];
            for (var _b = 0, _c = this.transportRouteRunList; _b < _c.length; _b++) {
                var routePatrons = _c[_b];
                if (routePatrons.patrons.lastIndexOf(patronLeave.patronId) >= 0) {
                    presentPatronList.push(patronLeave);
                }
            }
        }
        actualPatronLeaveList = this.patronLeaveDetail.filter(function (item) { return presentPatronList.indexOf(item) < 0; });
        for (var _d = 0, actualPatronLeaveList_1 = actualPatronLeaveList; _d < actualPatronLeaveList_1.length; _d++) {
            var leave = actualPatronLeaveList_1[_d];
            this.PatronLeaveLoading = true;
            patron = this.patronDetailList.find(function (x) { return x.id == leave.patronId; });
            if (patron != null) {
                patronOnLeaveDescription = {};
                patronOnLeaveDescription.name = patron.firstName + " " + patron.lastName;
                patronOnLeaveDescription.patronInfo = patron;
                patronOnLeaveDescription.description = leave.description;
                patronOnLeaveDescription.imagePath = patron.imgUrl;
                route = this.transportRouteList.find(function (x) { return x.id == patronOnLeaveDescription.patronInfo.transportRouteId; });
                //if (route != null) {
                //    patronOnLeaveDescription.routeNumber = route.routeNumber;
                //}
                if (route != null) {
                    transportStoppage = route.transportStoppages.find(function (x) { return x.id == leave.stoppageId; });
                    patronOnLeaveDescription.routeNumber = route.routeNumber;
                    if (transportStoppage != null) {
                        patronOnLeaveDescription.stoppageName = transportStoppage.name;
                    }
                }
                this.patronOnLeaveDescriptionList.push(patronOnLeaveDescription);
                this.leaveLength = this.patronOnLeaveDescriptionList.length;
            }
        }
        this.PatronLeaveLoading = false;
    };
    //Creating Transport Walker List ,Fetching Patron detail from PatronDetailList.
    HomeComponent.prototype.createTransportWalkerList = function () {
        var transportRoute;
        var transportStoppage;
        var patronInfo = {};
        var presentPatronList = [];
        var actualPatronWalkerList = [];
        this.transportWalkerList = [];
        for (var _i = 0, _a = this.transportWalkerPatronList; _i < _a.length; _i++) {
            var patron = _a[_i];
            for (var _b = 0, _c = this.transportRouteRunList; _b < _c.length; _b++) {
                var routePatrons = _c[_b];
                if (routePatrons.patrons.lastIndexOf(patron.patronId) >= 0) {
                    presentPatronList.push(patron);
                }
            }
        }
        actualPatronWalkerList = this.transportWalkerPatronList.filter(function (item) { return presentPatronList.indexOf(item) < 0; });
        for (var _d = 0, actualPatronWalkerList_1 = actualPatronWalkerList; _d < actualPatronWalkerList_1.length; _d++) {
            var patron = actualPatronWalkerList_1[_d];
            this.WalkerPatronLoading = true;
            patronInfo = this.patronDetailList.find(function (x) { return x.id == patron.patronId; });
            if (patronInfo != null) {
                patron.imgUrl = patronInfo.imgUrl;
                patron.name = patronInfo.firstName + " " + patronInfo.lastName;
                patron.class = patronInfo.class.toString();
                patron.section = patronInfo.section;
                patron.rollNumber = patronInfo.rollNo.toString();
                patron.requestBy = patron.requestBy;
                transportRoute = this.transportRouteList.find(function (x) { return x.id == patron.transpportRouteId; });
                if (transportRoute != null) {
                    transportStoppage = transportRoute.transportStoppages.find(function (x) { return x.id == patron.stoppageId; });
                    patron.routeNumber = transportRoute.routeNumber;
                    if (transportStoppage != null) {
                        patron.stoppageName = transportStoppage.name;
                    }
                }
                this.transportWalkerList.push(patron);
                this.walkerlength = this.transportWalkerList.length;
            }
        }
        //alert("walkerlength = " + this.walkerlength);
        this.WalkerPatronLoading = false;
    };
    HomeComponent.prototype.isAcknowledge = function (transportWalkingDetail) {
        this._setupService.updateAcknowledge(transportWalkingDetail.id, true).subscribe(function (result) {
        });
    };
    HomeComponent.prototype.showMessageCount = function () {
        var _this = this;
        this._setupService.getIncomingMessage().subscribe(function (result) {
            _this.incomingmessages = result;
            _this.messagelength = _this.incomingmessages.length;
        });
    };
    HomeComponent.prototype.showTransportRouteBusReachTime = function () {
        var _this = this;
        this._setupService.getPicupRun(this.selectedDate).subscribe(function (result) {
            _this.transportRouteRunList = result;
        });
    };
    HomeComponent.prototype.organization = function () {
        this._router.navigate(['/organization']);
    };
    HomeComponent.prototype.getmessage = function () {
        this._router.navigate(['/incomingmessage']);
    };
    // Display All route Map for dashboard
    HomeComponent.prototype.clickedMarker = function (routeNumber, index) {
        this._router.navigate(['/mapview', { 'routeNumber': routeNumber }]);
    };
    HomeComponent.prototype.onRowSelect = function (transportRoute) {
        if (transportRoute.TransportRouteRun.runEndTime == null) {
            this._router.navigate(['/mapview', { 'routeNumber': transportRoute.Route }]);
        }
    };
    HomeComponent.prototype.selectRoute = function (transportRouteNumber) {
        var _this = this;
        this.tabVisible1 = true;
        if (transportRouteNumber) {
            var navigatedRouteNumber = transportRouteNumber.Route;
            var transportRoute;
            if (navigatedRouteNumber != null) {
                transportRoute = this.transportRouteList.find(function (x) { return x.routeNumber == navigatedRouteNumber; });
                if (transportRoute != null) {
                    this.selectRouteDetail = transportRoute.id;
                }
            }
            else {
                this.selectRouteDetail = "undefined";
            }
        }
        else {
            this.selectRouteDetail = "undefined";
        }
        var a = global_constants_1.AppSettings.CURRENT_DATE;
        this.selectedDate = a;
        if (this.selectRouteDetail == "undefined") {
            this.tabVisible1 = false;
            this.button = false;
            this.bgColor = "white";
            this.mapType = "All";
            this._setupService.getAllLocation(this.selectedDate).subscribe(function (result) {
                _this.routeMonitoringDetails = result;
                _this.initOverlay(_this.mapType);
            });
        }
        else {
            this.button = true;
            this.tabVisible1 = true;
            this.bgColor = "silver";
            this.mapType = "Route";
            this.selectedTransportRun = {};
            this.routeSelected = this.selectRouteDetail;
            this.selectedTransportRun = this.transportRouteRunList.find(function (x) { return x.routeId == _this.routeSelected; });
            if (this.selectedTransportRun) {
                this.coveredStoppage = this.selectedTransportRun.stoppages;
                this.selectedroutes = this.transportRouteList.find(function (x) { return x.id == _this.routeSelected; });
                if (this.selectedroutes != null) {
                    this.routeNumber = this.selectedroutes.routeNumber;
                    this.transportStoppages = this.selectedroutes.transportStoppages.sort(function (a, b) {
                        return a.sequence - b.sequence;
                    });
                    this._setupService.getAllLocation(this.selectedDate).subscribe(function (result) {
                        _this.routeMonitoringDetails = result;
                        _this.initOverlay(_this.mapType);
                    });
                }
            }
        }
    };
    HomeComponent.prototype.initOverlay = function (type) {
        var _this = this;
        this.markers = [];
        this.stops = [];
        this.polyline = [];
        var image = global_constants_1.AppSettings.ALLROUTE_MARKER;
        var commingStopIcon = global_constants_1.AppSettings.COMMING_STOP_MARKER;
        var coveredStopIcon = global_constants_1.AppSettings.COVERED_STOP_MARKER;
        var routeNumber = "0";
        var transportRoute;
        if (type == "All" && this.transportStoppage == null) {
            this.stops = [];
            this.polyline = [];
            var routeNumber = "0";
            for (var _i = 0, _a = this.routeMonitoringDetails; _i < _a.length; _i++) {
                var route = _a[_i];
                if (route.routeID != null) {
                    transportRoute = this.transportRouteList.find(function (x) { return x.id == route.routeID; });
                    if (transportRoute != null) {
                        routeNumber = transportRoute.routeNumber;
                    }
                    this.markers.push({ lat: Number(route.location.latitude), lng: Number(route.location.longitude), label: '', title: '', icon: global_constants_1.AppSettings.IMAGE_ENDPOINT + "bus" + transportRoute.routeNumber + ".png", draggable: false, });
                }
            }
        }
        else {
            //   alert("this.selectRouteDetail = " + this.selectRouteDetail);
            this.stops = [];
            this.polyline = [];
            this.polyArr = new Array();
            var routeMonitoring;
            transportRoute = this.transportRouteList.find(function (x) { return x.id == _this.selectRouteDetail; });
            routeMonitoring = this.routeMonitoringDetails.find(function (x) { return x.routeID == _this.selectRouteDetail; });
            if (routeMonitoring) {
                this.markers.push({ lat: Number(routeMonitoring.location.latitude), lng: Number(routeMonitoring.location.longitude), label: '', title: '', icon: global_constants_1.AppSettings.IMAGE_ENDPOINT + "bus" + transportRoute.routeNumber + ".png", draggable: false });
            }
            var stoppageTracking;
            var stoppagePatronNumber = 0;
            var stoppageReachTime = "NA";
            var expectedTime = "NA";
            for (var _b = 0, _c = this.transportStoppages; _b < _c.length; _b++) {
                var stoppages = _c[_b];
                if (this.selectedTransportRun) {
                    expectedTime = stoppages.pickupTime;
                    stoppageTracking = this.selectedTransportRun.stoppages.find(function (x) { return x.transportStoppageID == stoppages.id; }) == undefined ? null : this.selectedTransportRun.stoppages.find(function (x) { return x.transportStoppageID == stoppages.id; });
                    if (stoppageTracking != null && stoppageTracking.patrons != null) {
                        stoppagePatronNumber = stoppageTracking.patrons.length;
                        stoppageReachTime = stoppageTracking.reachedTime;
                    }
                    //if (this.selectedTransportRun.runDirection.toString() == "2") {
                    if (this.runDirection == "2") {
                        expectedTime = stoppages.dropTime;
                    }
                }
                if (this.coveredStoppage) {
                    if (this.coveredStoppage.find(function (x) { return x.transportStoppageID == stoppages.id; })) {
                        this.stops.push({ lat: Number(stoppages.lattitude), lng: Number(stoppages.longitude), label: stoppages.sequence.toString(), title: stoppages.name + "\n" + "Expected Patron : " + stoppages.patronId.length + "\n" + "Actual Patron : " + stoppagePatronNumber + "\n" + "Expected Time : " + expectedTime + "\n" + "Actual Time : " + stoppageReachTime, icon: coveredStopIcon, draggable: false, });
                        this.polyline.push({ lat: Number(stoppages.lattitude), lng: Number(stoppages.longitude), geodesic: true, strokeColor: "green", strokeOpacity: 0.3, strokeWeight: 2 });
                    }
                    else {
                        this.stops.push({ lat: Number(stoppages.lattitude), lng: Number(stoppages.longitude), label: stoppages.sequence.toString(), title: stoppages.name + "\n" + "Expected Patron : " + stoppages.patronId.length + "\n" + "Actual Patron : " + stoppagePatronNumber + "\n" + "Expected Time : " + expectedTime + "\n" + "Actual Time : " + stoppageReachTime, icon: commingStopIcon, draggable: false, });
                        this.polyline.push({ lat: Number(stoppages.lattitude), lng: Number(stoppages.longitude), geodesic: true, strokeColor: "red", strokeOpacity: 0.3, strokeWeight: 2 });
                    }
                }
                else {
                    this.stops.push({ lat: Number(stoppages.lattitude), lng: Number(stoppages.longitude), label: stoppages.sequence.toString(), title: stoppages.name + "\n" + "Expected Patron : " + stoppages.patronId.length + "\n" + "Actual Patron : " + stoppagePatronNumber + "\n" + "Expected Time : " + expectedTime + "\n" + "Actual Time : " + stoppageReachTime, icon: image, draggable: false, });
                    this.polyline.push({ lat: Number(stoppages.lattitude), lng: Number(stoppages.longitude), geodesic: true, strokeColor: "red", strokeOpacity: 0.3, strokeWeight: 2 });
                }
            }
        }
    };
    HomeComponent.prototype.createCoordinateArr = function () {
        this.coordinateArr = [
            { "lat": "28.6360606", "long": "lon77.0966776" },
            { "lat": "28.6360725", "long": "77.096712" },
            { "lat": "28.63603", "long": "77.09673" },
            { "lat": "28.63602", "long": "77.09674" },
            { "lat": "28.63581", "long": "77.09682" },
            { "lat": "28.63557", "long": "77.09692" },
            { "lat": "28.63547", "long": "77.09696" },
            { "lat": "28.63535", "long": "77.09702" },
            { "lat": "28.63512", "long": "77.09712" },
            { "lat": "28.63491", "long": "77.09721" },
            { "lat": "28.63474", "long": "77.09727" },
            { "lat": "28.63437", "long": "77.09742" },
            { "lat": "28.63363", "long": "77.09773" },
            { "lat": "28.63347", "long": "77.0978" },
            { "lat": "28.6334", "long": "77.09783" },
            { "lat": "28.63336", "long": "77.09785" },
            { "lat": "28.63308", "long": "77.09797" },
            { "lat": "28.6327", "long": "77.09816" },
            { "lat": "28.63245", "long": "77.09826" },
            { "lat": "28.63231", "long": "77.09832" },
            { "lat": "28.63208", "long": "77.09842" },
            { "lat": "28.63187", "long": "77.09851" },
            { "lat": "28.63173", "long": "77.09857" },
            { "lat": "28.63166", "long": "77.0986" },
            { "lat": "28.63153", "long": "77.09865" },
            { "lat": "28.63134", "long": "77.09873" },
            { "lat": "28.63117", "long": "77.0988" },
            { "lat": "28.631", "long": "77.09887" },
            { "lat": "28.63082", "long": "77.09895" },
            { "lat": "28.63072", "long": "77.099" },
            { "lat": "28.63065", "long": "77.09903" },
            { "lat": "28.63042", "long": "77.09912" },
            { "lat": "28.6302", "long": "77.09921" },
            { "lat": "28.63005", "long": "77.09927" },
            { "lat": "28.63002", "long": "77.09929" },
            { "lat": "28.62987", "long": "77.09935" },
            { "lat": "28.62974", "long": "77.09942" },
            { "lat": "28.6296", "long": "77.09947" },
            { "lat": "28.62929", "long": "77.09961" },
            { "lat": "28.62868", "long": "77.09988" },
            { "lat": "28.6282", "long": "77.1001" },
            { "lat": "28.62752", "long": "77.10037" },
            { "lat": "28.62724", "long": "77.10049" },
            { "lat": "28.62644", "long": "77.10084" },
            { "lat": "28.6254", "long": "77.10131" },
            { "lat": "28.62529", "long": "77.10137" },
            { "lat": "28.62503", "long": "77.10146" },
            { "lat": "28.62493", "long": "77.1015" },
            { "lat": "28.6247", "long": "77.1016" },
            { "lat": "28.62455", "long": "77.10167" },
            { "lat": "28.62429", "long": "77.10177" },
            { "lat": "28.62401", "long": "77.1019" },
            { "lat": "28.62382", "long": "77.10199" },
            { "lat": "28.62338", "long": "77.10219" },
            { "lat": "28.62329", "long": "77.10223" },
            { "lat": "28.62257", "long": "77.10252" },
            { "lat": "28.62233", "long": "77.10264" },
            { "lat": "28.62213", "long": "77.10275" },
            { "lat": "28.62156", "long": "77.10311" },
            { "lat": "28.62133", "long": "77.10324" },
            { "lat": "28.62112", "long": "77.10337" },
            { "lat": "28.621", "long": "77.10345" },
            { "lat": "28.62081", "long": "77.10358" },
            { "lat": "28.62063", "long": "77.10369" },
            { "lat": "28.6194", "long": "77.10445" },
            { "lat": "28.61921", "long": "77.10457" },
            { "lat": "28.61774", "long": "77.10547" },
            { "lat": "28.61766", "long": "77.10552" },
            { "lat": "28.61733", "long": "77.10573" },
            { "lat": "28.6173297", "long": "77.1057343" },
            { "lat": "28.61723", "long": "77.10583" },
            { "lat": "28.61716", "long": "77.1059" },
            { "lat": "28.61701", "long": "77.10599" },
            { "lat": "28.61589", "long": "77.10671" },
            { "lat": "28.61567", "long": "77.10687" },
            { "lat": "28.61533", "long": "77.10713" },
            { "lat": "28.61508", "long": "77.10733" },
            { "lat": "28.6150823", "long": "77.1073332" },
            { "lat": "28.61505", "long": "77.1074" },
            { "lat": "28.61503", "long": "77.10744" },
            { "lat": "28.61502", "long": "77.1075" },
            { "lat": "28.61502", "long": "77.10755" },
            { "lat": "28.61503", "long": "77.10762" },
            { "lat": "28.61506", "long": "77.10773" },
            { "lat": "28.61518", "long": "77.1079" },
            { "lat": "28.61603", "long": "77.10909" },
            { "lat": "28.61624", "long": "77.10937" },
            { "lat": "28.61661", "long": "77.10988" },
            { "lat": "28.61721", "long": "77.11071" },
            { "lat": "28.61747", "long": "77.11109" },
            { "lat": "28.61774", "long": "77.11146" },
            { "lat": "28.6178", "long": "77.11154" },
            { "lat": "28.61793", "long": "77.11176" },
            { "lat": "28.6195", "long": "77.11395" },
            { "lat": "28.61968", "long": "77.11421" },
            { "lat": "28.61984", "long": "77.11444" },
            { "lat": "28.62008", "long": "77.11477" },
            { "lat": "28.62023", "long": "77.11498" },
            { "lat": "28.62041", "long": "77.11523" },
            { "lat": "28.62075", "long": "77.11569" },
            { "lat": "28.62088", "long": "77.11588" },
            { "lat": "28.62096", "long": "77.11599" },
            { "lat": "28.62105", "long": "77.11609" },
            { "lat": "28.62116", "long": "77.11622" },
            { "lat": "28.62126", "long": "77.11632" },
            { "lat": "28.62134", "long": "77.11641" },
            { "lat": "28.62141", "long": "77.11648" },
            { "lat": "28.62161", "long": "77.11666" },
            { "lat": "28.62189", "long": "77.1169" },
            { "lat": "28.62242", "long": "77.11735" },
            { "lat": "28.62272", "long": "77.1176" },
            { "lat": "28.62389", "long": "77.11859" },
            { "lat": "28.6247", "long": "77.11927" },
            { "lat": "28.62476", "long": "77.11932" },
            { "lat": "28.62529", "long": "77.11977" },
            { "lat": "28.62584", "long": "77.12026" },
            { "lat": "28.62608", "long": "77.12046" },
            { "lat": "28.62628", "long": "77.12063" },
            { "lat": "28.6266", "long": "77.1209" },
            { "lat": "28.62694", "long": "77.12119" },
            { "lat": "28.62783", "long": "77.12194" },
            { "lat": "28.62859", "long": "77.12258" },
            { "lat": "28.62885", "long": "77.1228" },
            { "lat": "28.62906", "long": "77.12298" },
            { "lat": "28.62935", "long": "77.12324" },
            { "lat": "28.62977", "long": "77.12361" },
            { "lat": "28.62984", "long": "77.12368" },
            { "lat": "28.63009", "long": "77.12389" },
            { "lat": "28.6304", "long": "77.12414" },
            { "lat": "28.63085", "long": "77.12454" },
            { "lat": "28.63122", "long": "77.12485" },
            { "lat": "28.63134", "long": "77.12494" },
            { "lat": "28.63191", "long": "77.12543" },
            { "lat": "28.63233", "long": "77.12581" },
            { "lat": "28.63278", "long": "77.12617" },
            { "lat": "28.63294", "long": "77.12631" },
            { "lat": "28.633", "long": "77.12637" },
            { "lat": "28.63332", "long": "77.12664" },
            { "lat": "28.63342", "long": "77.12671" },
            { "lat": "28.63397", "long": "77.12715" },
            { "lat": "28.63456", "long": "77.12765" },
            { "lat": "28.63479", "long": "77.12782" },
            { "lat": "28.63495", "long": "77.12791" },
            { "lat": "28.63506", "long": "77.12797" },
            { "lat": "28.6353", "long": "77.12806" },
            { "lat": "28.6356", "long": "77.1281" },
            { "lat": "28.63566", "long": "77.12811" },
            { "lat": "28.63591", "long": "77.12813" },
            { "lat": "28.63608", "long": "77.12815" },
            { "lat": "28.63619", "long": "77.12817" },
            { "lat": "28.63628", "long": "77.12818" },
            { "lat": "28.63633", "long": "77.12819" },
            { "lat": "28.63635", "long": "77.1282" },
            { "lat": "28.63638", "long": "77.12821" },
            { "lat": "28.63648", "long": "77.12826" },
            { "lat": "28.63657", "long": "77.12831" },
            { "lat": "28.63661", "long": "77.12833" },
            { "lat": "28.63665", "long": "77.12836" },
            { "lat": "28.63672", "long": "77.12841" },
            { "lat": "28.6368", "long": "77.12849" },
            { "lat": "28.63687", "long": "77.12857" },
            { "lat": "28.63695", "long": "77.12866" },
            { "lat": "28.63701", "long": "77.12875" },
            { "lat": "28.63712", "long": "77.12893" },
            { "lat": "28.637120777.1289317" },
            { "lat": "28.63737", "long": "77.12923" },
            { "lat": "28.63741", "long": "77.12926" },
            { "lat": "28.63745", "long": "77.12929" },
            { "lat": "28.63751", "long": "77.12932" },
            { "lat": "28.63757", "long": "77.12934" },
            { "lat": "28.63766", "long": "77.12939" },
            { "lat": "28.63775", "long": "77.12944" },
            { "lat": "28.63785", "long": "77.1295" },
            { "lat": "28.63792", "long": "77.12955" },
            { "lat": "28.63803", "long": "77.12964" },
            { "lat": "28.63937", "long": "77.12916" },
            { "lat": "28.63948", "long": "77.12912" },
            { "lat": "28.639478", "long": "77.1291227" },
            { "lat": "28.63962", "long": "77.12907" },
            { "lat": "28.64004", "long": "77.12891" },
            { "lat": "28.64017", "long": "77.12886" },
            { "lat": "28.64022", "long": "77.12885" },
            { "lat": "28.64027", "long": "77.12884" },
            { "lat": "28.64031", "long": "77.12884" },
            { "lat": "28.64034", "long": "77.12884" },
            { "lat": "28.64041", "long": "77.12885" },
            { "lat": "28.64054", "long": "77.1288" },
            { "lat": "28.64149", "long": "77.1284" },
            { "lat": "28.64364", "long": "77.12758" },
            { "lat": "28.64376", "long": "77.12753" },
            { "lat": "28.64435", "long": "77.12728" },
            { "lat": "28.64476", "long": "77.12713" },
            { "lat": "28.64506", "long": "77.12702" },
            { "lat": "28.64624", "long": "77.12659" },
            { "lat": "28.6469", "long": "77.12631" },
            { "lat": "28.64723", "long": "77.12618" },
            { "lat": "28.64723", "long": "77.1261803" },
            { "lat": "28.64725", "long": "77.12613" },
            { "lat": "28.64726", "long": "77.1261" },
            { "lat": "28.64729", "long": "77.12607" },
            { "lat": "28.64731", "long": "77.12605" },
            { "lat": "28.64734", "long": "77.12603" },
            { "lat": "28.6474", "long": "77.12598" },
            { "lat": "28.64793", "long": "77.12579" },
            { "lat": "28.64819", "long": "77.12569" },
            { "lat": "28.64862", "long": "77.12553" },
            { "lat": "28.64901", "long": "77.12537" },
            { "lat": "28.64923", "long": "77.12528" },
            { "lat": "28.64963", "long": "77.12511" },
            { "lat": "28.6496311", "long": "77.1251056" },
            { "lat": "28.65004", "long": "77.12489" },
            { "lat": "28.6500425", "long": "77.1248869" },
            { "lat": "28.65023", "long": "77.1248" },
            { "lat": "28.65042", "long": "77.12517" },
            { "lat": "28.65053", "long": "77.12539" },
            { "lat": "28.65091", "long": "77.12601" },
            { "lat": "28.65121", "long": "77.12654" },
            { "lat": "28.65158", "long": "77.12717" },
            { "lat": "28.65167", "long": "77.12736" },
            { "lat": "28.65174", "long": "77.12755" },
            { "lat": "28.65181", "long": "77.12775" },
            { "lat": "28.65185", "long": "77.12789" },
            { "lat": "28.65192", "long": "77.12817" },
            { "lat": "28.65201", "long": "77.12846" },
            { "lat": "28.65212", "long": "77.12889" },
            { "lat": "28.6522", "long": "77.12918" },
            { "lat": "28.65227", "long": "77.12947" },
            { "lat": "28.65229", "long": "77.12955" },
            { "lat": "28.65231", "long": "77.12963" },
            { "lat": "28.65241", "long": "77.12997" },
            { "lat": "28.65243", "long": "77.13003" },
            { "lat": "28.65257", "long": "77.13056" },
            { "lat": "28.65269", "long": "77.13105" },
            { "lat": "28.65274", "long": "77.13128" },
            { "lat": "28.6528", "long": "77.13149" },
            { "lat": "28.65289", "long": "77.13182" },
            { "lat": "28.65311", "long": "77.13268" },
            { "lat": "28.65315", "long": "77.13282" },
            { "lat": "28.6531478", "long": "77.1328211" },
            { "lat": "28.65308", "long": "77.13284" },
            { "lat": "28.653", "long": "77.13287" },
            { "lat": "28.65295", "long": "77.13269" },
            { "lat": "28.6529547", "long": "77.1326948" },
            { "lat": "28.65278", "long": "77.13276" },
            { "lat": "28.65257", "long": "77.13282" },
            { "lat": "28.65247", "long": "77.13285" },
            { "lat": "28.65245", "long": "77.13286" },
            { "lat": "28.6524451", "long": "77.132861" }
            //{ "lat": "28.6524451", "long": "77.132861" }				
            //{ "lat": "28.65245", "long": "77.13286" },
            //{ "lat": "28.65247", "long": "77.13285" },
            //{ "lat": "28.65257", "long": "77.13282" },
            //{ "lat": "28.65278", "long": "77.13276" },
            //{ "lat": "28.6529547", "long": "77.1326948" },
            //{ "lat": "28.65295", "long": "77.13269" },
            //{ "lat": "28.653", "long": "77.13287" },
            //{ "lat": "28.65308", "long": "77.13284" },
            //{ "lat": "28.6531478", "long": "77.1328211" },
            //{ "lat": "28.65315", "long": "77.13282" },
            //{ "lat": "28.65311", "long": "77.13268" },
            //{ "lat": "28.65289", "long": "77.13182" },
            //{ "lat": "28.6528", "long": "77.13149" },
            //{ "lat": "28.65274", "long": "77.13128" },
            //{ "lat": "28.65269", "long": "77.13105" },
            //{ "lat": "28.65257", "long": "77.13056" },
            //{ "lat": "28.65243", "long": "77.13003" },
            //{ "lat": "28.65241", "long": "77.12997" },
            //{ "lat": "28.65231", "long": "77.12963" },
            //{ "lat": "28.65229", "long": "77.12955" },
            //{ "lat": "28.65227", "long": "77.12947" },
            //{ "lat": "28.6522", "long": "77.12918" },
            //{ "lat": "28.65212", "long": "77.12889" },
            //{ "lat": "28.65201", "long": "77.12846" },
            //{ "lat": "28.65192", "long": "77.12817" },
            //{ "lat": "28.65185", "long": "77.12789" },
            //{ "lat": "28.65181", "long": "77.12775" },
            //{ "lat": "28.65174", "long": "77.12755" },
            //{ "lat": "28.65167", "long": "77.12736" },
            //{ "lat": "28.65158", "long": "77.12717" },
            //{ "lat": "28.65121", "long": "77.12654" },
            //{ "lat": "28.65091", "long": "77.12601" },
            //{ "lat": "28.65053", "long": "77.12539" },
            //{ "lat": "28.65042", "long": "77.12517" },
            //{ "lat": "28.65023", "long": "77.1248" },
            //{ "lat": "28.6500425", "long": "77.1248869" },
            //{ "lat": "28.65004", "long": "77.12489" },
            //{ "lat": "28.6496311", "long": "77.1251056" },
            //{ "lat": "28.64963", "long": "77.12511" },
            //{ "lat": "28.64923", "long": "77.12528" },
            //{ "lat": "28.64901", "long": "77.12537" },
            //{ "lat": "28.64862", "long": "77.12553" },
            //{ "lat": "28.64819", "long": "77.12569" },
            //{ "lat": "28.64793", "long": "77.12579" },
            //{ "lat": "28.6474", "long": "77.12598" },
            //{ "lat": "28.64734", "long": "77.12603" },
            //{ "lat": "28.64731", "long": "77.12605" },
            //{ "lat": "28.64729", "long": "77.12607" },
            //{ "lat": "28.64726", "long": "77.1261" },
            //{ "lat": "28.64725", "long": "77.12613" },
            //{ "lat": "28.64723", "long": "77.1261803" },
            //{ "lat": "28.64723", "long": "77.12618" },
            //{ "lat": "28.6469", "long": "77.12631" },
            //{ "lat": "28.64624", "long": "77.12659" },
            //{ "lat": "28.64506", "long": "77.12702" },
            //{ "lat": "28.64476", "long": "77.12713" },
            //{ "lat": "28.64435", "long": "77.12728" },
            //{ "lat": "28.64376", "long": "77.12753" },
            //{ "lat": "28.64364", "long": "77.12758" },
            //{ "lat": "28.64149", "long": "77.1284" },
            //{ "lat": "28.64054", "long": "77.1288" },
            //{ "lat": "28.64041", "long": "77.12885" },
            //{ "lat": "28.64034", "long": "77.12884" },
            //{ "lat": "28.64031", "long": "77.12884" },
            //{ "lat": "28.64027", "long": "77.12884" },
            //{ "lat": "28.64022", "long": "77.12885" },
            //{ "lat": "28.64017", "long": "77.12886" },
            //{ "lat": "28.64004", "long": "77.12891" },
            //{ "lat": "28.63962", "long": "77.12907" },
            //{ "lat": "28.639478", "long": "77.1291227" },
            //{ "lat": "28.63948", "long": "77.12912" },
            //{ "lat": "28.63937", "long": "77.12916" },
            //{ "lat": "28.63803", "long": "77.12964" },
            //{ "lat": "28.63792", "long": "77.12955" },
            //{ "lat": "28.63785", "long": "77.1295" },
            //{ "lat": "28.63775", "long": "77.12944" },
            //{ "lat": "28.63766", "long": "77.12939" },
            //{ "lat": "28.63757", "long": "77.12934" },
            //{ "lat": "28.63751", "long": "77.12932" },
            //{ "lat": "28.63745", "long": "77.12929" },
            //{ "lat": "28.63741", "long": "77.12926" },
            //{ "lat": "28.63737", "long": "77.12923" },
            //{ "lat": "28.637120777.1289317" },
            //{ "lat": "28.63712", "long": "77.12893" },
            //{ "lat": "28.63701", "long": "77.12875" },
            //{ "lat": "28.63695", "long": "77.12866" },
            //{ "lat": "28.63687", "long": "77.12857" },
            //{ "lat": "28.6368", "long": "77.12849" },
            //{ "lat": "28.63672", "long": "77.12841" },
            //{ "lat": "28.63665", "long": "77.12836" },
            //{ "lat": "28.63661", "long": "77.12833" },
            //{ "lat": "28.63657", "long": "77.12831" },
            //{ "lat": "28.63648", "long": "77.12826" },
            //{ "lat": "28.63638", "long": "77.12821" },
            //{ "lat": "28.63635", "long": "77.1282" },
            //{ "lat": "28.63633", "long": "77.12819" },
            //{ "lat": "28.63628", "long": "77.12818" },
            //{ "lat": "28.63619", "long": "77.12817" },
            //{ "lat": "28.63608", "long": "77.12815" },
            //{ "lat": "28.63591", "long": "77.12813" },
            //{ "lat": "28.63566", "long": "77.12811" },
            //{ "lat": "28.6356", "long": "77.1281" },
            //{ "lat": "28.6353", "long": "77.12806" },
            //{ "lat": "28.63506", "long": "77.12797" },
            //{ "lat": "28.63495", "long": "77.12791" },
            //{ "lat": "28.63479", "long": "77.12782" },
            //{ "lat": "28.63456", "long": "77.12765" },
            //{ "lat": "28.63397", "long": "77.12715" },
            //{ "lat": "28.63342", "long": "77.12671" },
            //{ "lat": "28.63332", "long": "77.12664" },
            //{ "lat": "28.633", "long": "77.12637" },
            //{ "lat": "28.63294", "long": "77.12631" },
            //{ "lat": "28.63278", "long": "77.12617" },
            //{ "lat": "28.63233", "long": "77.12581" },
            //{ "lat": "28.63191", "long": "77.12543" },
            //{ "lat": "28.63134", "long": "77.12494" },
            //{ "lat": "28.63122", "long": "77.12485" },
            //{ "lat": "28.63085", "long": "77.12454" },
            //{ "lat": "28.6304", "long": "77.12414" },
            //{ "lat": "28.63009", "long": "77.12389" },
            //{ "lat": "28.62984", "long": "77.12368" },
            //{ "lat": "28.62977", "long": "77.12361" },
            //{ "lat": "28.62935", "long": "77.12324" },
            //{ "lat": "28.62906", "long": "77.12298" },
            //{ "lat": "28.62885", "long": "77.1228" },
            //{ "lat": "28.62859", "long": "77.12258" },
            //{ "lat": "28.62783", "long": "77.12194" },
            //{ "lat": "28.62694", "long": "77.12119" },
            //{ "lat": "28.6266", "long": "77.1209" },
            //{ "lat": "28.62628", "long": "77.12063" },
            //{ "lat": "28.62608", "long": "77.12046" },
            //{ "lat": "28.62584", "long": "77.12026" },
            //{ "lat": "28.62529", "long": "77.11977" },
            //{ "lat": "28.62476", "long": "77.11932" },
            //{ "lat": "28.6247", "long": "77.11927" },
            //{ "lat": "28.62389", "long": "77.11859" },
            //{ "lat": "28.62272", "long": "77.1176" },
            //{ "lat": "28.62242", "long": "77.11735" },
            //{ "lat": "28.62189", "long": "77.1169" },
            //{ "lat": "28.62161", "long": "77.11666" },
            //{ "lat": "28.62141", "long": "77.11648" },
            //{ "lat": "28.62134", "long": "77.11641" },
            //{ "lat": "28.62126", "long": "77.11632" },
            //{ "lat": "28.62116", "long": "77.11622" },
            //{ "lat": "28.62105", "long": "77.11609" },
            //{ "lat": "28.62096", "long": "77.11599" },
            //{ "lat": "28.62088", "long": "77.11588" },
            //{ "lat": "28.62075", "long": "77.11569" },
            //{ "lat": "28.62041", "long": "77.11523" },
            //{ "lat": "28.62023", "long": "77.11498" },
            //{ "lat": "28.62008", "long": "77.11477" },
            //{ "lat": "28.61984", "long": "77.11444" },
            //{ "lat": "28.61968", "long": "77.11421" },
            //{ "lat": "28.6195", "long": "77.11395" },
            //{ "lat": "28.61793", "long": "77.11176" },
            //{ "lat": "28.6178", "long": "77.11154" },
            //{ "lat": "28.61774", "long": "77.11146" },
            //{ "lat": "28.61747", "long": "77.11109" },
            //{ "lat": "28.61721", "long": "77.11071" },
            //{ "lat": "28.61661", "long": "77.10988" },
            //{ "lat": "28.61624", "long": "77.10937" },
            //{ "lat": "28.61603", "long": "77.10909" },
            //{ "lat": "28.61518", "long": "77.1079" },
            //{ "lat": "28.61506", "long": "77.10773" },
            //{ "lat": "28.61503", "long": "77.10762" },
            //{ "lat": "28.61502", "long": "77.10755" },
            //{ "lat": "28.61502", "long": "77.1075" },
            //{ "lat": "28.61503", "long": "77.10744" },
            //{ "lat": "28.61505", "long": "77.1074" },
            //{ "lat": "28.6150823", "long": "77.1073332" },
            //{ "lat": "28.61508", "long": "77.10733" },
            //{ "lat": "28.61533", "long": "77.10713" },
            //{ "lat": "28.61567", "long": "77.10687" },
            //{ "lat": "28.61589", "long": "77.10671" },
            //{ "lat": "28.61701", "long": "77.10599" },
            //{ "lat": "28.61716", "long": "77.1059" },
            //{ "lat": "28.61723", "long": "77.10583" },
            //{ "lat": "28.6173297", "long": "77.1057343" },
            //{ "lat": "28.61733", "long": "77.10573" },
            //{ "lat": "28.61766", "long": "77.10552" },
            //{ "lat": "28.61774", "long": "77.10547" },
            //{ "lat": "28.61921", "long": "77.10457" },
            //{ "lat": "28.6194", "long": "77.10445" },
            //{ "lat": "28.62063", "long": "77.10369" },
            //{ "lat": "28.62081", "long": "77.10358" },
            //{ "lat": "28.621", "long": "77.10345" },
            //{ "lat": "28.62112", "long": "77.10337" },
            //{ "lat": "28.62133", "long": "77.10324" },
            //{ "lat": "28.62156", "long": "77.10311" },
            //{ "lat": "28.62213", "long": "77.10275" },
            //{ "lat": "28.62233", "long": "77.10264" },
            //{ "lat": "28.62257", "long": "77.10252" },
            //{ "lat": "28.62329", "long": "77.10223" },
            //{ "lat": "28.62338", "long": "77.10219" },
            //{ "lat": "28.62382", "long": "77.10199" },
            //{ "lat": "28.62401", "long": "77.1019" },
            //{ "lat": "28.62429", "long": "77.10177" },
            //{ "lat": "28.62455", "long": "77.10167" },
            //{ "lat": "28.6247", "long": "77.1016" },
            //{ "lat": "28.62493", "long": "77.1015" },
            //{ "lat": "28.62503", "long": "77.10146" },
            //{ "lat": "28.62529", "long": "77.10137" },
            //{ "lat": "28.6254", "long": "77.10131" },
            //{ "lat": "28.62644", "long": "77.10084" },
            //{ "lat": "28.62724", "long": "77.10049" },
            //{ "lat": "28.62752", "long": "77.10037" },
            //{ "lat": "28.6282", "long": "77.1001" },
            //{ "lat": "28.62868", "long": "77.09988" },
            //{ "lat": "28.62929", "long": "77.09961" },
            //{ "lat": "28.6296", "long": "77.09947" },
            //{ "lat": "28.62974", "long": "77.09942" },
            //{ "lat": "28.62987", "long": "77.09935" },
            //{ "lat": "28.63002", "long": "77.09929" },
            //{ "lat": "28.63005", "long": "77.09927" },
            //{ "lat": "28.6302", "long": "77.09921" },
            //{ "lat": "28.63042", "long": "77.09912" },
            //{ "lat": "28.63065", "long": "77.09903" },
            //{ "lat": "28.63072", "long": "77.099" },
            //{ "lat": "28.63082", "long": "77.09895" },
            //{ "lat": "28.631", "long": "77.09887" },
            //{ "lat": "28.63117", "long": "77.0988" },
            //{ "lat": "28.63134", "long": "77.09873" },
            //{ "lat": "28.63153", "long": "77.09865" },
            //{ "lat": "28.63166", "long": "77.0986" },
            //{ "lat": "28.63173", "long": "77.09857" },
            //{ "lat": "28.63187", "long": "77.09851" },
            //{ "lat": "28.63208", "long": "77.09842" },
            //{ "lat": "28.63231", "long": "77.09832" },
            //{ "lat": "28.63245", "long": "77.09826" },
            //{ "lat": "28.6327", "long": "77.09816" },
            //{ "lat": "28.63308", "long": "77.09797" },
            //{ "lat": "28.63336", "long": "77.09785" },
            //{ "lat": "28.6334", "long": "77.09783" },
            //{ "lat": "28.63347", "long": "77.0978" },
            //{ "lat": "28.63363", "long": "77.09773" },
            //{ "lat": "28.63437", "long": "77.09742" },
            //{ "lat": "28.63474", "long": "77.09727" },
            //{ "lat": "28.63491", "long": "77.09721" },
            //{ "lat": "28.63512", "long": "77.09712" },
            //{ "lat": "28.63535", "long": "77.09702" },
            //{ "lat": "28.63547", "long": "77.09696" },
            //{ "lat": "28.63557", "long": "77.09692" },
            //{ "lat": "28.63581", "long": "77.09682" },
            //{ "lat": "28.63602", "long": "77.09674" },
            //{ "lat": "28.63603", "long": "77.09673" },
            //{ "lat": "28.6360725", "long": "77.096712" },
            //{ "lat": "28.6360606", "long": "lon77.0966776" }				
        ];
    };
    HomeComponent.prototype.insertCoordinates = function (count) {
        if (count < this.coordinateArr.length) {
            var transportRouteRunMonitoring = {};
            transportRouteRunMonitoring.location = {};
            transportRouteRunMonitoring.location.latitude = {};
            transportRouteRunMonitoring.location.longitude = {};
            transportRouteRunMonitoring.location.latitude = this.coordinateArr[count].lat;
            transportRouteRunMonitoring.location.longitude = this.coordinateArr[count].long;
            transportRouteRunMonitoring.monitoringDate = global_constants_1.AppSettings.CURRENT_DATE;
            transportRouteRunMonitoring.monitoringTime = moment(new Date()).format('HH:mm:ss');
            transportRouteRunMonitoring.routeID = "d377db25-4b07-4a09-9547-c65c3907b529";
            transportRouteRunMonitoring.transportRouteRunID = "f7b11b23-c383-471b-957e-ffddfc88e881";
            transportRouteRunMonitoring.organizationId = this.orgId;
            this._setupService.addCoordinates(transportRouteRunMonitoring).subscribe(function (result) {
            });
        }
    };
    return HomeComponent;
}());
HomeComponent = tslib_1.__decorate([
    core_1.Component({
        selector: 'home',
        template: __webpack_require__(208),
        providers: [primeng_1.ConfirmationService, setup_service_1.SetupService],
        styles: ["\n    .sebm-google-map-container {\n       height:500px;       \n     }\n    button[icon=\"fa-angle-double-up\"] {\n            display: none !important;\n    }\n    button[ng-reflect-icon=\"fa-angle-double-up\"] {\n        display: none !important;\n    }\nbutton[icon=\"fa-angle-double-down\"] {\n            display: none !important;\n    }\nbutton[ng-reflect-icon=\"fa-angle-double-down\"] {\n        display: none !important;\n    }\nbutton[icon=\"fa-angle-down\"] {\n            display: none !important;\n    }\nbutton[ng-reflect-icon=\"fa-angle-down\"] {\n        display: none !important;\n    }\nbutton[icon=\"fa-angle-up\"] {\n            display: none !important;\n    }\nbutton[ng-reflect-icon=\"fa-angle-up\"] {\n        display: none !important;\n    }\n  "],
        encapsulation: core_1.ViewEncapsulation.None
    }),
    tslib_1.__metadata("design:paramtypes", [router_1.Router, setup_service_1.SetupService, router_1.ActivatedRoute])
], HomeComponent);
exports.HomeComponent = HomeComponent;


/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__ = __webpack_require__(188);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserAnimationsModule", function() { return BrowserAnimationsModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoopAnimationsModule", function() { return NoopAnimationsModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵAnimationRenderer", function() { return AnimationRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵAnimationRendererFactory", function() { return AnimationRendererFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function() { return BROWSER_ANIMATIONS_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function() { return BROWSER_NOOP_ANIMATIONS_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return InjectableAnimationEngine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return instantiateDefaultStyleNormalizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return instantiateRendererFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return instantiateSupportedAnimationDriver; });
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * @license Angular v4.1.0
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */



/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var AnimationRendererFactory = (function () {
    /**
     * @param {?} delegate
     * @param {?} _engine
     * @param {?} _zone
     */
    function AnimationRendererFactory(delegate, _engine, _zone) {
        this.delegate = delegate;
        this._engine = _engine;
        this._zone = _zone;
    }
    /**
     * @param {?} hostElement
     * @param {?} type
     * @return {?}
     */
    AnimationRendererFactory.prototype.createRenderer = function (hostElement, type) {
        var _this = this;
        var /** @type {?} */ delegate = this.delegate.createRenderer(hostElement, type);
        if (!hostElement || !type || !type.data || !type.data['animation'])
            return delegate;
        var /** @type {?} */ namespaceId = type.id;
        var /** @type {?} */ animationTriggers = (type.data['animation']);
        animationTriggers.forEach(function (trigger) { return _this._engine.registerTrigger(trigger, namespaceify(namespaceId, trigger.name)); });
        return new AnimationRenderer(delegate, this._engine, this._zone, namespaceId);
    };
    return AnimationRendererFactory;
}());
AnimationRendererFactory.decorators = [
    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] },
];
/**
 * @nocollapse
 */
AnimationRendererFactory.ctorParameters = function () { return [
    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["RendererFactory2"], },
    { type: __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__["a" /* ɵAnimationEngine */], },
    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"], },
]; };
var AnimationRenderer = (function () {
    /**
     * @param {?} delegate
     * @param {?} _engine
     * @param {?} _zone
     * @param {?} _namespaceId
     */
    function AnimationRenderer(delegate, _engine, _zone, _namespaceId) {
        this.delegate = delegate;
        this._engine = _engine;
        this._zone = _zone;
        this._namespaceId = _namespaceId;
        this.destroyNode = null;
        this._flushPromise = null;
        this.destroyNode = this.delegate.destroyNode ? function (n) { return delegate.destroyNode(n); } : null;
    }
    Object.defineProperty(AnimationRenderer.prototype, "data", {
        /**
         * @return {?}
         */
        get: function () { return this.delegate.data; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AnimationRenderer.prototype.destroy = function () { this.delegate.destroy(); };
    /**
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    AnimationRenderer.prototype.createElement = function (name, namespace) {
        return this.delegate.createElement(name, namespace);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    AnimationRenderer.prototype.createComment = function (value) { return this.delegate.createComment(value); };
    /**
     * @param {?} value
     * @return {?}
     */
    AnimationRenderer.prototype.createText = function (value) { return this.delegate.createText(value); };
    /**
     * @param {?} selectorOrNode
     * @return {?}
     */
    AnimationRenderer.prototype.selectRootElement = function (selectorOrNode) {
        return this.delegate.selectRootElement(selectorOrNode);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AnimationRenderer.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };
    /**
     * @param {?} node
     * @return {?}
     */
    AnimationRenderer.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    AnimationRenderer.prototype.setAttribute = function (el, name, value, namespace) {
        this.delegate.setAttribute(el, name, value, namespace);
    };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    AnimationRenderer.prototype.removeAttribute = function (el, name, namespace) {
        this.delegate.removeAttribute(el, name, namespace);
    };
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    AnimationRenderer.prototype.addClass = function (el, name) { this.delegate.addClass(el, name); };
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    AnimationRenderer.prototype.removeClass = function (el, name) { this.delegate.removeClass(el, name); };
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} value
     * @param {?} flags
     * @return {?}
     */
    AnimationRenderer.prototype.setStyle = function (el, style, value, flags) {
        this.delegate.setStyle(el, style, value, flags);
    };
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} flags
     * @return {?}
     */
    AnimationRenderer.prototype.removeStyle = function (el, style, flags) {
        this.delegate.removeStyle(el, style, flags);
    };
    /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    AnimationRenderer.prototype.setValue = function (node, value) { this.delegate.setValue(node, value); };
    /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */
    AnimationRenderer.prototype.appendChild = function (parent, newChild) {
        var _this = this;
        this._engine.onInsert(newChild, function () { return _this.delegate.appendChild(parent, newChild); });
        this._queueFlush();
    };
    /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */
    AnimationRenderer.prototype.insertBefore = function (parent, newChild, refChild) {
        var _this = this;
        this._engine.onInsert(newChild, function () { return _this.delegate.insertBefore(parent, newChild, refChild); });
        this._queueFlush();
    };
    /**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */
    AnimationRenderer.prototype.removeChild = function (parent, oldChild) {
        var _this = this;
        this._engine.onRemove(oldChild, function () {
            // Note: if an component element has a leave animation, and the component
            // a host leave animation, the view engine will call `removeChild` for the parent
            // component renderer as well as for the child component renderer.
            // Therefore, we need to check if we already removed the element.
            if (_this.delegate.parentNode(oldChild)) {
                _this.delegate.removeChild(parent, oldChild);
            }
        });
        this._queueFlush();
    };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    AnimationRenderer.prototype.setProperty = function (el, name, value) {
        if (name.charAt(0) == '@') {
            this._engine.setProperty(el, namespaceify(this._namespaceId, name.substr(1)), value);
            this._queueFlush();
        }
        else {
            this.delegate.setProperty(el, name, value);
        }
    };
    /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    AnimationRenderer.prototype.listen = function (target, eventName, callback) {
        var _this = this;
        if (eventName.charAt(0) == '@') {
            var /** @type {?} */ element = resolveElementFromTarget(target);
            var _a = parseTriggerCallbackName(eventName.substr(1)), name = _a[0], phase = _a[1];
            return this._engine.listen(element, namespaceify(this._namespaceId, name), phase, function (event) {
                var /** @type {?} */ e = (event);
                if (e.triggerName) {
                    e.triggerName = deNamespaceify(_this._namespaceId, e.triggerName);
                }
                _this._zone.run(function () { return callback(event); });
            });
        }
        return this.delegate.listen(target, eventName, callback);
    };
    /**
     * @return {?}
     */
    AnimationRenderer.prototype._queueFlush = function () {
        var _this = this;
        if (!this._flushPromise) {
            this._zone.runOutsideAngular(function () {
                _this._flushPromise = Promise.resolve(null).then(function () {
                    _this._flushPromise = ((null));
                    _this._engine.flush();
                });
            });
        }
    };
    return AnimationRenderer;
}());
/**
 * @param {?} target
 * @return {?}
 */
function resolveElementFromTarget(target) {
    switch (target) {
        case 'body':
            return document.body;
        case 'document':
            return document;
        case 'window':
            return window;
        default:
            return target;
    }
}
/**
 * @param {?} triggerName
 * @return {?}
 */
function parseTriggerCallbackName(triggerName) {
    var /** @type {?} */ dotIndex = triggerName.indexOf('.');
    var /** @type {?} */ trigger = triggerName.substring(0, dotIndex);
    var /** @type {?} */ phase = triggerName.substr(dotIndex + 1);
    return [trigger, phase];
}
/**
 * @param {?} namespaceId
 * @param {?} value
 * @return {?}
 */
function namespaceify(namespaceId, value) {
    return namespaceId + "#" + value;
}
/**
 * @param {?} namespaceId
 * @param {?} value
 * @return {?}
 */
function deNamespaceify(namespaceId, value) {
    return value.replace(namespaceId + '#', '');
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var InjectableAnimationEngine = (function (_super) {
    __extends(InjectableAnimationEngine, _super);
    /**
     * @param {?} driver
     * @param {?} normalizer
     */
    function InjectableAnimationEngine(driver, normalizer) {
        return _super.call(this, driver, normalizer) || this;
    }
    return InjectableAnimationEngine;
}(__WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__["b" /* ɵDomAnimationEngine */]));
InjectableAnimationEngine.decorators = [
    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] },
];
/**
 * @nocollapse
 */
InjectableAnimationEngine.ctorParameters = function () { return [
    { type: __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__["c" /* AnimationDriver */], },
    { type: __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__["d" /* ɵAnimationStyleNormalizer */], },
]; };
/**
 * @return {?}
 */
function instantiateSupportedAnimationDriver() {
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__["e" /* ɵsupportsWebAnimations */])()) {
        return new __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__["f" /* ɵWebAnimationsDriver */]();
    }
    return new __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__["g" /* ɵNoopAnimationDriver */]();
}
/**
 * @return {?}
 */
function instantiateDefaultStyleNormalizer() {
    return new __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__["h" /* ɵWebAnimationsStyleNormalizer */]();
}
/**
 * @param {?} renderer
 * @param {?} engine
 * @param {?} zone
 * @return {?}
 */
function instantiateRendererFactory(renderer, engine, zone) {
    return new AnimationRendererFactory(renderer, engine, zone);
}
/**
 * Separate providers from the actual module so that we can do a local modification in Google3 to
 * include them in the BrowserModule.
 */
var BROWSER_ANIMATIONS_PROVIDERS = [
    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__["c" /* AnimationDriver */], useFactory: instantiateSupportedAnimationDriver },
    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__["d" /* ɵAnimationStyleNormalizer */], useFactory: instantiateDefaultStyleNormalizer },
    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__["a" /* ɵAnimationEngine */], useClass: InjectableAnimationEngine }, {
        provide: __WEBPACK_IMPORTED_MODULE_0__angular_core__["RendererFactory2"],
        useFactory: instantiateRendererFactory,
        deps: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["ɵDomRendererFactory2"], __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__["a" /* ɵAnimationEngine */], __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]]
    }
];
/**
 * Separate providers from the actual module so that we can do a local modification in Google3 to
 * include them in the BrowserTestingModule.
 */
var BROWSER_NOOP_ANIMATIONS_PROVIDERS = [
    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__["a" /* ɵAnimationEngine */], useClass: __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__["i" /* ɵNoopAnimationEngine */] }, {
        provide: __WEBPACK_IMPORTED_MODULE_0__angular_core__["RendererFactory2"],
        useFactory: instantiateRendererFactory,
        deps: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["ɵDomRendererFactory2"], __WEBPACK_IMPORTED_MODULE_2__angular_animations_browser__["a" /* ɵAnimationEngine */], __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]]
    }
];
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@experimental Animation support is experimental.
 */
var BrowserAnimationsModule = (function () {
    function BrowserAnimationsModule() {
    }
    return BrowserAnimationsModule;
}());
BrowserAnimationsModule.decorators = [
    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"], args: [{
                imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["BrowserModule"]],
                providers: BROWSER_ANIMATIONS_PROVIDERS,
            },] },
];
/**
 * @nocollapse
 */
BrowserAnimationsModule.ctorParameters = function () { return []; };
/**
 * \@experimental Animation support is experimental.
 */
var NoopAnimationsModule = (function () {
    function NoopAnimationsModule() {
    }
    return NoopAnimationsModule;
}());
NoopAnimationsModule.decorators = [
    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"], args: [{
                imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["BrowserModule"]],
                providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,
            },] },
];
/**
 * @nocollapse
 */
NoopAnimationsModule.ctorParameters = function () { return []; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all animation APIs of the animation browser package.
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the animation package.
 */
/**
 * Generated bundle index. Do not edit.
 */

//# sourceMappingURL=animations.es5.js.map


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__(1);
var circle_manager_1 = __webpack_require__(28);
var SebmGoogleMapCircle = (function () {
    function SebmGoogleMapCircle(_manager) {
        this._manager = _manager;
        /**
         * Indicates whether this Circle handles mouse events. Defaults to true.
         */
        this.clickable = true;
        /**
         * If set to true, the user can drag this circle over the map. Defaults to false.
         */
        this.draggable = false;
        /**
         * If set to true, the user can edit this circle by dragging the control points shown at
         * the center and around the circumference of the circle. Defaults to false.
         */
        this.editable = false;
        /**
         * The radius in meters on the Earth's surface.
         */
        this.radius = 0;
        /**
         * The stroke position. Defaults to CENTER.
         * This property is not supported on Internet Explorer 8 and earlier.
         */
        this.strokePosition = 'CENTER';
        /**
         * The stroke width in pixels.
         */
        this.strokeWeight = 0;
        /**
         * Whether this circle is visible on the map. Defaults to true.
         */
        this.visible = true;
        /**
         * This event is fired when the circle's center is changed.
         */
        this.centerChange = new core_1.EventEmitter();
        /**
         * This event emitter gets emitted when the user clicks on the circle.
         */
        this.circleClick = new core_1.EventEmitter();
        /**
         * This event emitter gets emitted when the user clicks on the circle.
         */
        this.circleDblClick = new core_1.EventEmitter();
        /**
         * This event is repeatedly fired while the user drags the circle.
         */
        this.drag = new core_1.EventEmitter();
        /**
         * This event is fired when the user stops dragging the circle.
         */
        this.dragEnd = new core_1.EventEmitter();
        /**
         * This event is fired when the user starts dragging the circle.
         */
        this.dragStart = new core_1.EventEmitter();
        /**
         * This event is fired when the DOM mousedown event is fired on the circle.
         */
        this.mouseDown = new core_1.EventEmitter();
        /**
         * This event is fired when the DOM mousemove event is fired on the circle.
         */
        this.mouseMove = new core_1.EventEmitter();
        /**
         * This event is fired on circle mouseout.
         */
        this.mouseOut = new core_1.EventEmitter();
        /**
         * This event is fired on circle mouseover.
         */
        this.mouseOver = new core_1.EventEmitter();
        /**
         * This event is fired when the DOM mouseup event is fired on the circle.
         */
        this.mouseUp = new core_1.EventEmitter();
        /**
         * This event is fired when the circle's radius is changed.
         */
        this.radiusChange = new core_1.EventEmitter();
        /**
         * This event is fired when the circle is right-clicked on.
         */
        this.rightClick = new core_1.EventEmitter();
        this._circleAddedToManager = false;
        this._eventSubscriptions = [];
    }
    /** @internal */
    SebmGoogleMapCircle.prototype.ngOnInit = function () {
        this._manager.addCircle(this);
        this._circleAddedToManager = true;
        this._registerEventListeners();
    };
    /** @internal */
    SebmGoogleMapCircle.prototype.ngOnChanges = function (changes) {
        if (!this._circleAddedToManager) {
            return;
        }
        if (changes['latitude'] || changes['longitude']) {
            this._manager.setCenter(this);
        }
        if (changes['editable']) {
            this._manager.setEditable(this);
        }
        if (changes['draggable']) {
            this._manager.setDraggable(this);
        }
        if (changes['visible']) {
            this._manager.setVisible(this);
        }
        if (changes['radius']) {
            this._manager.setRadius(this);
        }
        this._updateCircleOptionsChanges(changes);
    };
    SebmGoogleMapCircle.prototype._updateCircleOptionsChanges = function (changes) {
        var options = {};
        var optionKeys = Object.keys(changes).filter(function (k) { return SebmGoogleMapCircle._mapOptions.indexOf(k) !== -1; });
        optionKeys.forEach(function (k) { options[k] = changes[k].currentValue; });
        if (optionKeys.length > 0) {
            this._manager.setOptions(this, options);
        }
    };
    SebmGoogleMapCircle.prototype._registerEventListeners = function () {
        var _this = this;
        var events = new Map();
        events.set('center_changed', this.centerChange);
        events.set('click', this.circleClick);
        events.set('dblclick', this.circleDblClick);
        events.set('drag', this.drag);
        events.set('dragend', this.dragEnd);
        events.set('dragStart', this.dragStart);
        events.set('mousedown', this.mouseDown);
        events.set('mousemove', this.mouseMove);
        events.set('mouseout', this.mouseOut);
        events.set('mouseover', this.mouseOver);
        events.set('mouseup', this.mouseUp);
        events.set('radius_changed', this.radiusChange);
        events.set('rightclick', this.rightClick);
        events.forEach(function (eventEmitter, eventName) {
            _this._eventSubscriptions.push(_this._manager.createEventObservable(eventName, _this).subscribe(function (value) {
                switch (eventName) {
                    case 'radius_changed':
                        _this._manager.getRadius(_this).then(function (radius) { return eventEmitter.emit(radius); });
                        break;
                    case 'center_changed':
                        _this._manager.getCenter(_this).then(function (center) {
                            return eventEmitter.emit({ lat: center.lat(), lng: center.lng() });
                        });
                        break;
                    default:
                        eventEmitter.emit({ coords: { lat: value.latLng.lat(), lng: value.latLng.lng() } });
                }
            }));
        });
    };
    /** @internal */
    SebmGoogleMapCircle.prototype.ngOnDestroy = function () {
        this._eventSubscriptions.forEach(function (s) { s.unsubscribe(); });
        this._eventSubscriptions = null;
        this._manager.removeCircle(this);
    };
    /**
     * Gets the LatLngBounds of this Circle.
     */
    SebmGoogleMapCircle.prototype.getBounds = function () { return this._manager.getBounds(this); };
    SebmGoogleMapCircle.prototype.getCenter = function () { return this._manager.getCenter(this); };
    SebmGoogleMapCircle._mapOptions = [
        'fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight',
        'visible', 'zIndex'
    ];
    SebmGoogleMapCircle.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'sebm-google-map-circle',
                    inputs: [
                        'latitude', 'longitude', 'clickable', 'draggable: circleDraggable', 'editable', 'fillColor',
                        'fillOpacity', 'radius', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight',
                        'visible', 'zIndex'
                    ],
                    outputs: [
                        'centerChange', 'circleClick', 'circleDblClick', 'drag', 'dragEnd', 'dragStart', 'mouseDown',
                        'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'radiusChange', 'rightClick'
                    ]
                },] },
    ];
    /** @nocollapse */
    SebmGoogleMapCircle.ctorParameters = function () { return [
        { type: circle_manager_1.CircleManager, },
    ]; };
    return SebmGoogleMapCircle;
}());
exports.SebmGoogleMapCircle = SebmGoogleMapCircle;
//# sourceMappingURL=google-map-circle.js.map

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__(1);
var kml_layer_manager_1 = __webpack_require__(30);
var layerId = 0;
var SebmGoogleMapKmlLayer = (function () {
    function SebmGoogleMapKmlLayer(_manager) {
        this._manager = _manager;
        this._addedToManager = false;
        this._id = (layerId++).toString();
        this._subscriptions = [];
        /**
         * If true, the layer receives mouse events. Default value is true.
         */
        this.clickable = true;
        /**
         * By default, the input map is centered and zoomed to the bounding box of the contents of the
         * layer.
         * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom
         * were never set.
         */
        this.preserveViewport = false;
        /**
         * Whether to render the screen overlays. Default true.
         */
        this.screenOverlays = true;
        /**
         * Suppress the rendering of info windows when layer features are clicked.
         */
        this.suppressInfoWindows = false;
        /**
         * The URL of the KML document to display.
         */
        this.url = null;
        /**
         * The z-index of the layer.
         */
        this.zIndex = null;
        /**
         * This event is fired when a feature in the layer is clicked.
         */
        this.layerClick = new core_1.EventEmitter();
        /**
         * This event is fired when the KML layers default viewport has changed.
         */
        this.defaultViewportChange = new core_1.EventEmitter();
        /**
         * This event is fired when the KML layer has finished loading.
         * At this point it is safe to read the status property to determine if the layer loaded
         * successfully.
         */
        this.statusChange = new core_1.EventEmitter();
    }
    SebmGoogleMapKmlLayer.prototype.ngOnInit = function () {
        if (this._addedToManager) {
            return;
        }
        this._manager.addKmlLayer(this);
        this._addedToManager = true;
        this._addEventListeners();
    };
    SebmGoogleMapKmlLayer.prototype.ngOnChanges = function (changes) {
        if (!this._addedToManager) {
            return;
        }
        this._updatePolygonOptions(changes);
    };
    SebmGoogleMapKmlLayer.prototype._updatePolygonOptions = function (changes) {
        var options = Object.keys(changes)
            .filter(function (k) { return SebmGoogleMapKmlLayer._kmlLayerOptions.indexOf(k) !== -1; })
            .reduce(function (obj, k) {
            obj[k] = changes[k].currentValue;
            return obj;
        }, {});
        if (Object.keys(options).length > 0) {
            this._manager.setOptions(this, options);
        }
    };
    SebmGoogleMapKmlLayer.prototype._addEventListeners = function () {
        var _this = this;
        var listeners = [
            { name: 'click', handler: function (ev) { return _this.layerClick.emit(ev); } },
            { name: 'defaultviewport_changed', handler: function () { return _this.defaultViewportChange.emit(); } },
            { name: 'status_changed', handler: function () { return _this.statusChange.emit(); } },
        ];
        listeners.forEach(function (obj) {
            var os = _this._manager.createEventObservable(obj.name, _this).subscribe(obj.handler);
            _this._subscriptions.push(os);
        });
    };
    /** @internal */
    SebmGoogleMapKmlLayer.prototype.id = function () { return this._id; };
    /** @internal */
    SebmGoogleMapKmlLayer.prototype.toString = function () { return "SebmGoogleMapKmlLayer-" + this._id.toString(); };
    /** @internal */
    SebmGoogleMapKmlLayer.prototype.ngOnDestroy = function () {
        this._manager.deleteKmlLayer(this);
        // unsubscribe all registered observable subscriptions
        this._subscriptions.forEach(function (s) { return s.unsubscribe(); });
    };
    SebmGoogleMapKmlLayer._kmlLayerOptions = ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];
    SebmGoogleMapKmlLayer.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'sebm-google-map-kml-layer',
                    inputs: ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'],
                    outputs: ['layerClick', 'defaultViewportChange', 'statusChange']
                },] },
    ];
    /** @nocollapse */
    SebmGoogleMapKmlLayer.ctorParameters = function () { return [
        { type: kml_layer_manager_1.KmlLayerManager, },
    ]; };
    return SebmGoogleMapKmlLayer;
}());
exports.SebmGoogleMapKmlLayer = SebmGoogleMapKmlLayer;
//# sourceMappingURL=google-map-kml-layer.js.map

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__(1);
var marker_manager_1 = __webpack_require__(21);
var google_map_info_window_1 = __webpack_require__(26);
var markerId = 0;
/**
 * SebmGoogleMapMarker renders a map marker inside a {@link SebmGoogleMap}.
 *
 * ### Example
 * ```typescript
 * import { Component } from 'angular2/core';
 * import { SebmGoogleMap, SebmGoogleMapMarker } from 'angular2-google-maps/core';
 *
 * @Component({
 *  selector: 'my-map-cmp',
 *  directives: [SebmGoogleMap, SebmGoogleMapMarker],
 *  styles: [`
 *    .sebm-google-map-container {
 *      height: 300px;
 *    }
 * `],
 *  template: `
 *    <sebm-google-map [latitude]="lat" [longitude]="lng" [zoom]="zoom">
 *      <sebm-google-map-marker [latitude]="lat" [longitude]="lng" [label]="'M'">
 *      </sebm-google-map-marker>
 *    </sebm-google-map>
 *  `
 * })
 * ```
 */
var SebmGoogleMapMarker = (function () {
    function SebmGoogleMapMarker(_markerManager) {
        this._markerManager = _markerManager;
        /**
         * If true, the marker can be dragged. Default value is false.
         */
        this.draggable = false;
        /**
         * If true, the marker is visible
         */
        this.visible = true;
        /**
         * Whether to automatically open the child info window when the marker is clicked.
         */
        this.openInfoWindow = true;
        /**
         * The marker's opacity between 0.0 and 1.0.
         */
        this.opacity = 1;
        /**
         * All markers are displayed on the map in order of their zIndex, with higher values displaying in
         * front of markers with lower values. By default, markers are displayed according to their
         * vertical position on screen, with lower markers appearing in front of markers further up the
         * screen.
         */
        this.zIndex = 1;
        /**
         * This event emitter gets emitted when the user clicks on the marker.
         */
        this.markerClick = new core_1.EventEmitter();
        /**
         * This event is fired when the user stops dragging the marker.
         */
        this.dragEnd = new core_1.EventEmitter();
        /**
         * This event is fired when the user mouses over the marker.
         */
        this.mouseOver = new core_1.EventEmitter();
        /**
         * This event is fired when the user mouses outside the marker.
         */
        this.mouseOut = new core_1.EventEmitter();
        this._markerAddedToManger = false;
        this._observableSubscriptions = [];
        this._id = (markerId++).toString();
    }
    /* @internal */
    SebmGoogleMapMarker.prototype.ngAfterContentInit = function () {
        if (this.infoWindow != null) {
            this.infoWindow.hostMarker = this;
        }
    };
    /** @internal */
    SebmGoogleMapMarker.prototype.ngOnChanges = function (changes) {
        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {
            return;
        }
        if (!this._markerAddedToManger) {
            this._markerManager.addMarker(this);
            this._markerAddedToManger = true;
            this._addEventListeners();
            return;
        }
        if (changes['latitude'] || changes['longitude']) {
            this._markerManager.updateMarkerPosition(this);
        }
        if (changes['title']) {
            this._markerManager.updateTitle(this);
        }
        if (changes['label']) {
            this._markerManager.updateLabel(this);
        }
        if (changes['draggable']) {
            this._markerManager.updateDraggable(this);
        }
        if (changes['iconUrl']) {
            this._markerManager.updateIcon(this);
        }
        if (changes['opacity']) {
            this._markerManager.updateOpacity(this);
        }
        if (changes['visible']) {
            this._markerManager.updateVisible(this);
        }
        if (changes['zIndex']) {
            this._markerManager.updateZIndex(this);
        }
    };
    SebmGoogleMapMarker.prototype._addEventListeners = function () {
        var _this = this;
        var cs = this._markerManager.createEventObservable('click', this).subscribe(function () {
            if (_this.openInfoWindow && _this.infoWindow != null) {
                _this.infoWindow.open();
            }
            _this.markerClick.emit(null);
        });
        this._observableSubscriptions.push(cs);
        var ds = this._markerManager.createEventObservable('dragend', this)
            .subscribe(function (e) {
            _this.dragEnd.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });
        });
        this._observableSubscriptions.push(ds);
        var mover = this._markerManager.createEventObservable('mouseover', this)
            .subscribe(function (e) {
            _this.mouseOver.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });
        });
        this._observableSubscriptions.push(mover);
        var mout = this._markerManager.createEventObservable('mouseout', this)
            .subscribe(function (e) {
            _this.mouseOut.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });
        });
        this._observableSubscriptions.push(mout);
    };
    /** @internal */
    SebmGoogleMapMarker.prototype.id = function () { return this._id; };
    /** @internal */
    SebmGoogleMapMarker.prototype.toString = function () { return 'SebmGoogleMapMarker-' + this._id.toString(); };
    /** @internal */
    SebmGoogleMapMarker.prototype.ngOnDestroy = function () {
        this._markerManager.deleteMarker(this);
        // unsubscribe all registered observable subscriptions
        this._observableSubscriptions.forEach(function (s) { return s.unsubscribe(); });
    };
    SebmGoogleMapMarker.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'sebm-google-map-marker',
                    inputs: [
                        'latitude', 'longitude', 'title', 'label', 'draggable: markerDraggable', 'iconUrl',
                        'openInfoWindow', 'opacity', 'visible', 'zIndex'
                    ],
                    outputs: ['markerClick', 'dragEnd', 'mouseOver', 'mouseOut']
                },] },
    ];
    /** @nocollapse */
    SebmGoogleMapMarker.ctorParameters = function () { return [
        { type: marker_manager_1.MarkerManager, },
    ]; };
    SebmGoogleMapMarker.propDecorators = {
        'infoWindow': [{ type: core_1.ContentChild, args: [google_map_info_window_1.SebmGoogleMapInfoWindow,] },],
    };
    return SebmGoogleMapMarker;
}());
exports.SebmGoogleMapMarker = SebmGoogleMapMarker;
//# sourceMappingURL=google-map-marker.js.map

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__(1);
var polygon_manager_1 = __webpack_require__(31);
/**
 * SebmGoogleMapPolygon renders a polygon on a {@link SebmGoogleMap}
 *
 * ### Example
 * ```typescript
 * import { Component } from '@angular/core';
 * import { SebmGoogleMap, SebmGooglePolygon, LatLngLiteral } from 'angular2-maps/core';
 *
 * @Component({
 *  selector: 'my-map-cmp',
 *  styles: [`
 *    .semb-map-container {
 *      height: 300px;
 *    }
 * `],
 *  template: `
 *    <semb-map [latitude]="lat" [longitude]="lng" [zoom]="zoom">
 *      <semb-map-polygon [paths]="paths">
 *      </semb-map-polygon>
 *    </semb-map>
 *  `
 * })
 * export class MyMapCmp {
 *   lat: number = 0;
 *   lng: number = 0;
 *   zoom: number = 10;
 *   paths: Array<LatLngLiteral> = [
 *     { lat: 0,  lng: 10 },
 *     { lat: 0,  lng: 20 },
 *     { lat: 10, lng: 20 },
 *     { lat: 10, lng: 10 },
 *     { lat: 0,  lng: 10 }
 *   ]
 *   // Nesting paths will create a hole where they overlap;
 *   nestedPaths: Array<Array<LatLngLiteral>> = [[
 *     { lat: 0,  lng: 10 },
 *     { lat: 0,  lng: 20 },
 *     { lat: 10, lng: 20 },
 *     { lat: 10, lng: 10 },
 *     { lat: 0,  lng: 10 }
 *   ], [
 *     { lat: 0, lng: 15 },
 *     { lat: 0, lng: 20 },
 *     { lat: 5, lng: 20 },
 *     { lat: 5, lng: 15 },
 *     { lat: 0, lng: 15 }
 *   ]]
 * }
 * ```
 */
var SebmGoogleMapPolygon = (function () {
    function SebmGoogleMapPolygon(_polygonManager) {
        this._polygonManager = _polygonManager;
        /**
         * Indicates whether this Polygon handles mouse events. Defaults to true.
         */
        this.clickable = true;
        /**
         * If set to true, the user can drag this shape over the map. The geodesic
         * property defines the mode of dragging. Defaults to false.
         */
        this.draggable = false;
        /**
         * If set to true, the user can edit this shape by dragging the control
         * points shown at the vertices and on each segment. Defaults to false.
         */
        this.editable = false;
        /**
         * When true, edges of the polygon are interpreted as geodesic and will
         * follow the curvature of the Earth. When false, edges of the polygon are
         * rendered as straight lines in screen space. Note that the shape of a
         * geodesic polygon may appear to change when dragged, as the dimensions
         * are maintained relative to the surface of the earth. Defaults to false.
         */
        this.geodesic = false;
        /**
         * The ordered sequence of coordinates that designates a closed loop.
         * Unlike polylines, a polygon may consist of one or more paths.
         *  As a result, the paths property may specify one or more arrays of
         * LatLng coordinates. Paths are closed automatically; do not repeat the
         * first vertex of the path as the last vertex. Simple polygons may be
         * defined using a single array of LatLngs. More complex polygons may
         * specify an array of arrays. Any simple arrays are converted into Arrays.
         * Inserting or removing LatLngs from the Array will automatically update
         * the polygon on the map.
         */
        this.paths = [];
        /**
         * This event is fired when the DOM click event is fired on the Polygon.
         */
        this.polyClick = new core_1.EventEmitter();
        /**
         * This event is fired when the DOM dblclick event is fired on the Polygon.
         */
        this.polyDblClick = new core_1.EventEmitter();
        /**
         * This event is repeatedly fired while the user drags the polygon.
         */
        this.polyDrag = new core_1.EventEmitter();
        /**
         * This event is fired when the user stops dragging the polygon.
         */
        this.polyDragEnd = new core_1.EventEmitter();
        /**
         * This event is fired when the user starts dragging the polygon.
         */
        this.polyDragStart = new core_1.EventEmitter();
        /**
         * This event is fired when the DOM mousedown event is fired on the Polygon.
         */
        this.polyMouseDown = new core_1.EventEmitter();
        /**
         * This event is fired when the DOM mousemove event is fired on the Polygon.
         */
        this.polyMouseMove = new core_1.EventEmitter();
        /**
         * This event is fired on Polygon mouseout.
         */
        this.polyMouseOut = new core_1.EventEmitter();
        /**
         * This event is fired on Polygon mouseover.
         */
        this.polyMouseOver = new core_1.EventEmitter();
        /**
         * This event is fired whe the DOM mouseup event is fired on the Polygon
         */
        this.polyMouseUp = new core_1.EventEmitter();
        /**
         * This even is fired when the Polygon is right-clicked on.
         */
        this.polyRightClick = new core_1.EventEmitter();
        this._polygonAddedToManager = false;
        this._subscriptions = [];
    }
    /** @internal */
    SebmGoogleMapPolygon.prototype.ngAfterContentInit = function () {
        if (!this._polygonAddedToManager) {
            this._init();
        }
    };
    SebmGoogleMapPolygon.prototype.ngOnChanges = function (changes) {
        if (!this._polygonAddedToManager) {
            this._init();
            return;
        }
        this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));
    };
    SebmGoogleMapPolygon.prototype._init = function () {
        this._polygonManager.addPolygon(this);
        this._polygonAddedToManager = true;
        this._addEventListeners();
    };
    SebmGoogleMapPolygon.prototype._addEventListeners = function () {
        var _this = this;
        var handlers = [
            { name: 'click', handler: function (ev) { return _this.polyClick.emit(ev); } },
            { name: 'dbclick', handler: function (ev) { return _this.polyDblClick.emit(ev); } },
            { name: 'drag', handler: function (ev) { return _this.polyDrag.emit(ev); } },
            { name: 'dragend', handler: function (ev) { return _this.polyDragEnd.emit(ev); } },
            { name: 'dragstart', handler: function (ev) { return _this.polyDragStart.emit(ev); } },
            { name: 'mousedown', handler: function (ev) { return _this.polyMouseDown.emit(ev); } },
            { name: 'mousemove', handler: function (ev) { return _this.polyMouseMove.emit(ev); } },
            { name: 'mouseout', handler: function (ev) { return _this.polyMouseOut.emit(ev); } },
            { name: 'mouseover', handler: function (ev) { return _this.polyMouseOver.emit(ev); } },
            { name: 'mouseup', handler: function (ev) { return _this.polyMouseUp.emit(ev); } },
            { name: 'rightclick', handler: function (ev) { return _this.polyRightClick.emit(ev); } },
        ];
        handlers.forEach(function (obj) {
            var os = _this._polygonManager.createEventObservable(obj.name, _this).subscribe(obj.handler);
            _this._subscriptions.push(os);
        });
    };
    SebmGoogleMapPolygon.prototype._updatePolygonOptions = function (changes) {
        return Object.keys(changes)
            .filter(function (k) { return SebmGoogleMapPolygon._polygonOptionsAttributes.indexOf(k) !== -1; })
            .reduce(function (obj, k) {
            obj[k] = changes[k].currentValue;
            return obj;
        }, {});
    };
    /** @internal */
    SebmGoogleMapPolygon.prototype.id = function () { return this._id; };
    /** @internal */
    SebmGoogleMapPolygon.prototype.ngOnDestroy = function () {
        this._polygonManager.deletePolygon(this);
        // unsubscribe all registered observable subscriptions
        this._subscriptions.forEach(function (s) { return s.unsubscribe(); });
    };
    SebmGoogleMapPolygon._polygonOptionsAttributes = [
        'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map',
        'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable',
        'editable', 'visible'
    ];
    SebmGoogleMapPolygon.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'sebm-map-polygon',
                    inputs: [
                        'clickable',
                        'draggable: polyDraggable',
                        'editable',
                        'fillColor',
                        'fillOpacity',
                        'geodesic',
                        'paths',
                        'strokeColor',
                        'strokeOpacity',
                        'strokeWeight',
                        'visible',
                        'zIndex',
                    ],
                    outputs: [
                        'polyClick', 'polyDblClick', 'polyDrag', 'polyDragEnd', 'polyMouseDown', 'polyMouseMove',
                        'polyMouseOut', 'polyMouseOver', 'polyMouseUp', 'polyRightClick'
                    ]
                },] },
    ];
    /** @nocollapse */
    SebmGoogleMapPolygon.ctorParameters = function () { return [
        { type: polygon_manager_1.PolygonManager, },
    ]; };
    return SebmGoogleMapPolygon;
}());
exports.SebmGoogleMapPolygon = SebmGoogleMapPolygon;
//# sourceMappingURL=google-map-polygon.js.map

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__(1);
var polyline_manager_1 = __webpack_require__(32);
var google_map_polyline_point_1 = __webpack_require__(27);
var polylineId = 0;
/**
 * SebmGoogleMapPolyline renders a polyline on a {@link SebmGoogleMap}
 *
 * ### Example
 * ```typescript
 * import { Component } from 'angular2/core';
 * import { SebmGoogleMap, SebmGooglePolyline, SebmGooglePolylinePoint } from
 * 'angular2-google-maps/core';
 *
 * @Component({
 *  selector: 'my-map-cmp',
 *  directives: [SebmGoogleMap, SebmGooglePolyline, SebmGooglePolylinePoint],
 *  styles: [`
 *    .sebm-google-map-container {
 *      height: 300px;
 *    }
 * `],
 *  template: `
 *    <sebm-google-map [latitude]="lat" [longitude]="lng" [zoom]="zoom">
 *      <sebm-google-map-polyline>
 *          <sebm-google-map-polyline-point [latitude]="latA" [longitude]="lngA">
 *          </sebm-google-map-polyline-point>
 *          <sebm-google-map-polyline-point [latitude]="latB" [longitude]="lngB">
 *          </sebm-google-map-polyline-point>
 *      </sebm-google-map-polyline>
 *    </sebm-google-map>
 *  `
 * })
 * ```
 */
var SebmGoogleMapPolyline = (function () {
    function SebmGoogleMapPolyline(_polylineManager) {
        this._polylineManager = _polylineManager;
        /**
         * Indicates whether this Polyline handles mouse events. Defaults to true.
         */
        this.clickable = true;
        /**
         * If set to true, the user can drag this shape over the map. The geodesic property defines the
         * mode of dragging. Defaults to false.
         */
        this.draggable = false;
        /**
         * If set to true, the user can edit this shape by dragging the control points shown at the
         * vertices and on each segment. Defaults to false.
         */
        this.editable = false;
        /**
         * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of
         * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.
         * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions
         * are maintained relative to the surface of the earth. Defaults to false.
         */
        this.geodesic = false;
        /**
         * Whether this polyline is visible on the map. Defaults to true.
         */
        this.visible = true;
        /**
         * This event is fired when the DOM click event is fired on the Polyline.
         */
        this.lineClick = new core_1.EventEmitter();
        /**
         * This event is fired when the DOM dblclick event is fired on the Polyline.
         */
        this.lineDblClick = new core_1.EventEmitter();
        /**
         * This event is repeatedly fired while the user drags the polyline.
         */
        this.lineDrag = new core_1.EventEmitter();
        /**
         * This event is fired when the user stops dragging the polyline.
         */
        this.lineDragEnd = new core_1.EventEmitter();
        /**
         * This event is fired when the user starts dragging the polyline.
         */
        this.lineDragStart = new core_1.EventEmitter();
        /**
         * This event is fired when the DOM mousedown event is fired on the Polyline.
         */
        this.lineMouseDown = new core_1.EventEmitter();
        /**
         * This event is fired when the DOM mousemove event is fired on the Polyline.
         */
        this.lineMouseMove = new core_1.EventEmitter();
        /**
         * This event is fired on Polyline mouseout.
         */
        this.lineMouseOut = new core_1.EventEmitter();
        /**
         * This event is fired on Polyline mouseover.
         */
        this.lineMouseOver = new core_1.EventEmitter();
        /**
         * This event is fired whe the DOM mouseup event is fired on the Polyline
         */
        this.lineMouseUp = new core_1.EventEmitter();
        /**
         * This even is fired when the Polyline is right-clicked on.
         */
        this.lineRightClick = new core_1.EventEmitter();
        this._polylineAddedToManager = false;
        this._subscriptions = [];
        this._id = (polylineId++).toString();
    }
    /** @internal */
    SebmGoogleMapPolyline.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.points.length) {
            this.points.forEach(function (point) {
                var s = point.positionChanged.subscribe(function () { _this._polylineManager.updatePolylinePoints(_this); });
                _this._subscriptions.push(s);
            });
        }
        if (!this._polylineAddedToManager) {
            this._init();
        }
        var s = this.points.changes.subscribe(function () { return _this._polylineManager.updatePolylinePoints(_this); });
        this._subscriptions.push(s);
        this._polylineManager.updatePolylinePoints(this);
    };
    SebmGoogleMapPolyline.prototype.ngOnChanges = function (changes) {
        if (!this._polylineAddedToManager) {
            this._init();
            return;
        }
        var options = {};
        var optionKeys = Object.keys(changes).filter(function (k) { return SebmGoogleMapPolyline._polylineOptionsAttributes.indexOf(k) !== -1; });
        optionKeys.forEach(function (k) { return options[k] = changes[k].currentValue; });
        this._polylineManager.setPolylineOptions(this, options);
    };
    SebmGoogleMapPolyline.prototype._init = function () {
        this._polylineManager.addPolyline(this);
        this._polylineAddedToManager = true;
        this._addEventListeners();
    };
    SebmGoogleMapPolyline.prototype._addEventListeners = function () {
        var _this = this;
        var handlers = [
            { name: 'click', handler: function (ev) { return _this.lineClick.emit(ev); } },
            { name: 'dbclick', handler: function (ev) { return _this.lineDblClick.emit(ev); } },
            { name: 'drag', handler: function (ev) { return _this.lineDrag.emit(ev); } },
            { name: 'dragend', handler: function (ev) { return _this.lineDragEnd.emit(ev); } },
            { name: 'dragstart', handler: function (ev) { return _this.lineDragStart.emit(ev); } },
            { name: 'mousedown', handler: function (ev) { return _this.lineMouseDown.emit(ev); } },
            { name: 'mousemove', handler: function (ev) { return _this.lineMouseMove.emit(ev); } },
            { name: 'mouseout', handler: function (ev) { return _this.lineMouseOut.emit(ev); } },
            { name: 'mouseover', handler: function (ev) { return _this.lineMouseOver.emit(ev); } },
            { name: 'mouseup', handler: function (ev) { return _this.lineMouseUp.emit(ev); } },
            { name: 'rightclick', handler: function (ev) { return _this.lineRightClick.emit(ev); } },
        ];
        handlers.forEach(function (obj) {
            var os = _this._polylineManager.createEventObservable(obj.name, _this).subscribe(obj.handler);
            _this._subscriptions.push(os);
        });
    };
    /** @internal */
    SebmGoogleMapPolyline.prototype._getPoints = function () {
        if (this.points) {
            return this.points.toArray();
        }
        return [];
    };
    /** @internal */
    SebmGoogleMapPolyline.prototype.id = function () { return this._id; };
    /** @internal */
    SebmGoogleMapPolyline.prototype.ngOnDestroy = function () {
        this._polylineManager.deletePolyline(this);
        // unsubscribe all registered observable subscriptions
        this._subscriptions.forEach(function (s) { return s.unsubscribe(); });
    };
    SebmGoogleMapPolyline._polylineOptionsAttributes = [
        'draggable', 'editable', 'visible', 'geodesic', 'strokeColor', 'strokeOpacity', 'strokeWeight',
        'zIndex'
    ];
    SebmGoogleMapPolyline.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'sebm-google-map-polyline',
                    inputs: [
                        'clickable', 'draggable: polylineDraggable', 'editable', 'geodesic', 'strokeColor',
                        'strokeWeight', 'strokeOpacity', 'visible', 'zIndex'
                    ],
                    outputs: [
                        'lineClick', 'lineDblClick', 'lineDrag', 'lineDragEnd', 'lineMouseDown', 'lineMouseMove',
                        'lineMouseOut', 'lineMouseOver', 'lineMouseUp', 'lineRightClick'
                    ]
                },] },
    ];
    /** @nocollapse */
    SebmGoogleMapPolyline.ctorParameters = function () { return [
        { type: polyline_manager_1.PolylineManager, },
    ]; };
    SebmGoogleMapPolyline.propDecorators = {
        'points': [{ type: core_1.ContentChildren, args: [google_map_polyline_point_1.SebmGoogleMapPolylinePoint,] },],
    };
    return SebmGoogleMapPolyline;
}());
exports.SebmGoogleMapPolyline = SebmGoogleMapPolyline;
//# sourceMappingURL=google-map-polyline.js.map

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__(1);
var google_maps_api_wrapper_1 = __webpack_require__(17);
var circle_manager_1 = __webpack_require__(28);
var info_window_manager_1 = __webpack_require__(29);
var marker_manager_1 = __webpack_require__(21);
var polygon_manager_1 = __webpack_require__(31);
var polyline_manager_1 = __webpack_require__(32);
var kml_layer_manager_1 = __webpack_require__(30);
/**
 * SebMGoogleMap renders a Google Map.
 * **Important note**: To be able see a map in the browser, you have to define a height for the CSS
 * class `sebm-google-map-container`.
 *
 * ### Example
 * ```typescript
 * import { Component } from '@angular/core';
 * import { SebmGoogleMap } from 'angular2-google-maps/core';
 *
 * @Component({
 *  selector: 'my-map-cmp',
 *  directives: [SebmGoogleMap],
 *  styles: [`
 *    .sebm-google-map-container {
 *      height: 300px;
 *    }
 * `],
 *  template: `
 *    <sebm-google-map [latitude]="lat" [longitude]="lng" [zoom]="zoom">
 *    </sebm-google-map>
 *  `
 * })
 * ```
 */
var SebmGoogleMap = (function () {
    function SebmGoogleMap(_elem, _mapsWrapper) {
        this._elem = _elem;
        this._mapsWrapper = _mapsWrapper;
        /**
         * The longitude that defines the center of the map.
         */
        this.longitude = 0;
        /**
         * The latitude that defines the center of the map.
         */
        this.latitude = 0;
        /**
         * The zoom level of the map. The default zoom level is 8.
         */
        this.zoom = 8;
        /**
         * Enables/disables if map is draggable.
         */
        this.draggable = true;
        /**
         * Enables/disables zoom and center on double click. Enabled by default.
         */
        this.disableDoubleClickZoom = false;
        /**
         * Enables/disables all default UI of the Google map. Please note: When the map is created, this
         * value cannot get updated.
         */
        this.disableDefaultUI = false;
        /**
         * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.
         */
        this.scrollwheel = true;
        /**
         * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are
         * enabled by default.
         */
        this.keyboardShortcuts = true;
        /**
         * The enabled/disabled state of the Zoom control.
         */
        this.zoomControl = true;
        /**
         * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain
         * modes, these styles will only apply to labels and geometry.
         */
        this.styles = [];
        /**
         * When true and the latitude and/or longitude values changes, the Google Maps panTo method is
         * used to
         * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map
         */
        this.usePanning = false;
        /**
         * The initial enabled/disabled state of the Street View Pegman control.
         * This control is part of the default UI, and should be set to false when displaying a map type
         * on which the Street View road overlay should not appear (e.g. a non-Earth map type).
         */
        this.streetViewControl = true;
        /**
         * Sets the viewport to contain the given bounds.
         */
        this.fitBounds = null;
        /**
         * The initial enabled/disabled state of the Scale control. This is disabled by default.
         */
        this.scaleControl = false;
        /**
         * The initial enabled/disabled state of the Map type control.
         */
        this.mapTypeControl = false;
        this._observableSubscriptions = [];
        /**
         * This event emitter gets emitted when the user clicks on the map (but not when they click on a
         * marker or infoWindow).
         */
        this.mapClick = new core_1.EventEmitter();
        /**
         * This event emitter gets emitted when the user right-clicks on the map (but not when they click
         * on a marker or infoWindow).
         */
        this.mapRightClick = new core_1.EventEmitter();
        /**
         * This event emitter gets emitted when the user double-clicks on the map (but not when they click
         * on a marker or infoWindow).
         */
        this.mapDblClick = new core_1.EventEmitter();
        /**
         * This event emitter is fired when the map center changes.
         */
        this.centerChange = new core_1.EventEmitter();
        /**
         * This event is fired when the viewport bounds have changed.
         */
        this.boundsChange = new core_1.EventEmitter();
        /**
         * This event is fired when the map becomes idle after panning or zooming.
         */
        this.idle = new core_1.EventEmitter();
        /**
         * This event is fired when the zoom level has changed.
         */
        this.zoomChange = new core_1.EventEmitter();
    }
    /** @internal */
    SebmGoogleMap.prototype.ngOnInit = function () {
        // todo: this should be solved with a new component and a viewChild decorator
        var container = this._elem.nativeElement.querySelector('.sebm-google-map-container-inner');
        this._initMapInstance(container);
    };
    SebmGoogleMap.prototype._initMapInstance = function (el) {
        this._mapsWrapper.createMap(el, {
            center: { lat: this.latitude || 0, lng: this.longitude || 0 },
            zoom: this.zoom,
            minZoom: this.minZoom,
            maxZoom: this.maxZoom,
            disableDefaultUI: this.disableDefaultUI,
            backgroundColor: this.backgroundColor,
            draggable: this.draggable,
            draggableCursor: this.draggableCursor,
            draggingCursor: this.draggingCursor,
            keyboardShortcuts: this.keyboardShortcuts,
            zoomControl: this.zoomControl,
            styles: this.styles,
            streetViewControl: this.streetViewControl,
            scaleControl: this.scaleControl,
            mapTypeControl: this.mapTypeControl
        });
        // register event listeners
        this._handleMapCenterChange();
        this._handleMapZoomChange();
        this._handleMapMouseEvents();
        this._handleBoundsChange();
        this._handleIdleEvent();
    };
    /** @internal */
    SebmGoogleMap.prototype.ngOnDestroy = function () {
        // unsubscribe all registered observable subscriptions
        this._observableSubscriptions.forEach(function (s) { return s.unsubscribe(); });
    };
    /* @internal */
    SebmGoogleMap.prototype.ngOnChanges = function (changes) {
        this._updateMapOptionsChanges(changes);
        this._updatePosition(changes);
    };
    SebmGoogleMap.prototype._updateMapOptionsChanges = function (changes) {
        var options = {};
        var optionKeys = Object.keys(changes).filter(function (k) { return SebmGoogleMap._mapOptionsAttributes.indexOf(k) !== -1; });
        optionKeys.forEach(function (k) { options[k] = changes[k].currentValue; });
        this._mapsWrapper.setMapOptions(options);
    };
    /**
     * Triggers a resize event on the google map instance.
     * Returns a promise that gets resolved after the event was triggered.
     */
    SebmGoogleMap.prototype.triggerResize = function () {
        var _this = this;
        // Note: When we would trigger the resize event and show the map in the same turn (which is a
        // common case for triggering a resize event), then the resize event would not
        // work (to show the map), so we trigger the event in a timeout.
        return new Promise(function (resolve) {
            setTimeout(function () { return _this._mapsWrapper.triggerMapEvent('resize').then(function () { return resolve(); }); });
        });
    };
    SebmGoogleMap.prototype._updatePosition = function (changes) {
        if (changes['latitude'] == null && changes['longitude'] == null &&
            changes['fitBounds'] == null) {
            // no position update needed
            return;
        }
        // we prefer fitBounds in changes
        if (changes['fitBounds'] && this.fitBounds != null) {
            this._fitBounds();
            return;
        }
        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {
            return;
        }
        var newCenter = {
            lat: this.latitude,
            lng: this.longitude,
        };
        if (this.usePanning) {
            this._mapsWrapper.panTo(newCenter);
        }
        else {
            this._mapsWrapper.setCenter(newCenter);
        }
    };
    SebmGoogleMap.prototype._fitBounds = function () {
        if (this.usePanning) {
            this._mapsWrapper.panToBounds(this.fitBounds);
            return;
        }
        this._mapsWrapper.fitBounds(this.fitBounds);
    };
    SebmGoogleMap.prototype._handleMapCenterChange = function () {
        var _this = this;
        var s = this._mapsWrapper.subscribeToMapEvent('center_changed').subscribe(function () {
            _this._mapsWrapper.getCenter().then(function (center) {
                _this.latitude = center.lat();
                _this.longitude = center.lng();
                _this.centerChange.emit({ lat: _this.latitude, lng: _this.longitude });
            });
        });
        this._observableSubscriptions.push(s);
    };
    SebmGoogleMap.prototype._handleBoundsChange = function () {
        var _this = this;
        var s = this._mapsWrapper.subscribeToMapEvent('bounds_changed').subscribe(function () {
            _this._mapsWrapper.getBounds().then(function (bounds) { _this.boundsChange.emit(bounds); });
        });
        this._observableSubscriptions.push(s);
    };
    SebmGoogleMap.prototype._handleMapZoomChange = function () {
        var _this = this;
        var s = this._mapsWrapper.subscribeToMapEvent('zoom_changed').subscribe(function () {
            _this._mapsWrapper.getZoom().then(function (z) {
                _this.zoom = z;
                _this.zoomChange.emit(z);
            });
        });
        this._observableSubscriptions.push(s);
    };
    SebmGoogleMap.prototype._handleIdleEvent = function () {
        var _this = this;
        var s = this._mapsWrapper.subscribeToMapEvent('idle').subscribe(function () { _this.idle.emit(void 0); });
        this._observableSubscriptions.push(s);
    };
    SebmGoogleMap.prototype._handleMapMouseEvents = function () {
        var _this = this;
        var events = [
            { name: 'click', emitter: this.mapClick },
            { name: 'rightclick', emitter: this.mapRightClick },
        ];
        events.forEach(function (e) {
            var s = _this._mapsWrapper.subscribeToMapEvent(e.name).subscribe(function (event) {
                var value = { coords: { lat: event.latLng.lat(), lng: event.latLng.lng() } };
                e.emitter.emit(value);
            });
            _this._observableSubscriptions.push(s);
        });
    };
    /**
     * Map option attributes that can change over time
     */
    SebmGoogleMap._mapOptionsAttributes = [
        'disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor',
        'keyboardShortcuts', 'zoomControl', 'styles', 'streetViewControl', 'zoom', 'mapTypeControl',
        'minZoom', 'maxZoom'
    ];
    SebmGoogleMap.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'sebm-google-map',
                    providers: [
                        google_maps_api_wrapper_1.GoogleMapsAPIWrapper, marker_manager_1.MarkerManager, info_window_manager_1.InfoWindowManager, circle_manager_1.CircleManager, polyline_manager_1.PolylineManager,
                        polygon_manager_1.PolygonManager, kml_layer_manager_1.KmlLayerManager
                    ],
                    inputs: [
                        'longitude', 'latitude', 'zoom', 'minZoom', 'maxZoom', 'draggable: mapDraggable',
                        'disableDoubleClickZoom', 'disableDefaultUI', 'scrollwheel', 'backgroundColor', 'draggableCursor',
                        'draggingCursor', 'keyboardShortcuts', 'zoomControl', 'styles', 'usePanning', 'streetViewControl',
                        'fitBounds', 'scaleControl', 'mapTypeControl'
                    ],
                    outputs: [
                        'mapClick', 'mapRightClick', 'mapDblClick', 'centerChange', 'idle', 'boundsChange', 'zoomChange'
                    ],
                    host: { '[class.sebm-google-map-container]': 'true' },
                    styles: ["\n    .sebm-google-map-container-inner {\n      width: inherit;\n      height: inherit;\n    }\n    .sebm-google-map-content {\n      display:none;\n    }\n  "],
                    template: "\n    <div class='sebm-google-map-container-inner'></div>\n    <div class='sebm-google-map-content'>\n      <ng-content></ng-content>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    SebmGoogleMap.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: google_maps_api_wrapper_1.GoogleMapsAPIWrapper, },
    ]; };
    return SebmGoogleMap;
}());
exports.SebmGoogleMap = SebmGoogleMap;
//# sourceMappingURL=google-map.js.map

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var WindowRef = (function () {
    function WindowRef() {
    }
    WindowRef.prototype.getNativeWindow = function () { return window; };
    return WindowRef;
}());
exports.WindowRef = WindowRef;
var DocumentRef = (function () {
    function DocumentRef() {
    }
    DocumentRef.prototype.getNativeDocument = function () { return document; };
    return DocumentRef;
}());
exports.DocumentRef = DocumentRef;
exports.BROWSER_GLOBALS_PROVIDERS = [WindowRef, DocumentRef];
//# sourceMappingURL=browser-globals.js.map

/***/ }),
/* 43 */
/***/ (function(module, exports) {

var ENTITIES = [['Aacute', [193]], ['aacute', [225]], ['Abreve', [258]], ['abreve', [259]], ['ac', [8766]], ['acd', [8767]], ['acE', [8766, 819]], ['Acirc', [194]], ['acirc', [226]], ['acute', [180]], ['Acy', [1040]], ['acy', [1072]], ['AElig', [198]], ['aelig', [230]], ['af', [8289]], ['Afr', [120068]], ['afr', [120094]], ['Agrave', [192]], ['agrave', [224]], ['alefsym', [8501]], ['aleph', [8501]], ['Alpha', [913]], ['alpha', [945]], ['Amacr', [256]], ['amacr', [257]], ['amalg', [10815]], ['amp', [38]], ['AMP', [38]], ['andand', [10837]], ['And', [10835]], ['and', [8743]], ['andd', [10844]], ['andslope', [10840]], ['andv', [10842]], ['ang', [8736]], ['ange', [10660]], ['angle', [8736]], ['angmsdaa', [10664]], ['angmsdab', [10665]], ['angmsdac', [10666]], ['angmsdad', [10667]], ['angmsdae', [10668]], ['angmsdaf', [10669]], ['angmsdag', [10670]], ['angmsdah', [10671]], ['angmsd', [8737]], ['angrt', [8735]], ['angrtvb', [8894]], ['angrtvbd', [10653]], ['angsph', [8738]], ['angst', [197]], ['angzarr', [9084]], ['Aogon', [260]], ['aogon', [261]], ['Aopf', [120120]], ['aopf', [120146]], ['apacir', [10863]], ['ap', [8776]], ['apE', [10864]], ['ape', [8778]], ['apid', [8779]], ['apos', [39]], ['ApplyFunction', [8289]], ['approx', [8776]], ['approxeq', [8778]], ['Aring', [197]], ['aring', [229]], ['Ascr', [119964]], ['ascr', [119990]], ['Assign', [8788]], ['ast', [42]], ['asymp', [8776]], ['asympeq', [8781]], ['Atilde', [195]], ['atilde', [227]], ['Auml', [196]], ['auml', [228]], ['awconint', [8755]], ['awint', [10769]], ['backcong', [8780]], ['backepsilon', [1014]], ['backprime', [8245]], ['backsim', [8765]], ['backsimeq', [8909]], ['Backslash', [8726]], ['Barv', [10983]], ['barvee', [8893]], ['barwed', [8965]], ['Barwed', [8966]], ['barwedge', [8965]], ['bbrk', [9141]], ['bbrktbrk', [9142]], ['bcong', [8780]], ['Bcy', [1041]], ['bcy', [1073]], ['bdquo', [8222]], ['becaus', [8757]], ['because', [8757]], ['Because', [8757]], ['bemptyv', [10672]], ['bepsi', [1014]], ['bernou', [8492]], ['Bernoullis', [8492]], ['Beta', [914]], ['beta', [946]], ['beth', [8502]], ['between', [8812]], ['Bfr', [120069]], ['bfr', [120095]], ['bigcap', [8898]], ['bigcirc', [9711]], ['bigcup', [8899]], ['bigodot', [10752]], ['bigoplus', [10753]], ['bigotimes', [10754]], ['bigsqcup', [10758]], ['bigstar', [9733]], ['bigtriangledown', [9661]], ['bigtriangleup', [9651]], ['biguplus', [10756]], ['bigvee', [8897]], ['bigwedge', [8896]], ['bkarow', [10509]], ['blacklozenge', [10731]], ['blacksquare', [9642]], ['blacktriangle', [9652]], ['blacktriangledown', [9662]], ['blacktriangleleft', [9666]], ['blacktriangleright', [9656]], ['blank', [9251]], ['blk12', [9618]], ['blk14', [9617]], ['blk34', [9619]], ['block', [9608]], ['bne', [61, 8421]], ['bnequiv', [8801, 8421]], ['bNot', [10989]], ['bnot', [8976]], ['Bopf', [120121]], ['bopf', [120147]], ['bot', [8869]], ['bottom', [8869]], ['bowtie', [8904]], ['boxbox', [10697]], ['boxdl', [9488]], ['boxdL', [9557]], ['boxDl', [9558]], ['boxDL', [9559]], ['boxdr', [9484]], ['boxdR', [9554]], ['boxDr', [9555]], ['boxDR', [9556]], ['boxh', [9472]], ['boxH', [9552]], ['boxhd', [9516]], ['boxHd', [9572]], ['boxhD', [9573]], ['boxHD', [9574]], ['boxhu', [9524]], ['boxHu', [9575]], ['boxhU', [9576]], ['boxHU', [9577]], ['boxminus', [8863]], ['boxplus', [8862]], ['boxtimes', [8864]], ['boxul', [9496]], ['boxuL', [9563]], ['boxUl', [9564]], ['boxUL', [9565]], ['boxur', [9492]], ['boxuR', [9560]], ['boxUr', [9561]], ['boxUR', [9562]], ['boxv', [9474]], ['boxV', [9553]], ['boxvh', [9532]], ['boxvH', [9578]], ['boxVh', [9579]], ['boxVH', [9580]], ['boxvl', [9508]], ['boxvL', [9569]], ['boxVl', [9570]], ['boxVL', [9571]], ['boxvr', [9500]], ['boxvR', [9566]], ['boxVr', [9567]], ['boxVR', [9568]], ['bprime', [8245]], ['breve', [728]], ['Breve', [728]], ['brvbar', [166]], ['bscr', [119991]], ['Bscr', [8492]], ['bsemi', [8271]], ['bsim', [8765]], ['bsime', [8909]], ['bsolb', [10693]], ['bsol', [92]], ['bsolhsub', [10184]], ['bull', [8226]], ['bullet', [8226]], ['bump', [8782]], ['bumpE', [10926]], ['bumpe', [8783]], ['Bumpeq', [8782]], ['bumpeq', [8783]], ['Cacute', [262]], ['cacute', [263]], ['capand', [10820]], ['capbrcup', [10825]], ['capcap', [10827]], ['cap', [8745]], ['Cap', [8914]], ['capcup', [10823]], ['capdot', [10816]], ['CapitalDifferentialD', [8517]], ['caps', [8745, 65024]], ['caret', [8257]], ['caron', [711]], ['Cayleys', [8493]], ['ccaps', [10829]], ['Ccaron', [268]], ['ccaron', [269]], ['Ccedil', [199]], ['ccedil', [231]], ['Ccirc', [264]], ['ccirc', [265]], ['Cconint', [8752]], ['ccups', [10828]], ['ccupssm', [10832]], ['Cdot', [266]], ['cdot', [267]], ['cedil', [184]], ['Cedilla', [184]], ['cemptyv', [10674]], ['cent', [162]], ['centerdot', [183]], ['CenterDot', [183]], ['cfr', [120096]], ['Cfr', [8493]], ['CHcy', [1063]], ['chcy', [1095]], ['check', [10003]], ['checkmark', [10003]], ['Chi', [935]], ['chi', [967]], ['circ', [710]], ['circeq', [8791]], ['circlearrowleft', [8634]], ['circlearrowright', [8635]], ['circledast', [8859]], ['circledcirc', [8858]], ['circleddash', [8861]], ['CircleDot', [8857]], ['circledR', [174]], ['circledS', [9416]], ['CircleMinus', [8854]], ['CirclePlus', [8853]], ['CircleTimes', [8855]], ['cir', [9675]], ['cirE', [10691]], ['cire', [8791]], ['cirfnint', [10768]], ['cirmid', [10991]], ['cirscir', [10690]], ['ClockwiseContourIntegral', [8754]], ['clubs', [9827]], ['clubsuit', [9827]], ['colon', [58]], ['Colon', [8759]], ['Colone', [10868]], ['colone', [8788]], ['coloneq', [8788]], ['comma', [44]], ['commat', [64]], ['comp', [8705]], ['compfn', [8728]], ['complement', [8705]], ['complexes', [8450]], ['cong', [8773]], ['congdot', [10861]], ['Congruent', [8801]], ['conint', [8750]], ['Conint', [8751]], ['ContourIntegral', [8750]], ['copf', [120148]], ['Copf', [8450]], ['coprod', [8720]], ['Coproduct', [8720]], ['copy', [169]], ['COPY', [169]], ['copysr', [8471]], ['CounterClockwiseContourIntegral', [8755]], ['crarr', [8629]], ['cross', [10007]], ['Cross', [10799]], ['Cscr', [119966]], ['cscr', [119992]], ['csub', [10959]], ['csube', [10961]], ['csup', [10960]], ['csupe', [10962]], ['ctdot', [8943]], ['cudarrl', [10552]], ['cudarrr', [10549]], ['cuepr', [8926]], ['cuesc', [8927]], ['cularr', [8630]], ['cularrp', [10557]], ['cupbrcap', [10824]], ['cupcap', [10822]], ['CupCap', [8781]], ['cup', [8746]], ['Cup', [8915]], ['cupcup', [10826]], ['cupdot', [8845]], ['cupor', [10821]], ['cups', [8746, 65024]], ['curarr', [8631]], ['curarrm', [10556]], ['curlyeqprec', [8926]], ['curlyeqsucc', [8927]], ['curlyvee', [8910]], ['curlywedge', [8911]], ['curren', [164]], ['curvearrowleft', [8630]], ['curvearrowright', [8631]], ['cuvee', [8910]], ['cuwed', [8911]], ['cwconint', [8754]], ['cwint', [8753]], ['cylcty', [9005]], ['dagger', [8224]], ['Dagger', [8225]], ['daleth', [8504]], ['darr', [8595]], ['Darr', [8609]], ['dArr', [8659]], ['dash', [8208]], ['Dashv', [10980]], ['dashv', [8867]], ['dbkarow', [10511]], ['dblac', [733]], ['Dcaron', [270]], ['dcaron', [271]], ['Dcy', [1044]], ['dcy', [1076]], ['ddagger', [8225]], ['ddarr', [8650]], ['DD', [8517]], ['dd', [8518]], ['DDotrahd', [10513]], ['ddotseq', [10871]], ['deg', [176]], ['Del', [8711]], ['Delta', [916]], ['delta', [948]], ['demptyv', [10673]], ['dfisht', [10623]], ['Dfr', [120071]], ['dfr', [120097]], ['dHar', [10597]], ['dharl', [8643]], ['dharr', [8642]], ['DiacriticalAcute', [180]], ['DiacriticalDot', [729]], ['DiacriticalDoubleAcute', [733]], ['DiacriticalGrave', [96]], ['DiacriticalTilde', [732]], ['diam', [8900]], ['diamond', [8900]], ['Diamond', [8900]], ['diamondsuit', [9830]], ['diams', [9830]], ['die', [168]], ['DifferentialD', [8518]], ['digamma', [989]], ['disin', [8946]], ['div', [247]], ['divide', [247]], ['divideontimes', [8903]], ['divonx', [8903]], ['DJcy', [1026]], ['djcy', [1106]], ['dlcorn', [8990]], ['dlcrop', [8973]], ['dollar', [36]], ['Dopf', [120123]], ['dopf', [120149]], ['Dot', [168]], ['dot', [729]], ['DotDot', [8412]], ['doteq', [8784]], ['doteqdot', [8785]], ['DotEqual', [8784]], ['dotminus', [8760]], ['dotplus', [8724]], ['dotsquare', [8865]], ['doublebarwedge', [8966]], ['DoubleContourIntegral', [8751]], ['DoubleDot', [168]], ['DoubleDownArrow', [8659]], ['DoubleLeftArrow', [8656]], ['DoubleLeftRightArrow', [8660]], ['DoubleLeftTee', [10980]], ['DoubleLongLeftArrow', [10232]], ['DoubleLongLeftRightArrow', [10234]], ['DoubleLongRightArrow', [10233]], ['DoubleRightArrow', [8658]], ['DoubleRightTee', [8872]], ['DoubleUpArrow', [8657]], ['DoubleUpDownArrow', [8661]], ['DoubleVerticalBar', [8741]], ['DownArrowBar', [10515]], ['downarrow', [8595]], ['DownArrow', [8595]], ['Downarrow', [8659]], ['DownArrowUpArrow', [8693]], ['DownBreve', [785]], ['downdownarrows', [8650]], ['downharpoonleft', [8643]], ['downharpoonright', [8642]], ['DownLeftRightVector', [10576]], ['DownLeftTeeVector', [10590]], ['DownLeftVectorBar', [10582]], ['DownLeftVector', [8637]], ['DownRightTeeVector', [10591]], ['DownRightVectorBar', [10583]], ['DownRightVector', [8641]], ['DownTeeArrow', [8615]], ['DownTee', [8868]], ['drbkarow', [10512]], ['drcorn', [8991]], ['drcrop', [8972]], ['Dscr', [119967]], ['dscr', [119993]], ['DScy', [1029]], ['dscy', [1109]], ['dsol', [10742]], ['Dstrok', [272]], ['dstrok', [273]], ['dtdot', [8945]], ['dtri', [9663]], ['dtrif', [9662]], ['duarr', [8693]], ['duhar', [10607]], ['dwangle', [10662]], ['DZcy', [1039]], ['dzcy', [1119]], ['dzigrarr', [10239]], ['Eacute', [201]], ['eacute', [233]], ['easter', [10862]], ['Ecaron', [282]], ['ecaron', [283]], ['Ecirc', [202]], ['ecirc', [234]], ['ecir', [8790]], ['ecolon', [8789]], ['Ecy', [1069]], ['ecy', [1101]], ['eDDot', [10871]], ['Edot', [278]], ['edot', [279]], ['eDot', [8785]], ['ee', [8519]], ['efDot', [8786]], ['Efr', [120072]], ['efr', [120098]], ['eg', [10906]], ['Egrave', [200]], ['egrave', [232]], ['egs', [10902]], ['egsdot', [10904]], ['el', [10905]], ['Element', [8712]], ['elinters', [9191]], ['ell', [8467]], ['els', [10901]], ['elsdot', [10903]], ['Emacr', [274]], ['emacr', [275]], ['empty', [8709]], ['emptyset', [8709]], ['EmptySmallSquare', [9723]], ['emptyv', [8709]], ['EmptyVerySmallSquare', [9643]], ['emsp13', [8196]], ['emsp14', [8197]], ['emsp', [8195]], ['ENG', [330]], ['eng', [331]], ['ensp', [8194]], ['Eogon', [280]], ['eogon', [281]], ['Eopf', [120124]], ['eopf', [120150]], ['epar', [8917]], ['eparsl', [10723]], ['eplus', [10865]], ['epsi', [949]], ['Epsilon', [917]], ['epsilon', [949]], ['epsiv', [1013]], ['eqcirc', [8790]], ['eqcolon', [8789]], ['eqsim', [8770]], ['eqslantgtr', [10902]], ['eqslantless', [10901]], ['Equal', [10869]], ['equals', [61]], ['EqualTilde', [8770]], ['equest', [8799]], ['Equilibrium', [8652]], ['equiv', [8801]], ['equivDD', [10872]], ['eqvparsl', [10725]], ['erarr', [10609]], ['erDot', [8787]], ['escr', [8495]], ['Escr', [8496]], ['esdot', [8784]], ['Esim', [10867]], ['esim', [8770]], ['Eta', [919]], ['eta', [951]], ['ETH', [208]], ['eth', [240]], ['Euml', [203]], ['euml', [235]], ['euro', [8364]], ['excl', [33]], ['exist', [8707]], ['Exists', [8707]], ['expectation', [8496]], ['exponentiale', [8519]], ['ExponentialE', [8519]], ['fallingdotseq', [8786]], ['Fcy', [1060]], ['fcy', [1092]], ['female', [9792]], ['ffilig', [64259]], ['fflig', [64256]], ['ffllig', [64260]], ['Ffr', [120073]], ['ffr', [120099]], ['filig', [64257]], ['FilledSmallSquare', [9724]], ['FilledVerySmallSquare', [9642]], ['fjlig', [102, 106]], ['flat', [9837]], ['fllig', [64258]], ['fltns', [9649]], ['fnof', [402]], ['Fopf', [120125]], ['fopf', [120151]], ['forall', [8704]], ['ForAll', [8704]], ['fork', [8916]], ['forkv', [10969]], ['Fouriertrf', [8497]], ['fpartint', [10765]], ['frac12', [189]], ['frac13', [8531]], ['frac14', [188]], ['frac15', [8533]], ['frac16', [8537]], ['frac18', [8539]], ['frac23', [8532]], ['frac25', [8534]], ['frac34', [190]], ['frac35', [8535]], ['frac38', [8540]], ['frac45', [8536]], ['frac56', [8538]], ['frac58', [8541]], ['frac78', [8542]], ['frasl', [8260]], ['frown', [8994]], ['fscr', [119995]], ['Fscr', [8497]], ['gacute', [501]], ['Gamma', [915]], ['gamma', [947]], ['Gammad', [988]], ['gammad', [989]], ['gap', [10886]], ['Gbreve', [286]], ['gbreve', [287]], ['Gcedil', [290]], ['Gcirc', [284]], ['gcirc', [285]], ['Gcy', [1043]], ['gcy', [1075]], ['Gdot', [288]], ['gdot', [289]], ['ge', [8805]], ['gE', [8807]], ['gEl', [10892]], ['gel', [8923]], ['geq', [8805]], ['geqq', [8807]], ['geqslant', [10878]], ['gescc', [10921]], ['ges', [10878]], ['gesdot', [10880]], ['gesdoto', [10882]], ['gesdotol', [10884]], ['gesl', [8923, 65024]], ['gesles', [10900]], ['Gfr', [120074]], ['gfr', [120100]], ['gg', [8811]], ['Gg', [8921]], ['ggg', [8921]], ['gimel', [8503]], ['GJcy', [1027]], ['gjcy', [1107]], ['gla', [10917]], ['gl', [8823]], ['glE', [10898]], ['glj', [10916]], ['gnap', [10890]], ['gnapprox', [10890]], ['gne', [10888]], ['gnE', [8809]], ['gneq', [10888]], ['gneqq', [8809]], ['gnsim', [8935]], ['Gopf', [120126]], ['gopf', [120152]], ['grave', [96]], ['GreaterEqual', [8805]], ['GreaterEqualLess', [8923]], ['GreaterFullEqual', [8807]], ['GreaterGreater', [10914]], ['GreaterLess', [8823]], ['GreaterSlantEqual', [10878]], ['GreaterTilde', [8819]], ['Gscr', [119970]], ['gscr', [8458]], ['gsim', [8819]], ['gsime', [10894]], ['gsiml', [10896]], ['gtcc', [10919]], ['gtcir', [10874]], ['gt', [62]], ['GT', [62]], ['Gt', [8811]], ['gtdot', [8919]], ['gtlPar', [10645]], ['gtquest', [10876]], ['gtrapprox', [10886]], ['gtrarr', [10616]], ['gtrdot', [8919]], ['gtreqless', [8923]], ['gtreqqless', [10892]], ['gtrless', [8823]], ['gtrsim', [8819]], ['gvertneqq', [8809, 65024]], ['gvnE', [8809, 65024]], ['Hacek', [711]], ['hairsp', [8202]], ['half', [189]], ['hamilt', [8459]], ['HARDcy', [1066]], ['hardcy', [1098]], ['harrcir', [10568]], ['harr', [8596]], ['hArr', [8660]], ['harrw', [8621]], ['Hat', [94]], ['hbar', [8463]], ['Hcirc', [292]], ['hcirc', [293]], ['hearts', [9829]], ['heartsuit', [9829]], ['hellip', [8230]], ['hercon', [8889]], ['hfr', [120101]], ['Hfr', [8460]], ['HilbertSpace', [8459]], ['hksearow', [10533]], ['hkswarow', [10534]], ['hoarr', [8703]], ['homtht', [8763]], ['hookleftarrow', [8617]], ['hookrightarrow', [8618]], ['hopf', [120153]], ['Hopf', [8461]], ['horbar', [8213]], ['HorizontalLine', [9472]], ['hscr', [119997]], ['Hscr', [8459]], ['hslash', [8463]], ['Hstrok', [294]], ['hstrok', [295]], ['HumpDownHump', [8782]], ['HumpEqual', [8783]], ['hybull', [8259]], ['hyphen', [8208]], ['Iacute', [205]], ['iacute', [237]], ['ic', [8291]], ['Icirc', [206]], ['icirc', [238]], ['Icy', [1048]], ['icy', [1080]], ['Idot', [304]], ['IEcy', [1045]], ['iecy', [1077]], ['iexcl', [161]], ['iff', [8660]], ['ifr', [120102]], ['Ifr', [8465]], ['Igrave', [204]], ['igrave', [236]], ['ii', [8520]], ['iiiint', [10764]], ['iiint', [8749]], ['iinfin', [10716]], ['iiota', [8489]], ['IJlig', [306]], ['ijlig', [307]], ['Imacr', [298]], ['imacr', [299]], ['image', [8465]], ['ImaginaryI', [8520]], ['imagline', [8464]], ['imagpart', [8465]], ['imath', [305]], ['Im', [8465]], ['imof', [8887]], ['imped', [437]], ['Implies', [8658]], ['incare', [8453]], ['in', [8712]], ['infin', [8734]], ['infintie', [10717]], ['inodot', [305]], ['intcal', [8890]], ['int', [8747]], ['Int', [8748]], ['integers', [8484]], ['Integral', [8747]], ['intercal', [8890]], ['Intersection', [8898]], ['intlarhk', [10775]], ['intprod', [10812]], ['InvisibleComma', [8291]], ['InvisibleTimes', [8290]], ['IOcy', [1025]], ['iocy', [1105]], ['Iogon', [302]], ['iogon', [303]], ['Iopf', [120128]], ['iopf', [120154]], ['Iota', [921]], ['iota', [953]], ['iprod', [10812]], ['iquest', [191]], ['iscr', [119998]], ['Iscr', [8464]], ['isin', [8712]], ['isindot', [8949]], ['isinE', [8953]], ['isins', [8948]], ['isinsv', [8947]], ['isinv', [8712]], ['it', [8290]], ['Itilde', [296]], ['itilde', [297]], ['Iukcy', [1030]], ['iukcy', [1110]], ['Iuml', [207]], ['iuml', [239]], ['Jcirc', [308]], ['jcirc', [309]], ['Jcy', [1049]], ['jcy', [1081]], ['Jfr', [120077]], ['jfr', [120103]], ['jmath', [567]], ['Jopf', [120129]], ['jopf', [120155]], ['Jscr', [119973]], ['jscr', [119999]], ['Jsercy', [1032]], ['jsercy', [1112]], ['Jukcy', [1028]], ['jukcy', [1108]], ['Kappa', [922]], ['kappa', [954]], ['kappav', [1008]], ['Kcedil', [310]], ['kcedil', [311]], ['Kcy', [1050]], ['kcy', [1082]], ['Kfr', [120078]], ['kfr', [120104]], ['kgreen', [312]], ['KHcy', [1061]], ['khcy', [1093]], ['KJcy', [1036]], ['kjcy', [1116]], ['Kopf', [120130]], ['kopf', [120156]], ['Kscr', [119974]], ['kscr', [120000]], ['lAarr', [8666]], ['Lacute', [313]], ['lacute', [314]], ['laemptyv', [10676]], ['lagran', [8466]], ['Lambda', [923]], ['lambda', [955]], ['lang', [10216]], ['Lang', [10218]], ['langd', [10641]], ['langle', [10216]], ['lap', [10885]], ['Laplacetrf', [8466]], ['laquo', [171]], ['larrb', [8676]], ['larrbfs', [10527]], ['larr', [8592]], ['Larr', [8606]], ['lArr', [8656]], ['larrfs', [10525]], ['larrhk', [8617]], ['larrlp', [8619]], ['larrpl', [10553]], ['larrsim', [10611]], ['larrtl', [8610]], ['latail', [10521]], ['lAtail', [10523]], ['lat', [10923]], ['late', [10925]], ['lates', [10925, 65024]], ['lbarr', [10508]], ['lBarr', [10510]], ['lbbrk', [10098]], ['lbrace', [123]], ['lbrack', [91]], ['lbrke', [10635]], ['lbrksld', [10639]], ['lbrkslu', [10637]], ['Lcaron', [317]], ['lcaron', [318]], ['Lcedil', [315]], ['lcedil', [316]], ['lceil', [8968]], ['lcub', [123]], ['Lcy', [1051]], ['lcy', [1083]], ['ldca', [10550]], ['ldquo', [8220]], ['ldquor', [8222]], ['ldrdhar', [10599]], ['ldrushar', [10571]], ['ldsh', [8626]], ['le', [8804]], ['lE', [8806]], ['LeftAngleBracket', [10216]], ['LeftArrowBar', [8676]], ['leftarrow', [8592]], ['LeftArrow', [8592]], ['Leftarrow', [8656]], ['LeftArrowRightArrow', [8646]], ['leftarrowtail', [8610]], ['LeftCeiling', [8968]], ['LeftDoubleBracket', [10214]], ['LeftDownTeeVector', [10593]], ['LeftDownVectorBar', [10585]], ['LeftDownVector', [8643]], ['LeftFloor', [8970]], ['leftharpoondown', [8637]], ['leftharpoonup', [8636]], ['leftleftarrows', [8647]], ['leftrightarrow', [8596]], ['LeftRightArrow', [8596]], ['Leftrightarrow', [8660]], ['leftrightarrows', [8646]], ['leftrightharpoons', [8651]], ['leftrightsquigarrow', [8621]], ['LeftRightVector', [10574]], ['LeftTeeArrow', [8612]], ['LeftTee', [8867]], ['LeftTeeVector', [10586]], ['leftthreetimes', [8907]], ['LeftTriangleBar', [10703]], ['LeftTriangle', [8882]], ['LeftTriangleEqual', [8884]], ['LeftUpDownVector', [10577]], ['LeftUpTeeVector', [10592]], ['LeftUpVectorBar', [10584]], ['LeftUpVector', [8639]], ['LeftVectorBar', [10578]], ['LeftVector', [8636]], ['lEg', [10891]], ['leg', [8922]], ['leq', [8804]], ['leqq', [8806]], ['leqslant', [10877]], ['lescc', [10920]], ['les', [10877]], ['lesdot', [10879]], ['lesdoto', [10881]], ['lesdotor', [10883]], ['lesg', [8922, 65024]], ['lesges', [10899]], ['lessapprox', [10885]], ['lessdot', [8918]], ['lesseqgtr', [8922]], ['lesseqqgtr', [10891]], ['LessEqualGreater', [8922]], ['LessFullEqual', [8806]], ['LessGreater', [8822]], ['lessgtr', [8822]], ['LessLess', [10913]], ['lesssim', [8818]], ['LessSlantEqual', [10877]], ['LessTilde', [8818]], ['lfisht', [10620]], ['lfloor', [8970]], ['Lfr', [120079]], ['lfr', [120105]], ['lg', [8822]], ['lgE', [10897]], ['lHar', [10594]], ['lhard', [8637]], ['lharu', [8636]], ['lharul', [10602]], ['lhblk', [9604]], ['LJcy', [1033]], ['ljcy', [1113]], ['llarr', [8647]], ['ll', [8810]], ['Ll', [8920]], ['llcorner', [8990]], ['Lleftarrow', [8666]], ['llhard', [10603]], ['lltri', [9722]], ['Lmidot', [319]], ['lmidot', [320]], ['lmoustache', [9136]], ['lmoust', [9136]], ['lnap', [10889]], ['lnapprox', [10889]], ['lne', [10887]], ['lnE', [8808]], ['lneq', [10887]], ['lneqq', [8808]], ['lnsim', [8934]], ['loang', [10220]], ['loarr', [8701]], ['lobrk', [10214]], ['longleftarrow', [10229]], ['LongLeftArrow', [10229]], ['Longleftarrow', [10232]], ['longleftrightarrow', [10231]], ['LongLeftRightArrow', [10231]], ['Longleftrightarrow', [10234]], ['longmapsto', [10236]], ['longrightarrow', [10230]], ['LongRightArrow', [10230]], ['Longrightarrow', [10233]], ['looparrowleft', [8619]], ['looparrowright', [8620]], ['lopar', [10629]], ['Lopf', [120131]], ['lopf', [120157]], ['loplus', [10797]], ['lotimes', [10804]], ['lowast', [8727]], ['lowbar', [95]], ['LowerLeftArrow', [8601]], ['LowerRightArrow', [8600]], ['loz', [9674]], ['lozenge', [9674]], ['lozf', [10731]], ['lpar', [40]], ['lparlt', [10643]], ['lrarr', [8646]], ['lrcorner', [8991]], ['lrhar', [8651]], ['lrhard', [10605]], ['lrm', [8206]], ['lrtri', [8895]], ['lsaquo', [8249]], ['lscr', [120001]], ['Lscr', [8466]], ['lsh', [8624]], ['Lsh', [8624]], ['lsim', [8818]], ['lsime', [10893]], ['lsimg', [10895]], ['lsqb', [91]], ['lsquo', [8216]], ['lsquor', [8218]], ['Lstrok', [321]], ['lstrok', [322]], ['ltcc', [10918]], ['ltcir', [10873]], ['lt', [60]], ['LT', [60]], ['Lt', [8810]], ['ltdot', [8918]], ['lthree', [8907]], ['ltimes', [8905]], ['ltlarr', [10614]], ['ltquest', [10875]], ['ltri', [9667]], ['ltrie', [8884]], ['ltrif', [9666]], ['ltrPar', [10646]], ['lurdshar', [10570]], ['luruhar', [10598]], ['lvertneqq', [8808, 65024]], ['lvnE', [8808, 65024]], ['macr', [175]], ['male', [9794]], ['malt', [10016]], ['maltese', [10016]], ['Map', [10501]], ['map', [8614]], ['mapsto', [8614]], ['mapstodown', [8615]], ['mapstoleft', [8612]], ['mapstoup', [8613]], ['marker', [9646]], ['mcomma', [10793]], ['Mcy', [1052]], ['mcy', [1084]], ['mdash', [8212]], ['mDDot', [8762]], ['measuredangle', [8737]], ['MediumSpace', [8287]], ['Mellintrf', [8499]], ['Mfr', [120080]], ['mfr', [120106]], ['mho', [8487]], ['micro', [181]], ['midast', [42]], ['midcir', [10992]], ['mid', [8739]], ['middot', [183]], ['minusb', [8863]], ['minus', [8722]], ['minusd', [8760]], ['minusdu', [10794]], ['MinusPlus', [8723]], ['mlcp', [10971]], ['mldr', [8230]], ['mnplus', [8723]], ['models', [8871]], ['Mopf', [120132]], ['mopf', [120158]], ['mp', [8723]], ['mscr', [120002]], ['Mscr', [8499]], ['mstpos', [8766]], ['Mu', [924]], ['mu', [956]], ['multimap', [8888]], ['mumap', [8888]], ['nabla', [8711]], ['Nacute', [323]], ['nacute', [324]], ['nang', [8736, 8402]], ['nap', [8777]], ['napE', [10864, 824]], ['napid', [8779, 824]], ['napos', [329]], ['napprox', [8777]], ['natural', [9838]], ['naturals', [8469]], ['natur', [9838]], ['nbsp', [160]], ['nbump', [8782, 824]], ['nbumpe', [8783, 824]], ['ncap', [10819]], ['Ncaron', [327]], ['ncaron', [328]], ['Ncedil', [325]], ['ncedil', [326]], ['ncong', [8775]], ['ncongdot', [10861, 824]], ['ncup', [10818]], ['Ncy', [1053]], ['ncy', [1085]], ['ndash', [8211]], ['nearhk', [10532]], ['nearr', [8599]], ['neArr', [8663]], ['nearrow', [8599]], ['ne', [8800]], ['nedot', [8784, 824]], ['NegativeMediumSpace', [8203]], ['NegativeThickSpace', [8203]], ['NegativeThinSpace', [8203]], ['NegativeVeryThinSpace', [8203]], ['nequiv', [8802]], ['nesear', [10536]], ['nesim', [8770, 824]], ['NestedGreaterGreater', [8811]], ['NestedLessLess', [8810]], ['nexist', [8708]], ['nexists', [8708]], ['Nfr', [120081]], ['nfr', [120107]], ['ngE', [8807, 824]], ['nge', [8817]], ['ngeq', [8817]], ['ngeqq', [8807, 824]], ['ngeqslant', [10878, 824]], ['nges', [10878, 824]], ['nGg', [8921, 824]], ['ngsim', [8821]], ['nGt', [8811, 8402]], ['ngt', [8815]], ['ngtr', [8815]], ['nGtv', [8811, 824]], ['nharr', [8622]], ['nhArr', [8654]], ['nhpar', [10994]], ['ni', [8715]], ['nis', [8956]], ['nisd', [8954]], ['niv', [8715]], ['NJcy', [1034]], ['njcy', [1114]], ['nlarr', [8602]], ['nlArr', [8653]], ['nldr', [8229]], ['nlE', [8806, 824]], ['nle', [8816]], ['nleftarrow', [8602]], ['nLeftarrow', [8653]], ['nleftrightarrow', [8622]], ['nLeftrightarrow', [8654]], ['nleq', [8816]], ['nleqq', [8806, 824]], ['nleqslant', [10877, 824]], ['nles', [10877, 824]], ['nless', [8814]], ['nLl', [8920, 824]], ['nlsim', [8820]], ['nLt', [8810, 8402]], ['nlt', [8814]], ['nltri', [8938]], ['nltrie', [8940]], ['nLtv', [8810, 824]], ['nmid', [8740]], ['NoBreak', [8288]], ['NonBreakingSpace', [160]], ['nopf', [120159]], ['Nopf', [8469]], ['Not', [10988]], ['not', [172]], ['NotCongruent', [8802]], ['NotCupCap', [8813]], ['NotDoubleVerticalBar', [8742]], ['NotElement', [8713]], ['NotEqual', [8800]], ['NotEqualTilde', [8770, 824]], ['NotExists', [8708]], ['NotGreater', [8815]], ['NotGreaterEqual', [8817]], ['NotGreaterFullEqual', [8807, 824]], ['NotGreaterGreater', [8811, 824]], ['NotGreaterLess', [8825]], ['NotGreaterSlantEqual', [10878, 824]], ['NotGreaterTilde', [8821]], ['NotHumpDownHump', [8782, 824]], ['NotHumpEqual', [8783, 824]], ['notin', [8713]], ['notindot', [8949, 824]], ['notinE', [8953, 824]], ['notinva', [8713]], ['notinvb', [8951]], ['notinvc', [8950]], ['NotLeftTriangleBar', [10703, 824]], ['NotLeftTriangle', [8938]], ['NotLeftTriangleEqual', [8940]], ['NotLess', [8814]], ['NotLessEqual', [8816]], ['NotLessGreater', [8824]], ['NotLessLess', [8810, 824]], ['NotLessSlantEqual', [10877, 824]], ['NotLessTilde', [8820]], ['NotNestedGreaterGreater', [10914, 824]], ['NotNestedLessLess', [10913, 824]], ['notni', [8716]], ['notniva', [8716]], ['notnivb', [8958]], ['notnivc', [8957]], ['NotPrecedes', [8832]], ['NotPrecedesEqual', [10927, 824]], ['NotPrecedesSlantEqual', [8928]], ['NotReverseElement', [8716]], ['NotRightTriangleBar', [10704, 824]], ['NotRightTriangle', [8939]], ['NotRightTriangleEqual', [8941]], ['NotSquareSubset', [8847, 824]], ['NotSquareSubsetEqual', [8930]], ['NotSquareSuperset', [8848, 824]], ['NotSquareSupersetEqual', [8931]], ['NotSubset', [8834, 8402]], ['NotSubsetEqual', [8840]], ['NotSucceeds', [8833]], ['NotSucceedsEqual', [10928, 824]], ['NotSucceedsSlantEqual', [8929]], ['NotSucceedsTilde', [8831, 824]], ['NotSuperset', [8835, 8402]], ['NotSupersetEqual', [8841]], ['NotTilde', [8769]], ['NotTildeEqual', [8772]], ['NotTildeFullEqual', [8775]], ['NotTildeTilde', [8777]], ['NotVerticalBar', [8740]], ['nparallel', [8742]], ['npar', [8742]], ['nparsl', [11005, 8421]], ['npart', [8706, 824]], ['npolint', [10772]], ['npr', [8832]], ['nprcue', [8928]], ['nprec', [8832]], ['npreceq', [10927, 824]], ['npre', [10927, 824]], ['nrarrc', [10547, 824]], ['nrarr', [8603]], ['nrArr', [8655]], ['nrarrw', [8605, 824]], ['nrightarrow', [8603]], ['nRightarrow', [8655]], ['nrtri', [8939]], ['nrtrie', [8941]], ['nsc', [8833]], ['nsccue', [8929]], ['nsce', [10928, 824]], ['Nscr', [119977]], ['nscr', [120003]], ['nshortmid', [8740]], ['nshortparallel', [8742]], ['nsim', [8769]], ['nsime', [8772]], ['nsimeq', [8772]], ['nsmid', [8740]], ['nspar', [8742]], ['nsqsube', [8930]], ['nsqsupe', [8931]], ['nsub', [8836]], ['nsubE', [10949, 824]], ['nsube', [8840]], ['nsubset', [8834, 8402]], ['nsubseteq', [8840]], ['nsubseteqq', [10949, 824]], ['nsucc', [8833]], ['nsucceq', [10928, 824]], ['nsup', [8837]], ['nsupE', [10950, 824]], ['nsupe', [8841]], ['nsupset', [8835, 8402]], ['nsupseteq', [8841]], ['nsupseteqq', [10950, 824]], ['ntgl', [8825]], ['Ntilde', [209]], ['ntilde', [241]], ['ntlg', [8824]], ['ntriangleleft', [8938]], ['ntrianglelefteq', [8940]], ['ntriangleright', [8939]], ['ntrianglerighteq', [8941]], ['Nu', [925]], ['nu', [957]], ['num', [35]], ['numero', [8470]], ['numsp', [8199]], ['nvap', [8781, 8402]], ['nvdash', [8876]], ['nvDash', [8877]], ['nVdash', [8878]], ['nVDash', [8879]], ['nvge', [8805, 8402]], ['nvgt', [62, 8402]], ['nvHarr', [10500]], ['nvinfin', [10718]], ['nvlArr', [10498]], ['nvle', [8804, 8402]], ['nvlt', [60, 8402]], ['nvltrie', [8884, 8402]], ['nvrArr', [10499]], ['nvrtrie', [8885, 8402]], ['nvsim', [8764, 8402]], ['nwarhk', [10531]], ['nwarr', [8598]], ['nwArr', [8662]], ['nwarrow', [8598]], ['nwnear', [10535]], ['Oacute', [211]], ['oacute', [243]], ['oast', [8859]], ['Ocirc', [212]], ['ocirc', [244]], ['ocir', [8858]], ['Ocy', [1054]], ['ocy', [1086]], ['odash', [8861]], ['Odblac', [336]], ['odblac', [337]], ['odiv', [10808]], ['odot', [8857]], ['odsold', [10684]], ['OElig', [338]], ['oelig', [339]], ['ofcir', [10687]], ['Ofr', [120082]], ['ofr', [120108]], ['ogon', [731]], ['Ograve', [210]], ['ograve', [242]], ['ogt', [10689]], ['ohbar', [10677]], ['ohm', [937]], ['oint', [8750]], ['olarr', [8634]], ['olcir', [10686]], ['olcross', [10683]], ['oline', [8254]], ['olt', [10688]], ['Omacr', [332]], ['omacr', [333]], ['Omega', [937]], ['omega', [969]], ['Omicron', [927]], ['omicron', [959]], ['omid', [10678]], ['ominus', [8854]], ['Oopf', [120134]], ['oopf', [120160]], ['opar', [10679]], ['OpenCurlyDoubleQuote', [8220]], ['OpenCurlyQuote', [8216]], ['operp', [10681]], ['oplus', [8853]], ['orarr', [8635]], ['Or', [10836]], ['or', [8744]], ['ord', [10845]], ['order', [8500]], ['orderof', [8500]], ['ordf', [170]], ['ordm', [186]], ['origof', [8886]], ['oror', [10838]], ['orslope', [10839]], ['orv', [10843]], ['oS', [9416]], ['Oscr', [119978]], ['oscr', [8500]], ['Oslash', [216]], ['oslash', [248]], ['osol', [8856]], ['Otilde', [213]], ['otilde', [245]], ['otimesas', [10806]], ['Otimes', [10807]], ['otimes', [8855]], ['Ouml', [214]], ['ouml', [246]], ['ovbar', [9021]], ['OverBar', [8254]], ['OverBrace', [9182]], ['OverBracket', [9140]], ['OverParenthesis', [9180]], ['para', [182]], ['parallel', [8741]], ['par', [8741]], ['parsim', [10995]], ['parsl', [11005]], ['part', [8706]], ['PartialD', [8706]], ['Pcy', [1055]], ['pcy', [1087]], ['percnt', [37]], ['period', [46]], ['permil', [8240]], ['perp', [8869]], ['pertenk', [8241]], ['Pfr', [120083]], ['pfr', [120109]], ['Phi', [934]], ['phi', [966]], ['phiv', [981]], ['phmmat', [8499]], ['phone', [9742]], ['Pi', [928]], ['pi', [960]], ['pitchfork', [8916]], ['piv', [982]], ['planck', [8463]], ['planckh', [8462]], ['plankv', [8463]], ['plusacir', [10787]], ['plusb', [8862]], ['pluscir', [10786]], ['plus', [43]], ['plusdo', [8724]], ['plusdu', [10789]], ['pluse', [10866]], ['PlusMinus', [177]], ['plusmn', [177]], ['plussim', [10790]], ['plustwo', [10791]], ['pm', [177]], ['Poincareplane', [8460]], ['pointint', [10773]], ['popf', [120161]], ['Popf', [8473]], ['pound', [163]], ['prap', [10935]], ['Pr', [10939]], ['pr', [8826]], ['prcue', [8828]], ['precapprox', [10935]], ['prec', [8826]], ['preccurlyeq', [8828]], ['Precedes', [8826]], ['PrecedesEqual', [10927]], ['PrecedesSlantEqual', [8828]], ['PrecedesTilde', [8830]], ['preceq', [10927]], ['precnapprox', [10937]], ['precneqq', [10933]], ['precnsim', [8936]], ['pre', [10927]], ['prE', [10931]], ['precsim', [8830]], ['prime', [8242]], ['Prime', [8243]], ['primes', [8473]], ['prnap', [10937]], ['prnE', [10933]], ['prnsim', [8936]], ['prod', [8719]], ['Product', [8719]], ['profalar', [9006]], ['profline', [8978]], ['profsurf', [8979]], ['prop', [8733]], ['Proportional', [8733]], ['Proportion', [8759]], ['propto', [8733]], ['prsim', [8830]], ['prurel', [8880]], ['Pscr', [119979]], ['pscr', [120005]], ['Psi', [936]], ['psi', [968]], ['puncsp', [8200]], ['Qfr', [120084]], ['qfr', [120110]], ['qint', [10764]], ['qopf', [120162]], ['Qopf', [8474]], ['qprime', [8279]], ['Qscr', [119980]], ['qscr', [120006]], ['quaternions', [8461]], ['quatint', [10774]], ['quest', [63]], ['questeq', [8799]], ['quot', [34]], ['QUOT', [34]], ['rAarr', [8667]], ['race', [8765, 817]], ['Racute', [340]], ['racute', [341]], ['radic', [8730]], ['raemptyv', [10675]], ['rang', [10217]], ['Rang', [10219]], ['rangd', [10642]], ['range', [10661]], ['rangle', [10217]], ['raquo', [187]], ['rarrap', [10613]], ['rarrb', [8677]], ['rarrbfs', [10528]], ['rarrc', [10547]], ['rarr', [8594]], ['Rarr', [8608]], ['rArr', [8658]], ['rarrfs', [10526]], ['rarrhk', [8618]], ['rarrlp', [8620]], ['rarrpl', [10565]], ['rarrsim', [10612]], ['Rarrtl', [10518]], ['rarrtl', [8611]], ['rarrw', [8605]], ['ratail', [10522]], ['rAtail', [10524]], ['ratio', [8758]], ['rationals', [8474]], ['rbarr', [10509]], ['rBarr', [10511]], ['RBarr', [10512]], ['rbbrk', [10099]], ['rbrace', [125]], ['rbrack', [93]], ['rbrke', [10636]], ['rbrksld', [10638]], ['rbrkslu', [10640]], ['Rcaron', [344]], ['rcaron', [345]], ['Rcedil', [342]], ['rcedil', [343]], ['rceil', [8969]], ['rcub', [125]], ['Rcy', [1056]], ['rcy', [1088]], ['rdca', [10551]], ['rdldhar', [10601]], ['rdquo', [8221]], ['rdquor', [8221]], ['CloseCurlyDoubleQuote', [8221]], ['rdsh', [8627]], ['real', [8476]], ['realine', [8475]], ['realpart', [8476]], ['reals', [8477]], ['Re', [8476]], ['rect', [9645]], ['reg', [174]], ['REG', [174]], ['ReverseElement', [8715]], ['ReverseEquilibrium', [8651]], ['ReverseUpEquilibrium', [10607]], ['rfisht', [10621]], ['rfloor', [8971]], ['rfr', [120111]], ['Rfr', [8476]], ['rHar', [10596]], ['rhard', [8641]], ['rharu', [8640]], ['rharul', [10604]], ['Rho', [929]], ['rho', [961]], ['rhov', [1009]], ['RightAngleBracket', [10217]], ['RightArrowBar', [8677]], ['rightarrow', [8594]], ['RightArrow', [8594]], ['Rightarrow', [8658]], ['RightArrowLeftArrow', [8644]], ['rightarrowtail', [8611]], ['RightCeiling', [8969]], ['RightDoubleBracket', [10215]], ['RightDownTeeVector', [10589]], ['RightDownVectorBar', [10581]], ['RightDownVector', [8642]], ['RightFloor', [8971]], ['rightharpoondown', [8641]], ['rightharpoonup', [8640]], ['rightleftarrows', [8644]], ['rightleftharpoons', [8652]], ['rightrightarrows', [8649]], ['rightsquigarrow', [8605]], ['RightTeeArrow', [8614]], ['RightTee', [8866]], ['RightTeeVector', [10587]], ['rightthreetimes', [8908]], ['RightTriangleBar', [10704]], ['RightTriangle', [8883]], ['RightTriangleEqual', [8885]], ['RightUpDownVector', [10575]], ['RightUpTeeVector', [10588]], ['RightUpVectorBar', [10580]], ['RightUpVector', [8638]], ['RightVectorBar', [10579]], ['RightVector', [8640]], ['ring', [730]], ['risingdotseq', [8787]], ['rlarr', [8644]], ['rlhar', [8652]], ['rlm', [8207]], ['rmoustache', [9137]], ['rmoust', [9137]], ['rnmid', [10990]], ['roang', [10221]], ['roarr', [8702]], ['robrk', [10215]], ['ropar', [10630]], ['ropf', [120163]], ['Ropf', [8477]], ['roplus', [10798]], ['rotimes', [10805]], ['RoundImplies', [10608]], ['rpar', [41]], ['rpargt', [10644]], ['rppolint', [10770]], ['rrarr', [8649]], ['Rrightarrow', [8667]], ['rsaquo', [8250]], ['rscr', [120007]], ['Rscr', [8475]], ['rsh', [8625]], ['Rsh', [8625]], ['rsqb', [93]], ['rsquo', [8217]], ['rsquor', [8217]], ['CloseCurlyQuote', [8217]], ['rthree', [8908]], ['rtimes', [8906]], ['rtri', [9657]], ['rtrie', [8885]], ['rtrif', [9656]], ['rtriltri', [10702]], ['RuleDelayed', [10740]], ['ruluhar', [10600]], ['rx', [8478]], ['Sacute', [346]], ['sacute', [347]], ['sbquo', [8218]], ['scap', [10936]], ['Scaron', [352]], ['scaron', [353]], ['Sc', [10940]], ['sc', [8827]], ['sccue', [8829]], ['sce', [10928]], ['scE', [10932]], ['Scedil', [350]], ['scedil', [351]], ['Scirc', [348]], ['scirc', [349]], ['scnap', [10938]], ['scnE', [10934]], ['scnsim', [8937]], ['scpolint', [10771]], ['scsim', [8831]], ['Scy', [1057]], ['scy', [1089]], ['sdotb', [8865]], ['sdot', [8901]], ['sdote', [10854]], ['searhk', [10533]], ['searr', [8600]], ['seArr', [8664]], ['searrow', [8600]], ['sect', [167]], ['semi', [59]], ['seswar', [10537]], ['setminus', [8726]], ['setmn', [8726]], ['sext', [10038]], ['Sfr', [120086]], ['sfr', [120112]], ['sfrown', [8994]], ['sharp', [9839]], ['SHCHcy', [1065]], ['shchcy', [1097]], ['SHcy', [1064]], ['shcy', [1096]], ['ShortDownArrow', [8595]], ['ShortLeftArrow', [8592]], ['shortmid', [8739]], ['shortparallel', [8741]], ['ShortRightArrow', [8594]], ['ShortUpArrow', [8593]], ['shy', [173]], ['Sigma', [931]], ['sigma', [963]], ['sigmaf', [962]], ['sigmav', [962]], ['sim', [8764]], ['simdot', [10858]], ['sime', [8771]], ['simeq', [8771]], ['simg', [10910]], ['simgE', [10912]], ['siml', [10909]], ['simlE', [10911]], ['simne', [8774]], ['simplus', [10788]], ['simrarr', [10610]], ['slarr', [8592]], ['SmallCircle', [8728]], ['smallsetminus', [8726]], ['smashp', [10803]], ['smeparsl', [10724]], ['smid', [8739]], ['smile', [8995]], ['smt', [10922]], ['smte', [10924]], ['smtes', [10924, 65024]], ['SOFTcy', [1068]], ['softcy', [1100]], ['solbar', [9023]], ['solb', [10692]], ['sol', [47]], ['Sopf', [120138]], ['sopf', [120164]], ['spades', [9824]], ['spadesuit', [9824]], ['spar', [8741]], ['sqcap', [8851]], ['sqcaps', [8851, 65024]], ['sqcup', [8852]], ['sqcups', [8852, 65024]], ['Sqrt', [8730]], ['sqsub', [8847]], ['sqsube', [8849]], ['sqsubset', [8847]], ['sqsubseteq', [8849]], ['sqsup', [8848]], ['sqsupe', [8850]], ['sqsupset', [8848]], ['sqsupseteq', [8850]], ['square', [9633]], ['Square', [9633]], ['SquareIntersection', [8851]], ['SquareSubset', [8847]], ['SquareSubsetEqual', [8849]], ['SquareSuperset', [8848]], ['SquareSupersetEqual', [8850]], ['SquareUnion', [8852]], ['squarf', [9642]], ['squ', [9633]], ['squf', [9642]], ['srarr', [8594]], ['Sscr', [119982]], ['sscr', [120008]], ['ssetmn', [8726]], ['ssmile', [8995]], ['sstarf', [8902]], ['Star', [8902]], ['star', [9734]], ['starf', [9733]], ['straightepsilon', [1013]], ['straightphi', [981]], ['strns', [175]], ['sub', [8834]], ['Sub', [8912]], ['subdot', [10941]], ['subE', [10949]], ['sube', [8838]], ['subedot', [10947]], ['submult', [10945]], ['subnE', [10955]], ['subne', [8842]], ['subplus', [10943]], ['subrarr', [10617]], ['subset', [8834]], ['Subset', [8912]], ['subseteq', [8838]], ['subseteqq', [10949]], ['SubsetEqual', [8838]], ['subsetneq', [8842]], ['subsetneqq', [10955]], ['subsim', [10951]], ['subsub', [10965]], ['subsup', [10963]], ['succapprox', [10936]], ['succ', [8827]], ['succcurlyeq', [8829]], ['Succeeds', [8827]], ['SucceedsEqual', [10928]], ['SucceedsSlantEqual', [8829]], ['SucceedsTilde', [8831]], ['succeq', [10928]], ['succnapprox', [10938]], ['succneqq', [10934]], ['succnsim', [8937]], ['succsim', [8831]], ['SuchThat', [8715]], ['sum', [8721]], ['Sum', [8721]], ['sung', [9834]], ['sup1', [185]], ['sup2', [178]], ['sup3', [179]], ['sup', [8835]], ['Sup', [8913]], ['supdot', [10942]], ['supdsub', [10968]], ['supE', [10950]], ['supe', [8839]], ['supedot', [10948]], ['Superset', [8835]], ['SupersetEqual', [8839]], ['suphsol', [10185]], ['suphsub', [10967]], ['suplarr', [10619]], ['supmult', [10946]], ['supnE', [10956]], ['supne', [8843]], ['supplus', [10944]], ['supset', [8835]], ['Supset', [8913]], ['supseteq', [8839]], ['supseteqq', [10950]], ['supsetneq', [8843]], ['supsetneqq', [10956]], ['supsim', [10952]], ['supsub', [10964]], ['supsup', [10966]], ['swarhk', [10534]], ['swarr', [8601]], ['swArr', [8665]], ['swarrow', [8601]], ['swnwar', [10538]], ['szlig', [223]], ['Tab', [9]], ['target', [8982]], ['Tau', [932]], ['tau', [964]], ['tbrk', [9140]], ['Tcaron', [356]], ['tcaron', [357]], ['Tcedil', [354]], ['tcedil', [355]], ['Tcy', [1058]], ['tcy', [1090]], ['tdot', [8411]], ['telrec', [8981]], ['Tfr', [120087]], ['tfr', [120113]], ['there4', [8756]], ['therefore', [8756]], ['Therefore', [8756]], ['Theta', [920]], ['theta', [952]], ['thetasym', [977]], ['thetav', [977]], ['thickapprox', [8776]], ['thicksim', [8764]], ['ThickSpace', [8287, 8202]], ['ThinSpace', [8201]], ['thinsp', [8201]], ['thkap', [8776]], ['thksim', [8764]], ['THORN', [222]], ['thorn', [254]], ['tilde', [732]], ['Tilde', [8764]], ['TildeEqual', [8771]], ['TildeFullEqual', [8773]], ['TildeTilde', [8776]], ['timesbar', [10801]], ['timesb', [8864]], ['times', [215]], ['timesd', [10800]], ['tint', [8749]], ['toea', [10536]], ['topbot', [9014]], ['topcir', [10993]], ['top', [8868]], ['Topf', [120139]], ['topf', [120165]], ['topfork', [10970]], ['tosa', [10537]], ['tprime', [8244]], ['trade', [8482]], ['TRADE', [8482]], ['triangle', [9653]], ['triangledown', [9663]], ['triangleleft', [9667]], ['trianglelefteq', [8884]], ['triangleq', [8796]], ['triangleright', [9657]], ['trianglerighteq', [8885]], ['tridot', [9708]], ['trie', [8796]], ['triminus', [10810]], ['TripleDot', [8411]], ['triplus', [10809]], ['trisb', [10701]], ['tritime', [10811]], ['trpezium', [9186]], ['Tscr', [119983]], ['tscr', [120009]], ['TScy', [1062]], ['tscy', [1094]], ['TSHcy', [1035]], ['tshcy', [1115]], ['Tstrok', [358]], ['tstrok', [359]], ['twixt', [8812]], ['twoheadleftarrow', [8606]], ['twoheadrightarrow', [8608]], ['Uacute', [218]], ['uacute', [250]], ['uarr', [8593]], ['Uarr', [8607]], ['uArr', [8657]], ['Uarrocir', [10569]], ['Ubrcy', [1038]], ['ubrcy', [1118]], ['Ubreve', [364]], ['ubreve', [365]], ['Ucirc', [219]], ['ucirc', [251]], ['Ucy', [1059]], ['ucy', [1091]], ['udarr', [8645]], ['Udblac', [368]], ['udblac', [369]], ['udhar', [10606]], ['ufisht', [10622]], ['Ufr', [120088]], ['ufr', [120114]], ['Ugrave', [217]], ['ugrave', [249]], ['uHar', [10595]], ['uharl', [8639]], ['uharr', [8638]], ['uhblk', [9600]], ['ulcorn', [8988]], ['ulcorner', [8988]], ['ulcrop', [8975]], ['ultri', [9720]], ['Umacr', [362]], ['umacr', [363]], ['uml', [168]], ['UnderBar', [95]], ['UnderBrace', [9183]], ['UnderBracket', [9141]], ['UnderParenthesis', [9181]], ['Union', [8899]], ['UnionPlus', [8846]], ['Uogon', [370]], ['uogon', [371]], ['Uopf', [120140]], ['uopf', [120166]], ['UpArrowBar', [10514]], ['uparrow', [8593]], ['UpArrow', [8593]], ['Uparrow', [8657]], ['UpArrowDownArrow', [8645]], ['updownarrow', [8597]], ['UpDownArrow', [8597]], ['Updownarrow', [8661]], ['UpEquilibrium', [10606]], ['upharpoonleft', [8639]], ['upharpoonright', [8638]], ['uplus', [8846]], ['UpperLeftArrow', [8598]], ['UpperRightArrow', [8599]], ['upsi', [965]], ['Upsi', [978]], ['upsih', [978]], ['Upsilon', [933]], ['upsilon', [965]], ['UpTeeArrow', [8613]], ['UpTee', [8869]], ['upuparrows', [8648]], ['urcorn', [8989]], ['urcorner', [8989]], ['urcrop', [8974]], ['Uring', [366]], ['uring', [367]], ['urtri', [9721]], ['Uscr', [119984]], ['uscr', [120010]], ['utdot', [8944]], ['Utilde', [360]], ['utilde', [361]], ['utri', [9653]], ['utrif', [9652]], ['uuarr', [8648]], ['Uuml', [220]], ['uuml', [252]], ['uwangle', [10663]], ['vangrt', [10652]], ['varepsilon', [1013]], ['varkappa', [1008]], ['varnothing', [8709]], ['varphi', [981]], ['varpi', [982]], ['varpropto', [8733]], ['varr', [8597]], ['vArr', [8661]], ['varrho', [1009]], ['varsigma', [962]], ['varsubsetneq', [8842, 65024]], ['varsubsetneqq', [10955, 65024]], ['varsupsetneq', [8843, 65024]], ['varsupsetneqq', [10956, 65024]], ['vartheta', [977]], ['vartriangleleft', [8882]], ['vartriangleright', [8883]], ['vBar', [10984]], ['Vbar', [10987]], ['vBarv', [10985]], ['Vcy', [1042]], ['vcy', [1074]], ['vdash', [8866]], ['vDash', [8872]], ['Vdash', [8873]], ['VDash', [8875]], ['Vdashl', [10982]], ['veebar', [8891]], ['vee', [8744]], ['Vee', [8897]], ['veeeq', [8794]], ['vellip', [8942]], ['verbar', [124]], ['Verbar', [8214]], ['vert', [124]], ['Vert', [8214]], ['VerticalBar', [8739]], ['VerticalLine', [124]], ['VerticalSeparator', [10072]], ['VerticalTilde', [8768]], ['VeryThinSpace', [8202]], ['Vfr', [120089]], ['vfr', [120115]], ['vltri', [8882]], ['vnsub', [8834, 8402]], ['vnsup', [8835, 8402]], ['Vopf', [120141]], ['vopf', [120167]], ['vprop', [8733]], ['vrtri', [8883]], ['Vscr', [119985]], ['vscr', [120011]], ['vsubnE', [10955, 65024]], ['vsubne', [8842, 65024]], ['vsupnE', [10956, 65024]], ['vsupne', [8843, 65024]], ['Vvdash', [8874]], ['vzigzag', [10650]], ['Wcirc', [372]], ['wcirc', [373]], ['wedbar', [10847]], ['wedge', [8743]], ['Wedge', [8896]], ['wedgeq', [8793]], ['weierp', [8472]], ['Wfr', [120090]], ['wfr', [120116]], ['Wopf', [120142]], ['wopf', [120168]], ['wp', [8472]], ['wr', [8768]], ['wreath', [8768]], ['Wscr', [119986]], ['wscr', [120012]], ['xcap', [8898]], ['xcirc', [9711]], ['xcup', [8899]], ['xdtri', [9661]], ['Xfr', [120091]], ['xfr', [120117]], ['xharr', [10231]], ['xhArr', [10234]], ['Xi', [926]], ['xi', [958]], ['xlarr', [10229]], ['xlArr', [10232]], ['xmap', [10236]], ['xnis', [8955]], ['xodot', [10752]], ['Xopf', [120143]], ['xopf', [120169]], ['xoplus', [10753]], ['xotime', [10754]], ['xrarr', [10230]], ['xrArr', [10233]], ['Xscr', [119987]], ['xscr', [120013]], ['xsqcup', [10758]], ['xuplus', [10756]], ['xutri', [9651]], ['xvee', [8897]], ['xwedge', [8896]], ['Yacute', [221]], ['yacute', [253]], ['YAcy', [1071]], ['yacy', [1103]], ['Ycirc', [374]], ['ycirc', [375]], ['Ycy', [1067]], ['ycy', [1099]], ['yen', [165]], ['Yfr', [120092]], ['yfr', [120118]], ['YIcy', [1031]], ['yicy', [1111]], ['Yopf', [120144]], ['yopf', [120170]], ['Yscr', [119988]], ['yscr', [120014]], ['YUcy', [1070]], ['yucy', [1102]], ['yuml', [255]], ['Yuml', [376]], ['Zacute', [377]], ['zacute', [378]], ['Zcaron', [381]], ['zcaron', [382]], ['Zcy', [1047]], ['zcy', [1079]], ['Zdot', [379]], ['zdot', [380]], ['zeetrf', [8488]], ['ZeroWidthSpace', [8203]], ['Zeta', [918]], ['zeta', [950]], ['zfr', [120119]], ['Zfr', [8488]], ['ZHcy', [1046]], ['zhcy', [1078]], ['zigrarr', [8669]], ['zopf', [120171]], ['Zopf', [8484]], ['Zscr', [119989]], ['zscr', [120015]], ['zwj', [8205]], ['zwnj', [8204]]];

var alphaIndex = {};
var charIndex = {};

createIndexes(alphaIndex, charIndex);

/**
 * @constructor
 */
function Html5Entities() {}

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.decode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/&(#?[\w\d]+);?/g, function(s, entity) {
        var chr;
        if (entity.charAt(0) === "#") {
            var code = entity.charAt(1) === 'x' ?
                parseInt(entity.substr(2).toLowerCase(), 16) :
                parseInt(entity.substr(1));

            if (!(isNaN(code) || code < -32768 || code > 65535)) {
                chr = String.fromCharCode(code);
            }
        } else {
            chr = alphaIndex[entity];
        }
        return chr || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.decode = function(str) {
    return new Html5Entities().decode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var charInfo = charIndex[str.charCodeAt(i)];
        if (charInfo) {
            var alpha = charInfo[str.charCodeAt(i + 1)];
            if (alpha) {
                i++;
            } else {
                alpha = charInfo[''];
            }
            if (alpha) {
                result += "&" + alpha + ";";
                i++;
                continue;
            }
        }
        result += str.charAt(i);
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encode = function(str) {
    return new Html5Entities().encode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encodeNonUTF = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        var charInfo = charIndex[c];
        if (charInfo) {
            var alpha = charInfo[str.charCodeAt(i + 1)];
            if (alpha) {
                i++;
            } else {
                alpha = charInfo[''];
            }
            if (alpha) {
                result += "&" + alpha + ";";
                i++;
                continue;
            }
        }
        if (c < 32 || c > 126) {
            result += '&#' + c + ';';
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encodeNonUTF = function(str) {
    return new Html5Entities().encodeNonUTF(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encodeNonASCII = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encodeNonASCII = function(str) {
    return new Html5Entities().encodeNonASCII(str);
 };

/**
 * @param {Object} alphaIndex Passed by reference.
 * @param {Object} charIndex Passed by reference.
 */
function createIndexes(alphaIndex, charIndex) {
    var i = ENTITIES.length;
    var _results = [];
    while (i--) {
        var e = ENTITIES[i];
        var alpha = e[0];
        var chars = e[1];
        var chr = chars[0];
        var addChar = (chr < 32 || chr > 126) || chr === 62 || chr === 60 || chr === 38 || chr === 34 || chr === 39;
        var charInfo;
        if (addChar) {
            charInfo = charIndex[chr] = charIndex[chr] || {};
        }
        if (chars[1]) {
            var chr2 = chars[1];
            alphaIndex[alpha] = String.fromCharCode(chr) + String.fromCharCode(chr2);
            _results.push(addChar && (charInfo[chr2] = alpha));
        } else {
            alphaIndex[alpha] = String.fromCharCode(chr);
            _results.push(addChar && (charInfo[''] = alpha));
        }
    }
}

module.exports = Html5Entities;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Afrikaans [af]
//! author : Werner Mollentze : https://github.com/wernerm

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var af = moment.defineLocale('af', {
    months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
    monthsShort : 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
    weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
    weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
    weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
    meridiemParse: /vm|nm/i,
    isPM : function (input) {
        return /^nm$/i.test(input);
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 12) {
            return isLower ? 'vm' : 'VM';
        } else {
            return isLower ? 'nm' : 'NM';
        }
    },
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Vandag om] LT',
        nextDay : '[Môre om] LT',
        nextWeek : 'dddd [om] LT',
        lastDay : '[Gister om] LT',
        lastWeek : '[Laas] dddd [om] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'oor %s',
        past : '%s gelede',
        s : '\'n paar sekondes',
        m : '\'n minuut',
        mm : '%d minute',
        h : '\'n uur',
        hh : '%d ure',
        d : '\'n dag',
        dd : '%d dae',
        M : '\'n maand',
        MM : '%d maande',
        y : '\'n jaar',
        yy : '%d jaar'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
    ordinal : function (number) {
        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
    },
    week : {
        dow : 1, // Maandag is die eerste dag van die week.
        doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
    }
});

return af;

})));


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Algeria) [ar-dz]
//! author : Noureddine LOUAHEDJ : https://github.com/noureddineme

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var arDz = moment.defineLocale('ar-dz', {
    months : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
    monthsShort : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort : 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin : 'أح_إث_ثلا_أر_خم_جم_سب'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[اليوم على الساعة] LT',
        nextDay: '[غدا على الساعة] LT',
        nextWeek: 'dddd [على الساعة] LT',
        lastDay: '[أمس على الساعة] LT',
        lastWeek: 'dddd [على الساعة] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'في %s',
        past : 'منذ %s',
        s : 'ثوان',
        m : 'دقيقة',
        mm : '%d دقائق',
        h : 'ساعة',
        hh : '%d ساعات',
        d : 'يوم',
        dd : '%d أيام',
        M : 'شهر',
        MM : '%d أشهر',
        y : 'سنة',
        yy : '%d سنوات'
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 4  // The week that contains Jan 1st is the first week of the year.
    }
});

return arDz;

})));


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Kuwait) [ar-kw]
//! author : Nusret Parlak: https://github.com/nusretparlak

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var arKw = moment.defineLocale('ar-kw', {
    months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
    monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
    weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[اليوم على الساعة] LT',
        nextDay: '[غدا على الساعة] LT',
        nextWeek: 'dddd [على الساعة] LT',
        lastDay: '[أمس على الساعة] LT',
        lastWeek: 'dddd [على الساعة] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'في %s',
        past : 'منذ %s',
        s : 'ثوان',
        m : 'دقيقة',
        mm : '%d دقائق',
        h : 'ساعة',
        hh : '%d ساعات',
        d : 'يوم',
        dd : '%d أيام',
        M : 'شهر',
        MM : '%d أشهر',
        y : 'سنة',
        yy : '%d سنوات'
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return arKw;

})));


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Lybia) [ar-ly]
//! author : Ali Hmer: https://github.com/kikoanis

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '1',
    '2': '2',
    '3': '3',
    '4': '4',
    '5': '5',
    '6': '6',
    '7': '7',
    '8': '8',
    '9': '9',
    '0': '0'
};
var pluralForm = function (n) {
    return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
};
var plurals = {
    s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
    m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
    h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
    d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
    M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
    y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
};
var pluralize = function (u) {
    return function (number, withoutSuffix, string, isFuture) {
        var f = pluralForm(number),
            str = plurals[u][pluralForm(number)];
        if (f === 2) {
            str = str[withoutSuffix ? 0 : 1];
        }
        return str.replace(/%d/i, number);
    };
};
var months = [
    'يناير',
    'فبراير',
    'مارس',
    'أبريل',
    'مايو',
    'يونيو',
    'يوليو',
    'أغسطس',
    'سبتمبر',
    'أكتوبر',
    'نوفمبر',
    'ديسمبر'
];

var arLy = moment.defineLocale('ar-ly', {
    months : months,
    monthsShort : months,
    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'D/\u200FM/\u200FYYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /ص|م/,
    isPM : function (input) {
        return 'م' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'ص';
        } else {
            return 'م';
        }
    },
    calendar : {
        sameDay: '[اليوم عند الساعة] LT',
        nextDay: '[غدًا عند الساعة] LT',
        nextWeek: 'dddd [عند الساعة] LT',
        lastDay: '[أمس عند الساعة] LT',
        lastWeek: 'dddd [عند الساعة] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'بعد %s',
        past : 'منذ %s',
        s : pluralize('s'),
        m : pluralize('m'),
        mm : pluralize('m'),
        h : pluralize('h'),
        hh : pluralize('h'),
        d : pluralize('d'),
        dd : pluralize('d'),
        M : pluralize('M'),
        MM : pluralize('M'),
        y : pluralize('y'),
        yy : pluralize('y')
    },
    preparse: function (string) {
        return string.replace(/\u200f/g, '').replace(/،/g, ',');
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        }).replace(/,/g, '،');
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return arLy;

})));


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Morocco) [ar-ma]
//! author : ElFadili Yassine : https://github.com/ElFadiliY
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var arMa = moment.defineLocale('ar-ma', {
    months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
    monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
    weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[اليوم على الساعة] LT',
        nextDay: '[غدا على الساعة] LT',
        nextWeek: 'dddd [على الساعة] LT',
        lastDay: '[أمس على الساعة] LT',
        lastWeek: 'dddd [على الساعة] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'في %s',
        past : 'منذ %s',
        s : 'ثوان',
        m : 'دقيقة',
        mm : '%d دقائق',
        h : 'ساعة',
        hh : '%d ساعات',
        d : 'يوم',
        dd : '%d أيام',
        M : 'شهر',
        MM : '%d أشهر',
        y : 'سنة',
        yy : '%d سنوات'
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return arMa;

})));


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Saudi Arabia) [ar-sa]
//! author : Suhail Alkowaileet : https://github.com/xsoh

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '١',
    '2': '٢',
    '3': '٣',
    '4': '٤',
    '5': '٥',
    '6': '٦',
    '7': '٧',
    '8': '٨',
    '9': '٩',
    '0': '٠'
};
var numberMap = {
    '١': '1',
    '٢': '2',
    '٣': '3',
    '٤': '4',
    '٥': '5',
    '٦': '6',
    '٧': '7',
    '٨': '8',
    '٩': '9',
    '٠': '0'
};

var arSa = moment.defineLocale('ar-sa', {
    months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
    monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /ص|م/,
    isPM : function (input) {
        return 'م' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'ص';
        } else {
            return 'م';
        }
    },
    calendar : {
        sameDay: '[اليوم على الساعة] LT',
        nextDay: '[غدا على الساعة] LT',
        nextWeek: 'dddd [على الساعة] LT',
        lastDay: '[أمس على الساعة] LT',
        lastWeek: 'dddd [على الساعة] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'في %s',
        past : 'منذ %s',
        s : 'ثوان',
        m : 'دقيقة',
        mm : '%d دقائق',
        h : 'ساعة',
        hh : '%d ساعات',
        d : 'يوم',
        dd : '%d أيام',
        M : 'شهر',
        MM : '%d أشهر',
        y : 'سنة',
        yy : '%d سنوات'
    },
    preparse: function (string) {
        return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
            return numberMap[match];
        }).replace(/،/g, ',');
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        }).replace(/,/g, '،');
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return arSa;

})));


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale  :  Arabic (Tunisia) [ar-tn]
//! author : Nader Toukabri : https://github.com/naderio

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var arTn = moment.defineLocale('ar-tn', {
    months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
    monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
    weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd D MMMM YYYY HH:mm'
    },
    calendar: {
        sameDay: '[اليوم على الساعة] LT',
        nextDay: '[غدا على الساعة] LT',
        nextWeek: 'dddd [على الساعة] LT',
        lastDay: '[أمس على الساعة] LT',
        lastWeek: 'dddd [على الساعة] LT',
        sameElse: 'L'
    },
    relativeTime: {
        future: 'في %s',
        past: 'منذ %s',
        s: 'ثوان',
        m: 'دقيقة',
        mm: '%d دقائق',
        h: 'ساعة',
        hh: '%d ساعات',
        d: 'يوم',
        dd: '%d أيام',
        M: 'شهر',
        MM: '%d أشهر',
        y: 'سنة',
        yy: '%d سنوات'
    },
    week: {
        dow: 1, // Monday is the first day of the week.
        doy: 4 // The week that contains Jan 4th is the first week of the year.
    }
});

return arTn;

})));


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic [ar]
//! author : Abdel Said: https://github.com/abdelsaid
//! author : Ahmed Elkhatib
//! author : forabi https://github.com/forabi

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '١',
    '2': '٢',
    '3': '٣',
    '4': '٤',
    '5': '٥',
    '6': '٦',
    '7': '٧',
    '8': '٨',
    '9': '٩',
    '0': '٠'
};
var numberMap = {
    '١': '1',
    '٢': '2',
    '٣': '3',
    '٤': '4',
    '٥': '5',
    '٦': '6',
    '٧': '7',
    '٨': '8',
    '٩': '9',
    '٠': '0'
};
var pluralForm = function (n) {
    return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
};
var plurals = {
    s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
    m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
    h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
    d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
    M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
    y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
};
var pluralize = function (u) {
    return function (number, withoutSuffix, string, isFuture) {
        var f = pluralForm(number),
            str = plurals[u][pluralForm(number)];
        if (f === 2) {
            str = str[withoutSuffix ? 0 : 1];
        }
        return str.replace(/%d/i, number);
    };
};
var months = [
    'كانون الثاني يناير',
    'شباط فبراير',
    'آذار مارس',
    'نيسان أبريل',
    'أيار مايو',
    'حزيران يونيو',
    'تموز يوليو',
    'آب أغسطس',
    'أيلول سبتمبر',
    'تشرين الأول أكتوبر',
    'تشرين الثاني نوفمبر',
    'كانون الأول ديسمبر'
];

var ar = moment.defineLocale('ar', {
    months : months,
    monthsShort : months,
    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'D/\u200FM/\u200FYYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /ص|م/,
    isPM : function (input) {
        return 'م' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'ص';
        } else {
            return 'م';
        }
    },
    calendar : {
        sameDay: '[اليوم عند الساعة] LT',
        nextDay: '[غدًا عند الساعة] LT',
        nextWeek: 'dddd [عند الساعة] LT',
        lastDay: '[أمس عند الساعة] LT',
        lastWeek: 'dddd [عند الساعة] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'بعد %s',
        past : 'منذ %s',
        s : pluralize('s'),
        m : pluralize('m'),
        mm : pluralize('m'),
        h : pluralize('h'),
        hh : pluralize('h'),
        d : pluralize('d'),
        dd : pluralize('d'),
        M : pluralize('M'),
        MM : pluralize('M'),
        y : pluralize('y'),
        yy : pluralize('y')
    },
    preparse: function (string) {
        return string.replace(/\u200f/g, '').replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
            return numberMap[match];
        }).replace(/،/g, ',');
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        }).replace(/,/g, '،');
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return ar;

})));


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Azerbaijani [az]
//! author : topchiyev : https://github.com/topchiyev

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var suffixes = {
    1: '-inci',
    5: '-inci',
    8: '-inci',
    70: '-inci',
    80: '-inci',
    2: '-nci',
    7: '-nci',
    20: '-nci',
    50: '-nci',
    3: '-üncü',
    4: '-üncü',
    100: '-üncü',
    6: '-ncı',
    9: '-uncu',
    10: '-uncu',
    30: '-uncu',
    60: '-ıncı',
    90: '-ıncı'
};

var az = moment.defineLocale('az', {
    months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
    monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
    weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
    weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
    weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[bugün saat] LT',
        nextDay : '[sabah saat] LT',
        nextWeek : '[gələn həftə] dddd [saat] LT',
        lastDay : '[dünən] LT',
        lastWeek : '[keçən həftə] dddd [saat] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s sonra',
        past : '%s əvvəl',
        s : 'birneçə saniyyə',
        m : 'bir dəqiqə',
        mm : '%d dəqiqə',
        h : 'bir saat',
        hh : '%d saat',
        d : 'bir gün',
        dd : '%d gün',
        M : 'bir ay',
        MM : '%d ay',
        y : 'bir il',
        yy : '%d il'
    },
    meridiemParse: /gecə|səhər|gündüz|axşam/,
    isPM : function (input) {
        return /^(gündüz|axşam)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'gecə';
        } else if (hour < 12) {
            return 'səhər';
        } else if (hour < 17) {
            return 'gündüz';
        } else {
            return 'axşam';
        }
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
    ordinal : function (number) {
        if (number === 0) {  // special case for zero
            return number + '-ıncı';
        }
        var a = number % 10,
            b = number % 100 - a,
            c = number >= 100 ? 100 : null;
        return number + (suffixes[a] || suffixes[b] || suffixes[c]);
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return az;

})));


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Belarusian [be]
//! author : Dmitry Demidov : https://github.com/demidov91
//! author: Praleska: http://praleska.pro/
//! Author : Menelion Elensúle : https://github.com/Oire

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function plural(word, num) {
    var forms = word.split('_');
    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
}
function relativeTimeWithPlural(number, withoutSuffix, key) {
    var format = {
        'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
        'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
        'dd': 'дзень_дні_дзён',
        'MM': 'месяц_месяцы_месяцаў',
        'yy': 'год_гады_гадоў'
    };
    if (key === 'm') {
        return withoutSuffix ? 'хвіліна' : 'хвіліну';
    }
    else if (key === 'h') {
        return withoutSuffix ? 'гадзіна' : 'гадзіну';
    }
    else {
        return number + ' ' + plural(format[key], +number);
    }
}

var be = moment.defineLocale('be', {
    months : {
        format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
        standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
    },
    monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
    weekdays : {
        format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
        standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
        isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/
    },
    weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
    weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY г.',
        LLL : 'D MMMM YYYY г., HH:mm',
        LLLL : 'dddd, D MMMM YYYY г., HH:mm'
    },
    calendar : {
        sameDay: '[Сёння ў] LT',
        nextDay: '[Заўтра ў] LT',
        lastDay: '[Учора ў] LT',
        nextWeek: function () {
            return '[У] dddd [ў] LT';
        },
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                    return '[У мінулую] dddd [ў] LT';
                case 1:
                case 2:
                case 4:
                    return '[У мінулы] dddd [ў] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'праз %s',
        past : '%s таму',
        s : 'некалькі секунд',
        m : relativeTimeWithPlural,
        mm : relativeTimeWithPlural,
        h : relativeTimeWithPlural,
        hh : relativeTimeWithPlural,
        d : 'дзень',
        dd : relativeTimeWithPlural,
        M : 'месяц',
        MM : relativeTimeWithPlural,
        y : 'год',
        yy : relativeTimeWithPlural
    },
    meridiemParse: /ночы|раніцы|дня|вечара/,
    isPM : function (input) {
        return /^(дня|вечара)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'ночы';
        } else if (hour < 12) {
            return 'раніцы';
        } else if (hour < 17) {
            return 'дня';
        } else {
            return 'вечара';
        }
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
    ordinal: function (number, period) {
        switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
            case 'w':
            case 'W':
                return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
            case 'D':
                return number + '-га';
            default:
                return number;
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return be;

})));


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bulgarian [bg]
//! author : Krasen Borisov : https://github.com/kraz

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var bg = moment.defineLocale('bg', {
    months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
    monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
    weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
    weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
    weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'D.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY H:mm',
        LLLL : 'dddd, D MMMM YYYY H:mm'
    },
    calendar : {
        sameDay : '[Днес в] LT',
        nextDay : '[Утре в] LT',
        nextWeek : 'dddd [в] LT',
        lastDay : '[Вчера в] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[В изминалата] dddd [в] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[В изминалия] dddd [в] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'след %s',
        past : 'преди %s',
        s : 'няколко секунди',
        m : 'минута',
        mm : '%d минути',
        h : 'час',
        hh : '%d часа',
        d : 'ден',
        dd : '%d дни',
        M : 'месец',
        MM : '%d месеца',
        y : 'година',
        yy : '%d години'
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
    ordinal : function (number) {
        var lastDigit = number % 10,
            last2Digits = number % 100;
        if (number === 0) {
            return number + '-ев';
        } else if (last2Digits === 0) {
            return number + '-ен';
        } else if (last2Digits > 10 && last2Digits < 20) {
            return number + '-ти';
        } else if (lastDigit === 1) {
            return number + '-ви';
        } else if (lastDigit === 2) {
            return number + '-ри';
        } else if (lastDigit === 7 || lastDigit === 8) {
            return number + '-ми';
        } else {
            return number + '-ти';
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return bg;

})));


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bengali [bn]
//! author : Kaushik Gandhi : https://github.com/kaushikgandhi

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '১',
    '2': '২',
    '3': '৩',
    '4': '৪',
    '5': '৫',
    '6': '৬',
    '7': '৭',
    '8': '৮',
    '9': '৯',
    '0': '০'
};
var numberMap = {
    '১': '1',
    '২': '2',
    '৩': '3',
    '৪': '4',
    '৫': '5',
    '৬': '6',
    '৭': '7',
    '৮': '8',
    '৯': '9',
    '০': '0'
};

var bn = moment.defineLocale('bn', {
    months : 'জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
    monthsShort : 'জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),
    weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),
    weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
    weekdaysMin : 'রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি'.split('_'),
    longDateFormat : {
        LT : 'A h:mm সময়',
        LTS : 'A h:mm:ss সময়',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm সময়',
        LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'
    },
    calendar : {
        sameDay : '[আজ] LT',
        nextDay : '[আগামীকাল] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[গতকাল] LT',
        lastWeek : '[গত] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s পরে',
        past : '%s আগে',
        s : 'কয়েক সেকেন্ড',
        m : 'এক মিনিট',
        mm : '%d মিনিট',
        h : 'এক ঘন্টা',
        hh : '%d ঘন্টা',
        d : 'এক দিন',
        dd : '%d দিন',
        M : 'এক মাস',
        MM : '%d মাস',
        y : 'এক বছর',
        yy : '%d বছর'
    },
    preparse: function (string) {
        return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if ((meridiem === 'রাত' && hour >= 4) ||
                (meridiem === 'দুপুর' && hour < 5) ||
                meridiem === 'বিকাল') {
            return hour + 12;
        } else {
            return hour;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'রাত';
        } else if (hour < 10) {
            return 'সকাল';
        } else if (hour < 17) {
            return 'দুপুর';
        } else if (hour < 20) {
            return 'বিকাল';
        } else {
            return 'রাত';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return bn;

})));


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tibetan [bo]
//! author : Thupten N. Chakrishar : https://github.com/vajradog

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '༡',
    '2': '༢',
    '3': '༣',
    '4': '༤',
    '5': '༥',
    '6': '༦',
    '7': '༧',
    '8': '༨',
    '9': '༩',
    '0': '༠'
};
var numberMap = {
    '༡': '1',
    '༢': '2',
    '༣': '3',
    '༤': '4',
    '༥': '5',
    '༦': '6',
    '༧': '7',
    '༨': '8',
    '༩': '9',
    '༠': '0'
};

var bo = moment.defineLocale('bo', {
    months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
    monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
    weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
    weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
    weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
    longDateFormat : {
        LT : 'A h:mm',
        LTS : 'A h:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm',
        LLLL : 'dddd, D MMMM YYYY, A h:mm'
    },
    calendar : {
        sameDay : '[དི་རིང] LT',
        nextDay : '[སང་ཉིན] LT',
        nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
        lastDay : '[ཁ་སང] LT',
        lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s ལ་',
        past : '%s སྔན་ལ',
        s : 'ལམ་སང',
        m : 'སྐར་མ་གཅིག',
        mm : '%d སྐར་མ',
        h : 'ཆུ་ཚོད་གཅིག',
        hh : '%d ཆུ་ཚོད',
        d : 'ཉིན་གཅིག',
        dd : '%d ཉིན་',
        M : 'ཟླ་བ་གཅིག',
        MM : '%d ཟླ་བ',
        y : 'ལོ་གཅིག',
        yy : '%d ལོ'
    },
    preparse: function (string) {
        return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if ((meridiem === 'མཚན་མོ' && hour >= 4) ||
                (meridiem === 'ཉིན་གུང' && hour < 5) ||
                meridiem === 'དགོང་དག') {
            return hour + 12;
        } else {
            return hour;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'མཚན་མོ';
        } else if (hour < 10) {
            return 'ཞོགས་ཀས';
        } else if (hour < 17) {
            return 'ཉིན་གུང';
        } else if (hour < 20) {
            return 'དགོང་དག';
        } else {
            return 'མཚན་མོ';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return bo;

})));


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Breton [br]
//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function relativeTimeWithMutation(number, withoutSuffix, key) {
    var format = {
        'mm': 'munutenn',
        'MM': 'miz',
        'dd': 'devezh'
    };
    return number + ' ' + mutation(format[key], number);
}
function specialMutationForYears(number) {
    switch (lastNumber(number)) {
        case 1:
        case 3:
        case 4:
        case 5:
        case 9:
            return number + ' bloaz';
        default:
            return number + ' vloaz';
    }
}
function lastNumber(number) {
    if (number > 9) {
        return lastNumber(number % 10);
    }
    return number;
}
function mutation(text, number) {
    if (number === 2) {
        return softMutation(text);
    }
    return text;
}
function softMutation(text) {
    var mutationTable = {
        'm': 'v',
        'b': 'v',
        'd': 'z'
    };
    if (mutationTable[text.charAt(0)] === undefined) {
        return text;
    }
    return mutationTable[text.charAt(0)] + text.substring(1);
}

var br = moment.defineLocale('br', {
    months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
    monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
    weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
    weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
    weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'h[e]mm A',
        LTS : 'h[e]mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D [a viz] MMMM YYYY',
        LLL : 'D [a viz] MMMM YYYY h[e]mm A',
        LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
    },
    calendar : {
        sameDay : '[Hiziv da] LT',
        nextDay : '[Warc\'hoazh da] LT',
        nextWeek : 'dddd [da] LT',
        lastDay : '[Dec\'h da] LT',
        lastWeek : 'dddd [paset da] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'a-benn %s',
        past : '%s \'zo',
        s : 'un nebeud segondennoù',
        m : 'ur vunutenn',
        mm : relativeTimeWithMutation,
        h : 'un eur',
        hh : '%d eur',
        d : 'un devezh',
        dd : relativeTimeWithMutation,
        M : 'ur miz',
        MM : relativeTimeWithMutation,
        y : 'ur bloaz',
        yy : specialMutationForYears
    },
    dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
    ordinal : function (number) {
        var output = (number === 1) ? 'añ' : 'vet';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return br;

})));


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bosnian [bs]
//! author : Nedim Cholich : https://github.com/frontyard
//! based on (hr) translation by Bojan Marković

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function translate(number, withoutSuffix, key) {
    var result = number + ' ';
    switch (key) {
        case 'm':
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minuta';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
            if (number === 1) {
                result += 'sat';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
            } else {
                result += 'sati';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dana';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mjesec';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
            } else {
                result += 'mjeseci';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'godina';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
            } else {
                result += 'godina';
            }
            return result;
    }
}

var bs = moment.defineLocale('bs', {
    months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
    monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
    weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
    weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd, D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay  : '[danas u] LT',
        nextDay  : '[sutra u] LT',
        nextWeek : function () {
            switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
            }
        },
        lastDay  : '[jučer u] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                case 3:
                    return '[prošlu] dddd [u] LT';
                case 6:
                    return '[prošle] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prošli] dddd [u] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'za %s',
        past   : 'prije %s',
        s      : 'par sekundi',
        m      : translate,
        mm     : translate,
        h      : translate,
        hh     : translate,
        d      : 'dan',
        dd     : translate,
        M      : 'mjesec',
        MM     : translate,
        y      : 'godinu',
        yy     : translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return bs;

})));


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Catalan [ca]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ca = moment.defineLocale('ca', {
    months : {
        standalone: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
        format: 'de gener_de febrer_de març_d\'abril_de maig_de juny_de juliol_d\'agost_de setembre_d\'octubre_de novembre_de desembre'.split('_'),
        isFormat: /D[oD]?(\s)+MMMM/
    },
    monthsShort : 'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split('_'),
    monthsParseExact : true,
    weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
    weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
    weekdaysMin : 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD/MM/YYYY',
        LL : '[el] D MMMM [de] YYYY',
        ll : 'D MMM YYYY',
        LLL : '[el] D MMMM [de] YYYY [a les] H:mm',
        lll : 'D MMM YYYY, H:mm',
        LLLL : '[el] dddd D MMMM [de] YYYY [a les] H:mm',
        llll : 'ddd D MMM YYYY, H:mm'
    },
    calendar : {
        sameDay : function () {
            return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        nextDay : function () {
            return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        nextWeek : function () {
            return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        lastDay : function () {
            return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        lastWeek : function () {
            return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'd\'aquí %s',
        past : 'fa %s',
        s : 'uns segons',
        m : 'un minut',
        mm : '%d minuts',
        h : 'una hora',
        hh : '%d hores',
        d : 'un dia',
        dd : '%d dies',
        M : 'un mes',
        MM : '%d mesos',
        y : 'un any',
        yy : '%d anys'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
    ordinal : function (number, period) {
        var output = (number === 1) ? 'r' :
            (number === 2) ? 'n' :
            (number === 3) ? 'r' :
            (number === 4) ? 't' : 'è';
        if (period === 'w' || period === 'W') {
            output = 'a';
        }
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return ca;

})));


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Czech [cs]
//! author : petrbela : https://github.com/petrbela

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_');
var monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
function plural(n) {
    return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
}
function translate(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    switch (key) {
        case 's':  // a few seconds / in a few seconds / a few seconds ago
            return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
        case 'm':  // a minute / in a minute / a minute ago
            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'minuty' : 'minut');
            } else {
                return result + 'minutami';
            }
            break;
        case 'h':  // an hour / in an hour / an hour ago
            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
        case 'hh': // 9 hours / in 9 hours / 9 hours ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'hodiny' : 'hodin');
            } else {
                return result + 'hodinami';
            }
            break;
        case 'd':  // a day / in a day / a day ago
            return (withoutSuffix || isFuture) ? 'den' : 'dnem';
        case 'dd': // 9 days / in 9 days / 9 days ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'dny' : 'dní');
            } else {
                return result + 'dny';
            }
            break;
        case 'M':  // a month / in a month / a month ago
            return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
        case 'MM': // 9 months / in 9 months / 9 months ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'měsíce' : 'měsíců');
            } else {
                return result + 'měsíci';
            }
            break;
        case 'y':  // a year / in a year / a year ago
            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
        case 'yy': // 9 years / in 9 years / 9 years ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'roky' : 'let');
            } else {
                return result + 'lety';
            }
            break;
    }
}

var cs = moment.defineLocale('cs', {
    months : months,
    monthsShort : monthsShort,
    monthsParse : (function (months, monthsShort) {
        var i, _monthsParse = [];
        for (i = 0; i < 12; i++) {
            // use custom parser to solve problem with July (červenec)
            _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
        }
        return _monthsParse;
    }(months, monthsShort)),
    shortMonthsParse : (function (monthsShort) {
        var i, _shortMonthsParse = [];
        for (i = 0; i < 12; i++) {
            _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
        }
        return _shortMonthsParse;
    }(monthsShort)),
    longMonthsParse : (function (months) {
        var i, _longMonthsParse = [];
        for (i = 0; i < 12; i++) {
            _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
        }
        return _longMonthsParse;
    }(months)),
    weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
    weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
    weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
    longDateFormat : {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd D. MMMM YYYY H:mm',
        l : 'D. M. YYYY'
    },
    calendar : {
        sameDay: '[dnes v] LT',
        nextDay: '[zítra v] LT',
        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[v neděli v] LT';
                case 1:
                case 2:
                    return '[v] dddd [v] LT';
                case 3:
                    return '[ve středu v] LT';
                case 4:
                    return '[ve čtvrtek v] LT';
                case 5:
                    return '[v pátek v] LT';
                case 6:
                    return '[v sobotu v] LT';
            }
        },
        lastDay: '[včera v] LT',
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[minulou neděli v] LT';
                case 1:
                case 2:
                    return '[minulé] dddd [v] LT';
                case 3:
                    return '[minulou středu v] LT';
                case 4:
                case 5:
                    return '[minulý] dddd [v] LT';
                case 6:
                    return '[minulou sobotu v] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'za %s',
        past : 'před %s',
        s : translate,
        m : translate,
        mm : translate,
        h : translate,
        hh : translate,
        d : translate,
        dd : translate,
        M : translate,
        MM : translate,
        y : translate,
        yy : translate
    },
    dayOfMonthOrdinalParse : /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return cs;

})));


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chuvash [cv]
//! author : Anatoly Mironov : https://github.com/mirontoli

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var cv = moment.defineLocale('cv', {
    months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
    monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
    weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
    weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
    weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD-MM-YYYY',
        LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
        LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
        LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
    },
    calendar : {
        sameDay: '[Паян] LT [сехетре]',
        nextDay: '[Ыран] LT [сехетре]',
        lastDay: '[Ӗнер] LT [сехетре]',
        nextWeek: '[Ҫитес] dddd LT [сехетре]',
        lastWeek: '[Иртнӗ] dddd LT [сехетре]',
        sameElse: 'L'
    },
    relativeTime : {
        future : function (output) {
            var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
            return output + affix;
        },
        past : '%s каялла',
        s : 'пӗр-ик ҫеккунт',
        m : 'пӗр минут',
        mm : '%d минут',
        h : 'пӗр сехет',
        hh : '%d сехет',
        d : 'пӗр кун',
        dd : '%d кун',
        M : 'пӗр уйӑх',
        MM : '%d уйӑх',
        y : 'пӗр ҫул',
        yy : '%d ҫул'
    },
    dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
    ordinal : '%d-мӗш',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return cv;

})));


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Welsh [cy]
//! author : Robert Allen : https://github.com/robgallen
//! author : https://github.com/ryangreaves

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var cy = moment.defineLocale('cy', {
    months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
    monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
    weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
    weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
    weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
    weekdaysParseExact : true,
    // time formats are the same as en-gb
    longDateFormat: {
        LT: 'HH:mm',
        LTS : 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd, D MMMM YYYY HH:mm'
    },
    calendar: {
        sameDay: '[Heddiw am] LT',
        nextDay: '[Yfory am] LT',
        nextWeek: 'dddd [am] LT',
        lastDay: '[Ddoe am] LT',
        lastWeek: 'dddd [diwethaf am] LT',
        sameElse: 'L'
    },
    relativeTime: {
        future: 'mewn %s',
        past: '%s yn ôl',
        s: 'ychydig eiliadau',
        m: 'munud',
        mm: '%d munud',
        h: 'awr',
        hh: '%d awr',
        d: 'diwrnod',
        dd: '%d diwrnod',
        M: 'mis',
        MM: '%d mis',
        y: 'blwyddyn',
        yy: '%d flynedd'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
    // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
    ordinal: function (number) {
        var b = number,
            output = '',
            lookup = [
                '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
                'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
            ];
        if (b > 20) {
            if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                output = 'fed'; // not 30ain, 70ain or 90ain
            } else {
                output = 'ain';
            }
        } else if (b > 0) {
            output = lookup[b];
        }
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return cy;

})));


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Danish [da]
//! author : Ulrik Nielsen : https://github.com/mrbase

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var da = moment.defineLocale('da', {
    months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
    weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
    weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
    weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY HH:mm',
        LLLL : 'dddd [d.] D. MMMM YYYY [kl.] HH:mm'
    },
    calendar : {
        sameDay : '[i dag kl.] LT',
        nextDay : '[i morgen kl.] LT',
        nextWeek : 'på dddd [kl.] LT',
        lastDay : '[i går kl.] LT',
        lastWeek : '[i] dddd[s kl.] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'om %s',
        past : '%s siden',
        s : 'få sekunder',
        m : 'et minut',
        mm : '%d minutter',
        h : 'en time',
        hh : '%d timer',
        d : 'en dag',
        dd : '%d dage',
        M : 'en måned',
        MM : '%d måneder',
        y : 'et år',
        yy : '%d år'
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return da;

})));


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German (Austria) [de-at]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion Elensúle: https://github.com/Oire
//! author : Martin Groller : https://github.com/MadMG
//! author : Mikolaj Dadela : https://github.com/mik01aj

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        'm': ['eine Minute', 'einer Minute'],
        'h': ['eine Stunde', 'einer Stunde'],
        'd': ['ein Tag', 'einem Tag'],
        'dd': [number + ' Tage', number + ' Tagen'],
        'M': ['ein Monat', 'einem Monat'],
        'MM': [number + ' Monate', number + ' Monaten'],
        'y': ['ein Jahr', 'einem Jahr'],
        'yy': [number + ' Jahre', number + ' Jahren']
    };
    return withoutSuffix ? format[key][0] : format[key][1];
}

var deAt = moment.defineLocale('de-at', {
    months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
    monthsShort : 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
    monthsParseExact : true,
    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
    weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY HH:mm',
        LLLL : 'dddd, D. MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[heute um] LT [Uhr]',
        sameElse: 'L',
        nextDay: '[morgen um] LT [Uhr]',
        nextWeek: 'dddd [um] LT [Uhr]',
        lastDay: '[gestern um] LT [Uhr]',
        lastWeek: '[letzten] dddd [um] LT [Uhr]'
    },
    relativeTime : {
        future : 'in %s',
        past : 'vor %s',
        s : 'ein paar Sekunden',
        m : processRelativeTime,
        mm : '%d Minuten',
        h : processRelativeTime,
        hh : '%d Stunden',
        d : processRelativeTime,
        dd : processRelativeTime,
        M : processRelativeTime,
        MM : processRelativeTime,
        y : processRelativeTime,
        yy : processRelativeTime
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return deAt;

})));


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German (Switzerland) [de-ch]
//! author : sschueller : https://github.com/sschueller

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


// based on: https://www.bk.admin.ch/dokumentation/sprachen/04915/05016/index.html?lang=de#

function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        'm': ['eine Minute', 'einer Minute'],
        'h': ['eine Stunde', 'einer Stunde'],
        'd': ['ein Tag', 'einem Tag'],
        'dd': [number + ' Tage', number + ' Tagen'],
        'M': ['ein Monat', 'einem Monat'],
        'MM': [number + ' Monate', number + ' Monaten'],
        'y': ['ein Jahr', 'einem Jahr'],
        'yy': [number + ' Jahre', number + ' Jahren']
    };
    return withoutSuffix ? format[key][0] : format[key][1];
}

var deCh = moment.defineLocale('de-ch', {
    months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
    monthsShort : 'Jan._Febr._März_April_Mai_Juni_Juli_Aug._Sept._Okt._Nov._Dez.'.split('_'),
    monthsParseExact : true,
    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
    weekdaysShort : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT: 'HH.mm',
        LTS: 'HH.mm.ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY HH.mm',
        LLLL : 'dddd, D. MMMM YYYY HH.mm'
    },
    calendar : {
        sameDay: '[heute um] LT [Uhr]',
        sameElse: 'L',
        nextDay: '[morgen um] LT [Uhr]',
        nextWeek: 'dddd [um] LT [Uhr]',
        lastDay: '[gestern um] LT [Uhr]',
        lastWeek: '[letzten] dddd [um] LT [Uhr]'
    },
    relativeTime : {
        future : 'in %s',
        past : 'vor %s',
        s : 'ein paar Sekunden',
        m : processRelativeTime,
        mm : '%d Minuten',
        h : processRelativeTime,
        hh : '%d Stunden',
        d : processRelativeTime,
        dd : processRelativeTime,
        M : processRelativeTime,
        MM : processRelativeTime,
        y : processRelativeTime,
        yy : processRelativeTime
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return deCh;

})));


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German [de]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion Elensúle: https://github.com/Oire
//! author : Mikolaj Dadela : https://github.com/mik01aj

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        'm': ['eine Minute', 'einer Minute'],
        'h': ['eine Stunde', 'einer Stunde'],
        'd': ['ein Tag', 'einem Tag'],
        'dd': [number + ' Tage', number + ' Tagen'],
        'M': ['ein Monat', 'einem Monat'],
        'MM': [number + ' Monate', number + ' Monaten'],
        'y': ['ein Jahr', 'einem Jahr'],
        'yy': [number + ' Jahre', number + ' Jahren']
    };
    return withoutSuffix ? format[key][0] : format[key][1];
}

var de = moment.defineLocale('de', {
    months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
    monthsShort : 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
    monthsParseExact : true,
    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
    weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY HH:mm',
        LLLL : 'dddd, D. MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[heute um] LT [Uhr]',
        sameElse: 'L',
        nextDay: '[morgen um] LT [Uhr]',
        nextWeek: 'dddd [um] LT [Uhr]',
        lastDay: '[gestern um] LT [Uhr]',
        lastWeek: '[letzten] dddd [um] LT [Uhr]'
    },
    relativeTime : {
        future : 'in %s',
        past : 'vor %s',
        s : 'ein paar Sekunden',
        m : processRelativeTime,
        mm : '%d Minuten',
        h : processRelativeTime,
        hh : '%d Stunden',
        d : processRelativeTime,
        dd : processRelativeTime,
        M : processRelativeTime,
        MM : processRelativeTime,
        y : processRelativeTime,
        yy : processRelativeTime
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return de;

})));


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maldivian [dv]
//! author : Jawish Hameed : https://github.com/jawish

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var months = [
    'ޖެނުއަރީ',
    'ފެބްރުއަރީ',
    'މާރިޗު',
    'އޭޕްރީލު',
    'މޭ',
    'ޖޫން',
    'ޖުލައި',
    'އޯގަސްޓު',
    'ސެޕްޓެމްބަރު',
    'އޮކްޓޯބަރު',
    'ނޮވެމްބަރު',
    'ޑިސެމްބަރު'
];
var weekdays = [
    'އާދިއްތަ',
    'ހޯމަ',
    'އަންގާރަ',
    'ބުދަ',
    'ބުރާސްފަތި',
    'ހުކުރު',
    'ހޮނިހިރު'
];

var dv = moment.defineLocale('dv', {
    months : months,
    monthsShort : months,
    weekdays : weekdays,
    weekdaysShort : weekdays,
    weekdaysMin : 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
    longDateFormat : {

        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'D/M/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /މކ|މފ/,
    isPM : function (input) {
        return 'މފ' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'މކ';
        } else {
            return 'މފ';
        }
    },
    calendar : {
        sameDay : '[މިއަދު] LT',
        nextDay : '[މާދަމާ] LT',
        nextWeek : 'dddd LT',
        lastDay : '[އިއްޔެ] LT',
        lastWeek : '[ފާއިތުވި] dddd LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'ތެރޭގައި %s',
        past : 'ކުރިން %s',
        s : 'ސިކުންތުކޮޅެއް',
        m : 'މިނިޓެއް',
        mm : 'މިނިޓު %d',
        h : 'ގަޑިއިރެއް',
        hh : 'ގަޑިއިރު %d',
        d : 'ދުވަހެއް',
        dd : 'ދުވަސް %d',
        M : 'މަހެއް',
        MM : 'މަސް %d',
        y : 'އަހަރެއް',
        yy : 'އަހަރު %d'
    },
    preparse: function (string) {
        return string.replace(/،/g, ',');
    },
    postformat: function (string) {
        return string.replace(/,/g, '،');
    },
    week : {
        dow : 7,  // Sunday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return dv;

})));


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Greek [el]
//! author : Aggelos Karalias : https://github.com/mehiel

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';

function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
}


var el = moment.defineLocale('el', {
    monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
    monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
    months : function (momentToFormat, format) {
        if (!momentToFormat) {
            return this._monthsNominativeEl;
        } else if (/D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
            return this._monthsGenitiveEl[momentToFormat.month()];
        } else {
            return this._monthsNominativeEl[momentToFormat.month()];
        }
    },
    monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
    weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
    weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
    weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
    meridiem : function (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'μμ' : 'ΜΜ';
        } else {
            return isLower ? 'πμ' : 'ΠΜ';
        }
    },
    isPM : function (input) {
        return ((input + '').toLowerCase()[0] === 'μ');
    },
    meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendarEl : {
        sameDay : '[Σήμερα {}] LT',
        nextDay : '[Αύριο {}] LT',
        nextWeek : 'dddd [{}] LT',
        lastDay : '[Χθες {}] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 6:
                    return '[το προηγούμενο] dddd [{}] LT';
                default:
                    return '[την προηγούμενη] dddd [{}] LT';
            }
        },
        sameElse : 'L'
    },
    calendar : function (key, mom) {
        var output = this._calendarEl[key],
            hours = mom && mom.hours();
        if (isFunction(output)) {
            output = output.apply(mom);
        }
        return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
    },
    relativeTime : {
        future : 'σε %s',
        past : '%s πριν',
        s : 'λίγα δευτερόλεπτα',
        m : 'ένα λεπτό',
        mm : '%d λεπτά',
        h : 'μία ώρα',
        hh : '%d ώρες',
        d : 'μία μέρα',
        dd : '%d μέρες',
        M : 'ένας μήνας',
        MM : '%d μήνες',
        y : 'ένας χρόνος',
        yy : '%d χρόνια'
    },
    dayOfMonthOrdinalParse: /\d{1,2}η/,
    ordinal: '%dη',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4st is the first week of the year.
    }
});

return el;

})));


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Australia) [en-au]
//! author : Jared Morse : https://github.com/jarcoal

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enAu = moment.defineLocale('en-au', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enAu;

})));


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Canada) [en-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enCa = moment.defineLocale('en-ca', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'YYYY-MM-DD',
        LL : 'MMMM D, YYYY',
        LLL : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

return enCa;

})));


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (United Kingdom) [en-gb]
//! author : Chris Gedrim : https://github.com/chrisgedrim

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enGb = moment.defineLocale('en-gb', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enGb;

})));


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Ireland) [en-ie]
//! author : Chris Cartlidge : https://github.com/chriscartlidge

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enIe = moment.defineLocale('en-ie', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD-MM-YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enIe;

})));


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (New Zealand) [en-nz]
//! author : Luke McGregor : https://github.com/lukemcgregor

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enNz = moment.defineLocale('en-nz', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enNz;

})));


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Esperanto [eo]
//! author : Colin Dean : https://github.com/colindean
//! author : Mia Nordentoft Imperatori : https://github.com/miestasmia
//! comment : miestasmia corrected the translation by colindean

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var eo = moment.defineLocale('eo', {
    months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
    weekdays : 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),
    weekdaysShort : 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),
    weekdaysMin : 'di_lu_ma_me_ĵa_ve_sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'D[-a de] MMMM, YYYY',
        LLL : 'D[-a de] MMMM, YYYY HH:mm',
        LLLL : 'dddd, [la] D[-a de] MMMM, YYYY HH:mm'
    },
    meridiemParse: /[ap]\.t\.m/i,
    isPM: function (input) {
        return input.charAt(0).toLowerCase() === 'p';
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'p.t.m.' : 'P.T.M.';
        } else {
            return isLower ? 'a.t.m.' : 'A.T.M.';
        }
    },
    calendar : {
        sameDay : '[Hodiaŭ je] LT',
        nextDay : '[Morgaŭ je] LT',
        nextWeek : 'dddd [je] LT',
        lastDay : '[Hieraŭ je] LT',
        lastWeek : '[pasinta] dddd [je] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'post %s',
        past : 'antaŭ %s',
        s : 'sekundoj',
        m : 'minuto',
        mm : '%d minutoj',
        h : 'horo',
        hh : '%d horoj',
        d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
        dd : '%d tagoj',
        M : 'monato',
        MM : '%d monatoj',
        y : 'jaro',
        yy : '%d jaroj'
    },
    dayOfMonthOrdinalParse: /\d{1,2}a/,
    ordinal : '%da',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return eo;

})));


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (Dominican Republic) [es-do]

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

var esDo = moment.defineLocale('es-do', {
    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
    monthsShort : function (m, format) {
        if (!m) {
            return monthsShortDot;
        } else if (/-MMM-/.test(format)) {
            return monthsShort[m.month()];
        } else {
            return monthsShortDot[m.month()];
        }
    },
    monthsParseExact : true,
    weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
    weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
    weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY h:mm A',
        LLLL : 'dddd, D [de] MMMM [de] YYYY h:mm A'
    },
    calendar : {
        sameDay : function () {
            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        nextDay : function () {
            return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        nextWeek : function () {
            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        lastDay : function () {
            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        lastWeek : function () {
            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'en %s',
        past : 'hace %s',
        s : 'unos segundos',
        m : 'un minuto',
        mm : '%d minutos',
        h : 'una hora',
        hh : '%d horas',
        d : 'un día',
        dd : '%d días',
        M : 'un mes',
        MM : '%d meses',
        y : 'un año',
        yy : '%d años'
    },
    dayOfMonthOrdinalParse : /\d{1,2}º/,
    ordinal : '%dº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return esDo;

})));


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish [es]
//! author : Julio Napurí : https://github.com/julionc

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

var es = moment.defineLocale('es', {
    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
    monthsShort : function (m, format) {
        if (!m) {
            return monthsShortDot;
        } else if (/-MMM-/.test(format)) {
            return monthsShort[m.month()];
        } else {
            return monthsShortDot[m.month()];
        }
    },
    monthsParseExact : true,
    weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
    weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
    weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY H:mm',
        LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
    },
    calendar : {
        sameDay : function () {
            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        nextDay : function () {
            return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        nextWeek : function () {
            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        lastDay : function () {
            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        lastWeek : function () {
            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'en %s',
        past : 'hace %s',
        s : 'unos segundos',
        m : 'un minuto',
        mm : '%d minutos',
        h : 'una hora',
        hh : '%d horas',
        d : 'un día',
        dd : '%d días',
        M : 'un mes',
        MM : '%d meses',
        y : 'un año',
        yy : '%d años'
    },
    dayOfMonthOrdinalParse : /\d{1,2}º/,
    ordinal : '%dº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return es;

})));


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Estonian [et]
//! author : Henry Kehlmann : https://github.com/madhenry
//! improvements : Illimar Tambek : https://github.com/ragulka

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
        'm' : ['ühe minuti', 'üks minut'],
        'mm': [number + ' minuti', number + ' minutit'],
        'h' : ['ühe tunni', 'tund aega', 'üks tund'],
        'hh': [number + ' tunni', number + ' tundi'],
        'd' : ['ühe päeva', 'üks päev'],
        'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
        'MM': [number + ' kuu', number + ' kuud'],
        'y' : ['ühe aasta', 'aasta', 'üks aasta'],
        'yy': [number + ' aasta', number + ' aastat']
    };
    if (withoutSuffix) {
        return format[key][2] ? format[key][2] : format[key][1];
    }
    return isFuture ? format[key][0] : format[key][1];
}

var et = moment.defineLocale('et', {
    months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
    monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
    weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
    weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
    weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
    longDateFormat : {
        LT   : 'H:mm',
        LTS : 'H:mm:ss',
        L    : 'DD.MM.YYYY',
        LL   : 'D. MMMM YYYY',
        LLL  : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd, D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay  : '[Täna,] LT',
        nextDay  : '[Homme,] LT',
        nextWeek : '[Järgmine] dddd LT',
        lastDay  : '[Eile,] LT',
        lastWeek : '[Eelmine] dddd LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s pärast',
        past   : '%s tagasi',
        s      : processRelativeTime,
        m      : processRelativeTime,
        mm     : processRelativeTime,
        h      : processRelativeTime,
        hh     : processRelativeTime,
        d      : processRelativeTime,
        dd     : '%d päeva',
        M      : processRelativeTime,
        MM     : processRelativeTime,
        y      : processRelativeTime,
        yy     : processRelativeTime
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return et;

})));


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Basque [eu]
//! author : Eneko Illarramendi : https://github.com/eillarra

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var eu = moment.defineLocale('eu', {
    months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
    monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
    monthsParseExact : true,
    weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
    weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
    weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'YYYY[ko] MMMM[ren] D[a]',
        LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
        LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
        l : 'YYYY-M-D',
        ll : 'YYYY[ko] MMM D[a]',
        lll : 'YYYY[ko] MMM D[a] HH:mm',
        llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
    },
    calendar : {
        sameDay : '[gaur] LT[etan]',
        nextDay : '[bihar] LT[etan]',
        nextWeek : 'dddd LT[etan]',
        lastDay : '[atzo] LT[etan]',
        lastWeek : '[aurreko] dddd LT[etan]',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s barru',
        past : 'duela %s',
        s : 'segundo batzuk',
        m : 'minutu bat',
        mm : '%d minutu',
        h : 'ordu bat',
        hh : '%d ordu',
        d : 'egun bat',
        dd : '%d egun',
        M : 'hilabete bat',
        MM : '%d hilabete',
        y : 'urte bat',
        yy : '%d urte'
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return eu;

})));


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Persian [fa]
//! author : Ebrahim Byagowi : https://github.com/ebraminio

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '۱',
    '2': '۲',
    '3': '۳',
    '4': '۴',
    '5': '۵',
    '6': '۶',
    '7': '۷',
    '8': '۸',
    '9': '۹',
    '0': '۰'
};
var numberMap = {
    '۱': '1',
    '۲': '2',
    '۳': '3',
    '۴': '4',
    '۵': '5',
    '۶': '6',
    '۷': '7',
    '۸': '8',
    '۹': '9',
    '۰': '0'
};

var fa = moment.defineLocale('fa', {
    months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
    monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
    weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
    weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
    weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    meridiemParse: /قبل از ظهر|بعد از ظهر/,
    isPM: function (input) {
        return /بعد از ظهر/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'قبل از ظهر';
        } else {
            return 'بعد از ظهر';
        }
    },
    calendar : {
        sameDay : '[امروز ساعت] LT',
        nextDay : '[فردا ساعت] LT',
        nextWeek : 'dddd [ساعت] LT',
        lastDay : '[دیروز ساعت] LT',
        lastWeek : 'dddd [پیش] [ساعت] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'در %s',
        past : '%s پیش',
        s : 'چند ثانیه',
        m : 'یک دقیقه',
        mm : '%d دقیقه',
        h : 'یک ساعت',
        hh : '%d ساعت',
        d : 'یک روز',
        dd : '%d روز',
        M : 'یک ماه',
        MM : '%d ماه',
        y : 'یک سال',
        yy : '%d سال'
    },
    preparse: function (string) {
        return string.replace(/[۰-۹]/g, function (match) {
            return numberMap[match];
        }).replace(/،/g, ',');
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        }).replace(/,/g, '،');
    },
    dayOfMonthOrdinalParse: /\d{1,2}م/,
    ordinal : '%dم',
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12 // The week that contains Jan 1st is the first week of the year.
    }
});

return fa;

})));


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Finnish [fi]
//! author : Tarmo Aidantausta : https://github.com/bleadof

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' ');
var numbersFuture = [
        'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
        numbersPast[7], numbersPast[8], numbersPast[9]
    ];
function translate(number, withoutSuffix, key, isFuture) {
    var result = '';
    switch (key) {
        case 's':
            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
        case 'm':
            return isFuture ? 'minuutin' : 'minuutti';
        case 'mm':
            result = isFuture ? 'minuutin' : 'minuuttia';
            break;
        case 'h':
            return isFuture ? 'tunnin' : 'tunti';
        case 'hh':
            result = isFuture ? 'tunnin' : 'tuntia';
            break;
        case 'd':
            return isFuture ? 'päivän' : 'päivä';
        case 'dd':
            result = isFuture ? 'päivän' : 'päivää';
            break;
        case 'M':
            return isFuture ? 'kuukauden' : 'kuukausi';
        case 'MM':
            result = isFuture ? 'kuukauden' : 'kuukautta';
            break;
        case 'y':
            return isFuture ? 'vuoden' : 'vuosi';
        case 'yy':
            result = isFuture ? 'vuoden' : 'vuotta';
            break;
    }
    result = verbalNumber(number, isFuture) + ' ' + result;
    return result;
}
function verbalNumber(number, isFuture) {
    return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
}

var fi = moment.defineLocale('fi', {
    months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
    monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
    weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
    weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
    weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD.MM.YYYY',
        LL : 'Do MMMM[ta] YYYY',
        LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
        LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
        l : 'D.M.YYYY',
        ll : 'Do MMM YYYY',
        lll : 'Do MMM YYYY, [klo] HH.mm',
        llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
    },
    calendar : {
        sameDay : '[tänään] [klo] LT',
        nextDay : '[huomenna] [klo] LT',
        nextWeek : 'dddd [klo] LT',
        lastDay : '[eilen] [klo] LT',
        lastWeek : '[viime] dddd[na] [klo] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s päästä',
        past : '%s sitten',
        s : translate,
        m : translate,
        mm : translate,
        h : translate,
        hh : translate,
        d : translate,
        dd : translate,
        M : translate,
        MM : translate,
        y : translate,
        yy : translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return fi;

})));


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Faroese [fo]
//! author : Ragnar Johannesen : https://github.com/ragnar123

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var fo = moment.defineLocale('fo', {
    months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
    monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
    weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
    weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
    weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D. MMMM, YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Í dag kl.] LT',
        nextDay : '[Í morgin kl.] LT',
        nextWeek : 'dddd [kl.] LT',
        lastDay : '[Í gjár kl.] LT',
        lastWeek : '[síðstu] dddd [kl] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'um %s',
        past : '%s síðani',
        s : 'fá sekund',
        m : 'ein minutt',
        mm : '%d minuttir',
        h : 'ein tími',
        hh : '%d tímar',
        d : 'ein dagur',
        dd : '%d dagar',
        M : 'ein mánaði',
        MM : '%d mánaðir',
        y : 'eitt ár',
        yy : '%d ár'
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return fo;

})));


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French (Canada) [fr-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var frCa = moment.defineLocale('fr-ca', {
    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
    monthsParseExact : true,
    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Aujourd’hui à] LT',
        nextDay : '[Demain à] LT',
        nextWeek : 'dddd [à] LT',
        lastDay : '[Hier à] LT',
        lastWeek : 'dddd [dernier à] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dans %s',
        past : 'il y a %s',
        s : 'quelques secondes',
        m : 'une minute',
        mm : '%d minutes',
        h : 'une heure',
        hh : '%d heures',
        d : 'un jour',
        dd : '%d jours',
        M : 'un mois',
        MM : '%d mois',
        y : 'un an',
        yy : '%d ans'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
    ordinal : function (number, period) {
        switch (period) {
            // Words with masculine grammatical gender: mois, trimestre, jour
            default:
            case 'M':
            case 'Q':
            case 'D':
            case 'DDD':
            case 'd':
                return number + (number === 1 ? 'er' : 'e');

            // Words with feminine grammatical gender: semaine
            case 'w':
            case 'W':
                return number + (number === 1 ? 're' : 'e');
        }
    }
});

return frCa;

})));


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French (Switzerland) [fr-ch]
//! author : Gaspard Bucher : https://github.com/gaspard

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var frCh = moment.defineLocale('fr-ch', {
    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
    monthsParseExact : true,
    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Aujourd’hui à] LT',
        nextDay : '[Demain à] LT',
        nextWeek : 'dddd [à] LT',
        lastDay : '[Hier à] LT',
        lastWeek : 'dddd [dernier à] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dans %s',
        past : 'il y a %s',
        s : 'quelques secondes',
        m : 'une minute',
        mm : '%d minutes',
        h : 'une heure',
        hh : '%d heures',
        d : 'un jour',
        dd : '%d jours',
        M : 'un mois',
        MM : '%d mois',
        y : 'un an',
        yy : '%d ans'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
    ordinal : function (number, period) {
        switch (period) {
            // Words with masculine grammatical gender: mois, trimestre, jour
            default:
            case 'M':
            case 'Q':
            case 'D':
            case 'DDD':
            case 'd':
                return number + (number === 1 ? 'er' : 'e');

            // Words with feminine grammatical gender: semaine
            case 'w':
            case 'W':
                return number + (number === 1 ? 're' : 'e');
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return frCh;

})));


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French [fr]
//! author : John Fischer : https://github.com/jfroffice

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var fr = moment.defineLocale('fr', {
    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
    monthsParseExact : true,
    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Aujourd’hui à] LT',
        nextDay : '[Demain à] LT',
        nextWeek : 'dddd [à] LT',
        lastDay : '[Hier à] LT',
        lastWeek : 'dddd [dernier à] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dans %s',
        past : 'il y a %s',
        s : 'quelques secondes',
        m : 'une minute',
        mm : '%d minutes',
        h : 'une heure',
        hh : '%d heures',
        d : 'un jour',
        dd : '%d jours',
        M : 'un mois',
        MM : '%d mois',
        y : 'un an',
        yy : '%d ans'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
    ordinal : function (number, period) {
        switch (period) {
            // TODO: Return 'e' when day of month > 1. Move this case inside
            // block for masculine words below.
            // See https://github.com/moment/moment/issues/3375
            case 'D':
                return number + (number === 1 ? 'er' : '');

            // Words with masculine grammatical gender: mois, trimestre, jour
            default:
            case 'M':
            case 'Q':
            case 'DDD':
            case 'd':
                return number + (number === 1 ? 'er' : 'e');

            // Words with feminine grammatical gender: semaine
            case 'w':
            case 'W':
                return number + (number === 1 ? 're' : 'e');
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return fr;

})));


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Frisian [fy]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_');
var monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

var fy = moment.defineLocale('fy', {
    months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
    monthsShort : function (m, format) {
        if (!m) {
            return monthsShortWithDots;
        } else if (/-MMM-/.test(format)) {
            return monthsShortWithoutDots[m.month()];
        } else {
            return monthsShortWithDots[m.month()];
        }
    },
    monthsParseExact : true,
    weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
    weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
    weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD-MM-YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[hjoed om] LT',
        nextDay: '[moarn om] LT',
        nextWeek: 'dddd [om] LT',
        lastDay: '[juster om] LT',
        lastWeek: '[ôfrûne] dddd [om] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'oer %s',
        past : '%s lyn',
        s : 'in pear sekonden',
        m : 'ien minút',
        mm : '%d minuten',
        h : 'ien oere',
        hh : '%d oeren',
        d : 'ien dei',
        dd : '%d dagen',
        M : 'ien moanne',
        MM : '%d moannen',
        y : 'ien jier',
        yy : '%d jierren'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
    ordinal : function (number) {
        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return fy;

})));


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Scottish Gaelic [gd]
//! author : Jon Ashdown : https://github.com/jonashdown

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var months = [
    'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
];

var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];

var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];

var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];

var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];

var gd = moment.defineLocale('gd', {
    months : months,
    monthsShort : monthsShort,
    monthsParseExact : true,
    weekdays : weekdays,
    weekdaysShort : weekdaysShort,
    weekdaysMin : weekdaysMin,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[An-diugh aig] LT',
        nextDay : '[A-màireach aig] LT',
        nextWeek : 'dddd [aig] LT',
        lastDay : '[An-dè aig] LT',
        lastWeek : 'dddd [seo chaidh] [aig] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'ann an %s',
        past : 'bho chionn %s',
        s : 'beagan diogan',
        m : 'mionaid',
        mm : '%d mionaidean',
        h : 'uair',
        hh : '%d uairean',
        d : 'latha',
        dd : '%d latha',
        M : 'mìos',
        MM : '%d mìosan',
        y : 'bliadhna',
        yy : '%d bliadhna'
    },
    dayOfMonthOrdinalParse : /\d{1,2}(d|na|mh)/,
    ordinal : function (number) {
        var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return gd;

})));


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Galician [gl]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var gl = moment.defineLocale('gl', {
    months : 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),
    monthsShort : 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays : 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
    weekdaysShort : 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
    weekdaysMin : 'do_lu_ma_mé_xo_ve_sá'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY H:mm',
        LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
    },
    calendar : {
        sameDay : function () {
            return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
        },
        nextDay : function () {
            return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
        },
        nextWeek : function () {
            return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
        },
        lastDay : function () {
            return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
        },
        lastWeek : function () {
            return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : function (str) {
            if (str.indexOf('un') === 0) {
                return 'n' + str;
            }
            return 'en ' + str;
        },
        past : 'hai %s',
        s : 'uns segundos',
        m : 'un minuto',
        mm : '%d minutos',
        h : 'unha hora',
        hh : '%d horas',
        d : 'un día',
        dd : '%d días',
        M : 'un mes',
        MM : '%d meses',
        y : 'un ano',
        yy : '%d anos'
    },
    dayOfMonthOrdinalParse : /\d{1,2}º/,
    ordinal : '%dº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return gl;

})));


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Konkani Latin script [gom-latn]
//! author : The Discoverer : https://github.com/WikiDiscoverer

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        's': ['thodde secondanim', 'thodde second'],
        'm': ['eka mintan', 'ek minute'],
        'mm': [number + ' mintanim', number + ' mintam'],
        'h': ['eka horan', 'ek hor'],
        'hh': [number + ' horanim', number + ' hor'],
        'd': ['eka disan', 'ek dis'],
        'dd': [number + ' disanim', number + ' dis'],
        'M': ['eka mhoinean', 'ek mhoino'],
        'MM': [number + ' mhoineanim', number + ' mhoine'],
        'y': ['eka vorsan', 'ek voros'],
        'yy': [number + ' vorsanim', number + ' vorsam']
    };
    return withoutSuffix ? format[key][0] : format[key][1];
}

var gomLatn = moment.defineLocale('gom-latn', {
    months : 'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split('_'),
    monthsShort : 'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
    monthsParseExact : true,
    weekdays : 'Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son\'var'.split('_'),
    weekdaysShort : 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
    weekdaysMin : 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'A h:mm [vazta]',
        LTS : 'A h:mm:ss [vazta]',
        L : 'DD-MM-YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY A h:mm [vazta]',
        LLLL : 'dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]',
        llll: 'ddd, D MMM YYYY, A h:mm [vazta]'
    },
    calendar : {
        sameDay: '[Aiz] LT',
        nextDay: '[Faleam] LT',
        nextWeek: '[Ieta to] dddd[,] LT',
        lastDay: '[Kal] LT',
        lastWeek: '[Fatlo] dddd[,] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : '%s',
        past : '%s adim',
        s : processRelativeTime,
        m : processRelativeTime,
        mm : processRelativeTime,
        h : processRelativeTime,
        hh : processRelativeTime,
        d : processRelativeTime,
        dd : processRelativeTime,
        M : processRelativeTime,
        MM : processRelativeTime,
        y : processRelativeTime,
        yy : processRelativeTime
    },
    dayOfMonthOrdinalParse : /\d{1,2}(er)/,
    ordinal : function (number, period) {
        switch (period) {
            // the ordinal 'er' only applies to day of the month
            case 'D':
                return number + 'er';
            default:
            case 'M':
            case 'Q':
            case 'DDD':
            case 'd':
            case 'w':
            case 'W':
                return number;
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    },
    meridiemParse: /rati|sokalli|donparam|sanje/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'rati') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'sokalli') {
            return hour;
        } else if (meridiem === 'donparam') {
            return hour > 12 ? hour : hour + 12;
        } else if (meridiem === 'sanje') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'rati';
        } else if (hour < 12) {
            return 'sokalli';
        } else if (hour < 16) {
            return 'donparam';
        } else if (hour < 20) {
            return 'sanje';
        } else {
            return 'rati';
        }
    }
});

return gomLatn;

})));


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hebrew [he]
//! author : Tomer Cohen : https://github.com/tomer
//! author : Moshe Simantov : https://github.com/DevelopmentIL
//! author : Tal Ater : https://github.com/TalAter

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var he = moment.defineLocale('he', {
    months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
    monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
    weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
    weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
    weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [ב]MMMM YYYY',
        LLL : 'D [ב]MMMM YYYY HH:mm',
        LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',
        l : 'D/M/YYYY',
        ll : 'D MMM YYYY',
        lll : 'D MMM YYYY HH:mm',
        llll : 'ddd, D MMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[היום ב־]LT',
        nextDay : '[מחר ב־]LT',
        nextWeek : 'dddd [בשעה] LT',
        lastDay : '[אתמול ב־]LT',
        lastWeek : '[ביום] dddd [האחרון בשעה] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'בעוד %s',
        past : 'לפני %s',
        s : 'מספר שניות',
        m : 'דקה',
        mm : '%d דקות',
        h : 'שעה',
        hh : function (number) {
            if (number === 2) {
                return 'שעתיים';
            }
            return number + ' שעות';
        },
        d : 'יום',
        dd : function (number) {
            if (number === 2) {
                return 'יומיים';
            }
            return number + ' ימים';
        },
        M : 'חודש',
        MM : function (number) {
            if (number === 2) {
                return 'חודשיים';
            }
            return number + ' חודשים';
        },
        y : 'שנה',
        yy : function (number) {
            if (number === 2) {
                return 'שנתיים';
            } else if (number % 10 === 0 && number !== 10) {
                return number + ' שנה';
            }
            return number + ' שנים';
        }
    },
    meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
    isPM : function (input) {
        return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 5) {
            return 'לפנות בוקר';
        } else if (hour < 10) {
            return 'בבוקר';
        } else if (hour < 12) {
            return isLower ? 'לפנה"צ' : 'לפני הצהריים';
        } else if (hour < 18) {
            return isLower ? 'אחה"צ' : 'אחרי הצהריים';
        } else {
            return 'בערב';
        }
    }
});

return he;

})));


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hindi [hi]
//! author : Mayank Singhal : https://github.com/mayanksinghal

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '१',
    '2': '२',
    '3': '३',
    '4': '४',
    '5': '५',
    '6': '६',
    '7': '७',
    '8': '८',
    '9': '९',
    '0': '०'
};
var numberMap = {
    '१': '1',
    '२': '2',
    '३': '3',
    '४': '4',
    '५': '5',
    '६': '6',
    '७': '7',
    '८': '8',
    '९': '9',
    '०': '0'
};

var hi = moment.defineLocale('hi', {
    months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
    monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
    monthsParseExact: true,
    weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
    weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
    weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
    longDateFormat : {
        LT : 'A h:mm बजे',
        LTS : 'A h:mm:ss बजे',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm बजे',
        LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'
    },
    calendar : {
        sameDay : '[आज] LT',
        nextDay : '[कल] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[कल] LT',
        lastWeek : '[पिछले] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s में',
        past : '%s पहले',
        s : 'कुछ ही क्षण',
        m : 'एक मिनट',
        mm : '%d मिनट',
        h : 'एक घंटा',
        hh : '%d घंटे',
        d : 'एक दिन',
        dd : '%d दिन',
        M : 'एक महीने',
        MM : '%d महीने',
        y : 'एक वर्ष',
        yy : '%d वर्ष'
    },
    preparse: function (string) {
        return string.replace(/[१२३४५६७८९०]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    // Hindi notation for meridiems are quite fuzzy in practice. While there exists
    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
    meridiemParse: /रात|सुबह|दोपहर|शाम/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'रात') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'सुबह') {
            return hour;
        } else if (meridiem === 'दोपहर') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'शाम') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'रात';
        } else if (hour < 10) {
            return 'सुबह';
        } else if (hour < 17) {
            return 'दोपहर';
        } else if (hour < 20) {
            return 'शाम';
        } else {
            return 'रात';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return hi;

})));


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Croatian [hr]
//! author : Bojan Marković : https://github.com/bmarkovic

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function translate(number, withoutSuffix, key) {
    var result = number + ' ';
    switch (key) {
        case 'm':
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minuta';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
            if (number === 1) {
                result += 'sat';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
            } else {
                result += 'sati';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dana';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mjesec';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
            } else {
                result += 'mjeseci';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'godina';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
            } else {
                result += 'godina';
            }
            return result;
    }
}

var hr = moment.defineLocale('hr', {
    months : {
        format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
        standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
    },
    monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
    monthsParseExact: true,
    weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
    weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
    weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd, D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay  : '[danas u] LT',
        nextDay  : '[sutra u] LT',
        nextWeek : function () {
            switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
            }
        },
        lastDay  : '[jučer u] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                case 3:
                    return '[prošlu] dddd [u] LT';
                case 6:
                    return '[prošle] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prošli] dddd [u] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'za %s',
        past   : 'prije %s',
        s      : 'par sekundi',
        m      : translate,
        mm     : translate,
        h      : translate,
        hh     : translate,
        d      : 'dan',
        dd     : translate,
        M      : 'mjesec',
        MM     : translate,
        y      : 'godinu',
        yy     : translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return hr;

})));


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hungarian [hu]
//! author : Adam Brunner : https://github.com/adambrunner

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
function translate(number, withoutSuffix, key, isFuture) {
    var num = number,
        suffix;
    switch (key) {
        case 's':
            return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
        case 'm':
            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'mm':
            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'h':
            return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
        case 'hh':
            return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
        case 'd':
            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'dd':
            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'M':
            return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
        case 'MM':
            return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
        case 'y':
            return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
        case 'yy':
            return num + (isFuture || withoutSuffix ? ' év' : ' éve');
    }
    return '';
}
function week(isFuture) {
    return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
}

var hu = moment.defineLocale('hu', {
    months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
    monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
    weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
    weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
    weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'YYYY.MM.DD.',
        LL : 'YYYY. MMMM D.',
        LLL : 'YYYY. MMMM D. H:mm',
        LLLL : 'YYYY. MMMM D., dddd H:mm'
    },
    meridiemParse: /de|du/i,
    isPM: function (input) {
        return input.charAt(1).toLowerCase() === 'u';
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 12) {
            return isLower === true ? 'de' : 'DE';
        } else {
            return isLower === true ? 'du' : 'DU';
        }
    },
    calendar : {
        sameDay : '[ma] LT[-kor]',
        nextDay : '[holnap] LT[-kor]',
        nextWeek : function () {
            return week.call(this, true);
        },
        lastDay : '[tegnap] LT[-kor]',
        lastWeek : function () {
            return week.call(this, false);
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s múlva',
        past : '%s',
        s : translate,
        m : translate,
        mm : translate,
        h : translate,
        hh : translate,
        d : translate,
        dd : translate,
        M : translate,
        MM : translate,
        y : translate,
        yy : translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return hu;

})));


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Armenian [hy-am]
//! author : Armendarabyan : https://github.com/armendarabyan

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var hyAm = moment.defineLocale('hy-am', {
    months : {
        format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
        standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
    },
    monthsShort : 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
    weekdays : 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
    weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
    weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY թ.',
        LLL : 'D MMMM YYYY թ., HH:mm',
        LLLL : 'dddd, D MMMM YYYY թ., HH:mm'
    },
    calendar : {
        sameDay: '[այսօր] LT',
        nextDay: '[վաղը] LT',
        lastDay: '[երեկ] LT',
        nextWeek: function () {
            return 'dddd [օրը ժամը] LT';
        },
        lastWeek: function () {
            return '[անցած] dddd [օրը ժամը] LT';
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : '%s հետո',
        past : '%s առաջ',
        s : 'մի քանի վայրկյան',
        m : 'րոպե',
        mm : '%d րոպե',
        h : 'ժամ',
        hh : '%d ժամ',
        d : 'օր',
        dd : '%d օր',
        M : 'ամիս',
        MM : '%d ամիս',
        y : 'տարի',
        yy : '%d տարի'
    },
    meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
    isPM: function (input) {
        return /^(ցերեկվա|երեկոյան)$/.test(input);
    },
    meridiem : function (hour) {
        if (hour < 4) {
            return 'գիշերվա';
        } else if (hour < 12) {
            return 'առավոտվա';
        } else if (hour < 17) {
            return 'ցերեկվա';
        } else {
            return 'երեկոյան';
        }
    },
    dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
    ordinal: function (number, period) {
        switch (period) {
            case 'DDD':
            case 'w':
            case 'W':
            case 'DDDo':
                if (number === 1) {
                    return number + '-ին';
                }
                return number + '-րդ';
            default:
                return number;
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return hyAm;

})));


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Indonesian [id]
//! author : Mohammad Satrio Utomo : https://github.com/tyok
//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var id = moment.defineLocale('id', {
    months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
    weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
    weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
    weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [pukul] HH.mm',
        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
    },
    meridiemParse: /pagi|siang|sore|malam/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'pagi') {
            return hour;
        } else if (meridiem === 'siang') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'sore' || meridiem === 'malam') {
            return hour + 12;
        }
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'pagi';
        } else if (hours < 15) {
            return 'siang';
        } else if (hours < 19) {
            return 'sore';
        } else {
            return 'malam';
        }
    },
    calendar : {
        sameDay : '[Hari ini pukul] LT',
        nextDay : '[Besok pukul] LT',
        nextWeek : 'dddd [pukul] LT',
        lastDay : '[Kemarin pukul] LT',
        lastWeek : 'dddd [lalu pukul] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dalam %s',
        past : '%s yang lalu',
        s : 'beberapa detik',
        m : 'semenit',
        mm : '%d menit',
        h : 'sejam',
        hh : '%d jam',
        d : 'sehari',
        dd : '%d hari',
        M : 'sebulan',
        MM : '%d bulan',
        y : 'setahun',
        yy : '%d tahun'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return id;

})));


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Icelandic [is]
//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function plural(n) {
    if (n % 100 === 11) {
        return true;
    } else if (n % 10 === 1) {
        return false;
    }
    return true;
}
function translate(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    switch (key) {
        case 's':
            return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
        case 'm':
            return withoutSuffix ? 'mínúta' : 'mínútu';
        case 'mm':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
            } else if (withoutSuffix) {
                return result + 'mínúta';
            }
            return result + 'mínútu';
        case 'hh':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
            }
            return result + 'klukkustund';
        case 'd':
            if (withoutSuffix) {
                return 'dagur';
            }
            return isFuture ? 'dag' : 'degi';
        case 'dd':
            if (plural(number)) {
                if (withoutSuffix) {
                    return result + 'dagar';
                }
                return result + (isFuture ? 'daga' : 'dögum');
            } else if (withoutSuffix) {
                return result + 'dagur';
            }
            return result + (isFuture ? 'dag' : 'degi');
        case 'M':
            if (withoutSuffix) {
                return 'mánuður';
            }
            return isFuture ? 'mánuð' : 'mánuði';
        case 'MM':
            if (plural(number)) {
                if (withoutSuffix) {
                    return result + 'mánuðir';
                }
                return result + (isFuture ? 'mánuði' : 'mánuðum');
            } else if (withoutSuffix) {
                return result + 'mánuður';
            }
            return result + (isFuture ? 'mánuð' : 'mánuði');
        case 'y':
            return withoutSuffix || isFuture ? 'ár' : 'ári';
        case 'yy':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
            }
            return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
    }
}

var is = moment.defineLocale('is', {
    months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
    monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
    weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
    weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
    weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY [kl.] H:mm',
        LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
    },
    calendar : {
        sameDay : '[í dag kl.] LT',
        nextDay : '[á morgun kl.] LT',
        nextWeek : 'dddd [kl.] LT',
        lastDay : '[í gær kl.] LT',
        lastWeek : '[síðasta] dddd [kl.] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'eftir %s',
        past : 'fyrir %s síðan',
        s : translate,
        m : translate,
        mm : translate,
        h : 'klukkustund',
        hh : translate,
        d : translate,
        dd : translate,
        M : translate,
        MM : translate,
        y : translate,
        yy : translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return is;

})));


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Italian [it]
//! author : Lorenzo : https://github.com/aliem
//! author: Mattia Larentis: https://github.com/nostalgiaz

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var it = moment.defineLocale('it', {
    months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
    monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
    weekdays : 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),
    weekdaysShort : 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
    weekdaysMin : 'do_lu_ma_me_gi_ve_sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Oggi alle] LT',
        nextDay: '[Domani alle] LT',
        nextWeek: 'dddd [alle] LT',
        lastDay: '[Ieri alle] LT',
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[la scorsa] dddd [alle] LT';
                default:
                    return '[lo scorso] dddd [alle] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : function (s) {
            return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
        },
        past : '%s fa',
        s : 'alcuni secondi',
        m : 'un minuto',
        mm : '%d minuti',
        h : 'un\'ora',
        hh : '%d ore',
        d : 'un giorno',
        dd : '%d giorni',
        M : 'un mese',
        MM : '%d mesi',
        y : 'un anno',
        yy : '%d anni'
    },
    dayOfMonthOrdinalParse : /\d{1,2}º/,
    ordinal: '%dº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return it;

})));


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Japanese [ja]
//! author : LI Long : https://github.com/baryon

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ja = moment.defineLocale('ja', {
    months : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
    weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
    weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
    weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY/MM/DD',
        LL : 'YYYY年M月D日',
        LLL : 'YYYY年M月D日 HH:mm',
        LLLL : 'YYYY年M月D日 HH:mm dddd',
        l : 'YYYY/MM/DD',
        ll : 'YYYY年M月D日',
        lll : 'YYYY年M月D日 HH:mm',
        llll : 'YYYY年M月D日 HH:mm dddd'
    },
    meridiemParse: /午前|午後/i,
    isPM : function (input) {
        return input === '午後';
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return '午前';
        } else {
            return '午後';
        }
    },
    calendar : {
        sameDay : '[今日] LT',
        nextDay : '[明日] LT',
        nextWeek : '[来週]dddd LT',
        lastDay : '[昨日] LT',
        lastWeek : '[前週]dddd LT',
        sameElse : 'L'
    },
    dayOfMonthOrdinalParse : /\d{1,2}日/,
    ordinal : function (number, period) {
        switch (period) {
            case 'd':
            case 'D':
            case 'DDD':
                return number + '日';
            default:
                return number;
        }
    },
    relativeTime : {
        future : '%s後',
        past : '%s前',
        s : '数秒',
        m : '1分',
        mm : '%d分',
        h : '1時間',
        hh : '%d時間',
        d : '1日',
        dd : '%d日',
        M : '1ヶ月',
        MM : '%dヶ月',
        y : '1年',
        yy : '%d年'
    }
});

return ja;

})));


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Javanese [jv]
//! author : Rony Lantip : https://github.com/lantip
//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var jv = moment.defineLocale('jv', {
    months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
    weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
    weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
    weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [pukul] HH.mm',
        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
    },
    meridiemParse: /enjing|siyang|sonten|ndalu/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'enjing') {
            return hour;
        } else if (meridiem === 'siyang') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
            return hour + 12;
        }
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'enjing';
        } else if (hours < 15) {
            return 'siyang';
        } else if (hours < 19) {
            return 'sonten';
        } else {
            return 'ndalu';
        }
    },
    calendar : {
        sameDay : '[Dinten puniko pukul] LT',
        nextDay : '[Mbenjang pukul] LT',
        nextWeek : 'dddd [pukul] LT',
        lastDay : '[Kala wingi pukul] LT',
        lastWeek : 'dddd [kepengker pukul] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'wonten ing %s',
        past : '%s ingkang kepengker',
        s : 'sawetawis detik',
        m : 'setunggal menit',
        mm : '%d menit',
        h : 'setunggal jam',
        hh : '%d jam',
        d : 'sedinten',
        dd : '%d dinten',
        M : 'sewulan',
        MM : '%d wulan',
        y : 'setaun',
        yy : '%d taun'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return jv;

})));


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Georgian [ka]
//! author : Irakli Janiashvili : https://github.com/irakli-janiashvili

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ka = moment.defineLocale('ka', {
    months : {
        standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
        format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
    },
    monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
    weekdays : {
        standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
        format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
        isFormat: /(წინა|შემდეგ)/
    },
    weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
    weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[დღეს] LT[-ზე]',
        nextDay : '[ხვალ] LT[-ზე]',
        lastDay : '[გუშინ] LT[-ზე]',
        nextWeek : '[შემდეგ] dddd LT[-ზე]',
        lastWeek : '[წინა] dddd LT-ზე',
        sameElse : 'L'
    },
    relativeTime : {
        future : function (s) {
            return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
                s.replace(/ი$/, 'ში') :
                s + 'ში';
        },
        past : function (s) {
            if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
                return s.replace(/(ი|ე)$/, 'ის უკან');
            }
            if ((/წელი/).test(s)) {
                return s.replace(/წელი$/, 'წლის უკან');
            }
        },
        s : 'რამდენიმე წამი',
        m : 'წუთი',
        mm : '%d წუთი',
        h : 'საათი',
        hh : '%d საათი',
        d : 'დღე',
        dd : '%d დღე',
        M : 'თვე',
        MM : '%d თვე',
        y : 'წელი',
        yy : '%d წელი'
    },
    dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
    ordinal : function (number) {
        if (number === 0) {
            return number;
        }
        if (number === 1) {
            return number + '-ლი';
        }
        if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
            return 'მე-' + number;
        }
        return number + '-ე';
    },
    week : {
        dow : 1,
        doy : 7
    }
});

return ka;

})));


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kazakh [kk]
//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var suffixes = {
    0: '-ші',
    1: '-ші',
    2: '-ші',
    3: '-ші',
    4: '-ші',
    5: '-ші',
    6: '-шы',
    7: '-ші',
    8: '-ші',
    9: '-шы',
    10: '-шы',
    20: '-шы',
    30: '-шы',
    40: '-шы',
    50: '-ші',
    60: '-шы',
    70: '-ші',
    80: '-ші',
    90: '-шы',
    100: '-ші'
};

var kk = moment.defineLocale('kk', {
    months : 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
    monthsShort : 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
    weekdays : 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
    weekdaysShort : 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
    weekdaysMin : 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Бүгін сағат] LT',
        nextDay : '[Ертең сағат] LT',
        nextWeek : 'dddd [сағат] LT',
        lastDay : '[Кеше сағат] LT',
        lastWeek : '[Өткен аптаның] dddd [сағат] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s ішінде',
        past : '%s бұрын',
        s : 'бірнеше секунд',
        m : 'бір минут',
        mm : '%d минут',
        h : 'бір сағат',
        hh : '%d сағат',
        d : 'бір күн',
        dd : '%d күн',
        M : 'бір ай',
        MM : '%d ай',
        y : 'бір жыл',
        yy : '%d жыл'
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
    ordinal : function (number) {
        var a = number % 10,
            b = number >= 100 ? 100 : null;
        return number + (suffixes[number] || suffixes[a] || suffixes[b]);
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return kk;

})));


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Cambodian [km]
//! author : Kruy Vanna : https://github.com/kruyvanna

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var km = moment.defineLocale('km', {
    months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
    monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
    weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
    weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
    weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
    longDateFormat: {
        LT: 'HH:mm',
        LTS : 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd, D MMMM YYYY HH:mm'
    },
    calendar: {
        sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
        nextDay: '[ស្អែក ម៉ោង] LT',
        nextWeek: 'dddd [ម៉ោង] LT',
        lastDay: '[ម្សិលមិញ ម៉ោង] LT',
        lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
        sameElse: 'L'
    },
    relativeTime: {
        future: '%sទៀត',
        past: '%sមុន',
        s: 'ប៉ុន្មានវិនាទី',
        m: 'មួយនាទី',
        mm: '%d នាទី',
        h: 'មួយម៉ោង',
        hh: '%d ម៉ោង',
        d: 'មួយថ្ងៃ',
        dd: '%d ថ្ងៃ',
        M: 'មួយខែ',
        MM: '%d ខែ',
        y: 'មួយឆ្នាំ',
        yy: '%d ឆ្នាំ'
    },
    week: {
        dow: 1, // Monday is the first day of the week.
        doy: 4 // The week that contains Jan 4th is the first week of the year.
    }
});

return km;

})));


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kannada [kn]
//! author : Rajeev Naik : https://github.com/rajeevnaikte

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '೧',
    '2': '೨',
    '3': '೩',
    '4': '೪',
    '5': '೫',
    '6': '೬',
    '7': '೭',
    '8': '೮',
    '9': '೯',
    '0': '೦'
};
var numberMap = {
    '೧': '1',
    '೨': '2',
    '೩': '3',
    '೪': '4',
    '೫': '5',
    '೬': '6',
    '೭': '7',
    '೮': '8',
    '೯': '9',
    '೦': '0'
};

var kn = moment.defineLocale('kn', {
    months : 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split('_'),
    monthsShort : 'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬ_ಅಕ್ಟೋಬ_ನವೆಂಬ_ಡಿಸೆಂಬ'.split('_'),
    monthsParseExact: true,
    weekdays : 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split('_'),
    weekdaysShort : 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),
    weekdaysMin : 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),
    longDateFormat : {
        LT : 'A h:mm',
        LTS : 'A h:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm',
        LLLL : 'dddd, D MMMM YYYY, A h:mm'
    },
    calendar : {
        sameDay : '[ಇಂದು] LT',
        nextDay : '[ನಾಳೆ] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[ನಿನ್ನೆ] LT',
        lastWeek : '[ಕೊನೆಯ] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s ನಂತರ',
        past : '%s ಹಿಂದೆ',
        s : 'ಕೆಲವು ಕ್ಷಣಗಳು',
        m : 'ಒಂದು ನಿಮಿಷ',
        mm : '%d ನಿಮಿಷ',
        h : 'ಒಂದು ಗಂಟೆ',
        hh : '%d ಗಂಟೆ',
        d : 'ಒಂದು ದಿನ',
        dd : '%d ದಿನ',
        M : 'ಒಂದು ತಿಂಗಳು',
        MM : '%d ತಿಂಗಳು',
        y : 'ಒಂದು ವರ್ಷ',
        yy : '%d ವರ್ಷ'
    },
    preparse: function (string) {
        return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'ರಾತ್ರಿ') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {
            return hour;
        } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'ಸಂಜೆ') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'ರಾತ್ರಿ';
        } else if (hour < 10) {
            return 'ಬೆಳಿಗ್ಗೆ';
        } else if (hour < 17) {
            return 'ಮಧ್ಯಾಹ್ನ';
        } else if (hour < 20) {
            return 'ಸಂಜೆ';
        } else {
            return 'ರಾತ್ರಿ';
        }
    },
    dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
    ordinal : function (number) {
        return number + 'ನೇ';
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return kn;

})));


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Korean [ko]
//! author : Kyungwook, Park : https://github.com/kyungw00k
//! author : Jeeeyul Lee <jeeeyul@gmail.com>

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ko = moment.defineLocale('ko', {
    months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
    monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
    weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
    weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
    weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
    longDateFormat : {
        LT : 'A h:mm',
        LTS : 'A h:mm:ss',
        L : 'YYYY.MM.DD',
        LL : 'YYYY년 MMMM D일',
        LLL : 'YYYY년 MMMM D일 A h:mm',
        LLLL : 'YYYY년 MMMM D일 dddd A h:mm',
        l : 'YYYY.MM.DD',
        ll : 'YYYY년 MMMM D일',
        lll : 'YYYY년 MMMM D일 A h:mm',
        llll : 'YYYY년 MMMM D일 dddd A h:mm'
    },
    calendar : {
        sameDay : '오늘 LT',
        nextDay : '내일 LT',
        nextWeek : 'dddd LT',
        lastDay : '어제 LT',
        lastWeek : '지난주 dddd LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s 후',
        past : '%s 전',
        s : '몇 초',
        ss : '%d초',
        m : '1분',
        mm : '%d분',
        h : '한 시간',
        hh : '%d시간',
        d : '하루',
        dd : '%d일',
        M : '한 달',
        MM : '%d달',
        y : '일 년',
        yy : '%d년'
    },
    dayOfMonthOrdinalParse : /\d{1,2}일/,
    ordinal : '%d일',
    meridiemParse : /오전|오후/,
    isPM : function (token) {
        return token === '오후';
    },
    meridiem : function (hour, minute, isUpper) {
        return hour < 12 ? '오전' : '오후';
    }
});

return ko;

})));


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kyrgyz [ky]
//! author : Chyngyz Arystan uulu : https://github.com/chyngyz

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';



var suffixes = {
    0: '-чү',
    1: '-чи',
    2: '-чи',
    3: '-чү',
    4: '-чү',
    5: '-чи',
    6: '-чы',
    7: '-чи',
    8: '-чи',
    9: '-чу',
    10: '-чу',
    20: '-чы',
    30: '-чу',
    40: '-чы',
    50: '-чү',
    60: '-чы',
    70: '-чи',
    80: '-чи',
    90: '-чу',
    100: '-чү'
};

var ky = moment.defineLocale('ky', {
    months : 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
    monthsShort : 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
    weekdays : 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
    weekdaysShort : 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
    weekdaysMin : 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Бүгүн саат] LT',
        nextDay : '[Эртең саат] LT',
        nextWeek : 'dddd [саат] LT',
        lastDay : '[Кече саат] LT',
        lastWeek : '[Өткен аптанын] dddd [күнү] [саат] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s ичинде',
        past : '%s мурун',
        s : 'бирнече секунд',
        m : 'бир мүнөт',
        mm : '%d мүнөт',
        h : 'бир саат',
        hh : '%d саат',
        d : 'бир күн',
        dd : '%d күн',
        M : 'бир ай',
        MM : '%d ай',
        y : 'бир жыл',
        yy : '%d жыл'
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
    ordinal : function (number) {
        var a = number % 10,
            b = number >= 100 ? 100 : null;
        return number + (suffixes[number] || suffixes[a] || suffixes[b]);
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return ky;

})));


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Luxembourgish [lb]
//! author : mweimerskirch : https://github.com/mweimerskirch
//! author : David Raison : https://github.com/kwisatz

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        'm': ['eng Minutt', 'enger Minutt'],
        'h': ['eng Stonn', 'enger Stonn'],
        'd': ['een Dag', 'engem Dag'],
        'M': ['ee Mount', 'engem Mount'],
        'y': ['ee Joer', 'engem Joer']
    };
    return withoutSuffix ? format[key][0] : format[key][1];
}
function processFutureTime(string) {
    var number = string.substr(0, string.indexOf(' '));
    if (eifelerRegelAppliesToNumber(number)) {
        return 'a ' + string;
    }
    return 'an ' + string;
}
function processPastTime(string) {
    var number = string.substr(0, string.indexOf(' '));
    if (eifelerRegelAppliesToNumber(number)) {
        return 'viru ' + string;
    }
    return 'virun ' + string;
}
/**
 * Returns true if the word before the given number loses the '-n' ending.
 * e.g. 'an 10 Deeg' but 'a 5 Deeg'
 *
 * @param number {integer}
 * @returns {boolean}
 */
function eifelerRegelAppliesToNumber(number) {
    number = parseInt(number, 10);
    if (isNaN(number)) {
        return false;
    }
    if (number < 0) {
        // Negative Number --> always true
        return true;
    } else if (number < 10) {
        // Only 1 digit
        if (4 <= number && number <= 7) {
            return true;
        }
        return false;
    } else if (number < 100) {
        // 2 digits
        var lastDigit = number % 10, firstDigit = number / 10;
        if (lastDigit === 0) {
            return eifelerRegelAppliesToNumber(firstDigit);
        }
        return eifelerRegelAppliesToNumber(lastDigit);
    } else if (number < 10000) {
        // 3 or 4 digits --> recursively check first digit
        while (number >= 10) {
            number = number / 10;
        }
        return eifelerRegelAppliesToNumber(number);
    } else {
        // Anything larger than 4 digits: recursively check first n-3 digits
        number = number / 1000;
        return eifelerRegelAppliesToNumber(number);
    }
}

var lb = moment.defineLocale('lb', {
    months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
    monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
    monthsParseExact : true,
    weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
    weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
    weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'H:mm [Auer]',
        LTS: 'H:mm:ss [Auer]',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm [Auer]',
        LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
    },
    calendar: {
        sameDay: '[Haut um] LT',
        sameElse: 'L',
        nextDay: '[Muer um] LT',
        nextWeek: 'dddd [um] LT',
        lastDay: '[Gëschter um] LT',
        lastWeek: function () {
            // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
            switch (this.day()) {
                case 2:
                case 4:
                    return '[Leschten] dddd [um] LT';
                default:
                    return '[Leschte] dddd [um] LT';
            }
        }
    },
    relativeTime : {
        future : processFutureTime,
        past : processPastTime,
        s : 'e puer Sekonnen',
        m : processRelativeTime,
        mm : '%d Minutten',
        h : processRelativeTime,
        hh : '%d Stonnen',
        d : processRelativeTime,
        dd : '%d Deeg',
        M : processRelativeTime,
        MM : '%d Méint',
        y : processRelativeTime,
        yy : '%d Joer'
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal: '%d.',
    week: {
        dow: 1, // Monday is the first day of the week.
        doy: 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return lb;

})));


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Lao [lo]
//! author : Ryan Hart : https://github.com/ryanhart2

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var lo = moment.defineLocale('lo', {
    months : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
    monthsShort : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
    weekdays : 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
    weekdaysShort : 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
    weekdaysMin : 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'ວັນdddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
    isPM: function (input) {
        return input === 'ຕອນແລງ';
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'ຕອນເຊົ້າ';
        } else {
            return 'ຕອນແລງ';
        }
    },
    calendar : {
        sameDay : '[ມື້ນີ້ເວລາ] LT',
        nextDay : '[ມື້ອື່ນເວລາ] LT',
        nextWeek : '[ວັນ]dddd[ໜ້າເວລາ] LT',
        lastDay : '[ມື້ວານນີ້ເວລາ] LT',
        lastWeek : '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'ອີກ %s',
        past : '%sຜ່ານມາ',
        s : 'ບໍ່ເທົ່າໃດວິນາທີ',
        m : '1 ນາທີ',
        mm : '%d ນາທີ',
        h : '1 ຊົ່ວໂມງ',
        hh : '%d ຊົ່ວໂມງ',
        d : '1 ມື້',
        dd : '%d ມື້',
        M : '1 ເດືອນ',
        MM : '%d ເດືອນ',
        y : '1 ປີ',
        yy : '%d ປີ'
    },
    dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
    ordinal : function (number) {
        return 'ທີ່' + number;
    }
});

return lo;

})));


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Lithuanian [lt]
//! author : Mindaugas Mozūras : https://github.com/mmozuras

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var units = {
    'm' : 'minutė_minutės_minutę',
    'mm': 'minutės_minučių_minutes',
    'h' : 'valanda_valandos_valandą',
    'hh': 'valandos_valandų_valandas',
    'd' : 'diena_dienos_dieną',
    'dd': 'dienos_dienų_dienas',
    'M' : 'mėnuo_mėnesio_mėnesį',
    'MM': 'mėnesiai_mėnesių_mėnesius',
    'y' : 'metai_metų_metus',
    'yy': 'metai_metų_metus'
};
function translateSeconds(number, withoutSuffix, key, isFuture) {
    if (withoutSuffix) {
        return 'kelios sekundės';
    } else {
        return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
    }
}
function translateSingular(number, withoutSuffix, key, isFuture) {
    return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
}
function special(number) {
    return number % 10 === 0 || (number > 10 && number < 20);
}
function forms(key) {
    return units[key].split('_');
}
function translate(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    if (number === 1) {
        return result + translateSingular(number, withoutSuffix, key[0], isFuture);
    } else if (withoutSuffix) {
        return result + (special(number) ? forms(key)[1] : forms(key)[0]);
    } else {
        if (isFuture) {
            return result + forms(key)[1];
        } else {
            return result + (special(number) ? forms(key)[1] : forms(key)[2]);
        }
    }
}
var lt = moment.defineLocale('lt', {
    months : {
        format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
        standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
        isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
    },
    monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
    weekdays : {
        format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
        standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
        isFormat: /dddd HH:mm/
    },
    weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
    weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'YYYY [m.] MMMM D [d.]',
        LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
        LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
        l : 'YYYY-MM-DD',
        ll : 'YYYY [m.] MMMM D [d.]',
        lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
        llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
    },
    calendar : {
        sameDay : '[Šiandien] LT',
        nextDay : '[Rytoj] LT',
        nextWeek : 'dddd LT',
        lastDay : '[Vakar] LT',
        lastWeek : '[Praėjusį] dddd LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'po %s',
        past : 'prieš %s',
        s : translateSeconds,
        m : translateSingular,
        mm : translate,
        h : translateSingular,
        hh : translate,
        d : translateSingular,
        dd : translate,
        M : translateSingular,
        MM : translate,
        y : translateSingular,
        yy : translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}-oji/,
    ordinal : function (number) {
        return number + '-oji';
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return lt;

})));


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Latvian [lv]
//! author : Kristaps Karlsons : https://github.com/skakri
//! author : Jānis Elmeris : https://github.com/JanisE

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var units = {
    'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
    'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
    'h': 'stundas_stundām_stunda_stundas'.split('_'),
    'hh': 'stundas_stundām_stunda_stundas'.split('_'),
    'd': 'dienas_dienām_diena_dienas'.split('_'),
    'dd': 'dienas_dienām_diena_dienas'.split('_'),
    'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
    'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
    'y': 'gada_gadiem_gads_gadi'.split('_'),
    'yy': 'gada_gadiem_gads_gadi'.split('_')
};
/**
 * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
 */
function format(forms, number, withoutSuffix) {
    if (withoutSuffix) {
        // E.g. "21 minūte", "3 minūtes".
        return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
    } else {
        // E.g. "21 minūtes" as in "pēc 21 minūtes".
        // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
        return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
    }
}
function relativeTimeWithPlural(number, withoutSuffix, key) {
    return number + ' ' + format(units[key], number, withoutSuffix);
}
function relativeTimeWithSingular(number, withoutSuffix, key) {
    return format(units[key], number, withoutSuffix);
}
function relativeSeconds(number, withoutSuffix) {
    return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
}

var lv = moment.defineLocale('lv', {
    months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
    monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
    weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
    weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
    weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY.',
        LL : 'YYYY. [gada] D. MMMM',
        LLL : 'YYYY. [gada] D. MMMM, HH:mm',
        LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
    },
    calendar : {
        sameDay : '[Šodien pulksten] LT',
        nextDay : '[Rīt pulksten] LT',
        nextWeek : 'dddd [pulksten] LT',
        lastDay : '[Vakar pulksten] LT',
        lastWeek : '[Pagājušā] dddd [pulksten] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'pēc %s',
        past : 'pirms %s',
        s : relativeSeconds,
        m : relativeTimeWithSingular,
        mm : relativeTimeWithPlural,
        h : relativeTimeWithSingular,
        hh : relativeTimeWithPlural,
        d : relativeTimeWithSingular,
        dd : relativeTimeWithPlural,
        M : relativeTimeWithSingular,
        MM : relativeTimeWithPlural,
        y : relativeTimeWithSingular,
        yy : relativeTimeWithPlural
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return lv;

})));


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Montenegrin [me]
//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var translator = {
    words: { //Different grammatical cases
        m: ['jedan minut', 'jednog minuta'],
        mm: ['minut', 'minuta', 'minuta'],
        h: ['jedan sat', 'jednog sata'],
        hh: ['sat', 'sata', 'sati'],
        dd: ['dan', 'dana', 'dana'],
        MM: ['mjesec', 'mjeseca', 'mjeseci'],
        yy: ['godina', 'godine', 'godina']
    },
    correctGrammaticalCase: function (number, wordKey) {
        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
    },
    translate: function (number, withoutSuffix, key) {
        var wordKey = translator.words[key];
        if (key.length === 1) {
            return withoutSuffix ? wordKey[0] : wordKey[1];
        } else {
            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
        }
    }
};

var me = moment.defineLocale('me', {
    months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
    monthsParseExact : true,
    weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
    weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
    weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm',
        LLLL: 'dddd, D. MMMM YYYY H:mm'
    },
    calendar: {
        sameDay: '[danas u] LT',
        nextDay: '[sjutra u] LT',

        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
            }
        },
        lastDay  : '[juče u] LT',
        lastWeek : function () {
            var lastWeekDays = [
                '[prošle] [nedjelje] [u] LT',
                '[prošlog] [ponedjeljka] [u] LT',
                '[prošlog] [utorka] [u] LT',
                '[prošle] [srijede] [u] LT',
                '[prošlog] [četvrtka] [u] LT',
                '[prošlog] [petka] [u] LT',
                '[prošle] [subote] [u] LT'
            ];
            return lastWeekDays[this.day()];
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'za %s',
        past   : 'prije %s',
        s      : 'nekoliko sekundi',
        m      : translator.translate,
        mm     : translator.translate,
        h      : translator.translate,
        hh     : translator.translate,
        d      : 'dan',
        dd     : translator.translate,
        M      : 'mjesec',
        MM     : translator.translate,
        y      : 'godinu',
        yy     : translator.translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return me;

})));


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maori [mi]
//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var mi = moment.defineLocale('mi', {
    months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),
    monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
    monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
    monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
    monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
    monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
    weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
    weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
    weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
    longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY [i] HH:mm',
        LLLL: 'dddd, D MMMM YYYY [i] HH:mm'
    },
    calendar: {
        sameDay: '[i teie mahana, i] LT',
        nextDay: '[apopo i] LT',
        nextWeek: 'dddd [i] LT',
        lastDay: '[inanahi i] LT',
        lastWeek: 'dddd [whakamutunga i] LT',
        sameElse: 'L'
    },
    relativeTime: {
        future: 'i roto i %s',
        past: '%s i mua',
        s: 'te hēkona ruarua',
        m: 'he meneti',
        mm: '%d meneti',
        h: 'te haora',
        hh: '%d haora',
        d: 'he ra',
        dd: '%d ra',
        M: 'he marama',
        MM: '%d marama',
        y: 'he tau',
        yy: '%d tau'
    },
    dayOfMonthOrdinalParse: /\d{1,2}º/,
    ordinal: '%dº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return mi;

})));


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Macedonian [mk]
//! author : Borislav Mickov : https://github.com/B0k0

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var mk = moment.defineLocale('mk', {
    months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
    monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
    weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
    weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
    weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'D.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY H:mm',
        LLLL : 'dddd, D MMMM YYYY H:mm'
    },
    calendar : {
        sameDay : '[Денес во] LT',
        nextDay : '[Утре во] LT',
        nextWeek : '[Во] dddd [во] LT',
        lastDay : '[Вчера во] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[Изминатата] dddd [во] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[Изминатиот] dddd [во] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'после %s',
        past : 'пред %s',
        s : 'неколку секунди',
        m : 'минута',
        mm : '%d минути',
        h : 'час',
        hh : '%d часа',
        d : 'ден',
        dd : '%d дена',
        M : 'месец',
        MM : '%d месеци',
        y : 'година',
        yy : '%d години'
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
    ordinal : function (number) {
        var lastDigit = number % 10,
            last2Digits = number % 100;
        if (number === 0) {
            return number + '-ев';
        } else if (last2Digits === 0) {
            return number + '-ен';
        } else if (last2Digits > 10 && last2Digits < 20) {
            return number + '-ти';
        } else if (lastDigit === 1) {
            return number + '-ви';
        } else if (lastDigit === 2) {
            return number + '-ри';
        } else if (lastDigit === 7 || lastDigit === 8) {
            return number + '-ми';
        } else {
            return number + '-ти';
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return mk;

})));


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malayalam [ml]
//! author : Floyd Pink : https://github.com/floydpink

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ml = moment.defineLocale('ml', {
    months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
    monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
    monthsParseExact : true,
    weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
    weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
    weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
    longDateFormat : {
        LT : 'A h:mm -നു',
        LTS : 'A h:mm:ss -നു',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm -നു',
        LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'
    },
    calendar : {
        sameDay : '[ഇന്ന്] LT',
        nextDay : '[നാളെ] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[ഇന്നലെ] LT',
        lastWeek : '[കഴിഞ്ഞ] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s കഴിഞ്ഞ്',
        past : '%s മുൻപ്',
        s : 'അൽപ നിമിഷങ്ങൾ',
        m : 'ഒരു മിനിറ്റ്',
        mm : '%d മിനിറ്റ്',
        h : 'ഒരു മണിക്കൂർ',
        hh : '%d മണിക്കൂർ',
        d : 'ഒരു ദിവസം',
        dd : '%d ദിവസം',
        M : 'ഒരു മാസം',
        MM : '%d മാസം',
        y : 'ഒരു വർഷം',
        yy : '%d വർഷം'
    },
    meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if ((meridiem === 'രാത്രി' && hour >= 4) ||
                meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
                meridiem === 'വൈകുന്നേരം') {
            return hour + 12;
        } else {
            return hour;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'രാത്രി';
        } else if (hour < 12) {
            return 'രാവിലെ';
        } else if (hour < 17) {
            return 'ഉച്ച കഴിഞ്ഞ്';
        } else if (hour < 20) {
            return 'വൈകുന്നേരം';
        } else {
            return 'രാത്രി';
        }
    }
});

return ml;

})));


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Marathi [mr]
//! author : Harshad Kale : https://github.com/kalehv
//! author : Vivek Athalye : https://github.com/vnathalye

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '१',
    '2': '२',
    '3': '३',
    '4': '४',
    '5': '५',
    '6': '६',
    '7': '७',
    '8': '८',
    '9': '९',
    '0': '०'
};
var numberMap = {
    '१': '1',
    '२': '2',
    '३': '3',
    '४': '4',
    '५': '5',
    '६': '6',
    '७': '7',
    '८': '8',
    '९': '9',
    '०': '0'
};

function relativeTimeMr(number, withoutSuffix, string, isFuture)
{
    var output = '';
    if (withoutSuffix) {
        switch (string) {
            case 's': output = 'काही सेकंद'; break;
            case 'm': output = 'एक मिनिट'; break;
            case 'mm': output = '%d मिनिटे'; break;
            case 'h': output = 'एक तास'; break;
            case 'hh': output = '%d तास'; break;
            case 'd': output = 'एक दिवस'; break;
            case 'dd': output = '%d दिवस'; break;
            case 'M': output = 'एक महिना'; break;
            case 'MM': output = '%d महिने'; break;
            case 'y': output = 'एक वर्ष'; break;
            case 'yy': output = '%d वर्षे'; break;
        }
    }
    else {
        switch (string) {
            case 's': output = 'काही सेकंदां'; break;
            case 'm': output = 'एका मिनिटा'; break;
            case 'mm': output = '%d मिनिटां'; break;
            case 'h': output = 'एका तासा'; break;
            case 'hh': output = '%d तासां'; break;
            case 'd': output = 'एका दिवसा'; break;
            case 'dd': output = '%d दिवसां'; break;
            case 'M': output = 'एका महिन्या'; break;
            case 'MM': output = '%d महिन्यां'; break;
            case 'y': output = 'एका वर्षा'; break;
            case 'yy': output = '%d वर्षां'; break;
        }
    }
    return output.replace(/%d/i, number);
}

var mr = moment.defineLocale('mr', {
    months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
    monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
    monthsParseExact : true,
    weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
    weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
    weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
    longDateFormat : {
        LT : 'A h:mm वाजता',
        LTS : 'A h:mm:ss वाजता',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm वाजता',
        LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'
    },
    calendar : {
        sameDay : '[आज] LT',
        nextDay : '[उद्या] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[काल] LT',
        lastWeek: '[मागील] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future: '%sमध्ये',
        past: '%sपूर्वी',
        s: relativeTimeMr,
        m: relativeTimeMr,
        mm: relativeTimeMr,
        h: relativeTimeMr,
        hh: relativeTimeMr,
        d: relativeTimeMr,
        dd: relativeTimeMr,
        M: relativeTimeMr,
        MM: relativeTimeMr,
        y: relativeTimeMr,
        yy: relativeTimeMr
    },
    preparse: function (string) {
        return string.replace(/[१२३४५६७८९०]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'रात्री') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'सकाळी') {
            return hour;
        } else if (meridiem === 'दुपारी') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'सायंकाळी') {
            return hour + 12;
        }
    },
    meridiem: function (hour, minute, isLower) {
        if (hour < 4) {
            return 'रात्री';
        } else if (hour < 10) {
            return 'सकाळी';
        } else if (hour < 17) {
            return 'दुपारी';
        } else if (hour < 20) {
            return 'सायंकाळी';
        } else {
            return 'रात्री';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return mr;

})));


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malay [ms-my]
//! note : DEPRECATED, the correct one is [ms]
//! author : Weldan Jamili : https://github.com/weldan

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var msMy = moment.defineLocale('ms-my', {
    months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
    weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
    weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
    weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [pukul] HH.mm',
        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
    },
    meridiemParse: /pagi|tengahari|petang|malam/,
    meridiemHour: function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'pagi') {
            return hour;
        } else if (meridiem === 'tengahari') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'petang' || meridiem === 'malam') {
            return hour + 12;
        }
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'pagi';
        } else if (hours < 15) {
            return 'tengahari';
        } else if (hours < 19) {
            return 'petang';
        } else {
            return 'malam';
        }
    },
    calendar : {
        sameDay : '[Hari ini pukul] LT',
        nextDay : '[Esok pukul] LT',
        nextWeek : 'dddd [pukul] LT',
        lastDay : '[Kelmarin pukul] LT',
        lastWeek : 'dddd [lepas pukul] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dalam %s',
        past : '%s yang lepas',
        s : 'beberapa saat',
        m : 'seminit',
        mm : '%d minit',
        h : 'sejam',
        hh : '%d jam',
        d : 'sehari',
        dd : '%d hari',
        M : 'sebulan',
        MM : '%d bulan',
        y : 'setahun',
        yy : '%d tahun'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return msMy;

})));


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malay [ms]
//! author : Weldan Jamili : https://github.com/weldan

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ms = moment.defineLocale('ms', {
    months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
    weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
    weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
    weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [pukul] HH.mm',
        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
    },
    meridiemParse: /pagi|tengahari|petang|malam/,
    meridiemHour: function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'pagi') {
            return hour;
        } else if (meridiem === 'tengahari') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'petang' || meridiem === 'malam') {
            return hour + 12;
        }
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'pagi';
        } else if (hours < 15) {
            return 'tengahari';
        } else if (hours < 19) {
            return 'petang';
        } else {
            return 'malam';
        }
    },
    calendar : {
        sameDay : '[Hari ini pukul] LT',
        nextDay : '[Esok pukul] LT',
        nextWeek : 'dddd [pukul] LT',
        lastDay : '[Kelmarin pukul] LT',
        lastWeek : 'dddd [lepas pukul] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dalam %s',
        past : '%s yang lepas',
        s : 'beberapa saat',
        m : 'seminit',
        mm : '%d minit',
        h : 'sejam',
        hh : '%d jam',
        d : 'sehari',
        dd : '%d hari',
        M : 'sebulan',
        MM : '%d bulan',
        y : 'setahun',
        yy : '%d tahun'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return ms;

})));


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Burmese [my]
//! author : Squar team, mysquar.com
//! author : David Rossellat : https://github.com/gholadr
//! author : Tin Aung Lin : https://github.com/thanyawzinmin

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '၁',
    '2': '၂',
    '3': '၃',
    '4': '၄',
    '5': '၅',
    '6': '၆',
    '7': '၇',
    '8': '၈',
    '9': '၉',
    '0': '၀'
};
var numberMap = {
    '၁': '1',
    '၂': '2',
    '၃': '3',
    '၄': '4',
    '၅': '5',
    '၆': '6',
    '၇': '7',
    '၈': '8',
    '၉': '9',
    '၀': '0'
};

var my = moment.defineLocale('my', {
    months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
    monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
    weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
    weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
    weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

    longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd D MMMM YYYY HH:mm'
    },
    calendar: {
        sameDay: '[ယနေ.] LT [မှာ]',
        nextDay: '[မနက်ဖြန်] LT [မှာ]',
        nextWeek: 'dddd LT [မှာ]',
        lastDay: '[မနေ.က] LT [မှာ]',
        lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
        sameElse: 'L'
    },
    relativeTime: {
        future: 'လာမည့် %s မှာ',
        past: 'လွန်ခဲ့သော %s က',
        s: 'စက္ကန်.အနည်းငယ်',
        m: 'တစ်မိနစ်',
        mm: '%d မိနစ်',
        h: 'တစ်နာရီ',
        hh: '%d နာရီ',
        d: 'တစ်ရက်',
        dd: '%d ရက်',
        M: 'တစ်လ',
        MM: '%d လ',
        y: 'တစ်နှစ်',
        yy: '%d နှစ်'
    },
    preparse: function (string) {
        return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    week: {
        dow: 1, // Monday is the first day of the week.
        doy: 4 // The week that contains Jan 1st is the first week of the year.
    }
});

return my;

})));


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Norwegian Bokmål [nb]
//! authors : Espen Hovlandsdal : https://github.com/rexxars
//!           Sigurd Gartmann : https://github.com/sigurdga

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var nb = moment.defineLocale('nb', {
    months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
    monthsShort : 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
    monthsParseExact : true,
    weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
    weekdaysShort : 'sø._ma._ti._on._to._fr._lø.'.split('_'),
    weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY [kl.] HH:mm',
        LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
    },
    calendar : {
        sameDay: '[i dag kl.] LT',
        nextDay: '[i morgen kl.] LT',
        nextWeek: 'dddd [kl.] LT',
        lastDay: '[i går kl.] LT',
        lastWeek: '[forrige] dddd [kl.] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'om %s',
        past : '%s siden',
        s : 'noen sekunder',
        m : 'ett minutt',
        mm : '%d minutter',
        h : 'en time',
        hh : '%d timer',
        d : 'en dag',
        dd : '%d dager',
        M : 'en måned',
        MM : '%d måneder',
        y : 'ett år',
        yy : '%d år'
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return nb;

})));


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Nepalese [ne]
//! author : suvash : https://github.com/suvash

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '१',
    '2': '२',
    '3': '३',
    '4': '४',
    '5': '५',
    '6': '६',
    '7': '७',
    '8': '८',
    '9': '९',
    '0': '०'
};
var numberMap = {
    '१': '1',
    '२': '2',
    '३': '3',
    '४': '4',
    '५': '5',
    '६': '6',
    '७': '7',
    '८': '8',
    '९': '9',
    '०': '0'
};

var ne = moment.defineLocale('ne', {
    months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
    monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
    monthsParseExact : true,
    weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
    weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
    weekdaysMin : 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'Aको h:mm बजे',
        LTS : 'Aको h:mm:ss बजे',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, Aको h:mm बजे',
        LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'
    },
    preparse: function (string) {
        return string.replace(/[१२३४५६७८९०]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'राति') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'बिहान') {
            return hour;
        } else if (meridiem === 'दिउँसो') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'साँझ') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 3) {
            return 'राति';
        } else if (hour < 12) {
            return 'बिहान';
        } else if (hour < 16) {
            return 'दिउँसो';
        } else if (hour < 20) {
            return 'साँझ';
        } else {
            return 'राति';
        }
    },
    calendar : {
        sameDay : '[आज] LT',
        nextDay : '[भोलि] LT',
        nextWeek : '[आउँदो] dddd[,] LT',
        lastDay : '[हिजो] LT',
        lastWeek : '[गएको] dddd[,] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%sमा',
        past : '%s अगाडि',
        s : 'केही क्षण',
        m : 'एक मिनेट',
        mm : '%d मिनेट',
        h : 'एक घण्टा',
        hh : '%d घण्टा',
        d : 'एक दिन',
        dd : '%d दिन',
        M : 'एक महिना',
        MM : '%d महिना',
        y : 'एक बर्ष',
        yy : '%d बर्ष'
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return ne;

})));


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Dutch (Belgium) [nl-be]
//! author : Joris Röling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

var nlBe = moment.defineLocale('nl-be', {
    months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
    monthsShort : function (m, format) {
        if (!m) {
            return monthsShortWithDots;
        } else if (/-MMM-/.test(format)) {
            return monthsShortWithoutDots[m.month()];
        } else {
            return monthsShortWithDots[m.month()];
        }
    },

    monthsRegex: monthsRegex,
    monthsShortRegex: monthsRegex,
    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

    monthsParse : monthsParse,
    longMonthsParse : monthsParse,
    shortMonthsParse : monthsParse,

    weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
    weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
    weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[vandaag om] LT',
        nextDay: '[morgen om] LT',
        nextWeek: 'dddd [om] LT',
        lastDay: '[gisteren om] LT',
        lastWeek: '[afgelopen] dddd [om] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'over %s',
        past : '%s geleden',
        s : 'een paar seconden',
        m : 'één minuut',
        mm : '%d minuten',
        h : 'één uur',
        hh : '%d uur',
        d : 'één dag',
        dd : '%d dagen',
        M : 'één maand',
        MM : '%d maanden',
        y : 'één jaar',
        yy : '%d jaar'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
    ordinal : function (number) {
        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return nlBe;

})));


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Dutch [nl]
//! author : Joris Röling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

var nl = moment.defineLocale('nl', {
    months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
    monthsShort : function (m, format) {
        if (!m) {
            return monthsShortWithDots;
        } else if (/-MMM-/.test(format)) {
            return monthsShortWithoutDots[m.month()];
        } else {
            return monthsShortWithDots[m.month()];
        }
    },

    monthsRegex: monthsRegex,
    monthsShortRegex: monthsRegex,
    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

    monthsParse : monthsParse,
    longMonthsParse : monthsParse,
    shortMonthsParse : monthsParse,

    weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
    weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
    weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD-MM-YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[vandaag om] LT',
        nextDay: '[morgen om] LT',
        nextWeek: 'dddd [om] LT',
        lastDay: '[gisteren om] LT',
        lastWeek: '[afgelopen] dddd [om] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'over %s',
        past : '%s geleden',
        s : 'een paar seconden',
        m : 'één minuut',
        mm : '%d minuten',
        h : 'één uur',
        hh : '%d uur',
        d : 'één dag',
        dd : '%d dagen',
        M : 'één maand',
        MM : '%d maanden',
        y : 'één jaar',
        yy : '%d jaar'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
    ordinal : function (number) {
        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return nl;

})));


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Nynorsk [nn]
//! author : https://github.com/mechuwind

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var nn = moment.defineLocale('nn', {
    months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
    monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
    weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
    weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
    weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY [kl.] H:mm',
        LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
    },
    calendar : {
        sameDay: '[I dag klokka] LT',
        nextDay: '[I morgon klokka] LT',
        nextWeek: 'dddd [klokka] LT',
        lastDay: '[I går klokka] LT',
        lastWeek: '[Føregåande] dddd [klokka] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'om %s',
        past : '%s sidan',
        s : 'nokre sekund',
        m : 'eit minutt',
        mm : '%d minutt',
        h : 'ein time',
        hh : '%d timar',
        d : 'ein dag',
        dd : '%d dagar',
        M : 'ein månad',
        MM : '%d månader',
        y : 'eit år',
        yy : '%d år'
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return nn;

})));


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Punjabi (India) [pa-in]
//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '੧',
    '2': '੨',
    '3': '੩',
    '4': '੪',
    '5': '੫',
    '6': '੬',
    '7': '੭',
    '8': '੮',
    '9': '੯',
    '0': '੦'
};
var numberMap = {
    '੧': '1',
    '੨': '2',
    '੩': '3',
    '੪': '4',
    '੫': '5',
    '੬': '6',
    '੭': '7',
    '੮': '8',
    '੯': '9',
    '੦': '0'
};

var paIn = moment.defineLocale('pa-in', {
    // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
    months : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
    monthsShort : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
    weekdays : 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
    weekdaysShort : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
    weekdaysMin : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
    longDateFormat : {
        LT : 'A h:mm ਵਜੇ',
        LTS : 'A h:mm:ss ਵਜੇ',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm ਵਜੇ',
        LLLL : 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
    },
    calendar : {
        sameDay : '[ਅਜ] LT',
        nextDay : '[ਕਲ] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[ਕਲ] LT',
        lastWeek : '[ਪਿਛਲੇ] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s ਵਿੱਚ',
        past : '%s ਪਿਛਲੇ',
        s : 'ਕੁਝ ਸਕਿੰਟ',
        m : 'ਇਕ ਮਿੰਟ',
        mm : '%d ਮਿੰਟ',
        h : 'ਇੱਕ ਘੰਟਾ',
        hh : '%d ਘੰਟੇ',
        d : 'ਇੱਕ ਦਿਨ',
        dd : '%d ਦਿਨ',
        M : 'ਇੱਕ ਮਹੀਨਾ',
        MM : '%d ਮਹੀਨੇ',
        y : 'ਇੱਕ ਸਾਲ',
        yy : '%d ਸਾਲ'
    },
    preparse: function (string) {
        return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
    meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'ਰਾਤ') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'ਸਵੇਰ') {
            return hour;
        } else if (meridiem === 'ਦੁਪਹਿਰ') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'ਸ਼ਾਮ') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'ਰਾਤ';
        } else if (hour < 10) {
            return 'ਸਵੇਰ';
        } else if (hour < 17) {
            return 'ਦੁਪਹਿਰ';
        } else if (hour < 20) {
            return 'ਸ਼ਾਮ';
        } else {
            return 'ਰਾਤ';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return paIn;

})));


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Polish [pl]
//! author : Rafal Hirsz : https://github.com/evoL

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_');
var monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
function plural(n) {
    return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
}
function translate(number, withoutSuffix, key) {
    var result = number + ' ';
    switch (key) {
        case 'm':
            return withoutSuffix ? 'minuta' : 'minutę';
        case 'mm':
            return result + (plural(number) ? 'minuty' : 'minut');
        case 'h':
            return withoutSuffix  ? 'godzina'  : 'godzinę';
        case 'hh':
            return result + (plural(number) ? 'godziny' : 'godzin');
        case 'MM':
            return result + (plural(number) ? 'miesiące' : 'miesięcy');
        case 'yy':
            return result + (plural(number) ? 'lata' : 'lat');
    }
}

var pl = moment.defineLocale('pl', {
    months : function (momentToFormat, format) {
        if (!momentToFormat) {
            return monthsNominative;
        } else if (format === '') {
            // Hack: if format empty we know this is used to generate
            // RegExp by moment. Give then back both valid forms of months
            // in RegExp ready format.
            return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
        } else if (/D MMMM/.test(format)) {
            return monthsSubjective[momentToFormat.month()];
        } else {
            return monthsNominative[momentToFormat.month()];
        }
    },
    monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
    weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
    weekdaysShort : 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
    weekdaysMin : 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Dziś o] LT',
        nextDay: '[Jutro o] LT',
        nextWeek: '[W] dddd [o] LT',
        lastDay: '[Wczoraj o] LT',
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[W zeszłą niedzielę o] LT';
                case 3:
                    return '[W zeszłą środę o] LT';
                case 6:
                    return '[W zeszłą sobotę o] LT';
                default:
                    return '[W zeszły] dddd [o] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'za %s',
        past : '%s temu',
        s : 'kilka sekund',
        m : translate,
        mm : translate,
        h : translate,
        hh : translate,
        d : '1 dzień',
        dd : '%d dni',
        M : 'miesiąc',
        MM : translate,
        y : 'rok',
        yy : translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return pl;

})));


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Portuguese (Brazil) [pt-br]
//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ptBr = moment.defineLocale('pt-br', {
    months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
    weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
    weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
    weekdaysMin : 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',
        LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
    },
    calendar : {
        sameDay: '[Hoje às] LT',
        nextDay: '[Amanhã às] LT',
        nextWeek: 'dddd [às] LT',
        lastDay: '[Ontem às] LT',
        lastWeek: function () {
            return (this.day() === 0 || this.day() === 6) ?
                '[Último] dddd [às] LT' : // Saturday + Sunday
                '[Última] dddd [às] LT'; // Monday - Friday
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'em %s',
        past : '%s atrás',
        s : 'poucos segundos',
        m : 'um minuto',
        mm : '%d minutos',
        h : 'uma hora',
        hh : '%d horas',
        d : 'um dia',
        dd : '%d dias',
        M : 'um mês',
        MM : '%d meses',
        y : 'um ano',
        yy : '%d anos'
    },
    dayOfMonthOrdinalParse: /\d{1,2}º/,
    ordinal : '%dº'
});

return ptBr;

})));


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Portuguese [pt]
//! author : Jefferson : https://github.com/jalex79

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var pt = moment.defineLocale('pt', {
    months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
    weekdays : 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
    weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
    weekdaysMin : 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY HH:mm',
        LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Hoje às] LT',
        nextDay: '[Amanhã às] LT',
        nextWeek: 'dddd [às] LT',
        lastDay: '[Ontem às] LT',
        lastWeek: function () {
            return (this.day() === 0 || this.day() === 6) ?
                '[Último] dddd [às] LT' : // Saturday + Sunday
                '[Última] dddd [às] LT'; // Monday - Friday
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'em %s',
        past : 'há %s',
        s : 'segundos',
        m : 'um minuto',
        mm : '%d minutos',
        h : 'uma hora',
        hh : '%d horas',
        d : 'um dia',
        dd : '%d dias',
        M : 'um mês',
        MM : '%d meses',
        y : 'um ano',
        yy : '%d anos'
    },
    dayOfMonthOrdinalParse: /\d{1,2}º/,
    ordinal : '%dº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return pt;

})));


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Romanian [ro]
//! author : Vlad Gurdiga : https://github.com/gurdiga
//! author : Valentin Agachi : https://github.com/avaly

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function relativeTimeWithPlural(number, withoutSuffix, key) {
    var format = {
            'mm': 'minute',
            'hh': 'ore',
            'dd': 'zile',
            'MM': 'luni',
            'yy': 'ani'
        },
        separator = ' ';
    if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
        separator = ' de ';
    }
    return number + separator + format[key];
}

var ro = moment.defineLocale('ro', {
    months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
    monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
    weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
    weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY H:mm',
        LLLL : 'dddd, D MMMM YYYY H:mm'
    },
    calendar : {
        sameDay: '[azi la] LT',
        nextDay: '[mâine la] LT',
        nextWeek: 'dddd [la] LT',
        lastDay: '[ieri la] LT',
        lastWeek: '[fosta] dddd [la] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'peste %s',
        past : '%s în urmă',
        s : 'câteva secunde',
        m : 'un minut',
        mm : relativeTimeWithPlural,
        h : 'o oră',
        hh : relativeTimeWithPlural,
        d : 'o zi',
        dd : relativeTimeWithPlural,
        M : 'o lună',
        MM : relativeTimeWithPlural,
        y : 'un an',
        yy : relativeTimeWithPlural
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return ro;

})));


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Russian [ru]
//! author : Viktorminator : https://github.com/Viktorminator
//! Author : Menelion Elensúle : https://github.com/Oire
//! author : Коренберг Марк : https://github.com/socketpair

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function plural(word, num) {
    var forms = word.split('_');
    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
}
function relativeTimeWithPlural(number, withoutSuffix, key) {
    var format = {
        'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
        'hh': 'час_часа_часов',
        'dd': 'день_дня_дней',
        'MM': 'месяц_месяца_месяцев',
        'yy': 'год_года_лет'
    };
    if (key === 'm') {
        return withoutSuffix ? 'минута' : 'минуту';
    }
    else {
        return number + ' ' + plural(format[key], +number);
    }
}
var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];

// http://new.gramota.ru/spravka/rules/139-prop : § 103
// Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
// CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
var ru = moment.defineLocale('ru', {
    months : {
        format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
        standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
    },
    monthsShort : {
        // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
        format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
        standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
    },
    weekdays : {
        standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
        format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
        isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
    },
    weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
    weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
    monthsParse : monthsParse,
    longMonthsParse : monthsParse,
    shortMonthsParse : monthsParse,

    // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
    monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

    // копия предыдущего
    monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

    // полные названия с падежами
    monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,

    // Выражение, которое соотвествует только сокращённым формам
    monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY г.',
        LLL : 'D MMMM YYYY г., HH:mm',
        LLLL : 'dddd, D MMMM YYYY г., HH:mm'
    },
    calendar : {
        sameDay: '[Сегодня в] LT',
        nextDay: '[Завтра в] LT',
        lastDay: '[Вчера в] LT',
        nextWeek: function (now) {
            if (now.week() !== this.week()) {
                switch (this.day()) {
                    case 0:
                        return '[В следующее] dddd [в] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[В следующий] dddd [в] LT';
                    case 3:
                    case 5:
                    case 6:
                        return '[В следующую] dddd [в] LT';
                }
            } else {
                if (this.day() === 2) {
                    return '[Во] dddd [в] LT';
                } else {
                    return '[В] dddd [в] LT';
                }
            }
        },
        lastWeek: function (now) {
            if (now.week() !== this.week()) {
                switch (this.day()) {
                    case 0:
                        return '[В прошлое] dddd [в] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[В прошлый] dddd [в] LT';
                    case 3:
                    case 5:
                    case 6:
                        return '[В прошлую] dddd [в] LT';
                }
            } else {
                if (this.day() === 2) {
                    return '[Во] dddd [в] LT';
                } else {
                    return '[В] dddd [в] LT';
                }
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'через %s',
        past : '%s назад',
        s : 'несколько секунд',
        m : relativeTimeWithPlural,
        mm : relativeTimeWithPlural,
        h : 'час',
        hh : relativeTimeWithPlural,
        d : 'день',
        dd : relativeTimeWithPlural,
        M : 'месяц',
        MM : relativeTimeWithPlural,
        y : 'год',
        yy : relativeTimeWithPlural
    },
    meridiemParse: /ночи|утра|дня|вечера/i,
    isPM : function (input) {
        return /^(дня|вечера)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'ночи';
        } else if (hour < 12) {
            return 'утра';
        } else if (hour < 17) {
            return 'дня';
        } else {
            return 'вечера';
        }
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
    ordinal: function (number, period) {
        switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
                return number + '-й';
            case 'D':
                return number + '-го';
            case 'w':
            case 'W':
                return number + '-я';
            default:
                return number;
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return ru;

})));


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Sindhi [sd]
//! author : Narain Sagar : https://github.com/narainsagar

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var months = [
    'جنوري',
    'فيبروري',
    'مارچ',
    'اپريل',
    'مئي',
    'جون',
    'جولاءِ',
    'آگسٽ',
    'سيپٽمبر',
    'آڪٽوبر',
    'نومبر',
    'ڊسمبر'
];
var days = [
    'آچر',
    'سومر',
    'اڱارو',
    'اربع',
    'خميس',
    'جمع',
    'ڇنڇر'
];

var sd = moment.defineLocale('sd', {
    months : months,
    monthsShort : months,
    weekdays : days,
    weekdaysShort : days,
    weekdaysMin : days,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd، D MMMM YYYY HH:mm'
    },
    meridiemParse: /صبح|شام/,
    isPM : function (input) {
        return 'شام' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'صبح';
        }
        return 'شام';
    },
    calendar : {
        sameDay : '[اڄ] LT',
        nextDay : '[سڀاڻي] LT',
        nextWeek : 'dddd [اڳين هفتي تي] LT',
        lastDay : '[ڪالهه] LT',
        lastWeek : '[گزريل هفتي] dddd [تي] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s پوء',
        past : '%s اڳ',
        s : 'چند سيڪنڊ',
        m : 'هڪ منٽ',
        mm : '%d منٽ',
        h : 'هڪ ڪلاڪ',
        hh : '%d ڪلاڪ',
        d : 'هڪ ڏينهن',
        dd : '%d ڏينهن',
        M : 'هڪ مهينو',
        MM : '%d مهينا',
        y : 'هڪ سال',
        yy : '%d سال'
    },
    preparse: function (string) {
        return string.replace(/،/g, ',');
    },
    postformat: function (string) {
        return string.replace(/,/g, '،');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return sd;

})));


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Northern Sami [se]
//! authors : Bård Rolstad Henriksen : https://github.com/karamell

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';



var se = moment.defineLocale('se', {
    months : 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
    monthsShort : 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
    weekdays : 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
    weekdaysShort : 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
    weekdaysMin : 's_v_m_g_d_b_L'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'MMMM D. [b.] YYYY',
        LLL : 'MMMM D. [b.] YYYY [ti.] HH:mm',
        LLLL : 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
    },
    calendar : {
        sameDay: '[otne ti] LT',
        nextDay: '[ihttin ti] LT',
        nextWeek: 'dddd [ti] LT',
        lastDay: '[ikte ti] LT',
        lastWeek: '[ovddit] dddd [ti] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : '%s geažes',
        past : 'maŋit %s',
        s : 'moadde sekunddat',
        m : 'okta minuhta',
        mm : '%d minuhtat',
        h : 'okta diimmu',
        hh : '%d diimmut',
        d : 'okta beaivi',
        dd : '%d beaivvit',
        M : 'okta mánnu',
        MM : '%d mánut',
        y : 'okta jahki',
        yy : '%d jagit'
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return se;

})));


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Sinhalese [si]
//! author : Sampath Sitinamaluwa : https://github.com/sampathsris

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


/*jshint -W100*/
var si = moment.defineLocale('si', {
    months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
    monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
    weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
    weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
    weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'a h:mm',
        LTS : 'a h:mm:ss',
        L : 'YYYY/MM/DD',
        LL : 'YYYY MMMM D',
        LLL : 'YYYY MMMM D, a h:mm',
        LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
    },
    calendar : {
        sameDay : '[අද] LT[ට]',
        nextDay : '[හෙට] LT[ට]',
        nextWeek : 'dddd LT[ට]',
        lastDay : '[ඊයේ] LT[ට]',
        lastWeek : '[පසුගිය] dddd LT[ට]',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%sකින්',
        past : '%sකට පෙර',
        s : 'තත්පර කිහිපය',
        m : 'මිනිත්තුව',
        mm : 'මිනිත්තු %d',
        h : 'පැය',
        hh : 'පැය %d',
        d : 'දිනය',
        dd : 'දින %d',
        M : 'මාසය',
        MM : 'මාස %d',
        y : 'වසර',
        yy : 'වසර %d'
    },
    dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
    ordinal : function (number) {
        return number + ' වැනි';
    },
    meridiemParse : /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
    isPM : function (input) {
        return input === 'ප.ව.' || input === 'පස් වරු';
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'ප.ව.' : 'පස් වරු';
        } else {
            return isLower ? 'පෙ.ව.' : 'පෙර වරු';
        }
    }
});

return si;

})));


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Slovak [sk]
//! author : Martin Minka : https://github.com/k2s
//! based on work of petrbela : https://github.com/petrbela

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_');
var monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
function plural(n) {
    return (n > 1) && (n < 5);
}
function translate(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    switch (key) {
        case 's':  // a few seconds / in a few seconds / a few seconds ago
            return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
        case 'm':  // a minute / in a minute / a minute ago
            return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'minúty' : 'minút');
            } else {
                return result + 'minútami';
            }
            break;
        case 'h':  // an hour / in an hour / an hour ago
            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
        case 'hh': // 9 hours / in 9 hours / 9 hours ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'hodiny' : 'hodín');
            } else {
                return result + 'hodinami';
            }
            break;
        case 'd':  // a day / in a day / a day ago
            return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
        case 'dd': // 9 days / in 9 days / 9 days ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'dni' : 'dní');
            } else {
                return result + 'dňami';
            }
            break;
        case 'M':  // a month / in a month / a month ago
            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
        case 'MM': // 9 months / in 9 months / 9 months ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'mesiace' : 'mesiacov');
            } else {
                return result + 'mesiacmi';
            }
            break;
        case 'y':  // a year / in a year / a year ago
            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
        case 'yy': // 9 years / in 9 years / 9 years ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'roky' : 'rokov');
            } else {
                return result + 'rokmi';
            }
            break;
    }
}

var sk = moment.defineLocale('sk', {
    months : months,
    monthsShort : monthsShort,
    weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
    weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
    weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
    longDateFormat : {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay: '[dnes o] LT',
        nextDay: '[zajtra o] LT',
        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[v nedeľu o] LT';
                case 1:
                case 2:
                    return '[v] dddd [o] LT';
                case 3:
                    return '[v stredu o] LT';
                case 4:
                    return '[vo štvrtok o] LT';
                case 5:
                    return '[v piatok o] LT';
                case 6:
                    return '[v sobotu o] LT';
            }
        },
        lastDay: '[včera o] LT',
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[minulú nedeľu o] LT';
                case 1:
                case 2:
                    return '[minulý] dddd [o] LT';
                case 3:
                    return '[minulú stredu o] LT';
                case 4:
                case 5:
                    return '[minulý] dddd [o] LT';
                case 6:
                    return '[minulú sobotu o] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'za %s',
        past : 'pred %s',
        s : translate,
        m : translate,
        mm : translate,
        h : translate,
        hh : translate,
        d : translate,
        dd : translate,
        M : translate,
        MM : translate,
        y : translate,
        yy : translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return sk;

})));


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Slovenian [sl]
//! author : Robert Sedovšek : https://github.com/sedovsek

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    switch (key) {
        case 's':
            return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
        case 'm':
            return withoutSuffix ? 'ena minuta' : 'eno minuto';
        case 'mm':
            if (number === 1) {
                result += withoutSuffix ? 'minuta' : 'minuto';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'minute' : 'minutami';
            } else {
                result += withoutSuffix || isFuture ? 'minut' : 'minutami';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'ena ura' : 'eno uro';
        case 'hh':
            if (number === 1) {
                result += withoutSuffix ? 'ura' : 'uro';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'uri' : 'urama';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'ure' : 'urami';
            } else {
                result += withoutSuffix || isFuture ? 'ur' : 'urami';
            }
            return result;
        case 'd':
            return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
        case 'dd':
            if (number === 1) {
                result += withoutSuffix || isFuture ? 'dan' : 'dnem';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
            } else {
                result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
            }
            return result;
        case 'M':
            return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
        case 'MM':
            if (number === 1) {
                result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
            } else {
                result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
            }
            return result;
        case 'y':
            return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
        case 'yy':
            if (number === 1) {
                result += withoutSuffix || isFuture ? 'leto' : 'letom';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'leti' : 'letoma';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'leta' : 'leti';
            } else {
                result += withoutSuffix || isFuture ? 'let' : 'leti';
            }
            return result;
    }
}

var sl = moment.defineLocale('sl', {
    months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
    monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
    weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
    weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd, D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay  : '[danes ob] LT',
        nextDay  : '[jutri ob] LT',

        nextWeek : function () {
            switch (this.day()) {
                case 0:
                    return '[v] [nedeljo] [ob] LT';
                case 3:
                    return '[v] [sredo] [ob] LT';
                case 6:
                    return '[v] [soboto] [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[v] dddd [ob] LT';
            }
        },
        lastDay  : '[včeraj ob] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                    return '[prejšnjo] [nedeljo] [ob] LT';
                case 3:
                    return '[prejšnjo] [sredo] [ob] LT';
                case 6:
                    return '[prejšnjo] [soboto] [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prejšnji] dddd [ob] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'čez %s',
        past   : 'pred %s',
        s      : processRelativeTime,
        m      : processRelativeTime,
        mm     : processRelativeTime,
        h      : processRelativeTime,
        hh     : processRelativeTime,
        d      : processRelativeTime,
        dd     : processRelativeTime,
        M      : processRelativeTime,
        MM     : processRelativeTime,
        y      : processRelativeTime,
        yy     : processRelativeTime
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return sl;

})));


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Albanian [sq]
//! author : Flakërim Ismani : https://github.com/flakerimi
//! author : Menelion Elensúle : https://github.com/Oire
//! author : Oerd Cukalla : https://github.com/oerd

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var sq = moment.defineLocale('sq', {
    months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
    monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
    weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
    weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
    weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
    weekdaysParseExact : true,
    meridiemParse: /PD|MD/,
    isPM: function (input) {
        return input.charAt(0) === 'M';
    },
    meridiem : function (hours, minutes, isLower) {
        return hours < 12 ? 'PD' : 'MD';
    },
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Sot në] LT',
        nextDay : '[Nesër në] LT',
        nextWeek : 'dddd [në] LT',
        lastDay : '[Dje në] LT',
        lastWeek : 'dddd [e kaluar në] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'në %s',
        past : '%s më parë',
        s : 'disa sekonda',
        m : 'një minutë',
        mm : '%d minuta',
        h : 'një orë',
        hh : '%d orë',
        d : 'një ditë',
        dd : '%d ditë',
        M : 'një muaj',
        MM : '%d muaj',
        y : 'një vit',
        yy : '%d vite'
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return sq;

})));


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Serbian Cyrillic [sr-cyrl]
//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var translator = {
    words: { //Different grammatical cases
        m: ['један минут', 'једне минуте'],
        mm: ['минут', 'минуте', 'минута'],
        h: ['један сат', 'једног сата'],
        hh: ['сат', 'сата', 'сати'],
        dd: ['дан', 'дана', 'дана'],
        MM: ['месец', 'месеца', 'месеци'],
        yy: ['година', 'године', 'година']
    },
    correctGrammaticalCase: function (number, wordKey) {
        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
    },
    translate: function (number, withoutSuffix, key) {
        var wordKey = translator.words[key];
        if (key.length === 1) {
            return withoutSuffix ? wordKey[0] : wordKey[1];
        } else {
            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
        }
    }
};

var srCyrl = moment.defineLocale('sr-cyrl', {
    months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
    monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
    monthsParseExact: true,
    weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
    weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
    weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm',
        LLLL: 'dddd, D. MMMM YYYY H:mm'
    },
    calendar: {
        sameDay: '[данас у] LT',
        nextDay: '[сутра у] LT',
        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[у] [недељу] [у] LT';
                case 3:
                    return '[у] [среду] [у] LT';
                case 6:
                    return '[у] [суботу] [у] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[у] dddd [у] LT';
            }
        },
        lastDay  : '[јуче у] LT',
        lastWeek : function () {
            var lastWeekDays = [
                '[прошле] [недеље] [у] LT',
                '[прошлог] [понедељка] [у] LT',
                '[прошлог] [уторка] [у] LT',
                '[прошле] [среде] [у] LT',
                '[прошлог] [четвртка] [у] LT',
                '[прошлог] [петка] [у] LT',
                '[прошле] [суботе] [у] LT'
            ];
            return lastWeekDays[this.day()];
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'за %s',
        past   : 'пре %s',
        s      : 'неколико секунди',
        m      : translator.translate,
        mm     : translator.translate,
        h      : translator.translate,
        hh     : translator.translate,
        d      : 'дан',
        dd     : translator.translate,
        M      : 'месец',
        MM     : translator.translate,
        y      : 'годину',
        yy     : translator.translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return srCyrl;

})));


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Serbian [sr]
//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var translator = {
    words: { //Different grammatical cases
        m: ['jedan minut', 'jedne minute'],
        mm: ['minut', 'minute', 'minuta'],
        h: ['jedan sat', 'jednog sata'],
        hh: ['sat', 'sata', 'sati'],
        dd: ['dan', 'dana', 'dana'],
        MM: ['mesec', 'meseca', 'meseci'],
        yy: ['godina', 'godine', 'godina']
    },
    correctGrammaticalCase: function (number, wordKey) {
        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
    },
    translate: function (number, withoutSuffix, key) {
        var wordKey = translator.words[key];
        if (key.length === 1) {
            return withoutSuffix ? wordKey[0] : wordKey[1];
        } else {
            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
        }
    }
};

var sr = moment.defineLocale('sr', {
    months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
    weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
    weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm',
        LLLL: 'dddd, D. MMMM YYYY H:mm'
    },
    calendar: {
        sameDay: '[danas u] LT',
        nextDay: '[sutra u] LT',
        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[u] [nedelju] [u] LT';
                case 3:
                    return '[u] [sredu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
            }
        },
        lastDay  : '[juče u] LT',
        lastWeek : function () {
            var lastWeekDays = [
                '[prošle] [nedelje] [u] LT',
                '[prošlog] [ponedeljka] [u] LT',
                '[prošlog] [utorka] [u] LT',
                '[prošle] [srede] [u] LT',
                '[prošlog] [četvrtka] [u] LT',
                '[prošlog] [petka] [u] LT',
                '[prošle] [subote] [u] LT'
            ];
            return lastWeekDays[this.day()];
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'za %s',
        past   : 'pre %s',
        s      : 'nekoliko sekundi',
        m      : translator.translate,
        mm     : translator.translate,
        h      : translator.translate,
        hh     : translator.translate,
        d      : 'dan',
        dd     : translator.translate,
        M      : 'mesec',
        MM     : translator.translate,
        y      : 'godinu',
        yy     : translator.translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return sr;

})));


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : siSwati [ss]
//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';



var ss = moment.defineLocale('ss', {
    months : "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
    monthsShort : 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
    weekdays : 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
    weekdaysShort : 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
    weekdaysMin : 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Namuhla nga] LT',
        nextDay : '[Kusasa nga] LT',
        nextWeek : 'dddd [nga] LT',
        lastDay : '[Itolo nga] LT',
        lastWeek : 'dddd [leliphelile] [nga] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'nga %s',
        past : 'wenteka nga %s',
        s : 'emizuzwana lomcane',
        m : 'umzuzu',
        mm : '%d emizuzu',
        h : 'lihora',
        hh : '%d emahora',
        d : 'lilanga',
        dd : '%d emalanga',
        M : 'inyanga',
        MM : '%d tinyanga',
        y : 'umnyaka',
        yy : '%d iminyaka'
    },
    meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'ekuseni';
        } else if (hours < 15) {
            return 'emini';
        } else if (hours < 19) {
            return 'entsambama';
        } else {
            return 'ebusuku';
        }
    },
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'ekuseni') {
            return hour;
        } else if (meridiem === 'emini') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
            if (hour === 0) {
                return 0;
            }
            return hour + 12;
        }
    },
    dayOfMonthOrdinalParse: /\d{1,2}/,
    ordinal : '%d',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return ss;

})));


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Swedish [sv]
//! author : Jens Alm : https://github.com/ulmus

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var sv = moment.defineLocale('sv', {
    months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
    weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
    weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
    weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [kl.] HH:mm',
        LLLL : 'dddd D MMMM YYYY [kl.] HH:mm',
        lll : 'D MMM YYYY HH:mm',
        llll : 'ddd D MMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Idag] LT',
        nextDay: '[Imorgon] LT',
        lastDay: '[Igår] LT',
        nextWeek: '[På] dddd LT',
        lastWeek: '[I] dddd[s] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'om %s',
        past : 'för %s sedan',
        s : 'några sekunder',
        m : 'en minut',
        mm : '%d minuter',
        h : 'en timme',
        hh : '%d timmar',
        d : 'en dag',
        dd : '%d dagar',
        M : 'en månad',
        MM : '%d månader',
        y : 'ett år',
        yy : '%d år'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(e|a)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'e' :
            (b === 1) ? 'a' :
            (b === 2) ? 'a' :
            (b === 3) ? 'e' : 'e';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return sv;

})));


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Swahili [sw]
//! author : Fahad Kassim : https://github.com/fadsel

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var sw = moment.defineLocale('sw', {
    months : 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
    weekdays : 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
    weekdaysShort : 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
    weekdaysMin : 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[leo saa] LT',
        nextDay : '[kesho saa] LT',
        nextWeek : '[wiki ijayo] dddd [saat] LT',
        lastDay : '[jana] LT',
        lastWeek : '[wiki iliyopita] dddd [saat] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s baadaye',
        past : 'tokea %s',
        s : 'hivi punde',
        m : 'dakika moja',
        mm : 'dakika %d',
        h : 'saa limoja',
        hh : 'masaa %d',
        d : 'siku moja',
        dd : 'masiku %d',
        M : 'mwezi mmoja',
        MM : 'miezi %d',
        y : 'mwaka mmoja',
        yy : 'miaka %d'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return sw;

})));


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tamil [ta]
//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '௧',
    '2': '௨',
    '3': '௩',
    '4': '௪',
    '5': '௫',
    '6': '௬',
    '7': '௭',
    '8': '௮',
    '9': '௯',
    '0': '௦'
};
var numberMap = {
    '௧': '1',
    '௨': '2',
    '௩': '3',
    '௪': '4',
    '௫': '5',
    '௬': '6',
    '௭': '7',
    '௮': '8',
    '௯': '9',
    '௦': '0'
};

var ta = moment.defineLocale('ta', {
    months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
    monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
    weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
    weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
    weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, HH:mm',
        LLLL : 'dddd, D MMMM YYYY, HH:mm'
    },
    calendar : {
        sameDay : '[இன்று] LT',
        nextDay : '[நாளை] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[நேற்று] LT',
        lastWeek : '[கடந்த வாரம்] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s இல்',
        past : '%s முன்',
        s : 'ஒரு சில விநாடிகள்',
        m : 'ஒரு நிமிடம்',
        mm : '%d நிமிடங்கள்',
        h : 'ஒரு மணி நேரம்',
        hh : '%d மணி நேரம்',
        d : 'ஒரு நாள்',
        dd : '%d நாட்கள்',
        M : 'ஒரு மாதம்',
        MM : '%d மாதங்கள்',
        y : 'ஒரு வருடம்',
        yy : '%d ஆண்டுகள்'
    },
    dayOfMonthOrdinalParse: /\d{1,2}வது/,
    ordinal : function (number) {
        return number + 'வது';
    },
    preparse: function (string) {
        return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    // refer http://ta.wikipedia.org/s/1er1
    meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
    meridiem : function (hour, minute, isLower) {
        if (hour < 2) {
            return ' யாமம்';
        } else if (hour < 6) {
            return ' வைகறை';  // வைகறை
        } else if (hour < 10) {
            return ' காலை'; // காலை
        } else if (hour < 14) {
            return ' நண்பகல்'; // நண்பகல்
        } else if (hour < 18) {
            return ' எற்பாடு'; // எற்பாடு
        } else if (hour < 22) {
            return ' மாலை'; // மாலை
        } else {
            return ' யாமம்';
        }
    },
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'யாமம்') {
            return hour < 2 ? hour : hour + 12;
        } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
            return hour;
        } else if (meridiem === 'நண்பகல்') {
            return hour >= 10 ? hour : hour + 12;
        } else {
            return hour + 12;
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return ta;

})));


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Telugu [te]
//! author : Krishna Chaitanya Thota : https://github.com/kcthota

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var te = moment.defineLocale('te', {
    months : 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
    monthsShort : 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
    monthsParseExact : true,
    weekdays : 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
    weekdaysShort : 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
    weekdaysMin : 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
    longDateFormat : {
        LT : 'A h:mm',
        LTS : 'A h:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm',
        LLLL : 'dddd, D MMMM YYYY, A h:mm'
    },
    calendar : {
        sameDay : '[నేడు] LT',
        nextDay : '[రేపు] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[నిన్న] LT',
        lastWeek : '[గత] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s లో',
        past : '%s క్రితం',
        s : 'కొన్ని క్షణాలు',
        m : 'ఒక నిమిషం',
        mm : '%d నిమిషాలు',
        h : 'ఒక గంట',
        hh : '%d గంటలు',
        d : 'ఒక రోజు',
        dd : '%d రోజులు',
        M : 'ఒక నెల',
        MM : '%d నెలలు',
        y : 'ఒక సంవత్సరం',
        yy : '%d సంవత్సరాలు'
    },
    dayOfMonthOrdinalParse : /\d{1,2}వ/,
    ordinal : '%dవ',
    meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'రాత్రి') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'ఉదయం') {
            return hour;
        } else if (meridiem === 'మధ్యాహ్నం') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'సాయంత్రం') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'రాత్రి';
        } else if (hour < 10) {
            return 'ఉదయం';
        } else if (hour < 17) {
            return 'మధ్యాహ్నం';
        } else if (hour < 20) {
            return 'సాయంత్రం';
        } else {
            return 'రాత్రి';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return te;

})));


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tetun Dili (East Timor) [tet]
//! author : Joshua Brooks : https://github.com/joshbrooks
//! author : Onorio De J. Afonso : https://github.com/marobo

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var tet = moment.defineLocale('tet', {
    months : 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juniu_Juliu_Augustu_Setembru_Outubru_Novembru_Dezembru'.split('_'),
    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Aug_Set_Out_Nov_Dez'.split('_'),
    weekdays : 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sexta_Sabadu'.split('_'),
    weekdaysShort : 'Dom_Seg_Ters_Kua_Kint_Sext_Sab'.split('_'),
    weekdaysMin : 'Do_Seg_Te_Ku_Ki_Sex_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Ohin iha] LT',
        nextDay: '[Aban iha] LT',
        nextWeek: 'dddd [iha] LT',
        lastDay: '[Horiseik iha] LT',
        lastWeek: 'dddd [semana kotuk] [iha] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'iha %s',
        past : '%s liuba',
        s : 'minutu balun',
        m : 'minutu ida',
        mm : 'minutus %d',
        h : 'horas ida',
        hh : 'horas %d',
        d : 'loron ida',
        dd : 'loron %d',
        M : 'fulan ida',
        MM : 'fulan %d',
        y : 'tinan ida',
        yy : 'tinan %d'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return tet;

})));


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Thai [th]
//! author : Kridsada Thanabulpong : https://github.com/sirn

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var th = moment.defineLocale('th', {
    months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
    monthsShort : 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),
    monthsParseExact: true,
    weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
    weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
    weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY เวลา H:mm',
        LLLL : 'วันddddที่ D MMMM YYYY เวลา H:mm'
    },
    meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
    isPM: function (input) {
        return input === 'หลังเที่ยง';
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'ก่อนเที่ยง';
        } else {
            return 'หลังเที่ยง';
        }
    },
    calendar : {
        sameDay : '[วันนี้ เวลา] LT',
        nextDay : '[พรุ่งนี้ เวลา] LT',
        nextWeek : 'dddd[หน้า เวลา] LT',
        lastDay : '[เมื่อวานนี้ เวลา] LT',
        lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'อีก %s',
        past : '%sที่แล้ว',
        s : 'ไม่กี่วินาที',
        m : '1 นาที',
        mm : '%d นาที',
        h : '1 ชั่วโมง',
        hh : '%d ชั่วโมง',
        d : '1 วัน',
        dd : '%d วัน',
        M : '1 เดือน',
        MM : '%d เดือน',
        y : '1 ปี',
        yy : '%d ปี'
    }
});

return th;

})));


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tagalog (Philippines) [tl-ph]
//! author : Dan Hagman : https://github.com/hagmandan

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var tlPh = moment.defineLocale('tl-ph', {
    months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
    monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
    weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
    weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
    weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'MM/D/YYYY',
        LL : 'MMMM D, YYYY',
        LLL : 'MMMM D, YYYY HH:mm',
        LLLL : 'dddd, MMMM DD, YYYY HH:mm'
    },
    calendar : {
        sameDay: 'LT [ngayong araw]',
        nextDay: '[Bukas ng] LT',
        nextWeek: 'LT [sa susunod na] dddd',
        lastDay: 'LT [kahapon]',
        lastWeek: 'LT [noong nakaraang] dddd',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'sa loob ng %s',
        past : '%s ang nakalipas',
        s : 'ilang segundo',
        m : 'isang minuto',
        mm : '%d minuto',
        h : 'isang oras',
        hh : '%d oras',
        d : 'isang araw',
        dd : '%d araw',
        M : 'isang buwan',
        MM : '%d buwan',
        y : 'isang taon',
        yy : '%d taon'
    },
    dayOfMonthOrdinalParse: /\d{1,2}/,
    ordinal : function (number) {
        return number;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return tlPh;

})));


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Klingon [tlh]
//! author : Dominika Kruk : https://github.com/amaranthrose

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

function translateFuture(output) {
    var time = output;
    time = (output.indexOf('jaj') !== -1) ?
    time.slice(0, -3) + 'leS' :
    (output.indexOf('jar') !== -1) ?
    time.slice(0, -3) + 'waQ' :
    (output.indexOf('DIS') !== -1) ?
    time.slice(0, -3) + 'nem' :
    time + ' pIq';
    return time;
}

function translatePast(output) {
    var time = output;
    time = (output.indexOf('jaj') !== -1) ?
    time.slice(0, -3) + 'Hu’' :
    (output.indexOf('jar') !== -1) ?
    time.slice(0, -3) + 'wen' :
    (output.indexOf('DIS') !== -1) ?
    time.slice(0, -3) + 'ben' :
    time + ' ret';
    return time;
}

function translate(number, withoutSuffix, string, isFuture) {
    var numberNoun = numberAsNoun(number);
    switch (string) {
        case 'mm':
            return numberNoun + ' tup';
        case 'hh':
            return numberNoun + ' rep';
        case 'dd':
            return numberNoun + ' jaj';
        case 'MM':
            return numberNoun + ' jar';
        case 'yy':
            return numberNoun + ' DIS';
    }
}

function numberAsNoun(number) {
    var hundred = Math.floor((number % 1000) / 100),
    ten = Math.floor((number % 100) / 10),
    one = number % 10,
    word = '';
    if (hundred > 0) {
        word += numbersNouns[hundred] + 'vatlh';
    }
    if (ten > 0) {
        word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
    }
    if (one > 0) {
        word += ((word !== '') ? ' ' : '') + numbersNouns[one];
    }
    return (word === '') ? 'pagh' : word;
}

var tlh = moment.defineLocale('tlh', {
    months : 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
    monthsShort : 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
    monthsParseExact : true,
    weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
    weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
    weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[DaHjaj] LT',
        nextDay: '[wa’leS] LT',
        nextWeek: 'LLL',
        lastDay: '[wa’Hu’] LT',
        lastWeek: 'LLL',
        sameElse: 'L'
    },
    relativeTime : {
        future : translateFuture,
        past : translatePast,
        s : 'puS lup',
        m : 'wa’ tup',
        mm : translate,
        h : 'wa’ rep',
        hh : translate,
        d : 'wa’ jaj',
        dd : translate,
        M : 'wa’ jar',
        MM : translate,
        y : 'wa’ DIS',
        yy : translate
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return tlh;

})));


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Turkish [tr]
//! authors : Erhan Gundogan : https://github.com/erhangundogan,
//!           Burak Yiğit Kaya: https://github.com/BYK

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var suffixes = {
    1: '\'inci',
    5: '\'inci',
    8: '\'inci',
    70: '\'inci',
    80: '\'inci',
    2: '\'nci',
    7: '\'nci',
    20: '\'nci',
    50: '\'nci',
    3: '\'üncü',
    4: '\'üncü',
    100: '\'üncü',
    6: '\'ncı',
    9: '\'uncu',
    10: '\'uncu',
    30: '\'uncu',
    60: '\'ıncı',
    90: '\'ıncı'
};

var tr = moment.defineLocale('tr', {
    months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
    monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
    weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
    weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
    weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[bugün saat] LT',
        nextDay : '[yarın saat] LT',
        nextWeek : '[haftaya] dddd [saat] LT',
        lastDay : '[dün] LT',
        lastWeek : '[geçen hafta] dddd [saat] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s sonra',
        past : '%s önce',
        s : 'birkaç saniye',
        m : 'bir dakika',
        mm : '%d dakika',
        h : 'bir saat',
        hh : '%d saat',
        d : 'bir gün',
        dd : '%d gün',
        M : 'bir ay',
        MM : '%d ay',
        y : 'bir yıl',
        yy : '%d yıl'
    },
    dayOfMonthOrdinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
    ordinal : function (number) {
        if (number === 0) {  // special case for zero
            return number + '\'ıncı';
        }
        var a = number % 10,
            b = number % 100 - a,
            c = number >= 100 ? 100 : null;
        return number + (suffixes[a] || suffixes[b] || suffixes[c]);
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return tr;

})));


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Talossan [tzl]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v
//! author : Iustì Canun

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


// After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
// This is currently too difficult (maybe even impossible) to add.
var tzl = moment.defineLocale('tzl', {
    months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
    monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
    weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
    weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
    weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM [dallas] YYYY',
        LLL : 'D. MMMM [dallas] YYYY HH.mm',
        LLLL : 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
    },
    meridiemParse: /d\'o|d\'a/i,
    isPM : function (input) {
        return 'd\'o' === input.toLowerCase();
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'd\'o' : 'D\'O';
        } else {
            return isLower ? 'd\'a' : 'D\'A';
        }
    },
    calendar : {
        sameDay : '[oxhi à] LT',
        nextDay : '[demà à] LT',
        nextWeek : 'dddd [à] LT',
        lastDay : '[ieiri à] LT',
        lastWeek : '[sür el] dddd [lasteu à] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'osprei %s',
        past : 'ja%s',
        s : processRelativeTime,
        m : processRelativeTime,
        mm : processRelativeTime,
        h : processRelativeTime,
        hh : processRelativeTime,
        d : processRelativeTime,
        dd : processRelativeTime,
        M : processRelativeTime,
        MM : processRelativeTime,
        y : processRelativeTime,
        yy : processRelativeTime
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        's': ['viensas secunds', '\'iensas secunds'],
        'm': ['\'n míut', '\'iens míut'],
        'mm': [number + ' míuts', '' + number + ' míuts'],
        'h': ['\'n þora', '\'iensa þora'],
        'hh': [number + ' þoras', '' + number + ' þoras'],
        'd': ['\'n ziua', '\'iensa ziua'],
        'dd': [number + ' ziuas', '' + number + ' ziuas'],
        'M': ['\'n mes', '\'iens mes'],
        'MM': [number + ' mesen', '' + number + ' mesen'],
        'y': ['\'n ar', '\'iens ar'],
        'yy': [number + ' ars', '' + number + ' ars']
    };
    return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
}

return tzl;

})));


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Central Atlas Tamazight Latin [tzm-latn]
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var tzmLatn = moment.defineLocale('tzm-latn', {
    months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
    monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
    weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
    weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
    weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[asdkh g] LT',
        nextDay: '[aska g] LT',
        nextWeek: 'dddd [g] LT',
        lastDay: '[assant g] LT',
        lastWeek: 'dddd [g] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'dadkh s yan %s',
        past : 'yan %s',
        s : 'imik',
        m : 'minuḍ',
        mm : '%d minuḍ',
        h : 'saɛa',
        hh : '%d tassaɛin',
        d : 'ass',
        dd : '%d ossan',
        M : 'ayowr',
        MM : '%d iyyirn',
        y : 'asgas',
        yy : '%d isgasn'
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return tzmLatn;

})));


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Central Atlas Tamazight [tzm]
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var tzm = moment.defineLocale('tzm', {
    months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
    monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
    weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
    weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
    weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS: 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
        nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
        nextWeek: 'dddd [ⴴ] LT',
        lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
        lastWeek: 'dddd [ⴴ] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
        past : 'ⵢⴰⵏ %s',
        s : 'ⵉⵎⵉⴽ',
        m : 'ⵎⵉⵏⵓⴺ',
        mm : '%d ⵎⵉⵏⵓⴺ',
        h : 'ⵙⴰⵄⴰ',
        hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
        d : 'ⴰⵙⵙ',
        dd : '%d oⵙⵙⴰⵏ',
        M : 'ⴰⵢoⵓⵔ',
        MM : '%d ⵉⵢⵢⵉⵔⵏ',
        y : 'ⴰⵙⴳⴰⵙ',
        yy : '%d ⵉⵙⴳⴰⵙⵏ'
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return tzm;

})));


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Ukrainian [uk]
//! author : zemlanin : https://github.com/zemlanin
//! Author : Menelion Elensúle : https://github.com/Oire

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function plural(word, num) {
    var forms = word.split('_');
    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
}
function relativeTimeWithPlural(number, withoutSuffix, key) {
    var format = {
        'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
        'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
        'dd': 'день_дні_днів',
        'MM': 'місяць_місяці_місяців',
        'yy': 'рік_роки_років'
    };
    if (key === 'm') {
        return withoutSuffix ? 'хвилина' : 'хвилину';
    }
    else if (key === 'h') {
        return withoutSuffix ? 'година' : 'годину';
    }
    else {
        return number + ' ' + plural(format[key], +number);
    }
}
function weekdaysCaseReplace(m, format) {
    var weekdays = {
        'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
        'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
        'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
    };

    if (!m) {
        return weekdays['nominative'];
    }

    var nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
        'accusative' :
        ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
            'genitive' :
            'nominative');
    return weekdays[nounCase][m.day()];
}
function processHoursFunction(str) {
    return function () {
        return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
    };
}

var uk = moment.defineLocale('uk', {
    months : {
        'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
        'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
    },
    monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
    weekdays : weekdaysCaseReplace,
    weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
    weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY р.',
        LLL : 'D MMMM YYYY р., HH:mm',
        LLLL : 'dddd, D MMMM YYYY р., HH:mm'
    },
    calendar : {
        sameDay: processHoursFunction('[Сьогодні '),
        nextDay: processHoursFunction('[Завтра '),
        lastDay: processHoursFunction('[Вчора '),
        nextWeek: processHoursFunction('[У] dddd ['),
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                    return processHoursFunction('[Минулої] dddd [').call(this);
                case 1:
                case 2:
                case 4:
                    return processHoursFunction('[Минулого] dddd [').call(this);
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'за %s',
        past : '%s тому',
        s : 'декілька секунд',
        m : relativeTimeWithPlural,
        mm : relativeTimeWithPlural,
        h : 'годину',
        hh : relativeTimeWithPlural,
        d : 'день',
        dd : relativeTimeWithPlural,
        M : 'місяць',
        MM : relativeTimeWithPlural,
        y : 'рік',
        yy : relativeTimeWithPlural
    },
    // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
    meridiemParse: /ночі|ранку|дня|вечора/,
    isPM: function (input) {
        return /^(дня|вечора)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'ночі';
        } else if (hour < 12) {
            return 'ранку';
        } else if (hour < 17) {
            return 'дня';
        } else {
            return 'вечора';
        }
    },
    dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
    ordinal: function (number, period) {
        switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
            case 'w':
            case 'W':
                return number + '-й';
            case 'D':
                return number + '-го';
            default:
                return number;
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return uk;

})));


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Urdu [ur]
//! author : Sawood Alam : https://github.com/ibnesayeed
//! author : Zack : https://github.com/ZackVision

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var months = [
    'جنوری',
    'فروری',
    'مارچ',
    'اپریل',
    'مئی',
    'جون',
    'جولائی',
    'اگست',
    'ستمبر',
    'اکتوبر',
    'نومبر',
    'دسمبر'
];
var days = [
    'اتوار',
    'پیر',
    'منگل',
    'بدھ',
    'جمعرات',
    'جمعہ',
    'ہفتہ'
];

var ur = moment.defineLocale('ur', {
    months : months,
    monthsShort : months,
    weekdays : days,
    weekdaysShort : days,
    weekdaysMin : days,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd، D MMMM YYYY HH:mm'
    },
    meridiemParse: /صبح|شام/,
    isPM : function (input) {
        return 'شام' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'صبح';
        }
        return 'شام';
    },
    calendar : {
        sameDay : '[آج بوقت] LT',
        nextDay : '[کل بوقت] LT',
        nextWeek : 'dddd [بوقت] LT',
        lastDay : '[گذشتہ روز بوقت] LT',
        lastWeek : '[گذشتہ] dddd [بوقت] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s بعد',
        past : '%s قبل',
        s : 'چند سیکنڈ',
        m : 'ایک منٹ',
        mm : '%d منٹ',
        h : 'ایک گھنٹہ',
        hh : '%d گھنٹے',
        d : 'ایک دن',
        dd : '%d دن',
        M : 'ایک ماہ',
        MM : '%d ماہ',
        y : 'ایک سال',
        yy : '%d سال'
    },
    preparse: function (string) {
        return string.replace(/،/g, ',');
    },
    postformat: function (string) {
        return string.replace(/,/g, '،');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return ur;

})));


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uzbek Latin [uz-latn]
//! author : Rasulbek Mirzayev : github.com/Rasulbeeek

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var uzLatn = moment.defineLocale('uz-latn', {
    months : 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split('_'),
    monthsShort : 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
    weekdays : 'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split('_'),
    weekdaysShort : 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
    weekdaysMin : 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'D MMMM YYYY, dddd HH:mm'
    },
    calendar : {
        sameDay : '[Bugun soat] LT [da]',
        nextDay : '[Ertaga] LT [da]',
        nextWeek : 'dddd [kuni soat] LT [da]',
        lastDay : '[Kecha soat] LT [da]',
        lastWeek : '[O\'tgan] dddd [kuni soat] LT [da]',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'Yaqin %s ichida',
        past : 'Bir necha %s oldin',
        s : 'soniya',
        m : 'bir daqiqa',
        mm : '%d daqiqa',
        h : 'bir soat',
        hh : '%d soat',
        d : 'bir kun',
        dd : '%d kun',
        M : 'bir oy',
        MM : '%d oy',
        y : 'bir yil',
        yy : '%d yil'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return uzLatn;

})));


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uzbek [uz]
//! author : Sardor Muminov : https://github.com/muminoff

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var uz = moment.defineLocale('uz', {
    months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
    monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
    weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
    weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
    weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'D MMMM YYYY, dddd HH:mm'
    },
    calendar : {
        sameDay : '[Бугун соат] LT [да]',
        nextDay : '[Эртага] LT [да]',
        nextWeek : 'dddd [куни соат] LT [да]',
        lastDay : '[Кеча соат] LT [да]',
        lastWeek : '[Утган] dddd [куни соат] LT [да]',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'Якин %s ичида',
        past : 'Бир неча %s олдин',
        s : 'фурсат',
        m : 'бир дакика',
        mm : '%d дакика',
        h : 'бир соат',
        hh : '%d соат',
        d : 'бир кун',
        dd : '%d кун',
        M : 'бир ой',
        MM : '%d ой',
        y : 'бир йил',
        yy : '%d йил'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 4th is the first week of the year.
    }
});

return uz;

})));


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Vietnamese [vi]
//! author : Bang Nguyen : https://github.com/bangnk

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var vi = moment.defineLocale('vi', {
    months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
    monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
    monthsParseExact : true,
    weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
    weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
    weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
    weekdaysParseExact : true,
    meridiemParse: /sa|ch/i,
    isPM : function (input) {
        return /^ch$/i.test(input);
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 12) {
            return isLower ? 'sa' : 'SA';
        } else {
            return isLower ? 'ch' : 'CH';
        }
    },
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM [năm] YYYY',
        LLL : 'D MMMM [năm] YYYY HH:mm',
        LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',
        l : 'DD/M/YYYY',
        ll : 'D MMM YYYY',
        lll : 'D MMM YYYY HH:mm',
        llll : 'ddd, D MMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Hôm nay lúc] LT',
        nextDay: '[Ngày mai lúc] LT',
        nextWeek: 'dddd [tuần tới lúc] LT',
        lastDay: '[Hôm qua lúc] LT',
        lastWeek: 'dddd [tuần rồi lúc] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : '%s tới',
        past : '%s trước',
        s : 'vài giây',
        m : 'một phút',
        mm : '%d phút',
        h : 'một giờ',
        hh : '%d giờ',
        d : 'một ngày',
        dd : '%d ngày',
        M : 'một tháng',
        MM : '%d tháng',
        y : 'một năm',
        yy : '%d năm'
    },
    dayOfMonthOrdinalParse: /\d{1,2}/,
    ordinal : function (number) {
        return number;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return vi;

})));


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Pseudo [x-pseudo]
//! author : Andrew Hood : https://github.com/andrewhood125

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var xPseudo = moment.defineLocale('x-pseudo', {
    months : 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
    monthsShort : 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
    monthsParseExact : true,
    weekdays : 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
    weekdaysShort : 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
    weekdaysMin : 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[T~ódá~ý át] LT',
        nextDay : '[T~ómó~rró~w át] LT',
        nextWeek : 'dddd [át] LT',
        lastDay : '[Ý~ést~érdá~ý át] LT',
        lastWeek : '[L~ást] dddd [át] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'í~ñ %s',
        past : '%s á~gó',
        s : 'á ~féw ~sécó~ñds',
        m : 'á ~míñ~úté',
        mm : '%d m~íñú~tés',
        h : 'á~ñ hó~úr',
        hh : '%d h~óúrs',
        d : 'á ~dáý',
        dd : '%d d~áýs',
        M : 'á ~móñ~th',
        MM : '%d m~óñt~hs',
        y : 'á ~ýéár',
        yy : '%d ý~éárs'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return xPseudo;

})));


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Yoruba Nigeria [yo]
//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var yo = moment.defineLocale('yo', {
    months : 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split('_'),
    monthsShort : 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
    weekdays : 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
    weekdaysShort : 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
    weekdaysMin : 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Ònì ni] LT',
        nextDay : '[Ọ̀la ni] LT',
        nextWeek : 'dddd [Ọsẹ̀ tón\'bọ] [ni] LT',
        lastDay : '[Àna ni] LT',
        lastWeek : 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'ní %s',
        past : '%s kọjá',
        s : 'ìsẹjú aayá die',
        m : 'ìsẹjú kan',
        mm : 'ìsẹjú %d',
        h : 'wákati kan',
        hh : 'wákati %d',
        d : 'ọjọ́ kan',
        dd : 'ọjọ́ %d',
        M : 'osù kan',
        MM : 'osù %d',
        y : 'ọdún kan',
        yy : 'ọdún %d'
    },
    dayOfMonthOrdinalParse : /ọjọ́\s\d{1,2}/,
    ordinal : 'ọjọ́ %d',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4 // The week that contains Jan 4th is the first week of the year.
    }
});

return yo;

})));


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (China) [zh-cn]
//! author : suupic : https://github.com/suupic
//! author : Zeno Zeng : https://github.com/zenozeng

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var zhCn = moment.defineLocale('zh-cn', {
    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
    weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY年MMMD日',
        LL : 'YYYY年MMMD日',
        LLL : 'YYYY年MMMD日Ah点mm分',
        LLLL : 'YYYY年MMMD日ddddAh点mm分',
        l : 'YYYY年MMMD日',
        ll : 'YYYY年MMMD日',
        lll : 'YYYY年MMMD日 HH:mm',
        llll : 'YYYY年MMMD日dddd HH:mm'
    },
    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
    meridiemHour: function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === '凌晨' || meridiem === '早上' ||
                meridiem === '上午') {
            return hour;
        } else if (meridiem === '下午' || meridiem === '晚上') {
            return hour + 12;
        } else {
            // '中午'
            return hour >= 11 ? hour : hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        var hm = hour * 100 + minute;
        if (hm < 600) {
            return '凌晨';
        } else if (hm < 900) {
            return '早上';
        } else if (hm < 1130) {
            return '上午';
        } else if (hm < 1230) {
            return '中午';
        } else if (hm < 1800) {
            return '下午';
        } else {
            return '晚上';
        }
    },
    calendar : {
        sameDay : '[今天]LT',
        nextDay : '[明天]LT',
        nextWeek : '[下]ddddLT',
        lastDay : '[昨天]LT',
        lastWeek : '[上]ddddLT',
        sameElse : 'L'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
    ordinal : function (number, period) {
        switch (period) {
            case 'd':
            case 'D':
            case 'DDD':
                return number + '日';
            case 'M':
                return number + '月';
            case 'w':
            case 'W':
                return number + '周';
            default:
                return number;
        }
    },
    relativeTime : {
        future : '%s内',
        past : '%s前',
        s : '几秒',
        m : '1 分钟',
        mm : '%d 分钟',
        h : '1 小时',
        hh : '%d 小时',
        d : '1 天',
        dd : '%d 天',
        M : '1 个月',
        MM : '%d 个月',
        y : '1 年',
        yy : '%d 年'
    },
    week : {
        // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return zhCn;

})));


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Hong Kong) [zh-hk]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris
//! author : Konstantin : https://github.com/skfd

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var zhHk = moment.defineLocale('zh-hk', {
    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
    weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY年MMMD日',
        LL : 'YYYY年MMMD日',
        LLL : 'YYYY年MMMD日 HH:mm',
        LLLL : 'YYYY年MMMD日dddd HH:mm',
        l : 'YYYY年MMMD日',
        ll : 'YYYY年MMMD日',
        lll : 'YYYY年MMMD日 HH:mm',
        llll : 'YYYY年MMMD日dddd HH:mm'
    },
    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
            return hour;
        } else if (meridiem === '中午') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === '下午' || meridiem === '晚上') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        var hm = hour * 100 + minute;
        if (hm < 600) {
            return '凌晨';
        } else if (hm < 900) {
            return '早上';
        } else if (hm < 1130) {
            return '上午';
        } else if (hm < 1230) {
            return '中午';
        } else if (hm < 1800) {
            return '下午';
        } else {
            return '晚上';
        }
    },
    calendar : {
        sameDay : '[今天]LT',
        nextDay : '[明天]LT',
        nextWeek : '[下]ddddLT',
        lastDay : '[昨天]LT',
        lastWeek : '[上]ddddLT',
        sameElse : 'L'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
    ordinal : function (number, period) {
        switch (period) {
            case 'd' :
            case 'D' :
            case 'DDD' :
                return number + '日';
            case 'M' :
                return number + '月';
            case 'w' :
            case 'W' :
                return number + '週';
            default :
                return number;
        }
    },
    relativeTime : {
        future : '%s內',
        past : '%s前',
        s : '幾秒',
        m : '1 分鐘',
        mm : '%d 分鐘',
        h : '1 小時',
        hh : '%d 小時',
        d : '1 天',
        dd : '%d 天',
        M : '1 個月',
        MM : '%d 個月',
        y : '1 年',
        yy : '%d 年'
    }
});

return zhHk;

})));


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Taiwan) [zh-tw]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris

;(function (global, factory) {
    true ? factory(__webpack_require__(0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var zhTw = moment.defineLocale('zh-tw', {
    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
    weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY年MMMD日',
        LL : 'YYYY年MMMD日',
        LLL : 'YYYY年MMMD日 HH:mm',
        LLLL : 'YYYY年MMMD日dddd HH:mm',
        l : 'YYYY年MMMD日',
        ll : 'YYYY年MMMD日',
        lll : 'YYYY年MMMD日 HH:mm',
        llll : 'YYYY年MMMD日dddd HH:mm'
    },
    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
            return hour;
        } else if (meridiem === '中午') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === '下午' || meridiem === '晚上') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        var hm = hour * 100 + minute;
        if (hm < 600) {
            return '凌晨';
        } else if (hm < 900) {
            return '早上';
        } else if (hm < 1130) {
            return '上午';
        } else if (hm < 1230) {
            return '中午';
        } else if (hm < 1800) {
            return '下午';
        } else {
            return '晚上';
        }
    },
    calendar : {
        sameDay : '[今天]LT',
        nextDay : '[明天]LT',
        nextWeek : '[下]ddddLT',
        lastDay : '[昨天]LT',
        lastWeek : '[上]ddddLT',
        sameElse : 'L'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
    ordinal : function (number, period) {
        switch (period) {
            case 'd' :
            case 'D' :
            case 'DDD' :
                return number + '日';
            case 'M' :
                return number + '月';
            case 'w' :
            case 'W' :
                return number + '週';
            default :
                return number;
        }
    },
    relativeTime : {
        future : '%s內',
        past : '%s前',
        s : '幾秒',
        m : '1 分鐘',
        mm : '%d 分鐘',
        h : '1 小時',
        hh : '%d 小時',
        d : '1 天',
        dd : '%d 天',
        M : '1 個月',
        MM : '%d 個月',
        y : '1 年',
        yy : '%d 年'
    }
});

return zhTw;

})));


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var ng = __webpack_require__(1);
var primeng_1 = __webpack_require__(2);
var router_1 = __webpack_require__(5);
var forms_1 = __webpack_require__(6);
var setup_service_1 = __webpack_require__(11);
var global_constants_1 = __webpack_require__(15);
var angular2_uuid_1 = __webpack_require__(23);
var ChangePasswordComponent = (function () {
    function ChangePasswordComponent(fb, _router, _setupService) {
        this.fb = fb;
        this._router = _router;
        this._setupService = _setupService;
        this.userid = global_constants_1.AppSettings.ADMIN_ID;
        this.msgs = [];
        this.changePassword = {
            id: angular2_uuid_1.UUID.UUID(),
            userId: '',
            password: '',
            newPassword: '',
            confirmPassword: '',
            firstName: '',
            lastName: '',
            imgUrl: '',
            emailId: '',
            primaryContact: '',
            secondarycontact: '',
            organizationid: global_constants_1.AppSettings.ORGANIZATION_ID,
            createDate: new Date(),
            lastUpdated: new Date(),
        };
    }
    ChangePasswordComponent.prototype.updateAdminPassword = function () {
        var _this = this;
        this.updatedPassword = {};
        this.updatedPassword.password = this.changePassword.password;
        this.updatedPassword.newPassword = this.changePassword.newPassword;
        this.updatedPassword.confirmPassword = this.changePassword.confirmPassword;
        this.updatedPassword.organizationid = global_constants_1.AppSettings.ORGANIZATION_ID;
        if (this.userid) {
            this._setupService.updateAdminPassword(this.userid, this.updatedPassword).subscribe(function (response) {
                if (response != null) {
                    _this._router.navigate(['/home', { 'growlMsgs': 1 }]);
                }
                else {
                    _this.msgs = [];
                    _this.msgs.push({ severity: 'error', summary: 'Current password not matched' });
                }
            });
        }
    };
    ChangePasswordComponent.prototype.ngOnInit = function () {
        this.passwordForm = this.fb.group({
            'password': new forms_1.FormControl('', forms_1.Validators.required),
            'newPassword': new forms_1.FormControl('', forms_1.Validators.compose([forms_1.Validators.required, forms_1.Validators.minLength(4)])),
            'confirmPassword': new forms_1.FormControl(''),
        }, { validator: this.matchingPasswords('newPassword', 'confirmPassword') });
    };
    ChangePasswordComponent.prototype.matchingPasswords = function (passwordKey, confirmPasswordKey) {
        return function (group) {
            var newPassword = group.controls[passwordKey];
            var confirmPassword = group.controls[confirmPasswordKey];
            if (newPassword.value !== confirmPassword.value) {
                return {
                    mismatchedPasswords: true
                };
            }
        };
    };
    return ChangePasswordComponent;
}());
ChangePasswordComponent = tslib_1.__decorate([
    ng.Component({
        selector: 'changepassword',
        template: __webpack_require__(203),
        providers: [primeng_1.ConfirmationService, setup_service_1.SetupService]
    }),
    tslib_1.__metadata("design:paramtypes", [forms_1.FormBuilder, router_1.Router, setup_service_1.SetupService])
], ChangePasswordComponent);
exports.ChangePasswordComponent = ChangePasswordComponent;


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var primeng_1 = __webpack_require__(2);
var http_1 = __webpack_require__(12);
var router_1 = __webpack_require__(5);
var setup_service_1 = __webpack_require__(11);
var moment = __webpack_require__(0);
var Rx_1 = __webpack_require__(14);
var ChartComponent = (function () {
    function ChartComponent(http, _setupService, activatedRoute, _router) {
        var _this = this;
        this._setupService = _setupService;
        this.activatedRoute = activatedRoute;
        this._router = _router;
        this.organizationId = localStorage.getItem("OrganizationId");
        this.section = null;
        this.pSection = null;
        this.pClass = null;
        this.present = true;
        this.absent = true;
        this.onLeave = true;
        this.selectedTab = 0;
        this.markedAbsentList = [];
        this.markedAbsconedList = [];
        this.http = http;
        this.selectedDate = moment(new Date()).format('YYYY-MM-DD');
        //this.selectedDate = moment(new Date()).toDate();
        this._setupService.getGrade().subscribe(function (response) {
            _this.totalGrades = [];
            _this.gradeDetails = response;
            for (var _i = 0, _a = _this.gradeDetails; _i < _a.length; _i++) {
                var grades = _a[_i];
                if (_this.totalGrades.indexOf(grades.grade) == -1) {
                    _this.totalGrades.push(grades.grade);
                }
            }
            _this.createclassList();
        });
        this.pClass = "School";
        this.patronClass = null;
        this.section = "";
        this.showPresentPatron();
        this.showScatterChart();
    }
    ChartComponent.prototype.handleChange = function (e) {
        if (e.index == 0) {
            this.selectedTab = 0;
        }
        else if (e.index == 1) {
            this.selectedTab = 1;
        }
        else if (e.index == 2) {
            this.selectedTab = 2;
        }
        else if (e.index == 3) {
            this.selectedTab = 3;
        }
        else if (e.index == 4) {
            this.selectedTab = 4;
        }
    };
    ChartComponent.prototype.activateTab = function (tabNumber) {
        this.selectedTab = tabNumber;
    };
    ChartComponent.prototype.selectData1 = function () {
    };
    ChartComponent.prototype.getPatronTrackingData = function (trackingTypeList) {
        var _this = this;
        this.trackingTypeDetails = [];
        var patronInfo;
        this._setupService.getPatron().subscribe(function (result) {
            _this.patronDetailList1 = result;
            _this.presentPatronImageList = [];
            for (var _i = 0, trackingTypeList_1 = trackingTypeList; _i < trackingTypeList_1.length; _i++) {
                var item = trackingTypeList_1[_i];
                _this.presentPatronImage = {};
                if (!item.isAbsconed) {
                    _this.patronTracking = {};
                    patronInfo = _this.patronDetailList1.find(function (x) { return x.id == item.patronId; });
                    if (patronInfo != null) {
                        _this.patronTracking.firstName = patronInfo.firstName;
                        _this.patronTracking.lastName = patronInfo.lastName;
                        _this.patronTracking.section = patronInfo.section;
                        _this.patronTracking.class = patronInfo.class.toString();
                        _this.patronTracking.rollNumber = patronInfo.rollNo;
                        _this.patronTracking.trackingTime = moment(item.trackingTime, 'H:mm').format('h:mm a');
                        _this.presentPatronImage.patronTracking = _this.patronTracking;
                        _this.presentPatronImage.imagePath = patronInfo.imgUrl;
                        _this.presentPatronImageList.push(_this.presentPatronImage);
                    }
                }
            }
        });
    };
    ChartComponent.prototype.getSelectedDate = function (value) {
        var a = this.selectedDate;
        var b = moment(a).format('YYYY-MM-DD');
        this.selectedDate = b;
        this.patronClass = this.patronClass;
        this.section = this.section;
        this.showPresentPatron();
        this.showScatterChart();
    };
    ChartComponent.prototype.getpresentpatron = function (value) {
        this.pClass = "School";
        this.patronClass = null;
        this.section = null;
        this.showPresentPatron();
        this.showScatterChart();
        this.msgs = [];
        this.msgs.push({ severity: 'info', summary: 'Info message', detail: 'patron tracking by school' });
    };
    ChartComponent.prototype.createclassList = function () {
        this.classList = [];
        this.sectonList = [];
        this.classList.push({ label: 'Class', value: null });
        this.sectonList.push({ label: 'Section', value: 'Section' });
        for (var i = 0; i < this.totalGrades.length; i++) {
            this.classList.push({ label: this.totalGrades[i], value: this.totalGrades[i] });
        }
    };
    ChartComponent.prototype.getSelectedClassSection = function () {
        var _this = this;
        this.sectonList = [];
        var classSection;
        this.sectonList.push({ label: 'Section', value: 'Section' });
        classSection = this.gradeDetails.filter(function (x) { return x.grade == _this.patronClass; }).sort();
        for (var i = 0; i < classSection.length; i++) {
            this.sectonList.push({ label: classSection[i].section, value: classSection[i].section });
        }
    };
    ChartComponent.prototype.showPresentPatron = function () {
        var _this = this;
        var updatedPatronList = [];
        this.markedAbsconedList = [];
        if (this.patronClass == null) {
            this._setupService.getPresentPatron(this.selectedDate).subscribe(function (result) {
                _this.presentPatron = result;
                _this.getPatronTrackingData(_this.presentPatron);
                _this._setupService.getPatronOnLeave(_this.selectedDate).subscribe(function (result) {
                    _this.patronLeaveDetail = result;
                    for (var _i = 0, _a = _this.presentPatron; _i < _a.length; _i++) {
                        var pat = _a[_i];
                        if (pat.isMarkedAbsent) {
                            _this.markedAbsentList.push(pat);
                        }
                        if (pat.isAbsconed) {
                            _this.markedAbsconedList.push(pat);
                        }
                        if (_this.patronLeaveDetail.find(function (x) { return x.patronId == pat.patronId; })) {
                            updatedPatronList.push(pat);
                        }
                    }
                    _this._setupService.getPatron().subscribe(function (result) {
                        _this.totalPatronList = result;
                        _this.totalPatron = _this.totalPatronList.length;
                        _this.presentPatronCount = _this.presentPatron.length - _this.markedAbsconedList.length;
                        _this.absconedPatronCount = _this.markedAbsconedList.length;
                        _this.presentOnleave = _this.patronLeaveDetail.length - updatedPatronList.length;
                        _this.absentpatron = _this.totalPatron - (_this.presentPatronCount + _this.absconedPatronCount + _this.presentOnleave);
                        _this.showOnLeavePatron();
                    });
                });
            });
        }
        else {
            this._setupService.getPresentPatronByClass(this.patronClass, this.section, this.selectedDate).subscribe(function (result) {
                _this.presentPatron = result;
                _this.getPatronTrackingData(_this.presentPatron);
                _this._setupService.getPatronOnLeaveByClass(_this.patronClass, _this.section, _this.selectedDate).subscribe(function (result) {
                    _this.patronLeaveDetail = result;
                    for (var _i = 0, _a = _this.presentPatron; _i < _a.length; _i++) {
                        var pat = _a[_i];
                        if (pat.isMarkedAbsent) {
                            _this.markedAbsentList.push(pat);
                        }
                        if (pat.isAbsconed) {
                            _this.markedAbsconedList.push(pat);
                        }
                        if (_this.patronLeaveDetail.find(function (x) { return x.patronId == pat.patronId; })) {
                            updatedPatronList.push(pat);
                        }
                    }
                    _this._setupService.getClassPatron(_this.patronClass, _this.section, _this.selectedDate).subscribe(function (result) {
                        _this.totalPatronList = result;
                        _this.totalPatron = _this.totalPatronList.length;
                        _this.presentPatronCount = _this.presentPatron.length - _this.markedAbsconedList.length;
                        _this.absconedPatronCount = _this.markedAbsconedList.length;
                        _this.presentOnleave = _this.patronLeaveDetail.length - updatedPatronList.length;
                        _this.absentpatron = _this.totalPatron - (_this.presentPatron.length + _this.absconedPatronCount + _this.presentOnleave);
                        _this.showOnLeavePatron();
                    });
                });
            });
        }
    };
    ChartComponent.prototype.showOnLeavePatron = function () {
        var _this = this;
        var observables = new Array();
        var patronOnLeaveDescription;
        var OnLeaveRemoved = new Array();
        this.patronOnLeaveDescriptionList = [];
        for (var _i = 0, _a = this.patronLeaveDetail; _i < _a.length; _i++) {
            var leave = _a[_i];
            OnLeaveRemoved = this.presentPatron.filter(function (a) { return a.patronId == leave.patronId; });
            if (OnLeaveRemoved.length == 0) {
                observables.push(this._setupService.getPatronById(leave.patronId));
            }
        }
        Rx_1.Observable.forkJoin(observables).subscribe(function (result) {
            _this.patronDetailList1 = result;
            for (var i = 0; i < _this.patronDetailList1.length; i++) {
                if (_this.patronLeaveDetail.find(function (x) { return x.patronId == _this.patronDetailList1[i].id; })) {
                    patronOnLeaveDescription = {};
                    patronOnLeaveDescription.patronInfo = _this.patronDetailList1[i];
                    patronOnLeaveDescription.description = _this.patronLeaveDetail[i].description;
                    patronOnLeaveDescription.imagePath = _this.patronDetailList1[i].imgUrl;
                    _this.patronOnLeaveDescriptionList.push(patronOnLeaveDescription);
                }
            }
        });
        this.showAbsentPatron();
    };
    ChartComponent.prototype.showAbsentPatron = function () {
        var _this = this;
        var tempPatronAbsentList = new Array();
        this.absentPatronList = [];
        this.tempAbsentPatronList = [];
        for (var i = 0; i < this.totalPatronList.length; i++) {
            var patronTrack = new Array();
            patronTrack = this.presentPatron.filter(function (a) { return a.patronId == _this.totalPatronList[i].id; });
            if (patronTrack.length == 0) {
                this.tempAbsentPatronList.push(this.totalPatronList[i]);
            }
        }
        for (var _i = 0, _a = this.tempAbsentPatronList; _i < _a.length; _i++) {
            var pat = _a[_i];
            var patronLeave = new Array();
            patronLeave = this.patronLeaveDetail.filter(function (a) { return a.patronId == pat.id; });
            if (patronLeave.length == 0) {
                this.absentPatronList.push(pat);
            }
        }
        this.showAbsconedPatron();
    };
    ChartComponent.prototype.showAbsconedPatron = function () {
        var _this = this;
        this.absconedPatronDetailList = [];
        for (var _i = 0, _a = this.markedAbsconedList; _i < _a.length; _i++) {
            var absconedPatron = _a[_i];
            if (absconedPatron != null) {
                this._setupService.getPatronById(absconedPatron.patronId).subscribe(function (result) {
                    _this.absconedPatronDetail = result;
                    _this.absconedPatronDetailList.push(_this.absconedPatronDetail);
                });
            }
        }
    };
    ChartComponent.prototype.updateAttendance = function (selectedPatron) {
        var _this = this;
        var patronTracking = {};
        patronTracking.patronId = selectedPatron.id;
        patronTracking.class = selectedPatron.class.toString();
        patronTracking.section = selectedPatron.section;
        patronTracking.organizationid = this.organizationId;
        patronTracking.trackingDate = this.selectedDate;
        patronTracking.trackingTime = moment(new Date()).format('HH:mm');
        patronTracking.createDate = new Date();
        this._setupService.markPresent(patronTracking).subscribe(function (result) {
            _this.showPresentPatron();
            _this.showScatterChart();
        });
    };
    ChartComponent.prototype.updateAttendance1 = function (selectedPatron) {
        var _this = this;
        var patronTracking = {};
        patronTracking.patronId = selectedPatron.patronInfo.id;
        patronTracking.class = selectedPatron.patronInfo.class.toString();
        patronTracking.section = selectedPatron.patronInfo.section;
        patronTracking.organizationid = this.organizationId;
        patronTracking.trackingDate = this.selectedDate;
        patronTracking.trackingTime = moment(new Date()).format('HH:mm');
        patronTracking.createDate = new Date();
        this._setupService.markPresent(patronTracking).subscribe(function (result) {
            _this.showPresentPatron();
            _this.showScatterChart();
        });
    };
    ChartComponent.prototype.showScatterChart = function () {
        var _this = this;
        if (this.patronClass == null) {
            this._setupService.getPresentPatron(this.selectedDate).subscribe(function (result) {
                _this.presentPatron = result;
                var tempStartTime = '07:00';
                _this.patronCountArr = new Array();
                if (_this.presentPatron.length > 0) {
                    for (var i = 0; i <= 30; i++) {
                        var noPatron = 0;
                        var patronCount = new Array();
                        var beginningTime = moment(tempStartTime, 'HH:mm');
                        var startTime = beginningTime.format('HH:mm');
                        var endTime = moment(beginningTime).startOf('minutes').add(10, 'minutes').format('HH:mm');
                        patronCount = _this.presentPatron.filter(function (x) { return x.trackingTime >= startTime && x.trackingTime < endTime; });
                        if (patronCount.length > 0) {
                            _this.patronCountArr.push(Number(patronCount.length));
                        }
                        else {
                            _this.patronCountArr.push(Number(noPatron));
                        }
                        tempStartTime = endTime;
                    }
                }
                _this.updateLine(_this.chart);
            });
        }
        else {
            this._setupService.getPresentPatronByClass(this.patronClass, this.section, this.selectedDate).subscribe(function (result) {
                _this.presentPatron = result;
                var tempStartTime = '07:00';
                _this.patronCountArr = new Array();
                if (_this.presentPatron.length > 0) {
                    for (var i = 0; i <= 30; i++) {
                        var noPatron = 0;
                        var patronCount = new Array();
                        var beginningTime = moment(tempStartTime, 'HH:mm');
                        var startTime = beginningTime.format('HH:mm');
                        var endTime = moment(beginningTime).startOf('minutes').add(10, 'minutes').format('HH:mm');
                        patronCount = _this.presentPatron.filter(function (x) { return x.trackingTime >= startTime && x.trackingTime < endTime; });
                        if (patronCount.length > 0) {
                            _this.patronCountArr.push(Number(patronCount.length));
                        }
                        else {
                            _this.patronCountArr.push(Number(noPatron));
                        }
                        tempStartTime = endTime;
                    }
                }
            });
        }
        this.data1 = {
            labels: ['7:00', '7:10', '7:20', '7:30', '7:40', '7:50 ',
                '8:00', '8:10', '8:20', '8:30', '8:40', '8:50',
                '9:00', '9:10', '9:20', '9:30', '9:40', '9:50',
                '10:00', '10:10', '10:20', '10:30', '10:40', '10:50',
                '11:00', '11:10', '11:20', '11:30', '11:40', '11:50', '12:00'
            ],
            datasets: [
                {
                    label: 'Present Patron',
                    data: [
                        this.patronCountArr != null ? this.patronCountArr[0] : 0, this.patronCountArr != null ? this.patronCountArr[1] : 0, this.patronCountArr != null ? this.patronCountArr[2] : 0, this.patronCountArr != null ? this.patronCountArr[3] : 0,
                        this.patronCountArr != null ? this.patronCountArr[4] : 0, this.patronCountArr != null ? this.patronCountArr[5] : 0, this.patronCountArr != null ? this.patronCountArr[6] : 0, this.patronCountArr != null ? this.patronCountArr[7] : 0, this.patronCountArr != null ? this.patronCountArr[8] : 0,
                        this.patronCountArr != null ? this.patronCountArr[9] : 0, this.patronCountArr != null ? this.patronCountArr[10] : 0, this.patronCountArr != null ? this.patronCountArr[11] : 0, this.patronCountArr != null ? this.patronCountArr[12] : 0, this.patronCountArr != null ? this.patronCountArr[13] : 0,
                        this.patronCountArr != null ? this.patronCountArr[14] : 0, this.patronCountArr != null ? this.patronCountArr[15] : 0, this.patronCountArr != null ? this.patronCountArr[16] : 0, this.patronCountArr != null ? this.patronCountArr[17] : 0, this.patronCountArr != null ? this.patronCountArr[18] : 0,
                        this.patronCountArr != null ? this.patronCountArr[19] : 0, this.patronCountArr != null ? this.patronCountArr[20] : 0, this.patronCountArr != null ? this.patronCountArr[21] : 0, this.patronCountArr != null ? this.patronCountArr[22] : 0, this.patronCountArr != null ? this.patronCountArr[23] : 0,
                        this.patronCountArr != null ? this.patronCountArr[24] : 0, this.patronCountArr != null ? this.patronCountArr[25] : 0, this.patronCountArr != null ? this.patronCountArr[26] : 0, this.patronCountArr != null ? this.patronCountArr[27] : 0, this.patronCountArr != null ? this.patronCountArr[28] : 0,
                        this.patronCountArr != null ? this.patronCountArr[29] : 0, this.patronCountArr != null ? this.patronCountArr[30] : 0,
                    ],
                    fill: false,
                    backgroundColor: '#42A5F5',
                    borderColor: "#1E88E5",
                },
            ]
        };
    };
    ChartComponent.prototype.updateLine = function (chart) {
        this.data1.datasets[0].data = [this.patronCountArr.length > 0 ? this.patronCountArr[0] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[1] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[2] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[3] : 0,
            this.patronCountArr.length > 0 ? this.patronCountArr[4] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[5] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[6] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[7] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[8] : 0,
            this.patronCountArr.length > 0 ? this.patronCountArr[9] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[10] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[11] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[12] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[13] : 0,
            this.patronCountArr.length > 0 ? this.patronCountArr[14] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[15] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[16] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[17] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[18] : 0,
            this.patronCountArr.length > 0 ? this.patronCountArr[19] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[20] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[21] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[22] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[23] : 0,
            this.patronCountArr.length > 0 ? this.patronCountArr[24] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[25] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[26] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[27] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[28] : 0,
            this.patronCountArr.length > 0 ? this.patronCountArr[29] : 0, this.patronCountArr.length > 0 ? this.patronCountArr[30] : 0
        ];
        chart.refresh();
    };
    ChartComponent.prototype.itemClick = function (event, item) {
        if (!item.url || item.routerLink) {
            event.preventDefault();
        }
        if (item.command) {
            if (!item.eventEmitter) {
                item.eventEmitter = new core_1.EventEmitter();
                item.eventEmitter.subscribe(item.command);
            }
            else {
                item.eventEmitter.unsubscribe();
                item.eventEmitter = new core_1.EventEmitter();
                item.eventEmitter.subscribe(item.command);
            }
            item.eventEmitter.emit({
                originalEvent: event,
                item: item
            });
        }
        if (item.routerLink) {
            this._router.navigate(item.routerLink);
        }
        this.activeItem = null;
        this.activeLink = null;
    };
    ChartComponent.prototype.ngOnInit = function () {
    };
    ChartComponent.prototype.download = function () {
        var tempList = [];
        if (this.selectedTab == 1) {
            for (var _i = 0, _a = this.presentPatronImageList; _i < _a.length; _i++) {
                var patron = _a[_i];
                tempList.push({
                    "Name": patron.patronTracking.patronName,
                    "Class ": patron.patronTracking.class,
                    "Section": patron.patronTracking.section,
                    "TrackingTime": patron.patronTracking.trackingTime,
                });
            }
        }
        if (this.selectedTab == 2) {
            for (var _b = 0, _c = this.absentPatronList; _b < _c.length; _b++) {
                var absentPatron = _c[_b];
                tempList.push({
                    "Name": absentPatron.firstName + " " + absentPatron.lastName,
                    "Class ": absentPatron.class,
                    "Section": absentPatron.section,
                    "RollNumber": absentPatron.rollNo,
                });
            }
        }
        if (this.selectedTab == 3) {
            for (var _d = 0, _e = this.patronOnLeaveDescriptionList; _d < _e.length; _d++) {
                var leavePatron = _e[_d];
                tempList.push({
                    "Name": leavePatron.patronInfo.firstName + " " + leavePatron.patronInfo.lastName,
                    "Class ": leavePatron.patronInfo.class,
                    "Section": leavePatron.patronInfo.section,
                    "RollNumber": leavePatron.patronInfo.rollNo,
                    "Description": leavePatron.description,
                });
            }
        }
        if (this.selectedTab == 4) {
            for (var _f = 0, _g = this.absconedPatronDetailList; _f < _g.length; _f++) {
                var absconedPatron = _g[_f];
                tempList.push({
                    "Name": absconedPatron.firstName + " " + absconedPatron.lastName,
                    "Class ": absconedPatron.class,
                    "Section": absconedPatron.section,
                    "RollNumber": absconedPatron.rollNo,
                });
            }
        }
        var csvData = this.ConvertToCSV(tempList);
        var a = document.createElement("a");
        a.setAttribute('style', 'display:none;');
        document.body.appendChild(a);
        var blob = new Blob([csvData], { type: 'text/csv' });
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = 'file.csv';
        a.click();
    };
    ChartComponent.prototype.ConvertToCSV = function (objArray) {
        var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
        var str = '';
        var row = "";
        for (var index in objArray[0]) {
            //Now convert each value to string and comma-separated
            row += index + ',';
        }
        row = row.slice(0, -1);
        //append Label row with line break
        str += row + '\r\n';
        for (var i = 0; i < array.length; i++) {
            var line = '';
            for (var index in array[i]) {
                if (line != '')
                    line += ',';
                line += array[i][index];
            }
            str += line + '\r\n';
        }
        return str;
    };
    return ChartComponent;
}());
tslib_1.__decorate([
    core_1.ViewChild("chart"),
    tslib_1.__metadata("design:type", primeng_1.UIChart
    // @ViewChild("chartLine") chartLine:  UIChart
    )
], ChartComponent.prototype, "chart", void 0);
ChartComponent = tslib_1.__decorate([
    core_1.Component({
        selector: 'chart',
        template: __webpack_require__(204),
        providers: [setup_service_1.SetupService]
    }),
    tslib_1.__metadata("design:paramtypes", [http_1.Http, setup_service_1.SetupService, router_1.ActivatedRoute, router_1.Router])
], ChartComponent);
exports.ChartComponent = ChartComponent;


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var forms_1 = __webpack_require__(6);
var router_1 = __webpack_require__(5);
var core_2 = __webpack_require__(304);
var http_1 = __webpack_require__(12);
var ng_bootstrap_1 = __webpack_require__(302);
var platform_browser_1 = __webpack_require__(25);
var animations_1 = __webpack_require__(35);
var core_3 = __webpack_require__(191);
// Components
var menu_component_1 = __webpack_require__(227);
var home_component_1 = __webpack_require__(34);
var organization_component_1 = __webpack_require__(168);
var schedule_component_1 = __webpack_require__(173);
var patronlist_component_1 = __webpack_require__(170);
var personlist_component_1 = __webpack_require__(172);
var transportroutelist_component_1 = __webpack_require__(175);
var chart_component_1 = __webpack_require__(160);
var personchart_component_1 = __webpack_require__(171);
var eventtracking_component_1 = __webpack_require__(164);
var eventlist_component_1 = __webpack_require__(163);
var transportwalker_component_1 = __webpack_require__(176);
var mapview_component_1 = __webpack_require__(167);
var inhousemessage_component_1 = __webpack_require__(166);
var incomingmessage_component_1 = __webpack_require__(165);
var outgoingmessage_component_1 = __webpack_require__(169);
var draftmessage_component_1 = __webpack_require__(162);
var transportmessage_component_1 = __webpack_require__(174);
var changepassword_component_1 = __webpack_require__(159);
var components_routes_1 = __webpack_require__(226);
// Primeng
var primeng_1 = __webpack_require__(2);
var primeng_2 = __webpack_require__(2);
var primeng_3 = __webpack_require__(2);
var primeng_4 = __webpack_require__(2);
var primeng_5 = __webpack_require__(2);
var primeng_6 = __webpack_require__(2);
var primeng_7 = __webpack_require__(2);
var primeng_8 = __webpack_require__(2);
var primeng_9 = __webpack_require__(2);
var primeng_10 = __webpack_require__(2);
var primeng_11 = __webpack_require__(2);
var primeng_12 = __webpack_require__(2);
var primeng_13 = __webpack_require__(2);
var primeng_14 = __webpack_require__(2);
var primeng_15 = __webpack_require__(2);
var primeng_16 = __webpack_require__(2);
var primeng_17 = __webpack_require__(2);
var primeng_18 = __webpack_require__(2);
var primeng_19 = __webpack_require__(2);
var primeng_20 = __webpack_require__(2);
var primeng_21 = __webpack_require__(2);
var primeng_22 = __webpack_require__(2);
var primeng_23 = __webpack_require__(2);
var primeng_24 = __webpack_require__(2);
var primeng_25 = __webpack_require__(2);
var primeng_26 = __webpack_require__(2);
var primeng_27 = __webpack_require__(2);
var primeng_28 = __webpack_require__(2);
var primeng_29 = __webpack_require__(2);
var primeng_30 = __webpack_require__(2);
var primeng_31 = __webpack_require__(2);
var primeng_32 = __webpack_require__(2);
var primeng_33 = __webpack_require__(2);
var primeng_34 = __webpack_require__(2);
var primeng_35 = __webpack_require__(2);
var primeng_36 = __webpack_require__(2);
var primeng_37 = __webpack_require__(2);
var primeng_38 = __webpack_require__(2);
var primeng_39 = __webpack_require__(2);
var primeng_40 = __webpack_require__(2);
var primeng_41 = __webpack_require__(2);
var primeng_42 = __webpack_require__(2);
var primeng_43 = __webpack_require__(2);
var primeng_44 = __webpack_require__(2);
var primeng_45 = __webpack_require__(2);
var primeng_46 = __webpack_require__(2);
var primeng_47 = __webpack_require__(2);
var primeng_48 = __webpack_require__(2);
var primeng_49 = __webpack_require__(2);
var primeng_50 = __webpack_require__(2);
var primeng_51 = __webpack_require__(2);
var primeng_52 = __webpack_require__(2);
var primeng_53 = __webpack_require__(2);
var primeng_54 = __webpack_require__(2);
var primeng_55 = __webpack_require__(2);
var primeng_56 = __webpack_require__(2);
var primeng_57 = __webpack_require__(2);
var primeng_58 = __webpack_require__(2);
var primeng_59 = __webpack_require__(2);
var primeng_60 = __webpack_require__(2);
var primeng_61 = __webpack_require__(2);
var primeng_62 = __webpack_require__(2);
var primeng_63 = __webpack_require__(2);
var ComponentsModule = ComponentsModule_1 = (function () {
    //@NgModule({
    //    imports: [routing],
    //    declarations: [HomeComponent]
    //})
    function ComponentsModule() {
    }
    ComponentsModule.forRoot = function () {
        return {
            ngModule: ComponentsModule_1,
            providers: []
        };
    };
    return ComponentsModule;
}());
ComponentsModule = ComponentsModule_1 = tslib_1.__decorate([
    core_1.NgModule({
        imports: [
            components_routes_1.routing,
            platform_browser_1.BrowserModule,
            forms_1.FormsModule,
            http_1.HttpModule,
            primeng_1.AccordionModule,
            primeng_2.AutoCompleteModule,
            primeng_3.BreadcrumbModule,
            primeng_4.ButtonModule,
            primeng_5.CalendarModule,
            primeng_6.CarouselModule,
            primeng_7.ChartModule,
            primeng_8.CheckboxModule,
            primeng_9.ChipsModule,
            primeng_10.CodeHighlighterModule,
            primeng_11.ConfirmDialogModule,
            primeng_12.SharedModule,
            primeng_13.ContextMenuModule,
            primeng_14.DataGridModule,
            primeng_15.DataListModule,
            primeng_16.DataScrollerModule,
            primeng_17.DataTableModule,
            primeng_18.DialogModule,
            primeng_19.DragDropModule,
            primeng_20.DropdownModule,
            primeng_21.EditorModule,
            primeng_22.FieldsetModule,
            primeng_23.FileUploadModule,
            primeng_24.GalleriaModule,
            primeng_25.GMapModule,
            primeng_26.GrowlModule,
            primeng_27.InputMaskModule,
            primeng_28.InputSwitchModule,
            primeng_29.InputTextModule,
            primeng_30.InputTextareaModule,
            primeng_31.LightboxModule,
            primeng_32.ListboxModule,
            primeng_33.MegaMenuModule,
            primeng_34.MenuModule,
            primeng_35.MenubarModule,
            primeng_36.MessagesModule,
            primeng_37.MultiSelectModule,
            primeng_38.OrderListModule,
            primeng_39.OverlayPanelModule,
            primeng_40.PaginatorModule,
            primeng_41.PanelModule,
            primeng_42.PanelMenuModule,
            primeng_43.PasswordModule,
            primeng_44.PickListModule,
            primeng_45.ProgressBarModule,
            primeng_46.RadioButtonModule,
            primeng_47.RatingModule,
            primeng_48.ScheduleModule,
            primeng_49.SelectButtonModule,
            primeng_50.SlideMenuModule,
            primeng_51.SliderModule,
            primeng_52.SpinnerModule,
            primeng_53.SplitButtonModule,
            primeng_54.StepsModule,
            primeng_55.TabMenuModule,
            primeng_56.TabViewModule,
            primeng_57.TerminalModule,
            primeng_58.TieredMenuModule,
            primeng_59.ToggleButtonModule,
            primeng_60.ToolbarModule,
            primeng_61.TooltipModule,
            primeng_62.TreeModule,
            primeng_63.TreeTableModule,
            animations_1.BrowserAnimationsModule,
            common_1.CommonModule,
            forms_1.FormsModule,
            forms_1.ReactiveFormsModule,
            router_1.RouterModule,
            core_2.TranslateModule,
            ng_bootstrap_1.NgbModule.forRoot(),
            // No need to export as these modules don't expose any components/directive etc'
            http_1.HttpModule,
            http_1.JsonpModule,
            core_3.AgmCoreModule.forRoot({
                apiKey: 'AIzaSyBetolnRRNMhjKsw66g_RdYC5NS7p_51Q4'
            })
        ],
        declarations: [
            //DynamicFormComponent,
            //DynamicFormControlComponent,
            //ErrorMessageComponent,
            //ErrorSummaryComponent,
            //FooterComponent,
            //HeaderComponent,
            //PageHeadingComponent,
            //UppercasePipe,
            //LoginComponent,
            home_component_1.HomeComponent,
            patronlist_component_1.PatronListComponent,
            organization_component_1.OrganizationComponent,
            schedule_component_1.ScheduleComponent,
            personlist_component_1.PersonListComponent,
            transportroutelist_component_1.TransportRouteListComponent,
            chart_component_1.ChartComponent,
            personchart_component_1.PersonChartComponent,
            eventtracking_component_1.EventTrackingComponent,
            eventlist_component_1.EventListComponent,
            transportwalker_component_1.TransportWalkerComponent,
            mapview_component_1.MapViewComponent,
            inhousemessage_component_1.InhouseMessageComponent,
            incomingmessage_component_1.IncomingMessageComponent,
            outgoingmessage_component_1.OutgoingMessageComponent,
            draftmessage_component_1.DraftMessageComponent,
            transportmessage_component_1.TransportMessageComponent,
            changepassword_component_1.ChangePasswordComponent,
            menu_component_1.AppMenuComponent,
            menu_component_1.AppSubMenu
        ],
        exports: [
            // Modules
            common_1.CommonModule,
            forms_1.FormsModule,
            forms_1.ReactiveFormsModule,
            router_1.RouterModule,
            ng_bootstrap_1.NgbModule,
            core_2.TranslateModule,
            // Providers, Components, directive, pipes
            //DynamicFormComponent,
            //DynamicFormControlComponent,
            //ErrorSummaryComponent,
            //ErrorMessageComponent,
            //FooterComponent,
            //HeaderComponent,
            //PageHeadingComponent,
            //UppercasePipe,
            //LoginComponent,
            menu_component_1.AppMenuComponent,
            menu_component_1.AppSubMenu,
            organization_component_1.OrganizationComponent,
            schedule_component_1.ScheduleComponent,
            patronlist_component_1.PatronListComponent,
            personlist_component_1.PersonListComponent,
            transportroutelist_component_1.TransportRouteListComponent,
            chart_component_1.ChartComponent,
            personchart_component_1.PersonChartComponent,
            eventtracking_component_1.EventTrackingComponent,
            eventlist_component_1.EventListComponent,
            transportwalker_component_1.TransportWalkerComponent,
            mapview_component_1.MapViewComponent,
            inhousemessage_component_1.InhouseMessageComponent,
            incomingmessage_component_1.IncomingMessageComponent,
            outgoingmessage_component_1.OutgoingMessageComponent,
            transportmessage_component_1.TransportMessageComponent,
            draftmessage_component_1.DraftMessageComponent,
            changepassword_component_1.ChangePasswordComponent,
            primeng_38.OrderListModule,
            core_3.AgmCoreModule
        ]
    })
    //@NgModule({
    //    imports: [routing],
    //    declarations: [HomeComponent]
    //})
], ComponentsModule);
exports.ComponentsModule = ComponentsModule;
var ComponentsModule_1;


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var http_1 = __webpack_require__(12);
var router_1 = __webpack_require__(5);
var setup_service_1 = __webpack_require__(11);
var primeng_1 = __webpack_require__(2);
var moment = __webpack_require__(0);
var Rx_1 = __webpack_require__(14);
var DraftMessageComponent = (function () {
    function DraftMessageComponent(http, _router, activatedRoute, confirmationService, _setupService) {
        var _this = this;
        this._router = _router;
        this.activatedRoute = activatedRoute;
        this.confirmationService = confirmationService;
        this._setupService = _setupService;
        this.organizationId = localStorage.getItem("OrganizationId");
        this.messageCenterDialog = false;
        this.selectedGrade = [];
        this.selectedClassSection = [];
        this.msgs = [];
        this.http = http;
        this.showClass = false;
        var personId = "7d82766a-ab7c-4787-b126-d02359b41696";
        this._setupService.getPatron().subscribe(function (result) {
            _this.patronDetails = result;
        });
        this._setupService.getPersonnById(personId).subscribe(function (result) {
            _this.personDetails = result;
        });
        this._setupService.getGrade().subscribe(function (response) {
            _this.gradeDetails = response;
            _this.gradeDetails = _this.gradeDetails.sort(function (a, b) {
                return parseInt(a.grade) - parseInt(b.grade);
            });
            _this.createGradeList();
            _this.createClassList();
        });
        this.getMessage();
        this.outgoingMessageTo = [];
        this.outgoingMessageTo.push({ label: 'Choose Option', value: null });
        this.outgoingMessageTo.push({ label: 'Organization', value: 'Organization' });
        this.outgoingMessageTo.push({ label: 'Class', value: 'Class' });
        this.outgoingMessageTo.push({ label: 'Class-Section', value: 'Sections' });
        this.outgoingMessageTo.push({ label: 'Patron', value: 'Patron' });
        this.outgoingMessage = {
            id: '',
            subject: null,
            senderId: '',
            senderName: '',
            senderImage: '',
            senderRole: '',
            message: null,
            isSent: false,
            broadcastTo: '',
            patronId: [],
            isResponseNeed: false,
            createDate: new Date(),
            lastUpdated: new Date(),
            organizationId: this.organizationId,
            messageTime: '',
            messageDate: ''
        };
    }
    DraftMessageComponent.prototype.getMessage = function () {
        var _this = this;
        this._setupService.getSavedMessage().subscribe(function (result) {
            _this.outgoingMessageDetails = result;
        });
    };
    DraftMessageComponent.prototype.onSelectMode = function () {
        if (this.selectedBroadCast == 'Organization') {
            this.selectedGrade = [];
            this.selectedClassSection = [];
            this.showClassSection = false;
            this.showClass = false;
            this.patron = false;
            this.showIsResponseNeed = false;
        }
        if (this.selectedBroadCast == 'Class') {
            this.selectedClassSection = [];
            this.showClassSection = false;
            this.showClass = true;
            this.patron = false;
            this.showIsResponseNeed = true;
        }
        if (this.selectedBroadCast == 'Sections') {
            this.selectedGrade = [];
            this.showClassSection = true;
            this.showClass = false;
            this.patron = false;
            this.showIsResponseNeed = true;
        }
        if (this.selectedBroadCast == 'Patron') {
            this.showClassSection = false;
            this.showClass = false;
            this.patron = true;
            this.showIsResponseNeed = true;
        }
    };
    DraftMessageComponent.prototype.createMessage = function (outgoingMessage) {
        this.outgoingMessage = outgoingMessage;
        if (this.selectedBroadCast == 'Organization') {
            this.selectedGrade = [];
            this.selectedClassSection = [];
            this.showClassSection = false;
            this.showClass = false;
            this.patron = false;
        }
        this.selectedBroadCast = this.outgoingMessage.broadcastTo;
        if (this.selectedBroadCast == 'Class') {
            this.selectedClassSection = [];
            this.showClassSection = false;
            this.showClass = true;
            this.patron = false;
        }
        if (this.selectedBroadCast == 'Sections') {
            this.selectedGrade = [];
            this.showClassSection = true;
            this.showClass = false;
            this.patron = false;
        }
        if (this.selectedBroadCast == 'Patron') {
            this.showClassSection = false;
            this.showClass = false;
            this.patron = true;
        }
        this.selectedBroadCast = this.outgoingMessage.broadcastTo;
        this.outgoingMessage = this.outgoingMessage;
        this.messageCenterDialog = true;
        //}
    };
    DraftMessageComponent.prototype.deleteOutgoingMessage = function (outegoingMessage) {
        var _this = this;
        if (this.selectedMessageDetail == null) {
            this.msgs = [];
            this.msgs.push({ severity: 'warn', summary: 'please select at least one message' });
        }
        else {
            this.confirmationService.confirm({
                message: 'Do you want to delete this message(s)?',
                header: 'Delete Confirmation',
                icon: 'fa fa-trash',
                accept: function () {
                    var _loop_1 = function (message) {
                        _this._setupService.deleteOutgoingMessages(message.id).subscribe(function (response) {
                            if (response === 204) {
                                _this.outgoingMessageDetails.forEach(function (u, i) {
                                    if (u.id === message.id) {
                                        //this.outgoingMessageDetails.splice(i, 1);
                                        _this.getMessage();
                                    }
                                });
                                _this.msgs = [];
                                _this.msgs.push({ severity: 'error', summary: 'Message delete successfully' });
                            }
                        });
                    };
                    for (var _i = 0, outegoingMessage_1 = outegoingMessage; _i < outegoingMessage_1.length; _i++) {
                        var message = outegoingMessage_1[_i];
                        _loop_1(message);
                    }
                }
            });
        }
    };
    DraftMessageComponent.prototype.openSearchBox = function () {
        this.patronMapDialog = true;
    };
    DraftMessageComponent.prototype.mapPatron = function (event) {
        this.selectedPatron = this.selectedPatronDetail;
        this.patronMapDialog = false;
    };
    DraftMessageComponent.prototype.createGradeList = function () {
        this.classSectionList = [];
        for (var i = 0; i < this.gradeDetails.length; i++) {
            this.classSectionList.push({ label: this.gradeDetails[i].grade + "-" + this.gradeDetails[i].section, value: this.gradeDetails[i].grade + "-" + this.gradeDetails[i].section });
        }
    };
    DraftMessageComponent.prototype.createClassList = function () {
        var _this = this;
        this.classList = [];
        for (var i = 0; i < this.gradeDetails.length; i++) {
            if (!this.classList.find(function (x) { return x.label == _this.gradeDetails[i].grade; })) {
                this.classList.push({ label: this.gradeDetails[i].grade, value: this.gradeDetails[i].grade });
            }
        }
    };
    // send out going message to patrons by organization,class,class section level
    DraftMessageComponent.prototype.sendMessageToPatron = function (status) {
        var _this = this;
        if (status == 1) {
            this.status = true;
        }
        this.status = status;
        var observables = new Array();
        var org = [];
        var patrons = [];
        var pat = [];
        var selectedClassPatron = [];
        if (this.selectedBroadCast == 'Organization') {
            this.sendExternalData(selectedClassPatron); //call sendExternalData
        }
        else if (this.selectedBroadCast == 'Class') {
            for (var _i = 0, _a = this.selectedGrade; _i < _a.length; _i++) {
                var patronClass = _a[_i];
                observables.push(this._setupService.getClassByPatrons(patronClass));
            }
            Rx_1.Observable.forkJoin(observables).subscribe(function (result) {
                selectedClassPatron = result;
                _this.sendExternalData(selectedClassPatron); //call sendExternalData
            });
        }
        else if (this.selectedBroadCast == 'Sections') {
            for (var _b = 0, _c = this.selectedClassSection; _b < _c.length; _b++) {
                var patronClassSection = _c[_b];
                var grades = patronClassSection.split("-");
                observables.push(this._setupService.getClassPatron(grades[0], grades[1], this.selectedDate));
            }
            Rx_1.Observable.forkJoin(observables).subscribe(function (result) {
                selectedClassPatron = result;
                _this.sendExternalData(selectedClassPatron); //call sendExternalData
            });
        }
        else if (this.selectedBroadCast == 'Patron') {
            patrons.push(this.selectedPatron);
            selectedClassPatron.push(patrons);
            this.sendExternalData(selectedClassPatron); //call sendExternalData
        }
        this.messageCenterDialog = false;
    };
    DraftMessageComponent.prototype.sendExternalData = function (selectedClassPatron) {
        var _this = this;
        for (var _i = 0, selectedClassPatron_1 = selectedClassPatron; _i < selectedClassPatron_1.length; _i++) {
            var classPatron = selectedClassPatron_1[_i];
            for (var _a = 0, classPatron_1 = classPatron; _a < classPatron_1.length; _a++) {
                var patron = classPatron_1[_a];
                this.outgoingMessage.patronId.push(patron.id);
            }
        }
        if (this.status) {
            this.outgoingMessage.isSent = true;
        }
        this.outgoingMessage.senderId = this.personDetails.id;
        this.outgoingMessage.senderName = this.personDetails.firstName + " " + this.personDetails.lastName;
        this.outgoingMessage.senderImage = this.personDetails.imgUrl;
        this.outgoingMessage.senderRole = this.personDetails.role;
        this.outgoingMessage.broadcastTo = this.selectedBroadCast;
        this.outgoingMessage.messageDate = moment(new Date()).format('YYYY-MM-DD');
        this.outgoingMessage.messageTime = moment(new Date()).format('h:mm a');
        this._setupService.createOutgoingMessage(this.outgoingMessage).subscribe(function (messageDetails) {
            _this._setupService.getSavedMessage().subscribe(function (result) {
                _this.outgoingMessageDetails = result;
            });
            if (_this.outgoingMessage.isSent == true) {
                _this.msgs = [];
                _this.msgs.push({ severity: 'sucsess', summary: 'message saved successfully' });
            }
            else {
                _this.msgs = [];
                _this.msgs.push({ severity: 'sucsess', summary: 'message saved in draft' });
            }
        });
    };
    DraftMessageComponent.prototype.onCancel = function (event) {
        this.messageCenterDialog = false;
    };
    DraftMessageComponent.prototype.ngOnInit = function () {
    };
    return DraftMessageComponent;
}());
DraftMessageComponent = tslib_1.__decorate([
    core_1.Component({
        selector: 'draftmessage',
        template: __webpack_require__(205),
        providers: [setup_service_1.SetupService, primeng_1.ConfirmationService]
    }),
    tslib_1.__metadata("design:paramtypes", [http_1.Http, router_1.Router, router_1.ActivatedRoute, primeng_1.ConfirmationService, setup_service_1.SetupService])
], DraftMessageComponent);
exports.DraftMessageComponent = DraftMessageComponent;


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var ng = __webpack_require__(1);
var http_1 = __webpack_require__(12);
var router_1 = __webpack_require__(5);
var primeng_1 = __webpack_require__(2);
var setup_service_1 = __webpack_require__(11);
var Rx_1 = __webpack_require__(14);
var moment = __webpack_require__(0);
var EventListComponent = (function () {
    function EventListComponent(http, _router, confirmationService, activatedRoute, _setupService) {
        var _this = this;
        this._router = _router;
        this.confirmationService = confirmationService;
        this.activatedRoute = activatedRoute;
        this._setupService = _setupService;
        this.participants = false;
        this.patronMapDialog = false;
        this.eventDialog = false;
        this.eventArr = [];
        this.msgs = [];
        this.deline = false;
        this.organizationID = localStorage.getItem("OrganizationId");
        this.selectedDays = [];
        this.daysOfWeek = "";
        this.daysOfMonth = "";
        this.selectedMonths = [];
        this.http = http;
        this._setupService.getPatron().subscribe(function (result) {
            _this.patronDetails = result;
        });
        //this.loading = true;
        this._setupService.getEvent().subscribe(function (result) {
            _this.eventDetails = result;
            _this.occurence();
            //  this.loading = false;
        });
        this.delineMode = [];
        this.delineMode.push({ label: 'select', value: 'null' });
        this.delineMode.push({ label: 'Inperson', value: 'Inperson' });
        this.delineMode.push({ label: 'Email', value: 'Email' });
        this.delineMode.push({ label: 'OnCall', value: 'Oncall' });
        this.event();
        this.declineRequest = {
            declinedPatron: '',
            declineMode: '',
            declinedPerson: '',
            declineReason: ''
        };
        this.showWeek = false;
        this.showMonth = false;
        this.http = http;
        this.occurenceType = [];
        this.occurenceType.push({ label: 'Select ', value: null });
        this.occurenceType.push({ label: 'Adhoc', value: '0' });
        this.occurenceType.push({ label: 'Daily', value: '1' });
        this.occurenceType.push({ label: 'Weekly', value: '2' });
        this.occurenceType.push({ label: 'Monthly', value: '3' });
        this.months = [];
        this.months.push({ label: '1', value: '1' });
        this.months.push({ label: '2', value: '2' });
        this.months.push({ label: '3', value: '3' });
        this.months.push({ label: '4', value: '4' });
        this.months.push({ label: '5', value: '5' });
        this.months.push({ label: '6', value: '6' });
        this.months.push({ label: '7', value: '7' });
        this.months.push({ label: '8', value: '8' });
        this.months.push({ label: '9', value: '9' });
        this.months.push({ label: '10', value: '10' });
        this.months.push({ label: '11', value: '11' });
        this.months.push({ label: '12', value: '12' });
        this.months.push({ label: '13', value: '13' });
        this.months.push({ label: '14', value: '14' });
        this.months.push({ label: '15', value: '15' });
        this.months.push({ label: '16', value: '16' });
        this.months.push({ label: '17', value: '17' });
        this.months.push({ label: '18', value: '18' });
        this.months.push({ label: '19', value: '19' });
        this.months.push({ label: '20', value: '20' });
        this.months.push({ label: '21', value: '21' });
        this.months.push({ label: '22', value: '22' });
        this.months.push({ label: '23', value: '23' });
        this.months.push({ label: '24', value: '24' });
        this.months.push({ label: '25', value: '25' });
        this.months.push({ label: '26', value: '26' });
        this.months.push({ label: '27', value: '27' });
        this.months.push({ label: '28', value: '28' });
        this.months.push({ label: '29', value: '29' });
        this.months.push({ label: '30', value: '30' });
        this.eventDetail = {
            id: '',
            title: '',
            remarks: '',
            description: '',
            patronId: [],
            personId: [],
            dayOfWeek: '',
            dayOfMonth: '',
            occurence: '',
            occurenceType: '',
            declineRequest: this.declineReq = [],
            startDate: null,
            endDate: null,
            startTime: null,
            endTime: null,
            createDate: new Date(),
            organizationid: this.organizationID,
            lastUpdated: new Date()
        };
        this.declineRequest = {
            declinedPatron: '',
            declineMode: '',
            declinedPerson: '',
            declineReason: ''
        };
        this.activatedRoute.params.subscribe(function (params) {
            _this.eventId = params['eventId'];
        });
        this.days = [];
        this.days.push({ label: 'Monday', value: 'Monday' });
        this.days.push({ label: 'TuesDay', value: 'TuesDay' });
        this.days.push({ label: 'Wedneday', value: 'Wedneday' });
        this.days.push({ label: 'Thursday', value: 'Thursday' });
        this.days.push({ label: 'Friday', value: 'Friday' });
        this.days.push({ label: 'Saturday', value: 'Saturday' });
        this.days.push({ label: 'Sunday', value: 'Sunday' });
    }
    EventListComponent.prototype.event = function () {
        this.eventDetail = {
            id: '',
            title: '',
            remarks: '',
            description: '',
            patronId: [],
            personId: [],
            dayOfWeek: '',
            dayOfMonth: '',
            occurence: '',
            occurenceType: '',
            declineRequest: this.declineReq = [],
            startDate: null,
            endDate: null,
            startTime: null,
            endTime: null,
            createDate: new Date(),
            organizationid: this.organizationID,
            lastUpdated: new Date()
        };
    };
    EventListComponent.prototype.occurence = function () {
        for (var i = 0; i < this.eventDetails.length; i++) {
            if (this.eventDetails[i].occurence == " 0") {
                this.eventDetails[i].occurenceType = "Adhoc";
            }
            else if (this.eventDetails[i].occurence == "1") {
                this.eventDetails[i].occurenceType = "Daily";
            }
            else if (this.eventDetails[i].occurence == "2") {
                this.eventDetails[i].occurenceType = "Weekly";
            }
            else if (this.eventDetails[i].occurence == "3") {
                this.eventDetails[i].occurenceType = "Monthly";
            }
            else {
                this.eventDetails[i].occurenceType = "NA";
            }
        }
        this.eventDetails[i].startTime = moment(this.eventDetails[i].startTime, 'H:mm').format('h:mm a');
        this.eventDetails[i].endTime = moment(this.eventDetails[i].endTime, 'H:mm').format('h:mm a');
    };
    // creation event form
    EventListComponent.prototype.onSelectMode = function () {
        if (this.selectedOccurence == '0' || this.selectedOccurence == '1') {
            this.showWeek = false;
            this.showMonth = false;
        }
        if (this.selectedOccurence == '2') {
            this.showWeek = true;
            this.showMonth = false;
        }
        if (this.selectedOccurence == '3') {
            this.showMonth = true;
            this.showWeek = false;
        }
    };
    EventListComponent.prototype.createEvent = function (value) {
        var _this = this;
        if (this.selectedOccurence == '2') {
            this.createWeek();
            this.eventDetail.dayOfWeek = this.daysOfWeek;
        }
        if (this.selectedOccurence == '3') {
            this.createMonths();
            this.eventDetail.dayOfMonth = this.daysOfMonth;
        }
        this.submitted = true;
        var headers = new http_1.Headers();
        headers.append('Content-Type', 'application/json');
        this.eventDetail.occurence = this.selectedOccurence;
        var a = this.eventDetail.startDate;
        var b = moment(a).format('YYYY-MM-DD');
        this.eventDetail.startDate = b;
        var c = this.eventDetail.endDate;
        var d = moment(c).format('YYYY-MM-DD');
        this.eventDetail.endDate = d;
        var a = this.eventDetail.startTime;
        var b = moment(a, 'H:mm').format('h:mm ');
        this.eventDetail.startTime = b;
        var c = this.eventDetail.endTime;
        var d = moment(c, 'H:mm').format('h:mm ');
        this.eventDetail.endTime = d;
        if (this.eventDetail.id) {
            this._setupService.updateEvent(this.eventDetail.id, this.eventDetail).subscribe(function (response) {
                if (response === 204) {
                    _this._setupService.getEvent().subscribe(function (result) {
                        _this.eventDetails = result;
                        _this.occurence();
                    });
                    _this.msgs = [];
                    _this.msgs.push({ severity: 'success', summary: 'Event update successfully' });
                }
            });
            this.eventDialog = false;
        }
        else {
            this._setupService.createEvent(this.eventDetail).subscribe(function (response) {
                if (response === 204) {
                    _this._setupService.getEvent().subscribe(function (result) {
                        _this.eventDetails = result;
                        _this.occurence();
                    });
                    _this.msgs = [];
                    _this.msgs.push({ severity: 'success', summary: 'Event saved successfully' });
                }
            });
            this.eventDialog = false;
        }
    };
    EventListComponent.prototype.ngOnInit = function () {
        var _this = this;
        this._setupService.getEventById(this.eventId).subscribe(function (result) {
            _this.eventDetail = result;
            _this.selectedOccurence = _this.eventDetail.occurence;
            if (_this.selectedOccurence == '2') {
                _this.showWeek = true;
                _this.showMonth = false;
                _this.selectedDays = _this.eventDetail.dayOfWeek.split(",");
            }
            if (_this.selectedOccurence == '3') {
                _this.showMonth = true;
                _this.showWeek = false;
                _this.selectedMonths = _this.eventDetail.dayOfMonth.split(",");
            }
        });
    };
    EventListComponent.prototype.eventCancel = function (event) {
        this.eventDialog = false;
    };
    EventListComponent.prototype.createWeek = function () {
        if (this.selectedDays.length > 0) {
            for (var key in this.selectedDays) {
                this.daysOfWeek += this.selectedDays[key] + ",";
            }
            this.daysOfWeek = this.daysOfWeek.replace(/^,|,$/g, ''); // remove end commas
        }
        else {
            this.confirmationService.confirm({
                message: 'Please Select atleast One Day !',
                header: 'Select Confirmation',
                accept: function () {
                }
            });
        }
    };
    EventListComponent.prototype.createMonths = function () {
        if (this.selectedMonths.length > 0) {
            for (var key in this.selectedMonths) {
                this.daysOfMonth += this.selectedMonths[key] + ",";
            }
            this.daysOfMonth = this.daysOfMonth.replace(/^,|,$/g, ''); // remove end commas
        }
        else {
            this.confirmationService.confirm({
                message: 'Please Select atleast One Day of Month !',
                header: 'Select Confirmation',
                accept: function () {
                }
            });
        }
    };
    //end event form creation
    EventListComponent.prototype.addEvent = function () {
        this.event();
        this.eventDialog = true;
    };
    EventListComponent.prototype.updateEvent = function (eventDetail) {
        this.eventDetail = eventDetail;
        var a = eventDetail.startDate;
        var b = moment(a).toDate();
        eventDetail.startDate = b.toLocaleDateString();
        var c = eventDetail.endDate;
        var d = moment(c).toDate();
        eventDetail.endDate = d.toLocaleDateString();
        this.selectedOccurence = eventDetail.occurence;
        this.eventDialog = true;
    };
    EventListComponent.prototype.deleteEvent = function (eventDetail) {
        var _this = this;
        if (this.selectedEventDetail == null) {
            this.msgs = [];
            this.msgs.push({ severity: 'info', summary: 'info Message', detail: 'please select at least one event' });
        }
        else {
            this.confirmationService.confirm({
                message: 'Do you want to delete this record(s)?',
                header: 'Delete Confirmation',
                icon: 'fa fa-trash',
                accept: function () {
                    var _loop_1 = function (event_1) {
                        _this._setupService.deleteEvent(event_1.id).subscribe(function (response) {
                            if (response === 204) {
                                _this.eventDetails.forEach(function (u, i) {
                                    if (u.id === event_1.id) {
                                        //  this.eventDetails.splice(i, 1);
                                        _this._setupService.getEvent().subscribe(function (result) {
                                            _this.eventDetails = result;
                                            _this.occurence();
                                        });
                                    }
                                });
                                _this.msgs = [];
                                _this.msgs.push({ severity: 'error', summary: 'error message', detail: 'Event delete successfully' });
                            }
                        });
                    };
                    for (var _i = 0, eventDetail_1 = eventDetail; _i < eventDetail_1.length; _i++) {
                        var event_1 = eventDetail_1[_i];
                        _loop_1(event_1);
                    }
                }
            });
        }
    };
    EventListComponent.prototype.declinepatron = function (declineRequest) {
        var _this = this;
        if (this.selectedPatronDetail == null) {
            this.msgs = [];
            this.msgs.push({ severity: 'info', summary: 'info Message', detail: 'please select at least one patron' });
        }
        else {
            this.declineRequest.declinedPatron = this.selectedPatronDetail.id;
            this.declineRequest.declineMode = this.selectedMode;
            this._setupService.DeclinePatronToEvent(this.eventId, this.declineRequest).subscribe(function (response) {
                if (response === 200) {
                    _this.patronDetailList.forEach(function (u, i) {
                        if (u.id === _this.selectedPatronDetail.id) {
                            _this.patronDetailList.splice(i, 1);
                            _this.getEventPatron(_this.eventId);
                            _this.msgs = [];
                            _this.msgs.push({ severity: 'success', summary: 'patron decline successfully' });
                        }
                    });
                    _this.deline = false;
                }
            });
        }
    };
    EventListComponent.prototype.addParticipants = function (eventDetail) {
        this.participants = true;
        this.selectedPatronDetail = null;
        this.eventId = eventDetail.id;
        this.participantId = [];
        this.getEventPatron(eventDetail.id);
    };
    EventListComponent.prototype.getEventPatron = function (eventId) {
        var _this = this;
        var observables = new Array();
        var eventInfo;
        this._setupService.getEventById(eventId).subscribe(function (result) {
            eventInfo = result;
            _this.participantId = eventInfo.patronId;
            for (var _i = 0, _a = _this.participantId; _i < _a.length; _i++) {
                var patron = _a[_i];
                observables.push(_this._setupService.getPatronById(patron));
            }
            Rx_1.Observable.forkJoin(observables).subscribe(function (result) {
                _this.patronDetailList = result;
            });
        });
    };
    EventListComponent.prototype.onCancel = function (event) {
        this.participants = false;
    };
    EventListComponent.prototype.Cancel = function (event) {
        this.deline = false;
    };
    EventListComponent.prototype.mapPatron = function (eventDetail, selectedPatron) {
        var _this = this;
        if (selectedPatron == null) {
            this.msgs = [];
            this.msgs.push({ severity: 'info', summary: 'please select at least one patron' });
        }
        else {
            this._setupService.addPatronToEvent(this.eventId, selectedPatron.id).subscribe(function (result) {
                if (result == 200) {
                    _this.getEventPatron(_this.eventId);
                    _this.patronMapDialog = false;
                    _this.selectedPatronDetail = null;
                }
            });
        }
    };
    EventListComponent.prototype.openSearchBox = function (event) {
        this.patronMapDialog = true;
    };
    EventListComponent.prototype.onSearchCancel = function (event) {
        this.patronMapDialog = false;
    };
    //Download Event Detail List
    EventListComponent.prototype.download = function () {
        var tempList = [];
        for (var _i = 0, _a = this.eventDetails; _i < _a.length; _i++) {
            var event = _a[_i];
            tempList.push({
                "Title": event.title,
                "Occurence": event.occurence,
                "StartDate": event.startDate,
                "EndDate": event.endDate,
                "StartTime": event.startTime,
                "EndTime": event.endTime,
            });
        }
        var csvData = this.ConvertToCSV(tempList);
        var a = document.createElement("a");
        a.setAttribute('style', 'display:none;');
        document.body.appendChild(a);
        var blob = new Blob([csvData], { type: 'text/csv' });
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = 'EventDetails.csv';
        a.click();
    };
    EventListComponent.prototype.ConvertToCSV = function (objArray) {
        var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
        var str = '';
        var row = "";
        for (var index in objArray[0]) {
            //Now convert each value to string and comma-separated
            row += index + ',';
        }
        row = row.slice(0, -1);
        //append Label row with line break
        str += row + '\r\n';
        for (var i = 0; i < array.length; i++) {
            var line = '';
            for (var index in array[i]) {
                if (line != '')
                    line += ',';
                line += array[i][index];
            }
            str += line + '\r\n';
        }
        return str;
    };
    //Download Participants List
    EventListComponent.prototype.participantsList = function () {
        var tempList = [];
        for (var _i = 0, _a = this.patronDetailList; _i < _a.length; _i++) {
            var patron = _a[_i];
            tempList.push({
                "FirstName": patron.firstName,
                "LastName": patron.lastName,
                "IsActive": patron.isActive,
                "Class": patron.class,
                "Section": patron.section,
                "RollNumber": patron.rollNo,
            });
        }
        var csvData = this.ConvertToCSV1(tempList);
        var a = document.createElement("a");
        a.setAttribute('style', 'display:none;');
        document.body.appendChild(a);
        var blob = new Blob([csvData], { type: 'text/csv' });
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = 'ParticipantsList.csv';
        a.click();
    };
    EventListComponent.prototype.ConvertToCSV1 = function (objArray) {
        var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
        var str = '';
        var row = "";
        for (var index in objArray[0]) {
            //Now convert each value to string and comma-separated
            row += index + ',';
        }
        row = row.slice(0, -1);
        //append Label row with line break
        str += row + '\r\n';
        for (var i = 0; i < array.length; i++) {
            var line = '';
            for (var index in array[i]) {
                if (line != '')
                    line += ',';
                line += array[i][index];
            }
            str += line + '\r\n';
        }
        return str;
    };
    return EventListComponent;
}());
EventListComponent = tslib_1.__decorate([
    ng.Component({
        selector: 'eventlist',
        template: __webpack_require__(206),
        providers: [primeng_1.ConfirmationService, setup_service_1.SetupService]
    }),
    tslib_1.__metadata("design:paramtypes", [http_1.Http, router_1.Router, primeng_1.ConfirmationService, router_1.ActivatedRoute, setup_service_1.SetupService])
], EventListComponent);
exports.EventListComponent = EventListComponent;


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var setup_service_1 = __webpack_require__(11);
var http_1 = __webpack_require__(12);
var router_1 = __webpack_require__(5);
var moment = __webpack_require__(0);
var primeng_1 = __webpack_require__(2);
var Rx_1 = __webpack_require__(14);
var EventTrackingComponent = (function () {
    function EventTrackingComponent(http, _setupService, _router, activatedRoute, confirmationService) {
        var _this = this;
        this._setupService = _setupService;
        this._router = _router;
        this.activatedRoute = activatedRoute;
        this.confirmationService = confirmationService;
        this.organizationId = localStorage.getItem("OrganizationId");
        this.msgs = [];
        this.pSchool = null;
        this.selectedTab = 0;
        this.http = http;
        this.pSchool = "School";
        this.trackingTypeList = [];
        this.totalParticipentList = [];
        this.showBarGraph(null);
        this.eventList = null;
        this._setupService.getEvent().subscribe(function (response) {
            _this.eventDetail = response;
            _this.eventDetail = _this.eventDetail.sort(function (a, b) {
                return parseInt(b.startDate) - parseInt(a.startDate);
            });
            _this.selectedEvent = _this.eventDetail[0].id;
            _this.eventStartTIme = _this.eventDetail[0].startTime;
            _this.totalParticipentList = _this.eventDetail[0].patronId;
            _this.showBarGraph(_this.selectedEvent);
            _this.createEventList();
        });
    }
    EventTrackingComponent.prototype.handleChange = function (e) {
        if (e.index == 0) {
            this.selectedTab = 0;
        }
        else if (e.index == 1) {
            this.selectedTab = 1;
        }
        else if (e.index == 2) {
            this.selectedTab = 2;
        }
    };
    EventTrackingComponent.prototype.activateTab = function (tabNumber) {
        this.selectedTab = tabNumber;
    };
    EventTrackingComponent.prototype.getEventTrackingData = function () {
        var _this = this;
        this.presentPersonCount = 0;
        this.absentPersonCount = 0;
        this.trackingTypeDetails = [];
        this._setupService.getPatron().subscribe(function (result) {
            _this.patronDetailList = result;
            _this._setupService.getPerson().subscribe(function (result) {
                _this.personDetailList = result;
                for (var _i = 0, _a = _this.trackingTypeList; _i < _a.length; _i++) {
                    var item = _a[_i];
                    var index = _this.totalParticipentList.lastIndexOf(item.patronId);
                    if (index > -1) {
                        _this.totalParticipentList.splice(index, 1);
                    }
                    _this.getPatronInfo(item);
                    _this.presentPersonCount = _this.trackingTypeDetails.length;
                }
                _this.getAbsentPatronInfo();
            });
        });
    };
    EventTrackingComponent.prototype.getSelectedDate = function (value) {
        this.trackingTypeDetails = [];
        this.showBarGraph(this.selectedEvent);
    };
    EventTrackingComponent.prototype.createEventList = function () {
        this.eventList = [];
        this.eventList.push({ label: 'Select Event', value: 'null' });
        for (var i = 0; i < this.eventDetail.length; i++) {
            this.eventList.push({ label: this.eventDetail[i].title, value: this.eventDetail[i].id });
        }
    };
    EventTrackingComponent.prototype.getPatronInfo = function (item) {
        var patronInfo;
        var personInfo;
        var eventInfo;
        this.eventTracking = {};
        patronInfo = this.patronDetailList.find(function (x) { return x.id == item.patronId; });
        if (patronInfo != null) {
            this.eventTracking.name = patronInfo.firstName + " " + patronInfo.lastName;
            this.eventTracking.class = patronInfo.class.toString();
            this.eventTracking.section = patronInfo.section;
            this.eventTracking.rollNumber = patronInfo.rollNo;
            this.eventTracking.imgUrl = patronInfo.imgUrl;
            this.eventTracking.role = "Student";
        }
        personInfo = this.personDetailList.find(function (x) { return x.id == item.personId; });
        if (personInfo != null) {
            this.eventTracking.class = "NA";
            this.eventTracking.section = "NA";
            this.eventTracking.rollNumber = 0;
            this.eventTracking.name = personInfo.firstName + " " + personInfo.lastName;
            this.eventTracking.role = personInfo.role;
            this.eventTracking.imgUrl = personInfo.imgUrl;
        }
        eventInfo = this.eventDetail.find(function (x) { return x.id == item.eventId; });
        if (eventInfo != null) {
            var index = eventInfo.patronId.lastIndexOf(item.patronId);
            if (index > -1) {
                eventInfo.patronId.splice(index, 1);
            }
            this.eventTracking.title = eventInfo.title;
        }
        this.eventTracking.trackingTime = moment(item.trackingTime, 'H:mm').format('h:mm a');
        this.eventTracking.trackingDate = moment(item.trackingDate).format('YYYY-MM-DD');
        this.trackingTypeDetails.push(this.eventTracking);
    };
    EventTrackingComponent.prototype.getAbsentPatronInfo = function () {
        var _this = this;
        var observables = new Array();
        for (var _i = 0, _a = this.totalParticipentList; _i < _a.length; _i++) {
            var patron = _a[_i];
            observables.push(this._setupService.getPatronById(patron));
        }
        Rx_1.Observable.forkJoin(observables).subscribe(function (result) {
            _this.absentPatronList = result;
            _this.absentPersonCount = _this.absentPatronList.length;
        });
    };
    EventTrackingComponent.prototype.showBarGraph = function (selectedEvent) {
        var _this = this;
        if (selectedEvent != null) {
            this._setupService.getEventTrackingByEvent(selectedEvent).subscribe(function (result) {
                _this.trackingTypeList = result;
                var tempStartTime = '07:00';
                _this.personCountArr = new Array();
                if (_this.trackingTypeList.length > 0) {
                    for (var i = 0; i <= 53; i++) {
                        var noPerson = 0;
                        var personCount = new Array();
                        var beginningTime = moment(tempStartTime, 'HH:mm');
                        var startTime = beginningTime.format('HH:mm');
                        var endTime = moment(beginningTime).startOf('minutes').add(15, 'minutes').format('HH:mm');
                        personCount = _this.trackingTypeList.filter(function (x) { return x.trackingTime >= startTime && x.trackingTime < endTime; });
                        if (personCount.length > 0) {
                            _this.personCountArr.push(Number(personCount.length));
                        }
                        else {
                            _this.personCountArr.push(Number(noPerson));
                        }
                        tempStartTime = endTime;
                    }
                }
                _this.updateLine(_this.chart);
            });
            this.getEventTrackingData();
        }
        this.barGraph = {
            labels: ['7:00', '7:15', '7:30', '7:45', '8:00', '8:15', '8:30', '8:45', '9:00', '9:15', '9:30', '9:45',
                '10:00', '10:15', '10:30', '10:45', '11:00', '11:15', '11:30', '11:45', '12:00', '12:15', '12:30', '12:45',
                '13:00', '13:15', '13:30', '13:45', '14:00', '14:15', '14:30', '14:45', '15:00', '15:15', '15:30', '15:45',
                '16:00', '16:15', '16:30', '16:45', '17:00', '17:15', '17:30', '17:45', '18:00', '18:15', '18:30', '18:45',
                '19:00', '19:15', '19:30', '19:45', '20:00',],
            datasets: [
                {
                    label: this.pSchool,
                    data: [
                        this.personCountArr != null ? this.personCountArr[0] : 0, this.personCountArr != null ? this.personCountArr[1] : 0, this.personCountArr != null ? this.personCountArr[2] : 0, this.personCountArr != null ? this.personCountArr[3] : 0,
                        this.personCountArr != null ? this.personCountArr[4] : 0, this.personCountArr != null ? this.personCountArr[5] : 0, this.personCountArr != null ? this.personCountArr[6] : 0, this.personCountArr != null ? this.personCountArr[7] : 0, this.personCountArr != null ? this.personCountArr[8] : 0,
                        this.personCountArr != null ? this.personCountArr[9] : 0, this.personCountArr != null ? this.personCountArr[10] : 0, this.personCountArr != null ? this.personCountArr[11] : 0, this.personCountArr != null ? this.personCountArr[12] : 0, this.personCountArr != null ? this.personCountArr[13] : 0,
                        this.personCountArr != null ? this.personCountArr[14] : 0, this.personCountArr != null ? this.personCountArr[15] : 0, this.personCountArr != null ? this.personCountArr[16] : 0, this.personCountArr != null ? this.personCountArr[17] : 0, this.personCountArr != null ? this.personCountArr[18] : 0,
                        this.personCountArr != null ? this.personCountArr[19] : 0, this.personCountArr != null ? this.personCountArr[20] : 0, this.personCountArr != null ? this.personCountArr[21] : 0, this.personCountArr != null ? this.personCountArr[22] : 0, this.personCountArr != null ? this.personCountArr[23] : 0,
                        this.personCountArr != null ? this.personCountArr[24] : 0, this.personCountArr != null ? this.personCountArr[25] : 0, this.personCountArr != null ? this.personCountArr[26] : 0, this.personCountArr != null ? this.personCountArr[27] : 0, this.personCountArr != null ? this.personCountArr[28] : 0,
                        this.personCountArr != null ? this.personCountArr[29] : 0, this.personCountArr != null ? this.personCountArr[30] : 0, this.personCountArr != null ? this.personCountArr[31] : 0, this.personCountArr != null ? this.personCountArr[32] : 0, this.personCountArr != null ? this.personCountArr[33] : 0,
                        this.personCountArr != null ? this.personCountArr[34] : 0, this.personCountArr != null ? this.personCountArr[35] : 0, this.personCountArr != null ? this.personCountArr[36] : 0, this.personCountArr != null ? this.personCountArr[37] : 0, this.personCountArr != null ? this.personCountArr[38] : 0,
                        this.personCountArr != null ? this.personCountArr[39] : 0, this.personCountArr != null ? this.personCountArr[40] : 0, this.personCountArr != null ? this.personCountArr[41] : 0, this.personCountArr != null ? this.personCountArr[42] : 0, this.personCountArr != null ? this.personCountArr[43] : 0,
                        this.personCountArr != null ? this.personCountArr[44] : 0, this.personCountArr != null ? this.personCountArr[45] : 0, this.personCountArr != null ? this.personCountArr[46] : 0, this.personCountArr != null ? this.personCountArr[47] : 0, this.personCountArr != null ? this.personCountArr[48] : 0,
                        this.personCountArr != null ? this.personCountArr[49] : 0, this.personCountArr != null ? this.personCountArr[50] : 0, this.personCountArr != null ? this.personCountArr[51] : 0, this.personCountArr != null ? this.personCountArr[52] : 0, this.personCountArr != null ? this.personCountArr[53] : 0,
                        this.personCountArr != null ? this.personCountArr[54] : 0,
                    ],
                    fill: false,
                    borderColor: "#1E88E5",
                    backgroundColor: '#42A5F5',
                },
            ]
        };
    };
    EventTrackingComponent.prototype.updateLine = function (chart) {
        this.barGraph.datasets[0].data = [this.personCountArr.length != null ? this.personCountArr[0] : 0, this.personCountArr.length > 0 ? this.personCountArr[1] : 0, this.personCountArr.length > 0 ? this.personCountArr[2] : 0, this.personCountArr.length > 0 ? this.personCountArr[3] : 0,
            this.personCountArr.length > 0 ? this.personCountArr[4] : 0, this.personCountArr.length > 0 ? this.personCountArr[5] : 0, this.personCountArr.length > 0 ? this.personCountArr[6] : 0, this.personCountArr.length > 0 ? this.personCountArr[7] : 0, this.personCountArr.length > 0 ? this.personCountArr[8] : 0,
            this.personCountArr.length > 0 ? this.personCountArr[9] : 0, this.personCountArr.length > 0 ? this.personCountArr[10] : 0, this.personCountArr.length > 0 ? this.personCountArr[11] : 0, this.personCountArr.length > 0 ? this.personCountArr[12] : 0, this.personCountArr.length > 0 ? this.personCountArr[13] : 0,
            this.personCountArr.length > 0 ? this.personCountArr[14] : 0, this.personCountArr.length > 0 ? this.personCountArr[15] : 0, this.personCountArr.length > 0 ? this.personCountArr[16] : 0, this.personCountArr.length > 0 ? this.personCountArr[17] : 0, this.personCountArr.length > 0 ? this.personCountArr[18] : 0,
            this.personCountArr.length > 0 ? this.personCountArr[19] : 0, this.personCountArr.length > 0 ? this.personCountArr[20] : 0, this.personCountArr.length > 0 ? this.personCountArr[21] : 0, this.personCountArr.length > 0 ? this.personCountArr[22] : 0, this.personCountArr.length > 0 ? this.personCountArr[23] : 0,
            this.personCountArr.length > 0 ? this.personCountArr[24] : 0, this.personCountArr.length > 0 ? this.personCountArr[25] : 0, this.personCountArr.length > 0 ? this.personCountArr[26] : 0, this.personCountArr.length > 0 ? this.personCountArr[27] : 0, this.personCountArr.length > 0 ? this.personCountArr[28] : 0,
            this.personCountArr.length > 0 ? this.personCountArr[29] : 0, this.personCountArr.length > 0 ? this.personCountArr[30] : 0, this.personCountArr.length > 0 ? this.personCountArr[31] : 0, this.personCountArr.length > 0 ? this.personCountArr[32] : 0, this.personCountArr.length > 0 ? this.personCountArr[33] : 0,
            this.personCountArr.length > 0 ? this.personCountArr[34] : 0, this.personCountArr.length > 0 ? this.personCountArr[35] : 0, this.personCountArr.length > 0 ? this.personCountArr[36] : 0, this.personCountArr.length > 0 ? this.personCountArr[37] : 0, this.personCountArr.length > 0 ? this.personCountArr[38] : 0,
            this.personCountArr.length > 0 ? this.personCountArr[39] : 0, this.personCountArr.length > 0 ? this.personCountArr[40] : 0, this.personCountArr.length > 0 ? this.personCountArr[41] : 0, this.personCountArr.length > 0 ? this.personCountArr[42] : 0, this.personCountArr.length > 0 ? this.personCountArr[43] : 0,
            this.personCountArr.length > 0 ? this.personCountArr[44] : 0, this.personCountArr.length > 0 ? this.personCountArr[45] : 0, this.personCountArr.length > 0 ? this.personCountArr[46] : 0, this.personCountArr.length > 0 ? this.personCountArr[47] : 0, this.personCountArr.length > 0 ? this.personCountArr[48] : 0,
            this.personCountArr.length > 0 ? this.personCountArr[49] : 0, this.personCountArr.length > 0 ? this.personCountArr[50] : 0, this.personCountArr.length > 0 ? this.personCountArr[51] : 0, this.personCountArr.length > 0 ? this.personCountArr[52] : 0, this.personCountArr.length > 0 ? this.personCountArr[53] : 0,
            this.personCountArr.length > 0 ? this.personCountArr[54] : 0
        ];
        chart.refresh();
    };
    EventTrackingComponent.prototype.download = function () {
        var tempList = [];
        if (this.selectedTab == 1) {
            for (var _i = 0, _a = this.trackingTypeDetails; _i < _a.length; _i++) {
                var patron = _a[_i];
                tempList.push({
                    "Title": patron.title,
                    "Name": patron.name,
                    "RollNumber": patron.rollNumber,
                    "Class ": patron.class,
                    "Section": patron.section,
                    "Role": patron.role,
                    "Time": patron.trackingTime,
                    "Date": patron.trackingDate,
                });
            }
        }
        if (this.selectedTab == 2) {
            for (var _b = 0, _c = this.absentPatronList; _b < _c.length; _b++) {
                var absentPatron = _c[_b];
                tempList.push({
                    "Name": absentPatron.firstName + " " + absentPatron.lastName,
                    "Class ": absentPatron.class,
                    "Section": absentPatron.section,
                    "RollNumber": absentPatron.rollNo,
                });
            }
        }
        var csvData = this.ConvertToCSV(tempList);
        var a = document.createElement("a");
        a.setAttribute('style', 'display:none;');
        document.body.appendChild(a);
        var blob = new Blob([csvData], { type: 'text/csv' });
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = 'file.csv';
        a.click();
    };
    EventTrackingComponent.prototype.ConvertToCSV = function (objArray) {
        var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
        var str = '';
        var row = "";
        for (var index in objArray[0]) {
            //Now convert each value to string and comma-separated
            row += index + ',';
        }
        row = row.slice(0, -1);
        //append Label row with line break
        str += row + '\r\n';
        for (var i = 0; i < array.length; i++) {
            var line = '';
            for (var index in array[i]) {
                if (line != '')
                    line += ',';
                line += array[i][index];
            }
            str += line + '\r\n';
        }
        return str;
    };
    return EventTrackingComponent;
}());
tslib_1.__decorate([
    core_1.ViewChild("chart"),
    tslib_1.__metadata("design:type", primeng_1.UIChart)
], EventTrackingComponent.prototype, "chart", void 0);
tslib_1.__decorate([
    core_1.ViewChild("chartLine"),
    tslib_1.__metadata("design:type", primeng_1.UIChart)
], EventTrackingComponent.prototype, "chartLine", void 0);
EventTrackingComponent = tslib_1.__decorate([
    core_1.Component({
        selector: 'eventtracking',
        template: __webpack_require__(207),
        providers: [setup_service_1.SetupService, primeng_1.ConfirmationService]
    }),
    tslib_1.__metadata("design:paramtypes", [http_1.Http, setup_service_1.SetupService, router_1.Router, router_1.ActivatedRoute, primeng_1.ConfirmationService])
], EventTrackingComponent);
exports.EventTrackingComponent = EventTrackingComponent;


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var http_1 = __webpack_require__(12);
var router_1 = __webpack_require__(5);
var setup_service_1 = __webpack_require__(11);
var primeng_1 = __webpack_require__(2);
var moment = __webpack_require__(0);
var Rx_1 = __webpack_require__(14);
var IncomingMessageComponent = (function () {
    function IncomingMessageComponent(http, _router, activatedRoute, confirmationService, _setupService) {
        this._router = _router;
        this.activatedRoute = activatedRoute;
        this.confirmationService = confirmationService;
        this._setupService = _setupService;
        //outMessages: OutgoingMessage[] = [];
        this.patrons = [];
        this.readMessageDialog = false;
        this.organizationId = localStorage.getItem("OrganizationId");
        this.msgs = [];
        this.http = http;
        this.inboxMsg();
        this.responseMsg = {
            id: '',
            requestmessage: '',
            outSubject: '',
            outMessage: '',
            messageId: '',
            patronId: '',
            patronName: '',
            patronClass: '',
            patronSection: '',
            patronImage: '',
            messageTime: '',
            messageDate: ''
        };
    }
    IncomingMessageComponent.prototype.inboxMsg = function () {
        var _this = this;
        var observables = new Array();
        this._setupService.getIncomingMessage().subscribe(function (result) {
            _this.incomingmessages = result;
            for (var _i = 0, _a = _this.incomingmessages; _i < _a.length; _i++) {
                var msgId = _a[_i];
                observables.push(_this._setupService.getPatronById(msgId.patronId));
            }
            Rx_1.Observable.forkJoin(observables).subscribe(function (result) {
                _this.patrons = result;
                _this.setMessages();
            });
        });
    };
    IncomingMessageComponent.prototype.getMessage = function (responseMessage) {
        var _this = this;
        this.respMessage = responseMessage;
        //this.outgoingMsg = <OutgoingMessage>{};
        this.inboundMessage = responseMessage.outMessage;
        this._setupService.getoutgoingMessageById(responseMessage.messageId).subscribe(function (result) {
            _this.outgoingMsg = result;
            _this.outboundMessage = _this.outgoingMsg.message;
        });
        this.messageDialog = true;
    };
    IncomingMessageComponent.prototype.readMessage = function () {
        this.readMessageDialog = true;
    };
    IncomingMessageComponent.prototype.setMessages = function () {
        this.responseMessage = [];
        var patronDetail;
        for (var _i = 0, _a = this.incomingmessages; _i < _a.length; _i++) {
            var message = _a[_i];
            this.responseMsg = {};
            //outgoingMsg = this.outMessages.find(x => x.id == message.messageId);
            patronDetail = this.patrons.find(function (x) { return x.id == message.patronId; });
            this.responseMsg.outSubject = message.subject;
            this.responseMsg.outMessage = message.message;
            //this.responseMsg.messageTime = outgoingMsg.messageTime;
            //this.responseMsg.messageDate = outgoingMsg.messageDate;
            if (patronDetail != null) {
                this.responseMsg.patronName = patronDetail.firstName + " " + patronDetail.lastName;
                this.responseMsg.patronClass = patronDetail.class.toString();
                this.responseMsg.patronSection = patronDetail.section;
                this.responseMsg.patronImage = patronDetail.imgUrl;
            }
            this.responseMsg.id = message.id;
            this.responseMsg.messageId = message.messageId;
            this.responseMsg.requestmessage = message.message;
            this.responseMsg.messageTime = moment(message.messageTime, 'H:mm').format('h:mm a');
            this.responseMsg.messageDate = message.messageDate;
            this.responseMessage.push(this.responseMsg);
        }
    };
    IncomingMessageComponent.prototype.deleteIncomingMessage = function (responseMessage) {
        var _this = this;
        if (this.selectedIncomingMessage == null) {
            this.msgs = [];
            this.msgs.push({ severity: 'warn', summary: 'please select at least one message' });
        }
        else {
            this.confirmationService.confirm({
                message: 'Do you want to delete this record(s)?',
                header: 'Delete Confirmation',
                icon: 'fa fa-trash',
                accept: function () {
                    var _loop_1 = function (message) {
                        _this._setupService.deleteIncomingMessages(message.id).subscribe(function (response) {
                            if (response === 204) {
                                _this.responseMessage.forEach(function (u, i) {
                                    if (u.id === message.id) {
                                        //this.responseMessage.splice(i, 1);
                                        _this.inboxMsg();
                                    }
                                });
                                _this.msgs = [];
                                _this.msgs.push({ severity: 'error', summary: 'Message delete successfully' });
                            }
                        });
                    };
                    for (var _i = 0, responseMessage_1 = responseMessage; _i < responseMessage_1.length; _i++) {
                        var message = responseMessage_1[_i];
                        _loop_1(message);
                    }
                }
            });
        }
    };
    IncomingMessageComponent.prototype.onCancel = function (event) {
        this.messageDialog = false;
    };
    return IncomingMessageComponent;
}());
IncomingMessageComponent = tslib_1.__decorate([
    core_1.Component({
        selector: 'incomingmessage',
        template: __webpack_require__(209),
        providers: [setup_service_1.SetupService, primeng_1.ConfirmationService]
    }),
    tslib_1.__metadata("design:paramtypes", [http_1.Http, router_1.Router, router_1.ActivatedRoute, primeng_1.ConfirmationService, setup_service_1.SetupService])
], IncomingMessageComponent);
exports.IncomingMessageComponent = IncomingMessageComponent;


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var http_1 = __webpack_require__(12);
var router_1 = __webpack_require__(5);
var setup_service_1 = __webpack_require__(11);
var primeng_1 = __webpack_require__(2);
var moment = __webpack_require__(0);
var Rx_1 = __webpack_require__(14);
var InhouseMessageComponent = (function () {
    function InhouseMessageComponent(http, _router, activatedRoute, confirmationService, _setupService) {
        var _this = this;
        this._router = _router;
        this.activatedRoute = activatedRoute;
        this.confirmationService = confirmationService;
        this._setupService = _setupService;
        this.msgs = [];
        this.organizationId = localStorage.getItem("OrganizationId");
        this.selectedMonths = [];
        this.selectedDays = [];
        this.daysOfWeek = "";
        this.daysOfMonth = "";
        this.messageCenterDialog = false;
        this.selectedGrade = [];
        this.selectedClassSection = [];
        this.deviceDetailList = [];
        this.http = http;
        this.showClass = false;
        this._setupService.getPatron().subscribe(function (result) {
            _this.patronDetails = result;
        });
        this._setupService.getGrade().subscribe(function (response) {
            _this.gradeDetails = response;
            _this.gradeDetails = _this.gradeDetails.sort(function (a, b) {
                return parseInt(a.grade) - parseInt(b.grade);
            });
            _this.createGradeList();
            _this.createClassList();
        });
        this.getMessage();
        this.broadcastTo = [];
        this.broadcastTo.push({ label: 'Choose Option', value: null });
        this.broadcastTo.push({ label: 'Organization', value: 'Organization' });
        this.broadcastTo.push({ label: 'Class', value: 'Class' });
        this.broadcastTo.push({ label: 'Class-Section', value: 'Sections' });
        this.broadcastTo.push({ label: 'Transport', value: 'Transport' });
        this.outgoingMessageTo = [];
        this.outgoingMessageTo.push({ label: 'Choose Option', value: null });
        this.outgoingMessageTo.push({ label: 'Organization', value: 'Organization' });
        this.outgoingMessageTo.push({ label: 'Class', value: 'Class' });
        this.outgoingMessageTo.push({ label: 'Class-Section', value: 'Sections' });
        this.outgoingMessageTo.push({ label: 'Patron', value: 'Patron' });
        this.messageCategory = [];
        this.messageCategory.push({ label: 'SelectCategory', value: null });
        this.messageCategory.push({ label: 'Important', value: 'Important' });
        this.messageCategory.push({ label: 'Critical', value: 'Critical' });
        this.messageCategory.push({ label: 'Regular', value: 'Regular' });
        this.messageDetail = {
            //id: '',
            message: null,
            messageCategory: '',
            deviceDetail: this.deviceDetailList,
            expiryDate: null,
            organizationId: this.organizationId,
            messageDate: '',
            messageTime: '',
            messageType: ''
        };
    }
    InhouseMessageComponent.prototype.getMessage = function () {
        var _this = this;
        this._setupService.getMessage().subscribe(function (result) {
            _this.messageCenterDetails = result;
        });
        this._setupService.getOutgoingMessage().subscribe(function (result) {
            _this.externalMessageDetails = result;
        });
    };
    InhouseMessageComponent.prototype.openSearchBox = function () {
        this.patronMapDialog = true;
    };
    InhouseMessageComponent.prototype.mapPatron = function (event) {
        this.selectedPatron = this.selectedPatronDetail;
        this.patronMapDialog = false;
    };
    InhouseMessageComponent.prototype.createGradeList = function () {
        this.classSectionList = [];
        for (var i = 0; i < this.gradeDetails.length; i++) {
            this.classSectionList.push({ label: this.gradeDetails[i].grade + "-" + this.gradeDetails[i].section, value: this.gradeDetails[i].grade + "-" + this.gradeDetails[i].section });
        }
    };
    InhouseMessageComponent.prototype.createClassList = function () {
        var _this = this;
        this.classList = [];
        for (var i = 0; i < this.gradeDetails.length; i++) {
            if (!this.classList.find(function (x) { return x.label == _this.gradeDetails[i].grade; })) {
                this.classList.push({ label: this.gradeDetails[i].grade, value: this.gradeDetails[i].grade });
            }
        }
    };
    InhouseMessageComponent.prototype.sendMessageToPatron = function () {
        var _this = this;
        var observables = new Array();
        var org = [];
        var patrons = [];
        var pat = [];
        var selectedClassPatron = [];
        if (this.selectedBroadCast == 'Organization') {
            this._setupService.getPatron().subscribe(function (result) {
                patrons = result;
                selectedClassPatron.push(patrons);
                _this.sendExternalData(selectedClassPatron);
            });
        }
        else if (this.selectedBroadCast == 'Class') {
            for (var _i = 0, _a = this.selectedGrade; _i < _a.length; _i++) {
                var patronClass = _a[_i];
                observables.push(this._setupService.getClassByPatrons(patronClass));
            }
            Rx_1.Observable.forkJoin(observables).subscribe(function (result) {
                selectedClassPatron = result;
                _this.sendExternalData(selectedClassPatron);
            });
        }
        else if (this.selectedBroadCast == 'Sections') {
            for (var _b = 0, _c = this.selectedClassSection; _b < _c.length; _b++) {
                var patronClassSection = _c[_b];
                var grades = patronClassSection.split("-");
                observables.push(this._setupService.getClassPatron(grades[0], grades[1], this.selectedDate));
            }
            Rx_1.Observable.forkJoin(observables).subscribe(function (result) {
                selectedClassPatron = result;
                _this.sendExternalData(selectedClassPatron);
            });
        }
        else if (this.selectedBroadCast == 'Patron') {
            patrons.push(this.selectedPatron);
            selectedClassPatron.push(patrons);
            this.sendExternalData(selectedClassPatron);
        }
        this.messageCenterDialog = false;
    };
    InhouseMessageComponent.prototype.sendExternalData = function (selectedClassPatron) {
        var _this = this;
        for (var _i = 0, selectedClassPatron_1 = selectedClassPatron; _i < selectedClassPatron_1.length; _i++) {
            var classPatron = selectedClassPatron_1[_i];
            for (var _a = 0, classPatron_1 = classPatron; _a < classPatron_1.length; _a++) {
                var patron = classPatron_1[_a];
                this.outgoingMessage.patronId.push(patron.id);
            }
        }
        this.outgoingMessage.messageDate = moment(new Date()).format('YYYY-MM-DD');
        this._setupService.createOutgoingMessage(this.outgoingMessage).subscribe(function (messageDetails) {
            _this._setupService.getMessage().subscribe(function (result) {
                _this.messageCenterDetails = result;
            });
        });
    };
    InhouseMessageComponent.prototype.sendMessage = function () {
        var _this = this;
        var observables = new Array();
        var allClassDevice = [];
        var allClassDeviceList = [];
        this.messageDetail.messageCategory = this.selectedCategory;
        if (this.selectedBroadCast == 'Organization') {
            var allDevice = [];
            this._setupService.getAttendanceDevice().subscribe(function (result) {
                allDevice = result;
                allClassDevice.push(allDevice);
                _this.sendData(allClassDevice);
            });
        }
        else if (this.selectedGrade.length > 0 && this.selectedBroadCast == 'Class') {
            for (var _i = 0, _a = this.selectedGrade; _i < _a.length; _i++) {
                var patronClass = _a[_i];
                observables.push(this._setupService.getAllClassDevice(patronClass));
            }
            Rx_1.Observable.forkJoin(observables).subscribe(function (result) {
                allClassDevice = result;
                _this.sendData(allClassDevice);
            });
        }
        else if (this.selectedClassSection.length > 0 && this.selectedBroadCast == 'Sections') {
            for (var _b = 0, _c = this.selectedClassSection; _b < _c.length; _b++) {
                var patronClassSection = _c[_b];
                var grades = patronClassSection.split("-");
                observables.push(this._setupService.getSectionDevice(grades[0], grades[1]));
            }
            Rx_1.Observable.forkJoin(observables).subscribe(function (result) {
                allClassDevice = result;
                _this.sendData(allClassDevice);
            });
        }
        else if (this.selectedBroadCast == 'Transport') {
            var transportDevice = [];
            this._setupService.getTransportDevice().subscribe(function (result) {
                transportDevice = result;
                allClassDevice.push(transportDevice);
                _this.sendData(allClassDevice);
            });
        }
        this.msgs = [];
        this.msgs.push({ severity: 'info', summary: 'message created sucessfully' });
        this.messageCenterDialog = false;
    };
    InhouseMessageComponent.prototype.sendData = function (classDeviceInfoList) {
        var _this = this;
        this.deviceDetailList = [];
        for (var _i = 0, classDeviceInfoList_1 = classDeviceInfoList; _i < classDeviceInfoList_1.length; _i++) {
            var classDeviceInfo = classDeviceInfoList_1[_i];
            if (classDeviceInfo != null) {
                for (var _a = 0, classDeviceInfo_1 = classDeviceInfo; _a < classDeviceInfo_1.length; _a++) {
                    var classDevice = classDeviceInfo_1[_a];
                    this.deviceDetail = {};
                    this.deviceDetail.deviceId = classDevice.name;
                    this.deviceDetail.receivedBy = classDevice.class + "-" + classDevice.section;
                    if (this.selectedBroadCast == 'Transport') {
                        this.deviceDetail.receivedBy = classDevice.name;
                    }
                    //this.deviceDetail.acknowledgeDate = moment(new Date()).format('YYYY-MM-DD');
                    //this.deviceDetail.acknowledgeTime = moment(new Date()).format('HH:MM');
                    this.deviceDetailList.push(this.deviceDetail);
                }
            }
        }
        if (this.messageDetail.expiryDate == null) {
            this.messageDetail.expiryDate = moment(new Date()).format('YYYY-MM-DD');
        }
        var a = this.messageDetail.expiryDate;
        var b = moment(a).format('YYYY-MM-DD');
        this.messageDetail.expiryDate = b;
        this.messageDetail.deviceDetail = this.deviceDetailList;
        this.messageDetail.messageDate = moment(new Date()).format('YYYY-MM-DD');
        this.messageDetail.messageCategory = this.selectedCategory;
        this._setupService.createMessage(this.messageDetail).subscribe(function (res) {
            if (res === 204) {
                _this._setupService.getMessage().subscribe(function (result) {
                    _this.messageCenterDetails = result;
                });
            }
            //this.getMessage();
        });
    };
    InhouseMessageComponent.prototype.createMessageList = function () {
        this.deviceList = [];
        this.deviceList.push({ label: 'Device List', value: 'null' });
        for (var i = 0; i < this.messageDetails.length; i++) {
            this.deviceList.push({ label: this.messageDetails[i].name, value: this.messageDetails[i].id });
        }
    };
    InhouseMessageComponent.prototype.createMessage = function () {
        this.messageDetail = {
            //id: '',
            message: null,
            messageCategory: '',
            deviceDetail: this.deviceDetailList,
            expiryDate: null,
            organizationId: this.organizationId,
            messageDate: '',
            messageTime: '',
            messageType: ''
        };
        this.selectedBroadCast = null;
        this.selectedCategory = this.messageDetail.messageCategory;
        this.messageCenterDialog = true;
    };
    InhouseMessageComponent.prototype.onCancel = function (event) {
        this.messageCenterDialog = false;
    };
    InhouseMessageComponent.prototype.ngOnInit = function () {
    };
    InhouseMessageComponent.prototype.onSelectMode = function () {
        if (this.selectedBroadCast == 'Organization') {
            this.selectedGrade = [];
            this.selectedClassSection = [];
            this.showClassSection = false;
            this.showClass = false;
        }
        if (this.selectedBroadCast == 'Class') {
            this.selectedClassSection = [];
            this.showClassSection = false;
            this.showClass = true;
        }
        if (this.selectedBroadCast == 'Sections') {
            this.selectedGrade = [];
            this.showClassSection = true;
            this.showClass = false;
        }
        if (this.selectedBroadCast == 'Transport') {
            this.selectedGrade = [];
            this.selectedClassSection = [];
            this.showClassSection = false;
            this.showClass = false;
        }
        if (this.selectedBroadCast == 'Patron') {
            this.showClassSection = false;
            this.showClass = false;
            this.patron = true;
        }
    };
    InhouseMessageComponent.prototype.confirm = function (event) {
        this.deviceDetails = [];
        this.deviceDetails = this.selectedMessageDetail.deviceDetail;
        this.displayDialog = true;
    };
    return InhouseMessageComponent;
}());
InhouseMessageComponent = tslib_1.__decorate([
    core_1.Component({
        selector: 'inhousemessage',
        template: __webpack_require__(210),
        providers: [setup_service_1.SetupService, primeng_1.ConfirmationService]
    }),
    tslib_1.__metadata("design:paramtypes", [http_1.Http, router_1.Router, router_1.ActivatedRoute, primeng_1.ConfirmationService, setup_service_1.SetupService])
], InhouseMessageComponent);
exports.InhouseMessageComponent = InhouseMessageComponent;


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var router_1 = __webpack_require__(5);
var setup_service_1 = __webpack_require__(11);
var Rx_1 = __webpack_require__(14);
var global_constants_1 = __webpack_require__(15);
var moment = __webpack_require__(0);
var MapViewComponent = (function () {
    // start constructor operation
    function MapViewComponent(activatedRoute, _setupService) {
        var _this = this;
        this.activatedRoute = activatedRoute;
        this._setupService = _setupService;
        this.msgs = [];
        this.patron = {};
        this.routeVisible = true;
        this.tabVisible1 = true;
        this.tabVisible2 = true;
        this.RouteMap = true;
        this.StoppageMap = true;
        this.orgId = global_constants_1.AppSettings.ORGANIZATION_ID;
        this.visible = true;
        this.count = 0;
        this.patronDetail = false;
        this.patronLeaveInfoList = [];
        this.patronDetailList = [];
        this.lat = 28.633161137544214;
        this.lng = 77.08655834197998;
        this.zoom = 12;
        this.RoutedPage = true;
        this.headerColor = "Black";
        this.tabVisible1 = false;
        this.schoolIcon = global_constants_1.AppSettings.SCHOOL_IMAGE;
        this.routeMonitoringDetails = [];
        this.selectedDate = global_constants_1.AppSettings.CURRENT_DATE;
        if (this.timeline != undefined) {
            this.timeline.destroy();
        }
        // get transport route run by date
        this._setupService.GetCurrentRouteRun(this.selectedDate).subscribe(function (result) {
            _this.transportRouteRunList = result;
            if (_this.transportRouteRunList.find(function (x) { return x.runDirection == "2"; })) {
                _this.runDirection = "2";
            }
            _this._setupService.getTranportRoute().subscribe(function (result) {
                _this.transportRoute = result;
                _this.getAllRoutes(); //call to getAllRoutes
                //Get RouteMonitoring Details
                _this._setupService.getAllLocation(_this.selectedDate).subscribe(function (result) {
                    _this.routeMonitoringDetails = result;
                    _this.initOverlay("All");
                });
                _this._setupService.getOrganization().subscribe(function (result) {
                    _this.orgDetails = result;
                    if (_this.orgDetails != null) {
                        _this.orgMarkers = [];
                        _this.orgMarkers.push({ lat: Number(_this.orgDetails.location.latitude), lng: Number(_this.orgDetails.location.longitude), label: _this.orgDetails.name, title: _this.orgDetails.name, icon: _this.schoolIcon, draggable: false, });
                    }
                });
                _this.getAllRouteSummary(); //call to getAllRouteSummary
                _this.tabVisible1 = false;
            });
        });
        this._setupService.getPerson().subscribe(function (result) {
            _this.personList = result;
        });
        this._setupService.getPatron().subscribe(function (result) {
            _this.patronList = result;
            _this._setupService.getPatronOnLeave(_this.selectedDate).subscribe(function (result) {
                _this.patronLeaveInfoList = result;
            });
        });
        //Get Transport Route
        this.RouteOverlays = new Array();
        Rx_1.Observable.interval(10000).subscribe(function (x) {
            //if (this.timeline != undefined) {
            //    this.timeline.destroy();
            //}
            //if (this.RoutedPage) {
            _this._setupService.GetCurrentRouteRun(_this.selectedDate).subscribe(function (result) {
                _this.transportRouteRunList = result;
                if (_this.transportRouteRunList.find(function (x) { return x.runDirection == "2"; })) {
                    _this.runDirection = "2";
                }
            });
            _this.selectRoute(_this.selectedRoute);
            //this.RoutedPage = false;
            //}
        });
    }
    // End constructor operation
    MapViewComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.activatedRoute.params.subscribe(function (params) {
            _this.navigatedRouteNumber = params["routeNumber"];
            //this.selectRoute(this.selectedRoute);
        });
        this.routeVisible = true;
    };
    MapViewComponent.prototype.ngOnDestroy = function () {
        if (this.timeline != undefined) {
            this.timeline.destroy();
        }
        //alert("Navigated from Current Page");
        this.RouteMap = true;
        this.StoppageMap = false;
        this.tabVisible1 = false;
        this.tabVisible2 = true;
        this.stoppageSummaryArr = [];
    };
    // get selected Route Data
    MapViewComponent.prototype.selectRoute = function ($event) {
        var _this = this;
        var elements = document.getElementsByTagName("div");
        //alert("elements.length = " + elements.length)
        for (var i = 0; i < elements.length; i++) {
            if (elements[i].id == "visualization") {
                this.timelineDiv = elements[i];
            }
        }
        this.selectedTransportRun = {};
        //this.stoppageSummaryArr = [];
        // execute when navigation came from Dashboard.
        var transportRoute = {};
        if (this.navigatedRouteNumber != null) {
            transportRoute = this.transportRoute.find(function (x) { return x.routeNumber == _this.navigatedRouteNumber; });
            if (transportRoute != null) {
                this.selectedRoute = transportRoute.id;
            }
        }
        var a = global_constants_1.AppSettings.CURRENT_DATE;
        this.selectedDate = a;
        var personTracking = [];
        if (this.selectedRoute == undefined || this.selectedRoute == "AllRoute") {
            this.getAllRouteSummary();
            this._setupService.getAllLocation(this.selectedDate).subscribe(function (result) {
                _this.routeMonitoringDetails = result;
                _this.initOverlay("All");
            });
            this.RouteMap = true;
            this.StoppageMap = false;
            this.tabVisible1 = false;
            this.tabVisible2 = true;
        }
        else {
            this.driverImage = global_constants_1.AppSettings.DEFAULT_IMAGE;
            this.coordinatorImage = global_constants_1.AppSettings.DEFAULT_IMAGE;
            this.routeStaffImage = global_constants_1.AppSettings.DEFAULT_IMAGE;
            this.driverName = global_constants_1.AppSettings.NOTFOUND;
            this.coordinatorName = global_constants_1.AppSettings.NOTFOUND;
            this.routeStaffName = global_constants_1.AppSettings.NOTFOUND;
            this.routeSelected = this.selectedRoute;
            var person = {};
            this.selectedTransportRun = this.transportRouteRunList.find(function (x) { return x.routeId == _this.routeSelected; });
            if (this.selectedTransportRun) {
                this.coveredStoppage = this.selectedTransportRun.stoppages;
                personTracking = this.selectedTransportRun.employees;
                if (personTracking.length > 0) {
                    for (var _i = 0, personTracking_1 = personTracking; _i < personTracking_1.length; _i++) {
                        var personId = personTracking_1[_i];
                        person = this.personList.find(function (x) { return x.id == personId; });
                        if (person != null) {
                            if (person.role == "Driver") {
                                this.driverName = person.firstName + " " + person.lastName;
                                this.driverImage = person.imgUrl;
                            }
                            else if (person.role == "Coordinator") {
                                this.coordinatorName = person.firstName + " " + person.lastName;
                                this.coordinatorImage = person.imgUrl;
                            }
                            else if (person.role == "Teacher") {
                                this.routeStaffName = person.firstName + " " + person.lastName;
                                this.routeStaffImage = person.imgUrl;
                            }
                        }
                    }
                }
                if (this.driverName == global_constants_1.AppSettings.NOTFOUND) {
                    person = this.personList.find(function (x) { return x.id == _this.selectedTransportRun.driverId; });
                    if (person != null) {
                        this.driverName = person.firstName + " " + person.lastName;
                        this.driverImage = person.imgUrl;
                    }
                }
                if (this.coordinatorName == global_constants_1.AppSettings.NOTFOUND) {
                    person = this.personList.find(function (x) { return x.id == _this.selectedTransportRun.coordinatorId; });
                    if (person != null) {
                        this.coordinatorName = person.firstName + " " + person.lastName;
                        this.coordinatorImage = person.imgUrl;
                    }
                }
                if (this.routeStaffName == global_constants_1.AppSettings.NOTFOUND) {
                    person = this.personList.find(function (x) { return x.id == _this.selectedTransportRun.routeStaffId; });
                    if (person != null) {
                        this.routeStaffName = person.firstName + " " + person.lastName;
                        this.routeStaffImage = person.imgUrl;
                    }
                }
            }
            else {
                var transportRouteRun;
                transportRouteRun = this.transportRoute.find(function (x) { return x.id == _this.routeSelected; });
                if (transportRoute != null) {
                    if (this.driverName == global_constants_1.AppSettings.NOTFOUND) {
                        person = this.personList.find(function (x) { return x.id == transportRouteRun.driverId; });
                        if (person != null) {
                            this.driverName = person.firstName + " " + person.lastName;
                            this.driverImage = person.imgUrl;
                        }
                    }
                    if (this.coordinatorName == global_constants_1.AppSettings.NOTFOUND) {
                        person = this.personList.find(function (x) { return x.id == transportRouteRun.coordinatorId; });
                        if (person != null) {
                            this.coordinatorName = person.firstName + " " + person.lastName;
                            this.coordinatorImage = person.imgUrl;
                        }
                    }
                    if (this.routeStaffName == global_constants_1.AppSettings.NOTFOUND) {
                        person = this.personList.find(function (x) { return x.id == transportRouteRun.routeStaffId; });
                        if (person != null) {
                            this.routeStaffName = person.firstName + " " + person.lastName;
                            this.routeStaffImage = person.imgUrl;
                        }
                    }
                }
            }
            this.selectedroutes = this.transportRoute.find(function (x) { return x.id == _this.routeSelected; });
            if (this.selectedroutes != null) {
                this.routeNumber = this.selectedroutes.routeNumber;
                this.transportStoppages = this.selectedroutes.transportStoppages.sort(function (a, b) {
                    return a.sequence - b.sequence;
                });
                this._setupService.getAllLocation(this.selectedDate).subscribe(function (result) {
                    _this.routeMonitoringDetails = result;
                    _this.initOverlay("Route");
                    _this.createPatronList();
                });
                //this.initOverlay("Route");
            }
            //});
            //alert("Route Selected");
            this.RouteMap = false;
            this.StoppageMap = true;
            this.tabVisible1 = true;
            this.tabVisible2 = false;
        }
    };
    // Get All route data and selected route data
    MapViewComponent.prototype.initOverlay = function (type) {
        var _this = this;
        this.markers = [];
        this.stops = [];
        this.polyline = [];
        var allRouteIcon = global_constants_1.AppSettings.ALLROUTE_MARKER;
        var commingStopIcon = global_constants_1.AppSettings.COMMING_STOP_MARKER;
        var coveredStopIcon = global_constants_1.AppSettings.COVERED_STOP_MARKER;
        var bus = global_constants_1.AppSettings.ROUTE_BUS;
        this.routeVisible = true;
        var transportRoute = {};
        if (type == "All") {
            this.stops = [];
            this.polyline = [];
            var routeNumber = "0";
            for (var _i = 0, _a = this.routeMonitoringDetails; _i < _a.length; _i++) {
                var route = _a[_i];
                if (route.routeID != null) {
                    if (this.transportRoute.length > 0) {
                        transportRoute = this.transportRoute.find(function (x) { return x.id == route.routeID; });
                        if (transportRoute != null) {
                            routeNumber = transportRoute.routeNumber;
                        }
                    }
                }
                this.markers.push({ lat: Number(route.location.latitude), lng: Number(route.location.longitude), label: '', title: '', icon: global_constants_1.AppSettings.IMAGE_ENDPOINT + "bus" + transportRoute.routeNumber + ".png", draggable: false, });
            }
        }
        else {
            //alert("Setting Individual Map") ;
            this.stops = [];
            this.polyline = [];
            this.polyArr = new Array();
            var routeMonitoring;
            transportRoute = this.transportRoute.find(function (x) { return x.id == _this.selectedRoute; });
            routeMonitoring = this.routeMonitoringDetails.find(function (x) { return x.routeID == _this.selectedRoute; });
            if (routeMonitoring) {
                this.markers.push({ lat: Number(routeMonitoring.location.latitude), lng: Number(routeMonitoring.location.longitude), label: '', title: '', icon: global_constants_1.AppSettings.IMAGE_ENDPOINT + "bus" + transportRoute.routeNumber + ".png", draggable: false });
            }
            var stoppageTracking = {};
            var stoppagePatronNumber = 0;
            var stoppageReachTime = "NA";
            var expectedTime = "NA";
            for (var _b = 0, _c = this.transportStoppages; _b < _c.length; _b++) {
                var stoppages = _c[_b];
                if (this.selectedTransportRun) {
                    expectedTime = stoppages.pickupTime;
                    stoppageTracking = this.selectedTransportRun.stoppages.find(function (x) { return x.transportStoppageID == stoppages.id; }) == undefined ? null : this.selectedTransportRun.stoppages.find(function (x) { return x.transportStoppageID == stoppages.id; });
                    if (stoppageTracking != null && stoppageTracking.patrons != null) {
                        stoppagePatronNumber = stoppageTracking.patrons.length;
                        stoppageReachTime = stoppageTracking.reachedTime;
                    }
                    //if (this.selectedTransportRun.runDirection.toString() == "2") {
                    if (this.runDirection == "2") {
                        expectedTime = stoppages.dropTime;
                    }
                }
                if (this.coveredStoppage) {
                    if (this.coveredStoppage.find(function (x) { return x.transportStoppageID == stoppages.id; })) {
                        this.stops.push({ lat: Number(stoppages.lattitude), lng: Number(stoppages.longitude), label: stoppages.sequence.toString(), title: stoppages.name + "\n" + "Expected Patron : " + stoppages.patronId.length + "\n" + "Actual Patron : " + stoppagePatronNumber + "\n" + "Expected Time : " + expectedTime + "\n" + "Actual Time : " + stoppageReachTime, icon: coveredStopIcon, draggable: false, });
                        this.polyline.push({ lat: Number(stoppages.lattitude), lng: Number(stoppages.longitude), geodesic: true, strokeColor: "green", strokeOpacity: 0.3, strokeWeight: 2 });
                    }
                    else {
                        this.stops.push({ lat: Number(stoppages.lattitude), lng: Number(stoppages.longitude), label: stoppages.sequence.toString(), title: stoppages.name + "\n" + "Expected Patron : " + stoppages.patronId.length + "\n" + "Actual Patron : " + stoppagePatronNumber + "\n" + "Expected Time : " + expectedTime + "\n" + "Actual Time : " + stoppageReachTime, icon: commingStopIcon, draggable: false, });
                        this.polyline.push({ lat: Number(stoppages.lattitude), lng: Number(stoppages.longitude), geodesic: true, strokeColor: "red", strokeOpacity: 0.3, strokeWeight: 2 });
                    }
                }
                else {
                    this.stops.push({ lat: Number(stoppages.lattitude), lng: Number(stoppages.longitude), label: stoppages.sequence.toString(), title: stoppages.name + "\n" + "Expected Patron : " + stoppages.patronId.length + "\n" + "Actual Patron : " + stoppagePatronNumber + "\n" + "Expected Time : " + expectedTime + "\n" + "Actual Time : " + stoppageReachTime, icon: commingStopIcon, draggable: false, });
                    this.polyline.push({ lat: Number(stoppages.lattitude), lng: Number(stoppages.longitude), geodesic: true, strokeColor: "red", strokeOpacity: 0.3, strokeWeight: 2 });
                }
            }
        }
    }; //End  operations
    //Get stoppage summary of All routes
    MapViewComponent.prototype.getAllRouteSummary = function () {
        //this._setupService.getTransportRouteRun(this.selectedDate).subscribe(result => {
        //    this.transportRouteRunList = result;
        //var routeDirection: TransportRouteRun | null = <TransportRouteRun>{};;
        var routeMonitor;
        var routeStoppage;
        var runRoutes = {};
        //var pickRoute: TransportRouteRun[] = [];
        //var dropRoute: TransportRouteRun[] = [];
        var transportStoppageTracking;
        this.routeMonitorList = new Array();
        //routeDirection = this.transportRouteRunList.find(x => x.runDirection == "2");
        for (var _i = 0, _a = this.transportRoute; _i < _a.length; _i++) {
            var route = _a[_i];
            routeStoppage = [];
            runRoutes = this.transportRouteRunList.find(function (x) { return x.routeId == route.id; });
            routeStoppage = route.transportStoppages.sort(function (a, b) {
                return a.sequence - b.sequence;
            });
            //if (routeDirection != null && routeDirection.runDirection == "2") {
            if (this.runDirection == "2") {
                routeStoppage = route.transportStoppages.sort(function (a, b) {
                    return b.sequence - a.sequence;
                });
                //pickRoute = runRoutes.filter(x => x.runDirection.toString() == "1");
                //dropRoute = runRoutes.filter(x => x.runDirection.toString() == "2");
            }
            this.routeMonitors = [];
            //if (runRoutes != null) {
            //    alert("runRoutes.runDirection = " + runRoutes.runDirection);
            //}
            // if (route.transportStoppages != null && route.transportStoppages.length > 0) {
            //routeStoppage = route.transportStoppages.sort(function (a, b) {
            //    return a.sequence - b.sequence;
            //});
            //if (runRoutes.length > 1) {
            //    routeStoppage = route.transportStoppages.sort(function (a, b) {
            //        return b.sequence - a.sequence;
            //    });
            //}
            for (var _b = 0, routeStoppage_1 = routeStoppage; _b < routeStoppage_1.length; _b++) {
                var stoppage = routeStoppage_1[_b];
                //alert("stoppage = " + stoppage.name);
                routeMonitor = {};
                routeMonitor.headerColor = "red";
                routeMonitor.dropTime = "NA";
                routeMonitor.dropCount = "0";
                routeMonitor.pickUpTime = "NA";
                routeMonitor.pickCount = "0";
                routeMonitor.runDirection = "1";
                if (runRoutes != null) {
                    transportStoppageTracking = runRoutes.stoppages.find(function (p) { return p.transportStoppageID == stoppage.id; });
                    if (transportStoppageTracking != null) {
                        routeMonitor.headerColor = "green";
                        routeMonitor.pickUpTime = transportStoppageTracking.reachedTime;
                        routeMonitor.pickCount = transportStoppageTracking.patrons.length.toString();
                        routeMonitor.actualPickPatronId = transportStoppageTracking.patrons;
                        routeMonitor.dropTime = transportStoppageTracking.reachedTime;
                        routeMonitor.dropCount = transportStoppageTracking.patrons.length.toString();
                        routeMonitor.actualDropPatronId = transportStoppageTracking.patrons;
                        routeMonitor.runDirection = "1";
                        if (runRoutes.runDirection == "2") {
                            //alert("Run Direction 2")
                            routeMonitor.runDirection = "2";
                        }
                    }
                }
                //alert("transportStoppageTracking = " + transportStoppageTracking);
                //if (pickRoute.length > 0) {
                //    transportStoppageTracking = pickRoute[0].stoppages.filter(p => p.transportStoppageID == stoppage.id);
                //    if (transportStoppageTracking.length > 0) {
                //        routeMonitor.headerColor = "green";
                //        routeMonitor.pickUpTime = transportStoppageTracking[0].reachedTime;
                //        routeMonitor.pickCount = transportStoppageTracking[0].patrons.length.toString();
                //        routeMonitor.actualPickPatronId = transportStoppageTracking[0].patrons;
                //        routeMonitor.runDirection = "1";
                //    }
                //}
                //if (dropRoute.length > 0) {
                //    transportStoppageTracking = [];
                //    transportStoppageTracking = dropRoute[0].stoppages.filter(p => p.transportStoppageID == stoppage.id);
                //    if (transportStoppageTracking.length > 0) {
                //        routeMonitor.headerColor = "green";
                //        routeMonitor.dropTime = transportStoppageTracking[0].reachedTime;
                //        routeMonitor.dropCount = transportStoppageTracking[0].patrons.length.toString();
                //        routeMonitor.actualDropPatronId = transportStoppageTracking[0].patrons;
                //        routeMonitor.runDirection = "2";
                //    }
                //}
                routeMonitor.expectedPatronId = stoppage.patronId;
                routeMonitor.expectedPickTime = stoppage.pickupTime;
                routeMonitor.expectedPickCount = stoppage.patronId.length.toString();
                routeMonitor.expectedDropCount = stoppage.patronId.length.toString();
                routeMonitor.expectedDropTime = stoppage.dropTime;
                routeMonitor.routeId = route.routeNumber;
                routeMonitor.stoppageName = stoppage.name;
                routeMonitor.stopSequence = stoppage.sequence;
                this.routeMonitors.push(routeMonitor);
            }
            //} 
            this.routeMonitorList.push(this.routeMonitors);
        }
        //});
    }; //End operation
    // Get pick up data when click on a stoppage in route monitoring details
    MapViewComponent.prototype.getPickupData = function (col) {
        var patronSummary;
        var patronDetail;
        this.patronInfoList = [];
        if (col.actualPickPatronId != null && col.actualPickPatronId.length > 0) {
            for (var _i = 0, _a = col.actualPickPatronId; _i < _a.length; _i++) {
                var stoppagePatron = _a[_i];
                patronSummary = {};
                patronDetail = this.patronList.find(function (x) { return x.id == stoppagePatron; });
                if (patronDetail != null) {
                    patronSummary.patron = patronDetail;
                    patronSummary.imgUrl = patronDetail.imgUrl;
                    if (col.actualPickPatronId.indexOf(stoppagePatron) > -1) {
                        status = "Picked";
                        patronSummary.patronStatus = status;
                        patronSummary.headerColor = "Green";
                    }
                    else if (this.patronLeaveInfoList.find(function (x) { return x.patronId == stoppagePatron; })) {
                        status = "OnLeave";
                        patronSummary.patronStatus = status;
                        patronSummary.headerColor = "Orange";
                    }
                    else {
                        status = "Absent";
                        patronSummary.patronStatus = status;
                        patronSummary.headerColor = "red";
                    }
                    this.patronInfoList.push(patronSummary);
                }
            }
        }
        else {
            for (var _b = 0, _c = col.expectedPatronId; _b < _c.length; _b++) {
                var stoppagePatron = _c[_b];
                patronSummary = {};
                patronDetail = this.patronList.find(function (x) { return x.id == stoppagePatron; });
                if (patronDetail != null) {
                    patronSummary.patron = patronDetail;
                    patronSummary.imgUrl = patronDetail.imgUrl;
                    if (this.patronLeaveInfoList.find(function (x) { return x.patronId == stoppagePatron; })) {
                        status = "OnLeave";
                        patronSummary.patronStatus = status;
                        patronSummary.headerColor = "Orange";
                    }
                    else {
                        status = "Absent";
                        patronSummary.patronStatus = status;
                        patronSummary.headerColor = "red";
                    }
                    this.patronInfoList.push(patronSummary);
                }
            }
        }
        this.patronDetail = true;
    };
    //End operation
    // Get getDropData  when click on a stoppage in route monitoring details
    MapViewComponent.prototype.getDropData = function (col) {
        var patronSummary;
        var patronDetail;
        this.patronInfoList = [];
        if (col.actualDropPatronId != null && col.actualDropPatronId.length > 0) {
            for (var _i = 0, _a = col.actualDropPatronId; _i < _a.length; _i++) {
                var stoppagePatron = _a[_i];
                patronSummary = {};
                patronDetail = this.patronList.find(function (x) { return x.id == stoppagePatron; });
                if (patronDetail != null) {
                    patronSummary.patron = patronDetail;
                    patronSummary.imgUrl = patronDetail.imgUrl;
                    if (col.actualDropPatronId.indexOf(stoppagePatron) > -1) {
                        status = "Droped";
                        patronSummary.patronStatus = status;
                        patronSummary.headerColor = "Green";
                    }
                    else if (this.patronLeaveInfoList.find(function (x) { return x.patronId == stoppagePatron; })) {
                        status = "OnLeave";
                        patronSummary.patronStatus = status;
                        patronSummary.headerColor = "Orange";
                    }
                    else {
                        status = "Absent";
                        patronSummary.patronStatus = status;
                        patronSummary.headerColor = "red";
                    }
                }
                this.patronInfoList.push(patronSummary);
            }
        }
        else {
            //alert("Expected");
            for (var _b = 0, _c = col.expectedPatronId; _b < _c.length; _b++) {
                var stoppagePatron = _c[_b];
                patronSummary = {};
                patronDetail = this.patronList.find(function (x) { return x.id == stoppagePatron; });
                if (patronDetail != null) {
                    patronSummary.patron = patronDetail;
                    patronSummary.imgUrl = patronDetail.imgUrl;
                    if (this.patronLeaveInfoList.find(function (x) { return x.patronId == stoppagePatron; })) {
                        status = "OnLeave";
                        patronSummary.patronStatus = status;
                        patronSummary.headerColor = "Orange";
                    }
                    else {
                        status = "Absent";
                        patronSummary.patronStatus = status;
                        patronSummary.headerColor = "red";
                    }
                }
                this.patronInfoList.push(patronSummary);
            }
        }
    };
    MapViewComponent.prototype.handleMapClick = function (event) {
        this.dialogVisible = true;
        this.selectedPosition = event.latLng;
    };
    //update Visibility
    MapViewComponent.prototype.updateVisibility = function () {
        var _this = this;
        this.visible = false;
        setTimeout(function () { return _this.visible = true; }, 0);
        this.selectRoute(this.selectedRoute);
    };
    MapViewComponent.prototype.getAllRoutes = function () {
        this.routeList = [];
        this.routeList.push({ label: 'All Route', value: 'AllRoute' });
        for (var _i = 0, _a = this.transportRoute; _i < _a.length; _i++) {
            var route = _a[_i];
            this.routeList.push({ label: "Route - " + route.routeNumber, value: route.id });
        }
    };
    MapViewComponent.prototype.createPatronList = function () {
        var _this = this;
        var selectedTransportRouteRunStoppage;
        this.patronStoppageSummaryArr = [];
        this.items = new vis.DataSet();
        var options = {};
        var currentTime = new Date();
        var month = currentTime.getMonth();
        var day = currentTime.getDate();
        var year = currentTime.getFullYear();
        if (this.runDirection == "2") {
            this.transportStoppages = this.transportStoppages.sort(function (a, b) {
                return b.sequence - a.sequence;
            });
        }
        for (var _i = 0, _a = this.transportStoppages; _i < _a.length; _i++) {
            var stoppage = _a[_i];
            var fields = stoppage.pickupTime.split(':');
            if (this.runDirection == "2") {
                var fields = stoppage.dropTime.split(':');
            }
            var hour = fields[0];
            var minute = Number(fields[1]);
            var scheduledTime = new Date(year, month, day, +hour, +minute);
            //alert("Selected Route Stoppages = " + this.selectedTransportRun.stoppages.length);
            if (this.selectedTransportRun) {
                selectedTransportRouteRunStoppage = this.selectedTransportRun.stoppages.find(function (x) { return x.transportStoppageID == stoppage.id; });
                if (selectedTransportRouteRunStoppage != null) {
                    var fields = selectedTransportRouteRunStoppage.reachedTime.split(':');
                    var actualhour = fields[0];
                    var actualminute = Number(fields[1]);
                    var actualTime = new Date(year, month, day, +actualhour, +actualminute);
                    if (actualTime.getTime() > scheduledTime.getTime()) {
                        this.items.add({
                            id: stoppage.id,
                            content: stoppage.name,
                            start: new Date(scheduledTime.getTime()),
                            className: 'red',
                            title: 'Reached At ' + selectedTransportRouteRunStoppage.reachedTime
                        });
                    }
                    else {
                        this.items.add({
                            id: stoppage.id,
                            content: stoppage.name,
                            start: new Date(scheduledTime.getTime()),
                            className: 'ontime'
                        });
                    }
                }
                else {
                    this.items.add({
                        id: stoppage.id,
                        content: stoppage.name,
                        start: new Date(scheduledTime.getTime()),
                        className: 'nextstop'
                    });
                }
            }
            else {
                this.items.add({
                    id: stoppage.id,
                    content: stoppage.name,
                    start: new Date(scheduledTime.getTime()),
                    className: 'nextstop'
                });
            }
            for (var _b = 0, _c = stoppage.patronId; _b < _c.length; _b++) {
                var patronId = _c[_b];
                //this.stNameList.push(stoppage.name);
                this.patron = this.patronList.find(function (x) { return x.id == patronId; });
                //this._setupService.getPatronById(pat).subscribe(result => {
                //    this.patron = result;
                if (this.patron != null) {
                    this.patronStoppageSummaryArr.push({
                        id: '',
                        name: this.patron.firstName + " " + this.patron.lastName,
                        //lastName: this.patronList.lastName,
                        patronClass: this.patron.class + " " + this.patron.section,
                        section: this.patron.section,
                        stoppageName: stoppage.name,
                        rollNumber: this.patron.rollNo,
                        imgUrl: this.patron.imgUrl,
                        reachedTime: '',
                        reachingTime: '',
                        status: '',
                        headerColor: this.headerColor,
                        headerValue: ''
                    });
                    //this.count++;
                }
                //});
            }
        }
        if (this.timeline != undefined) {
            this.timeline.destroy();
        }
        this.timeline = new vis.Timeline(this.timelineDiv, this.items, options);
        this.timeline.on('click', function (properties) {
            if (properties.item != null) {
                _this.selectStoppage(properties);
            }
            else {
                console.log('non node element clicked');
            }
        });
    };
    MapViewComponent.prototype.selectStoppageOnhover = function (properties) {
        //alert("properties = " + properties.item)
        var hoveredItem = document.getElementById('hoveredItem');
        if (hoveredItem != null) {
            hoveredItem.innerHTML = 'hoveredItem=' + properties.item;
        }
    };
    MapViewComponent.prototype.selectStoppage = function (properties) {
        var patronStatus = 'Boarded';
        this.stoppageSummaryArr = [];
        this.headerColor = "Black";
        var selectedTransportStoppage;
        var transportStoppage;
        var actualStoppagePatron = [];
        var expectedStoppagePatron = [];
        var absentStoppagePatron = [];
        var totalStoppagePatron = [];
        ;
        var stoppage;
        var currentStoppage;
        if (this.selectedTransportRun != null) {
            selectedTransportStoppage = this.selectedTransportRun.stoppages.find(function (x) { return x.transportStoppageID == properties.item; });
            if (selectedTransportStoppage != null) {
                stoppage = this.transportStoppages.find(function (x) { return x.id == selectedTransportStoppage.transportStoppageID; });
                actualStoppagePatron = selectedTransportStoppage.patrons;
                totalStoppagePatron = selectedTransportStoppage.patrons;
                expectedStoppagePatron = stoppage.patronId;
                absentStoppagePatron = expectedStoppagePatron.filter(function (item) { return actualStoppagePatron.indexOf(item) < 0; });
                if (absentStoppagePatron != null) {
                    totalStoppagePatron = actualStoppagePatron.concat(absentStoppagePatron);
                }
                for (var _i = 0, totalStoppagePatron_1 = totalStoppagePatron; _i < totalStoppagePatron_1.length; _i++) {
                    var patronId = totalStoppagePatron_1[_i];
                    this.headerColor = "Black";
                    if (this.selectedTransportRun.runDirection == "1") {
                        if (stoppage.patronId.lastIndexOf(patronId) == -1) {
                            //patronStatus = "Boarded";
                            this.headerColor = "Blue";
                        }
                        if (selectedTransportStoppage.patrons.lastIndexOf(patronId) == -1) {
                            patronStatus = "Absent";
                            this.headerColor = "Red";
                            for (var _a = 0, _b = this.selectedTransportRun.stoppages; _a < _b.length; _a++) {
                                var stoppageId = _b[_a];
                                if (stoppageId.patrons.lastIndexOf(patronId) > 0) {
                                    currentStoppage = this.transportStoppages.find(function (x) { return x.id == stoppageId.transportStoppageID; });
                                    patronStatus = "Boarded From " + currentStoppage.name;
                                    this.headerColor = "Blue";
                                }
                            }
                        }
                        this.patron = this.patronList.find(function (x) { return x.id == patronId; });
                        if (this.patron != null) {
                            this.stoppageSummaryArr.push({
                                id: '',
                                name: this.patron.firstName + " " + this.patron.lastName,
                                patronClass: this.patron.class + " " + this.patron.section,
                                section: this.patron.section,
                                stoppageName: stoppage.name,
                                rollNumber: this.patron.rollNo,
                                imgUrl: this.patron.imgUrl,
                                reachedTime: selectedTransportStoppage.reachedTime,
                                reachingTime: '',
                                status: patronStatus,
                                headerColor: this.headerColor,
                                headerValue: "Arrival Time"
                            });
                        }
                    }
                    else {
                        if (selectedTransportStoppage.patrons.lastIndexOf(patronId) >= 0) {
                            patronStatus = "Droped";
                            this.headerColor = "Black";
                        }
                        else {
                            if (this.selectedTransportRun.patrons.lastIndexOf(patronId) >= 0) {
                                patronStatus = "Boarded";
                                this.headerColor = "Black";
                            }
                            else {
                                patronStatus = "Absent";
                                this.headerColor = "Red";
                            }
                        }
                        this.patron = this.patronList.find(function (x) { return x.id == patronId; });
                        if (this.patron != null) {
                            this.stoppageSummaryArr.push({
                                id: '',
                                name: this.patron.firstName + " " + this.patron.lastName,
                                patronClass: this.patron.class + " " + this.patron.section,
                                section: this.patron.section,
                                stoppageName: stoppage.name,
                                rollNumber: this.patron.rollNo,
                                imgUrl: this.patron.imgUrl,
                                reachedTime: selectedTransportStoppage.reachedTime,
                                reachingTime: '',
                                status: patronStatus,
                                headerColor: this.headerColor,
                                headerValue: "Boarded Time"
                            });
                        }
                    }
                }
            }
            else {
                transportStoppage = this.selectedroutes.transportStoppages.find(function (x) { return x.id == properties.item; });
                if (transportStoppage != null) {
                    actualStoppagePatron = transportStoppage.patronId;
                    for (var _c = 0, actualStoppagePatron_1 = actualStoppagePatron; _c < actualStoppagePatron_1.length; _c++) {
                        var patronId = actualStoppagePatron_1[_c];
                        {
                            if (this.selectedTransportRun.runDirection == "1") {
                                this.patron = this.patronList.find(function (x) { return x.id == patronId; });
                                if (this.patron != null) {
                                    this.stoppageSummaryArr.push({
                                        id: '',
                                        name: this.patron.firstName + " " + this.patron.lastName,
                                        patronClass: this.patron.class + " " + this.patron.section,
                                        section: this.patron.section,
                                        stoppageName: transportStoppage.name,
                                        rollNumber: this.patron.rollNo,
                                        imgUrl: this.patron.imgUrl,
                                        reachedTime: this.calculateEstimatedTime(transportStoppage.lattitude, transportStoppage.longitude, this.routeSelected),
                                        reachingTime: '', status: 'Waiting', headerColor: this.headerColor, headerValue: "ETA"
                                    });
                                }
                            }
                            else {
                                if (this.selectedTransportRun.patrons.lastIndexOf(patronId) >= 0) {
                                    patronStatus = "Boarded";
                                    this.headerColor = "Black";
                                }
                                else {
                                    patronStatus = "Absent";
                                    this.headerColor = "Red";
                                }
                                this.patron = this.patronList.find(function (x) { return x.id == patronId; });
                                if (this.patron != null) {
                                    this.stoppageSummaryArr.push({
                                        id: '',
                                        name: this.patron.firstName + " " + this.patron.lastName,
                                        patronClass: this.patron.class + " " + this.patron.section,
                                        section: this.patron.section,
                                        stoppageName: transportStoppage.name,
                                        rollNumber: this.patron.rollNo,
                                        imgUrl: this.patron.imgUrl,
                                        reachedTime: transportStoppage.dropTime,
                                        reachingTime: '',
                                        status: patronStatus,
                                        headerColor: this.headerColor,
                                        headerValue: "Boarded Time"
                                    });
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            transportStoppage = this.selectedroutes.transportStoppages.find(function (x) { return x.id == properties.item; });
            if (transportStoppage != null) {
                actualStoppagePatron = transportStoppage.patronId;
                for (var _d = 0, actualStoppagePatron_2 = actualStoppagePatron; _d < actualStoppagePatron_2.length; _d++) {
                    var patronId = actualStoppagePatron_2[_d];
                    {
                        this.patron = this.patronList.find(function (x) { return x.id == patronId; });
                        if (this.patron != null) {
                            this.stoppageSummaryArr.push({
                                id: '',
                                name: this.patron.firstName + " " + this.patron.lastName,
                                patronClass: this.patron.class.toString(),
                                section: this.patron.section,
                                stoppageName: transportStoppage.name,
                                rollNumber: this.patron.rollNo,
                                imgUrl: this.patron.imgUrl,
                                reachedTime: this.calculateEstimatedTime(transportStoppage.lattitude, transportStoppage.longitude, this.routeSelected),
                                reachingTime: '', status: 'Waiting', headerColor: this.headerColor, headerValue: "STA"
                            });
                        }
                    }
                }
            }
        }
    };
    MapViewComponent.prototype.calculateEstimatedTime = function (lat, long, routeId) {
        var routeMonitor = {};
        var geoPosition;
        var distance;
        var estimatedTime;
        var speed;
        routeMonitor = this.routeMonitoringDetails.find(function (x) { return x.routeID == routeId; });
        if (routeMonitor != null) {
            speed = 40; //routeMonitor.location.speed;
            geoPosition = routeMonitor.location;
            distance = this.calculateDistance(Number(lat), Number(long), Number(geoPosition.latitude), Number(geoPosition.longitude));
            estimatedTime = (distance / speed * 60).toString();
            estimatedTime = moment(new Date()).add(estimatedTime, 'minutes').format('HH:mm');
            return estimatedTime;
        }
        return "NA";
    };
    MapViewComponent.prototype.calculateDistance = function (lat1, lon1, lat2, lon2) {
        var p = 0.017453292519943295; // Math.PI / 180
        var c = Math.cos;
        var a = 0.5 - c((lat2 - lat1) * p) / 2 +
            c(lat1 * p) * c(lat2 * p) *
                (1 - c((lon2 - lon1) * p)) / 2;
        return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km
    };
    MapViewComponent.prototype.download = function () {
        var tempList = [];
        for (var _i = 0, _a = this.patronInfoList; _i < _a.length; _i++) {
            var patron = _a[_i];
            tempList.push({
                "FirstName": patron.patron.firstName,
                "LastName": patron.patron.lastName,
                "Class": patron.patron.class,
                "Section": patron.patron.section,
                "RollNo": patron.patron.rollNo,
                "Status": patron.patronStatus,
            });
        }
        var csvData = this.ConvertToCSV(tempList);
        var a = document.createElement("a");
        a.setAttribute('style', 'display:none;');
        document.body.appendChild(a);
        var blob = new Blob([csvData], { type: 'text/csv' });
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = 'StudentList.csv';
        a.click();
    };
    MapViewComponent.prototype.ConvertToCSV = function (objArray) {
        var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
        var str = '';
        var row = "";
        for (var index in objArray[0]) {
            //Now convert each value to string and comma-separated
            row += index + ',';
        }
        row = row.slice(0, -1);
        //append Label row with line break
        str += row + '\r\n';
        for (var i = 0; i < array.length; i++) {
            var line = '';
            for (var index in array[i]) {
                if (line != '')
                    line += ',';
                line += array[i][index];
            }
            str += line + '\r\n';
        }
        return str;
    };
    return MapViewComponent;
}());
MapViewComponent = tslib_1.__decorate([
    core_1.Component({
        selector: 'mapview',
        template: __webpack_require__(211),
        providers: [setup_service_1.SetupService],
        styles: ["\n    .sebm-google-map-container {\n       height:500px;\n     }\n  "],
    })
    //push
    ,
    tslib_1.__metadata("design:paramtypes", [router_1.ActivatedRoute, setup_service_1.SetupService])
], MapViewComponent);
exports.MapViewComponent = MapViewComponent;


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var ng = __webpack_require__(1);
var core_1 = __webpack_require__(1);
var forms_1 = __webpack_require__(6);
var primeng_1 = __webpack_require__(2);
var setup_service_1 = __webpack_require__(11);
var OrganizationComponent = (function () {
    function OrganizationComponent(_setupService, fb) {
        this._setupService = _setupService;
        this.fb = fb;
        this.orgDialog = false;
        this.logoURL = "DefaultImage.jpg";
        this.msgs = [];
        this.organizationId = localStorage.getItem("OrganizationId"); //get organization Id Fromm Session
        this.file = [];
        this.image = "DefaultImage.jpg"; //set default Image
        this.getOrganization(); //Call to get organization 
        this.organizationHeader = "Organization";
        this.organizationDetail = {
            id: '',
            name: '',
            address: '',
            city: '',
            zipCode: '',
            logoURL: '',
            establishmentType: 0,
            plan: 0,
            patrons: [],
            location: this.locations,
            settings: this.settings,
            notifications: this.notifications,
            organizationid: '',
            createDate: new Date(),
            lastUpdated: new Date(),
        };
        this.locations = {
            latitude: '',
            longitude: '',
            altitude: '',
            horizontalAccuracy: '',
            verticalAccuracy: '',
            speed: '',
            course: ''
        };
        this.notifications = {
            notifyParentForWhenTransportReachedStop: false,
            notifyParentForWhenTransportReachedSchool: false,
            notifyParentForPatronReachedSchool: false,
            notifyParentForPatronLeftSchool: false,
            notifyParentForWhenTransportLeftSchool: false,
            notifyParentForPatronAbsent: false,
            notifyParentForPatronAbscond: false,
        };
        this.settings = {
            trackHalfSession: false,
            trackPeriods: false,
            trackSchoolEnd: false,
            trackTransportStopDrop: false,
            enableSMSNotificaions: false,
        };
        this.orgplan = {
            silver: 2,
            gold: 3,
            platinum: 4,
        };
        this.establishmentType = {
            school: 1,
            office: 2,
            shop: 3,
            hospital: 4,
            fitnessCenter: 5,
        };
    } //close constructor operation
    OrganizationComponent.prototype.getOrganization = function () {
        var _this = this;
        // get organization detail from service
        this._setupService.getOrganization().subscribe(function (result) {
            _this.organizationDetail = result;
            _this.notifications = _this.organizationDetail.notifications;
            _this.settings = _this.organizationDetail.settings;
            if (_this.organizationDetail.plan == 2) {
                _this.selectedValue = "silver";
            }
            else if (_this.organizationDetail.plan == 3) {
                _this.selectedValue = "gold";
            }
            else if (_this.organizationDetail.plan == 4) {
                _this.selectedValue = "platinum";
            }
            //use for establishmentType
            if (_this.organizationDetail.establishmentType == 1) {
                _this.selectedType = "school";
            }
            else if (_this.organizationDetail.plan == 2) {
                _this.selectedType = "office";
            }
            else if (_this.organizationDetail.plan == 3) {
                _this.selectedType = "shop";
            }
            else if (_this.organizationDetail.plan == 4) {
                _this.selectedType = "hospital";
            }
            else if (_this.organizationDetail.plan == 5) {
                _this.selectedType = "fitness Center";
            }
        });
    };
    OrganizationComponent.prototype.updateOrganization = function (number) {
        var _this = this;
        var fileToUpload;
        var fileArrys;
        var fi = this.fileInput.nativeElement;
        if (fi.files && fi.files[0]) {
            fileToUpload = fi.files[0];
            fileArrys = fileToUpload.name.split(".");
        }
        if (this.selectedValue == "silver") {
            this.organizationDetail.plan = 2;
        }
        else if (this.selectedValue == "gold") {
            this.organizationDetail.plan = 3;
        }
        else if (this.selectedValue == "platinum") {
            this.organizationDetail.plan = 4;
        }
        //use for establishmentType
        if (this.selectedType == "school") {
            this.organizationDetail.establishmentType = 1;
        }
        else if (this.selectedValue == "office") {
            this.organizationDetail.establishmentType = 2;
        }
        else if (this.selectedValue == "shop") {
            this.organizationDetail.establishmentType = 3;
        }
        else if (this.selectedValue == "hospital") {
            this.organizationDetail.establishmentType = 4;
        }
        else if (this.selectedValue == "fitness Center") {
            this.organizationDetail.establishmentType = 5;
        }
        if (this.organizationDetail.id) {
            // update organization all details
            this._setupService.updateOrganization(this.organizationDetail.id, this.organizationDetail).subscribe(function (response) {
                if (response === 204) {
                    if (_this.organizationDetail != null && fi.files && fi.files[0]) {
                        if (_this.organizationDetail.logoURL != _this.image) {
                            //call for update Image name
                            _this._setupService.updateOrganizationLogoImageName(_this.organizationDetail.id, fileArrys[1]).subscribe(function (response) {
                            });
                        }
                        //logo (image) upload to cloude
                        _this._setupService.logoImageUploadToCloude(fileToUpload, _this.organizationDetail.id + "." + fileArrys[1]).subscribe(function (response) {
                            if (response === 204) {
                                _this.getOrganization(); // for page refresh and get organization updated records
                            }
                        });
                    }
                    else {
                        _this.getOrganization(); // for page refresh and get organization updated records
                    }
                    _this.msgs = []; // create blank msgs list
                    //for display growl message after update                
                    _this.msgs.push({ severity: 'success', summary: 'Organization updated successfully' });
                }
            }); // close updateOrganization service call
        } // end If
    }; // close method
    OrganizationComponent.prototype.ngOnInit = function () {
        this.organizationForm = this.fb.group({
            'name': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.pattern('[a-z A-Z]+')]),
            'address': new forms_1.FormControl('', forms_1.Validators.required),
            'plan': new forms_1.FormControl(),
            'plan1': new forms_1.FormControl(),
            'plan2': new forms_1.FormControl(),
            'establishmentType': new forms_1.FormControl(),
            'city': new forms_1.FormControl('', forms_1.Validators.required),
            'zipCode': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.minLength(3), forms_1.Validators.maxLength(8), forms_1.Validators.pattern('[0-9]+')]),
        });
    };
    return OrganizationComponent;
}());
tslib_1.__decorate([
    core_1.ViewChild("fileInput"),
    tslib_1.__metadata("design:type", Object)
], OrganizationComponent.prototype, "fileInput", void 0);
OrganizationComponent = tslib_1.__decorate([
    ng.Component({
        selector: 'organization',
        template: __webpack_require__(212),
        providers: [primeng_1.ConfirmationService, setup_service_1.SetupService]
    }),
    tslib_1.__metadata("design:paramtypes", [setup_service_1.SetupService, forms_1.FormBuilder])
], OrganizationComponent);
exports.OrganizationComponent = OrganizationComponent;


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var http_1 = __webpack_require__(12);
var router_1 = __webpack_require__(5);
var setup_service_1 = __webpack_require__(11);
var primeng_1 = __webpack_require__(2);
var moment = __webpack_require__(0);
var Rx_1 = __webpack_require__(14);
var OutgoingMessageComponent = (function () {
    function OutgoingMessageComponent(http, _router, activatedRoute, confirmationService, _setupService) {
        var _this = this;
        this._router = _router;
        this.activatedRoute = activatedRoute;
        this.confirmationService = confirmationService;
        this._setupService = _setupService;
        this.organizationId = localStorage.getItem("OrganizationId");
        this.messageCenterDialog = false;
        this.selectedGrade = [];
        this.selectedClassSection = [];
        this.msgs = [];
        this.http = http;
        this.showClass = false;
        // var parsonId = "7d82766a-ab7c-4787-b126-d02359b41696";
        var personId = localStorage.getItem("UserId");
        this._setupService.getPatron().subscribe(function (result) {
            _this.patronDetails = result;
        });
        this._setupService.getPersonById(personId).subscribe(function (result) {
            _this.personDetails = result;
        });
        this._setupService.getGrade().subscribe(function (response) {
            _this.gradeDetails = response;
            _this.gradeDetails = _this.gradeDetails.sort(function (a, b) {
                return parseInt(a.grade) - parseInt(b.grade);
            });
            _this.createGradeList();
            _this.createClassList();
        });
        this.getMessage();
        this.outgoingMessageTo = [];
        this.outgoingMessageTo.push({ label: 'Choose Option', value: null });
        this.outgoingMessageTo.push({ label: 'Organization', value: 'Organization' });
        this.outgoingMessageTo.push({ label: 'Class', value: 'Class' });
        this.outgoingMessageTo.push({ label: 'Class-Section', value: 'Sections' });
        this.outgoingMessageTo.push({ label: 'Patron', value: 'Patron' });
        this.outgoingMessage = {
            id: '',
            subject: '',
            senderId: '',
            senderName: '',
            senderImage: '',
            senderRole: '',
            message: '',
            isSent: false,
            broadcastTo: '',
            patronId: [],
            isResponseNeed: false,
            createDate: new Date(),
            lastUpdated: new Date(),
            organizationId: this.organizationId,
            messageTime: '',
            messageDate: ''
        };
    }
    OutgoingMessageComponent.prototype.getMessage = function () {
        var _this = this;
        this._setupService.getOutgoingMessage().subscribe(function (result) {
            _this.outgoingMessageDetails = result;
        });
    };
    OutgoingMessageComponent.prototype.onSelectMode = function () {
        if (this.selectedBroadCast == 'Organization') {
            this.selectedGrade = [];
            this.selectedClassSection = [];
            this.showClassSection = false;
            this.showClass = false;
            this.patron = false;
            this.showIsResponseNeed = false;
        }
        if (this.selectedBroadCast == 'Class') {
            this.selectedClassSection = [];
            this.showClassSection = false;
            this.showClass = true;
            this.patron = false;
            this.showIsResponseNeed = true;
        }
        if (this.selectedBroadCast == 'Sections') {
            this.selectedGrade = [];
            this.showClassSection = true;
            this.showClass = false;
            this.patron = false;
            this.showIsResponseNeed = true;
        }
        if (this.selectedBroadCast == 'Patron') {
            this.showClassSection = false;
            this.showClass = false;
            this.patron = true;
            this.showIsResponseNeed = true;
        }
    };
    OutgoingMessageComponent.prototype.createMessage = function () {
        this.outgoingMessage = {
            id: '',
            subject: '',
            senderId: '',
            senderName: '',
            senderImage: '',
            senderRole: '',
            broadcastTo: '',
            message: '',
            isSent: false,
            patronId: [],
            isResponseNeed: false,
            createDate: new Date(),
            lastUpdated: new Date(),
            organizationId: this.organizationId,
            messageTime: '',
            messageDate: ''
        };
        this.selectedBroadCast = null;
        this.messageCenterDialog = true;
    };
    //Save In draft
    OutgoingMessageComponent.prototype.openSearchBox = function () {
        this.patronMapDialog = true;
    };
    OutgoingMessageComponent.prototype.mapPatron = function (event) {
        this.selectedPatron = this.selectedPatronDetail;
        this.patronMapDialog = false;
    };
    OutgoingMessageComponent.prototype.createGradeList = function () {
        this.classSectionList = [];
        for (var i = 0; i < this.gradeDetails.length; i++) {
            this.classSectionList.push({ label: this.gradeDetails[i].grade + "-" + this.gradeDetails[i].section, value: this.gradeDetails[i].grade + "-" + this.gradeDetails[i].section });
        }
    };
    OutgoingMessageComponent.prototype.createClassList = function () {
        var _this = this;
        this.classList = [];
        for (var i = 0; i < this.gradeDetails.length; i++) {
            if (!this.classList.find(function (x) { return x.label == _this.gradeDetails[i].grade; })) {
                this.classList.push({ label: this.gradeDetails[i].grade, value: this.gradeDetails[i].grade });
            }
        }
    };
    OutgoingMessageComponent.prototype.deleteOutgoingMessage = function (outgoingmessage) {
        var _this = this;
        if (this.selectedOutgoingMessage == null) {
            this.msgs = [];
            this.msgs.push({ severity: 'warn', summary: 'please select at least one message' });
        }
        else {
            this.confirmationService.confirm({
                message: 'Do you want to delete this record(s)?',
                header: 'Delete Confirmation',
                icon: 'fa fa-trash',
                accept: function () {
                    var _loop_1 = function (message) {
                        _this._setupService.deleteOutgoingMessages(message.id).subscribe(function (response) {
                            if (response === 204) {
                                _this.outgoingMessageDetails.forEach(function (u, i) {
                                    if (u.id === message.id) {
                                        //this.outgoingMessageDetails.splice(i, 1);
                                        _this.getMessage();
                                    }
                                });
                                _this.msgs = [];
                                _this.msgs.push({ severity: 'error', summary: 'Message delete successfully' });
                            }
                        });
                    };
                    for (var _i = 0, outgoingmessage_1 = outgoingmessage; _i < outgoingmessage_1.length; _i++) {
                        var message = outgoingmessage_1[_i];
                        _loop_1(message);
                    }
                }
            });
        }
    };
    // send out going message to patrons by organization,class,class section level
    OutgoingMessageComponent.prototype.sendMessageToPatron = function (status) {
        var _this = this;
        if (status == 1) {
            this.status = true;
        }
        var observables = new Array();
        var org = [];
        var patrons = [];
        var pat = [];
        var selectedClassPatron = [];
        if (this.selectedBroadCast == 'Organization') {
            this.sendExternalData(selectedClassPatron); //call send ExternalData
        }
        else if (this.selectedBroadCast == 'Class') {
            for (var _i = 0, _a = this.selectedGrade; _i < _a.length; _i++) {
                var patronClass = _a[_i];
                observables.push(this._setupService.getClassByPatrons(patronClass));
            }
            Rx_1.Observable.forkJoin(observables).subscribe(function (result) {
                selectedClassPatron = result;
                _this.sendExternalData(selectedClassPatron); //call sendExternalData
            });
        }
        else if (this.selectedBroadCast == 'Sections') {
            for (var _b = 0, _c = this.selectedClassSection; _b < _c.length; _b++) {
                var patronClassSection = _c[_b];
                var grades = patronClassSection.split("-");
                observables.push(this._setupService.getClassPatron(grades[0], grades[1], this.selectedDate));
            }
            Rx_1.Observable.forkJoin(observables).subscribe(function (result) {
                selectedClassPatron = result;
                _this.sendExternalData(selectedClassPatron); //call sendExternalData
            });
        }
        else if (this.selectedBroadCast == 'Patron') {
            patrons.push(this.selectedPatron);
            selectedClassPatron.push(patrons);
            this.sendExternalData(selectedClassPatron); //call sendExternalData
        }
        this.messageCenterDialog = false;
    };
    OutgoingMessageComponent.prototype.sendExternalData = function (selectedClassPatron) {
        var _this = this;
        for (var _i = 0, selectedClassPatron_1 = selectedClassPatron; _i < selectedClassPatron_1.length; _i++) {
            var classPatron = selectedClassPatron_1[_i];
            for (var _a = 0, classPatron_1 = classPatron; _a < classPatron_1.length; _a++) {
                var patron = classPatron_1[_a];
                this.outgoingMessage.patronId.push(patron.id);
            }
        }
        if (this.status) {
            this.outgoingMessage.isSent = true;
        }
        this.outgoingMessage.senderId = this.personDetails.id;
        this.outgoingMessage.senderName = this.personDetails.firstName + " " + this.personDetails.lastName;
        this.outgoingMessage.senderImage = this.personDetails.imgUrl;
        this.outgoingMessage.senderRole = this.personDetails.role;
        this.outgoingMessage.broadcastTo = this.selectedBroadCast;
        this.outgoingMessage.messageDate = moment(new Date()).format('YYYY-MM-DD');
        this.outgoingMessage.messageTime = moment(new Date()).format('h:mm a');
        this._setupService.createOutgoingMessage(this.outgoingMessage).subscribe(function (messageDetails) {
            _this._setupService.getOutgoingMessage().subscribe(function (result) {
                _this.outgoingMessageDetails = result;
            });
            if (_this.outgoingMessage.isSent == true) {
                _this.msgs = [];
                _this.msgs.push({ severity: 'success', summary: 'message send successfully' });
            }
            else {
                _this.msgs = [];
                _this.msgs.push({ severity: 'success', summary: 'message saved in draft' });
            }
        });
    };
    OutgoingMessageComponent.prototype.onCancel = function (event) {
        this.messageCenterDialog = false;
    };
    OutgoingMessageComponent.prototype.onSearchCancel = function (event) {
        this.patronMapDialog = false;
    };
    OutgoingMessageComponent.prototype.ngOnInit = function () {
    };
    return OutgoingMessageComponent;
}());
OutgoingMessageComponent = tslib_1.__decorate([
    core_1.Component({
        selector: 'outgoingmessage',
        template: __webpack_require__(213),
        providers: [setup_service_1.SetupService, primeng_1.ConfirmationService]
    }),
    tslib_1.__metadata("design:paramtypes", [http_1.Http, router_1.Router, router_1.ActivatedRoute, primeng_1.ConfirmationService, setup_service_1.SetupService])
], OutgoingMessageComponent);
exports.OutgoingMessageComponent = OutgoingMessageComponent;


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var forms_1 = __webpack_require__(6);
var http_1 = __webpack_require__(12);
var primeng_1 = __webpack_require__(2);
var setup_service_1 = __webpack_require__(11);
var angular2_uuid_1 = __webpack_require__(23);
var moment = __webpack_require__(0);
__webpack_require__(14);
var global_constants_1 = __webpack_require__(15);
var PatronListComponent = (function () {
    function PatronListComponent(confirmationService, _setupService, fb) {
        //this.http = http;
        var _this = this;
        this.confirmationService = confirmationService;
        this._setupService = _setupService;
        this.fb = fb;
        this.file = [];
        this.msgs = [];
        this.image = global_constants_1.AppSettings.DEFAULT_IMAGE;
        this.organizationid = global_constants_1.AppSettings.ORGANIZATION_ID;
        this.selectedTab = 1;
        // for patron creation form
        this.patronDialog = false;
        //for patron list
        this.patronArr = [];
        this.patronDetails = [];
        this.imagePath = global_constants_1.AppSettings.IMAGE_ENDPOINT;
        //for contact person form
        this.patronContact = false;
        //for patronAuthentication form
        this.patronAuthDialog = false;
        this.tab1visible = true;
        this.tab2visible = true;
        this.tab1Authenticationvisible = true;
        this.tab2Authenticationvisible = true;
        // patron operation
        this.getPatron();
        this._setupService.getGrade().subscribe(function (response) {
            _this.totalGrades = [];
            _this.gradeDetails = response;
            for (var _i = 0, _a = _this.gradeDetails; _i < _a.length; _i++) {
                var grades = _a[_i];
                if (_this.totalGrades.indexOf(grades.grade) == -1) {
                    _this.totalGrades.push(grades.grade);
                }
            }
            _this.createclassList();
        });
        this.role = [];
        {
            //this.role.push({ label: 'Select Role', value: null });
            this.role.push({ label: 'Parents', value: 'Parents' });
            this.role.push({ label: 'Admin', value: 'Admin' });
            this.role.push({ label: 'Teacher', value: 'Teacher' });
            this.role.push({ label: 'Driver', value: 'Driver' });
            this.role.push({ label: 'Coordinator', value: 'Coordinator' });
            this.role.push({ label: 'Guest', value: 'Guest' });
        }
        this.country = this._setupService.getCountries();
        this.countries = [];
        //this.countries.push({ label: 'Country', value: null });
        for (var i = 0; i < this.country.length; i++) {
            this.countries.push({ label: this.country[i].name, value: this.country[i].name });
        }
        this.states = this._setupService.getStates();
        this.countryStates = [];
        //this.countryStates.push({ label: 'State', value: null });
        for (var i = 0; i < this.states.length; i++) {
            this.countryStates.push({ label: this.states[i].name, value: this.states[i].name });
        }
        this.relations = [];
        //this.relations.push({ label: 'Relation', value: null });
        this.relations.push({ label: 'Father', value: 'father' });
        this.relations.push({ label: 'Mother', value: 'mother' });
        this.relations.push({ label: 'Brother', value: 'brother' });
        this.relations.push({ label: 'Sister', value: 'sister' });
        this.relations.push({ label: 'Uncle', value: 'uncle' });
        this.relations.push({ label: 'Aunt', value: 'aunt' });
        this.relations.push({ label: 'Husband', value: 'husband' });
        this.relations.push({ label: 'Wife', value: 'wife' });
        //patron authentications
        this.authMode = [];
        //this.authMode.push({ label: 'Select Mode', value: null });
        this.authMode.push({ label: 'RFID', value: '2' });
        this.authMode.push({ label: 'Finger Scan', value: '1' });
        this.patronAuth();
    }
    ;
    // end constructor operation
    //-------------------------------------------------------------------------------------------------
    //this function is used for patron operation and it call from constructor by this.patron() or at the time of add patron for clear form before add
    PatronListComponent.prototype.patron = function () {
        this.patronDetail = {
            id: this.patronId,
            firstName: '',
            lastName: '',
            patronNumber: '',
            rollNo: 0,
            dateOfBirth: new Date(),
            imgUrl: this.image,
            section: '',
            isActive: true,
            class: 0,
            transportRouteId: '',
            stoppageId: '',
            organizationId: this.organizationid,
            createDate: new Date(),
            lastUpdated: new Date(),
            persons: [],
            authentications: []
        };
    };
    // start patron operations
    // create form for patron creation 
    PatronListComponent.prototype.getPatron = function () {
        var _this = this;
        this.patron();
        this.person();
        this.loading = true;
        setTimeout(function () {
            _this.loading = false;
        }, 15000);
        this._setupService.getPatron().subscribe(function (response) {
            _this.patronDetails = [];
            _this.patronDetails = response;
            _this.loading = false;
        });
    };
    PatronListComponent.prototype.createPatron = function (number) {
        var _this = this;
        this.patronDetail.class = Number(this.selectedClass);
        this.patronDetail.section = this.selectedSection;
        var a = this.patronDetail.dateOfBirth;
        var b = moment(a).format('YYYY-MM-DD');
        this.patronDetail.dateOfBirth = moment(b).toDate();
        if (b >= global_constants_1.AppSettings.CURRENT_DATE) {
            this.msgs = [];
            this.msgs.push({ severity: 'error', summary: 'Date of birth should not be greater than current date.' });
        }
        else {
            var fileToUpload_1;
            var fileArrys;
            var savedPatron;
            var fi_1 = this.fileInput.nativeElement;
            if (fi_1.files && fi_1.files[0]) {
                fileToUpload_1 = fi_1.files[0];
                fileArrys = fileToUpload_1.name.split(".");
            }
            var a = this.patronDetail.dateOfBirth;
            var b = moment(a).format('YYYY-MM-DD');
            this.patronDetail.dateOfBirth = moment(b).toDate();
            if (this.patronDetail.id) {
                //alert("roll no" + this.patronDetail.rollNo);
                if (this.oldRollNo != this.patronDetail.rollNo) {
                    //alert("Not Equal")
                    ///  alert("Not Equal Roll no = " + this.patronDetail.rollNo)
                    if (this.patronDetails.find(function (x) { return x.class == _this.patronDetail.class && x.section == _this.patronDetail.section && x.rollNo == _this.patronDetail.rollNo; })) {
                        //    alert("Exist")
                        this.msgs = [];
                        this.msgs.push({ severity: 'error', summary: 'Roll number should be unique' });
                    }
                    else {
                        //   alert("Not Exist")
                        this.PatronHeader = "Edit Patron";
                        this._setupService.updatePatron(this.patronDetail.id, this.patronDetail).subscribe(function (response) {
                            if (response === 204) {
                                if (_this.patronDetail != null && fi_1.files && fi_1.files[0]) {
                                    if (_this.patronDetail.imgUrl == _this.image) {
                                        _this._setupService.updatePatronImageName(_this.patronDetail.id, fileArrys[1]).subscribe(function (response) {
                                        });
                                    }
                                    _this._setupService.fileuploads(fileToUpload_1, _this.patronDetail.id + "." + fileArrys[1]).subscribe(function (response) {
                                        if (response === 204) {
                                            //this.patronDetail.imgUrl = savedPatron.id + "." + fileArrys[1];
                                            //this.patronDetails.push(this.patronDetail);
                                            _this.getPatron();
                                        }
                                    });
                                }
                                else {
                                    _this.getPatron();
                                    //this.patronDetails.push(this.patronDetail);
                                }
                                _this.msgs = [];
                                _this.msgs.push({ severity: 'success', summary: 'Patron updated successfully' });
                                _this.patronDialog = false;
                            }
                        });
                    }
                }
                else {
                    // alert(" Equal")
                    this.PatronHeader = "Edit Patron";
                    this._setupService.updatePatron(this.patronDetail.id, this.patronDetail).subscribe(function (response) {
                        if (response === 204) {
                            if (_this.patronDetail != null && fi_1.files && fi_1.files[0]) {
                                if (_this.patronDetail.imgUrl == _this.image) {
                                    _this._setupService.updatePatronImageName(_this.patronDetail.id, fileArrys[1]).subscribe(function (response) {
                                    });
                                }
                                _this._setupService.fileuploads(fileToUpload_1, _this.patronDetail.id + "." + fileArrys[1]).subscribe(function (response) {
                                    //if (response === 204) {
                                    //this.patronDetail.imgUrl = savedPatron.id + "." + fileArrys[1];
                                    //this.patronDetails.push(this.patronDetail);
                                    _this.getPatron();
                                    //}
                                });
                            }
                            else {
                                _this.getPatron();
                                //this.patronDetails.push(this.patronDetail);
                            }
                            _this.msgs = [];
                            _this.msgs.push({ severity: 'success', summary: 'Patron updated successfully' });
                            _this.patronDialog = false;
                        }
                    });
                }
            }
            else {
                if (this.patronDetails.find(function (x) { return x.class == _this.patronDetail.class && x.section == _this.patronDetail.section && x.rollNo == _this.patronDetail.rollNo; })) {
                    this.msgs = [];
                    this.msgs.push({ severity: 'error', summary: 'Roll number should be unique' });
                }
                else {
                    this.PatronHeader = "Add Patron";
                    this.patronDetail.persons = [];
                    this.patronDetail.authentications = [];
                    this.patronDetail.imgUrl = this.image;
                    this.patronDetail.organizationId = this.organizationid;
                    this._setupService.saveAndGetId(this.patronDetail).subscribe(function (response) {
                        savedPatron = response;
                        _this.patronDetail.id = savedPatron.id;
                        if (_this.patronDetail != null && fi_1.files && fi_1.files[0]) {
                            _this._setupService.updatePatronImageName(savedPatron.id, fileArrys[1]).subscribe(function (response) {
                                _this._setupService.fileuploads(fileToUpload_1, savedPatron.id + "." + fileArrys[1]).subscribe(function (response) {
                                    //this.patronDetail.imgUrl = savedPatron.id + "." + fileArrys[1];
                                    //this.patronDetails.push(this.patronDetail);
                                    _this.getPatron();
                                });
                            });
                        }
                        else {
                            _this.getPatron();
                            _this.msgs = [];
                            _this.msgs.push({ severity: 'success', summary: 'Patron saved successfully' });
                            //this.patronDetails.push(this.patronDetail);
                        }
                        _this.msgs = [];
                        _this.msgs.push({ severity: 'success', summary: 'Patron saved successfully' });
                    });
                    this.patronDialog = false;
                }
            }
        }
    };
    PatronListComponent.prototype.onChange = function (fileInput) {
        var f1 = fileInput.target.files;
        this.fileToUpload = f1[0];
    };
    //end patron create operation
    //Patron from validation
    PatronListComponent.prototype.validatePatron = function () {
        this.patronform = this.fb.group({
            'firstName': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.pattern('[a-z A-Z]+')]),
            'lastName': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.pattern('[a-z A-Z]+')]),
            'dateOfBirth': new forms_1.FormControl('', forms_1.Validators.required),
            'rollNo': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.pattern('[0-9]+')]),
            'classList': new forms_1.FormControl('', forms_1.Validators.required),
            'sectionList': new forms_1.FormControl('', forms_1.Validators.required),
            'isActive': new forms_1.FormControl(''),
            'currentDate': new forms_1.FormControl(''),
        });
    };
    //, { validator: this.matchingDates('dateOfBirth', 'currentDate') }
    // matchingDates(dateOfBirthKey: string, currentDateKey: string = AppSettings.CURRENT_DATE) {   
    //     return (group: FormGroup): { [key: string]: any } => {
    //         let dateOfBirth = group.controls[dateOfBirthKey.toString()];
    //         let currentDate = group.controls[currentDateKey];
    //         if (dateOfBirth.value >= currentDate.value) {
    //             return {
    //                 invalidDate: true
    //             };
    //         }
    //     }
    // }
    PatronListComponent.prototype.ngOnInit = function () {
        this.validatePatron(); //call to validatePatron
        this.validatePerson();
        this.validatePatronAuth();
    };
    PatronListComponent.prototype.patronCancel = function () {
        this.patronDialog = false;
    };
    PatronListComponent.prototype.createclassList = function () {
        this.classList = [];
        this.sectionList = [];
        //this.classList.push({ label: 'Class', value: null })
        this.sectionList.push({ label: 'Section', value: 'Section' });
        for (var i = 0; i < this.totalGrades.length; i++) {
            this.classList.push({ label: this.totalGrades[i], value: this.totalGrades[i] });
        }
    };
    PatronListComponent.prototype.getSelectedClassSection = function () {
        var _this = this;
        this.sectionList = [];
        var classSection;
        //this.sectionList.push({ label: 'Section', value:''});
        classSection = this.gradeDetails.filter(function (x) { return x.grade == _this.selectedClass; }).sort();
        for (var i = 0; i < classSection.length; i++) {
            this.sectionList.push({ label: classSection[i].section, value: classSection[i].section });
        }
    };
    // add new patron
    PatronListComponent.prototype.addPatron = function () {
        this.patronHeader = "Add Patron";
        this.patronDetail = {};
        this.patronDetail.imgUrl = this.image;
        //this.patron();
        this.validatePatron();
        this.patronDialog = true;
    };
    //update patron 
    PatronListComponent.prototype.updatePatron = function (selectedPatron) {
        this.patronHeader = "Edit Patron";
        this.oldRollNo = selectedPatron.rollNo;
        this.patronDetail = {};
        this.patronDetail = selectedPatron;
        var a = selectedPatron.dateOfBirth;
        var b = moment(a).format('YYYY-MM-DD');
        selectedPatron.dateOfBirth = moment(b).toDate();
        this.selectedClass = this.patronDetail.class.toString();
        this.getSelectedClassSection();
        this.selectedSection = this.patronDetail.section;
        this.patronDialog = true;
    };
    // Delete Patron from list
    PatronListComponent.prototype.deletePatron = function (patronDetail) {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Do you want to delete Patron ' + "<b>" + patronDetail.firstName + " " + patronDetail.lastName + "</b > " + '?',
            header: 'Delete Confirmation',
            icon: 'fa fa-trash',
            accept: function () {
                _this._setupService.deletePatron(patronDetail).subscribe(function (response) {
                    if (response === 204) {
                        //this.patronDetails.forEach((u: PatronDetail, i) => {
                        //    if (u.id === patronDetail.id) {
                        //        this.patronDetails.splice(i, 1);
                        //    }
                        //});
                        _this.patronDetails = _this.patronDetails.filter(function (x) { return x.id != patronDetail.id; });
                        _this.msgs = [];
                        _this.msgs.push({ severity: 'error', summary: 'Patron deleted successfully' });
                        //this.getPatron();
                    }
                });
            }
        });
    };
    //download patron list
    PatronListComponent.prototype.download = function () {
        var tempList = [];
        if (this.patronDetails == null) {
            this.msgs = [];
            this.msgs.push({ severity: 'warn', detail: 'Please wait while data is loading' });
        }
        else {
            for (var _i = 0, _a = this.patronDetails; _i < _a.length; _i++) {
                var patron = _a[_i];
                tempList.push({
                    "FirstName": patron.firstName,
                    "LastName": patron.lastName,
                    "IsActive": patron.isActive,
                    "Class": patron.class,
                    "Section": patron.section,
                });
            }
        }
        var csvData = this.ConvertToCSV(tempList);
        var a = document.createElement("a");
        a.setAttribute('style', 'display:none;');
        document.body.appendChild(a);
        var blob = new Blob([csvData], { type: 'text/csv' });
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = 'PatronDetails.csv';
        a.click();
    };
    PatronListComponent.prototype.ConvertToCSV = function (objArray) {
        var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
        var str = '';
        var row = "";
        for (var index in objArray[0]) {
            //Now convert each value to string and comma-separated
            row += index + ',';
        }
        row = row.slice(0, -1);
        //append Label row with line break
        str += row + '\r\n';
        for (var i = 0; i < array.length; i++) {
            var line = '';
            for (var index in array[i]) {
                if (line != '')
                    line += ',';
                line += array[i][index];
            }
            str += line + '\r\n';
        }
        return str;
    };
    //end patron operations
    //------------------------------------------------------------------------------------------------
    // start for person operation
    PatronListComponent.prototype.person = function () {
        this.personDetail = {
            id: angular2_uuid_1.UUID.UUID(),
            patronId: '',
            personViewId: '',
            firstName: '',
            lastName: '',
            role: '',
            emailId: '',
            address: '',
            gender: '',
            dateOfBirth: new Date(),
            isActive: true,
            password: '',
            primaryMobile: '',
            secondaryMobile: '',
            country: '',
            organizationId: this.organizationid,
            state: '',
            zipCode: '',
            isPrimaryContact: false,
            isHavingSmartPhone: false,
            relation: '',
            imgUrl: this.image,
            createDate: new Date(),
            lastUpdated: new Date()
        };
    };
    //validate patron contact person form
    PatronListComponent.prototype.validatePerson = function () {
        this.personform = this.fb.group({
            'firstName': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.pattern('[a-zA-Z]+')]),
            'lastName': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.pattern('[a-zA-Z]+')]),
            'dateOfBirth': new forms_1.FormControl('', forms_1.Validators.required),
            'relation': new forms_1.FormControl('', forms_1.Validators.required),
            'emailId': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.email]),
            'password': new forms_1.FormControl(''),
            'gender': new forms_1.FormControl(''),
            'primaryMobile': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.minLength(10), forms_1.Validators.maxLength(10), forms_1.Validators.pattern('[0-9]+')]),
            'secondaryMobile': new forms_1.FormControl('', [forms_1.Validators.minLength(10), forms_1.Validators.maxLength(10), forms_1.Validators.pattern('[0-9]+')]),
            'address': new forms_1.FormControl('', forms_1.Validators.required),
            'countries': new forms_1.FormControl('', forms_1.Validators.required),
            'state': new forms_1.FormControl('', forms_1.Validators.required),
            'zipCode': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.minLength(3), forms_1.Validators.maxLength(8), forms_1.Validators.pattern('[0-9]+')]),
            'isPrimaryContact': new forms_1.FormControl(''),
            'isHavingSmartPhone': new forms_1.FormControl(''),
            'isActive': new forms_1.FormControl(''),
        });
    };
    //far add patron contact person
    PatronListComponent.prototype.addperson = function (patronDetail) {
        this.patronId = patronDetail.id;
        this.personDetails = patronDetail.persons;
        this.selectedRelation = this.personDetail.relation;
        this.validatePerson();
        this.selectedTab = 1;
        this.patronContact = true;
        this.tab1visible = true;
        this.tab2visible = false;
    };
    //for create patron contact person
    PatronListComponent.prototype.createPerson = function (number) {
        var _this = this;
        var a = this.personDetail.dateOfBirth;
        var b = moment(a).format('YYYY-MM-DD');
        this.personDetail.dateOfBirth = moment(b).toDate();
        if (b >= global_constants_1.AppSettings.CURRENT_DATE) {
            this.msgs = [];
            this.msgs.push({ severity: 'error', summary: 'Date of birth should be less than from current date ' });
        }
        else {
            var addedPerson;
            this.tab1visible = true;
            this.tab2visible = false;
            this.selectedTab = number;
            var updatedPatron;
            this.personDetail.country = this.selectedCountry;
            this.personDetail.state = this.selectedState;
            this.personDetail.relation = this.selectedRelation;
            this.personDetail.role = this.selectedRole;
            var fileToUpload_2;
            var fileArrys;
            var newPersonId;
            var fi_2 = this.personImage.nativeElement;
            if (fi_2.files && fi_2.files[0]) {
                fileToUpload_2 = fi_2.files[0];
                fileArrys = fileToUpload_2.name.split(".");
            }
            if (this.patronId) {
                if (this.personDetail.imgUrl == null || this.personDetail.imgUrl == this.image) {
                    this.personDetail.imgUrl = this.image;
                }
                this.personDetail.organizationId = this.organizationid;
                this._setupService.createPatronContactPerson(this.patronId, this.personDetail).subscribe(function (result) {
                    updatedPatron = result;
                    addedPerson = updatedPatron.persons[updatedPatron.persons.length - 1];
                    newPersonId = addedPerson.id;
                    if (updatedPatron != null && fi_2.files && fi_2.files[0]) {
                        _this._setupService.patronContactPersonFileUploads(fileToUpload_2, newPersonId + "." + fileArrys[1]).subscribe(function (response) {
                            _this._setupService.updateContactPersonImageName(_this.patronId, newPersonId, fileArrys[1]).subscribe(function (response) {
                                _this.patronDetail = response;
                                _this.personDetails = _this.patronDetail.persons;
                                var a = _this.patronDetail.dateOfBirth;
                                var b = moment(a).toDate();
                                _this.patronDetail.dateOfBirth = b;
                                _this.getPatron();
                                _this.person();
                                _this.msgs = [];
                                _this.msgs.push({ severity: 'success', summary: 'Contact person saved successfully' });
                            });
                        });
                    }
                    else {
                        _this.msgs = [];
                        _this.msgs.push({ severity: 'success', summary: 'Contact person update successfully' });
                        _this.personDetails = updatedPatron.persons;
                    }
                });
            }
        }
    };
    //Update patron contact person form
    PatronListComponent.prototype.updateContactPerson = function (tabNumber, mode, personDetail) {
        var _this = this;
        this.contactPersonHeader = "Edit Contact Person";
        var selectedPerson = {};
        var contactPerson = {};
        ;
        this.ContactPersonHeader = "Edit Contact Person";
        this.tab1visible = false;
        this.tab2visible = true;
        selectedPerson = this.patronDetails.find(function (x) { return x.id == _this.patronId; });
        if (selectedPerson != null) {
            contactPerson = selectedPerson.persons.find(function (x) { return x.id == personDetail.id; });
        }
        if (contactPerson != null) {
            this.personDetail = contactPerson;
            this.selectedRelation = this.personDetail.relation;
            this.selectedCountry = this.personDetail.country;
            this.selectedState = this.personDetail.state;
            this.selectedRole = this.personDetail.role;
            this.personDetail.gender = this.personDetail.gender;
            var a = this.personDetail.dateOfBirth;
            var b = moment(a).format('YYYY-MM-DD');
            this.personDetail.dateOfBirth = moment(b).toDate();
        }
        this.selectedTab = tabNumber;
    };
    // delete patron contact person  from list
    PatronListComponent.prototype.deletePerson = function (person) {
        var _this = this;
        if (this.personDetails.length == 1) {
            this.msgs = [];
            this.msgs.push({ severity: 'error', summary: 'Contact person can not be delete' });
        }
        else {
            this.confirmationService.confirm({
                message: 'Do you want to delete ' + "<b>" + person.firstName + " " + person.lastName + "</b > " + '?',
                header: 'Delete Confirmation',
                icon: 'fa fa-trash',
                accept: function () {
                    _this._setupService.deletePatronContactPerson(_this.patronId, person.id).subscribe(function (response) {
                        if (response === 200) {
                            //this.personDetails.forEach((u: PersonDetail, i) => {
                            //    if (u.id === person.id) {
                            //        this.personDetails.splice(i, 1);
                            //    }
                            //});
                            _this.personDetails = _this.personDetails.filter(function (x) { return x.id != person.id; });
                            _this.getPatron();
                            _this.person();
                            _this.msgs = [];
                            _this.msgs.push({ severity: 'error', summary: 'Contact person deleted successfully' });
                        }
                    });
                }
            });
        }
    };
    //cancle patron contact person form
    PatronListComponent.prototype.contactcancel = function (number) {
        this.tab1visible = true;
        this.tab2visible = false;
        this.selectedTab = number;
    };
    // for tab  change  from tab button
    PatronListComponent.prototype.handleChange = function (e) {
        this.validatePerson();
        this.selectedTab = 1;
    };
    // for tab change from add and edit button
    PatronListComponent.prototype.activateTab = function (tabNumber, mode) {
        this.ContactPersonHeader = "Add Contact Person";
        this.tab1visible = false;
        this.tab2visible = true;
        if (mode == 'add') {
            this.personDetail = null;
            this.person();
            this.validatePerson();
            this.selectedTab = tabNumber;
        }
    };
    //End  Patron Contact Person Operation
    //----------------------------------------------------------------------------------------------
    //Start Patron Authentication Operation
    PatronListComponent.prototype.patronAuth = function () {
        this.authenticationTypeDetail = {
            id: angular2_uuid_1.UUID.UUID(),
            hashValue: '',
            patronId: '',
            mode: '',
            modeType: '',
            createDate: new Date(),
            lastUpdated: new Date(),
            organizationId: this.organizationid,
            remark: ''
        };
    };
    //Validate patron authntication
    PatronListComponent.prototype.validatePatronAuth = function () {
        this.authform = this.fb.group({
            'hashvalue': new forms_1.FormControl('', forms_1.Validators.required),
            'authmode': new forms_1.FormControl('', forms_1.Validators.required),
            'remark': new forms_1.FormControl(),
        });
    };
    PatronListComponent.prototype.auth = function () {
        for (var i = 0; i < this.authTypeDetails.length; i++) {
            if (this.authTypeDetails[i].mode == "2") {
                this.authTypeDetails[i].modeType = "RFID";
            }
            else if (this.authTypeDetails[i].mode == "1") {
                this.authTypeDetails[i].modeType = "Finger Scan";
            }
            else {
                this.authTypeDetails[i].modeType = "NA";
            }
        }
    };
    // add patron authentication
    PatronListComponent.prototype.addAuthType = function (patronDetail) {
        this.patronId = patronDetail.id;
        //this.getPatron();
        this.authTypeDetails = patronDetail.authentications;
        this.auth();
        this.validatePatronAuth();
        this.selectedTab = 1;
        this.patronAuthDialog = true;
        this.tab1Authenticationvisible = true;
        this.tab2Authenticationvisible = false;
    };
    //create form and save patron authentication
    PatronListComponent.prototype.createAuthType = function (number) {
        var _this = this;
        this.tab1Authenticationvisible = true;
        this.tab2Authenticationvisible = false;
        this.selectedTab = number;
        var headers = new http_1.Headers();
        headers.append('Content-Type', 'application/json');
        this.authenticationTypeDetail.mode = this.selectedAuthMode;
        if (this.patronId) {
            this._setupService.createPatronAuth(this.patronId, this.authenticationTypeDetail).subscribe(function (result) {
                _this.patronDetail = result;
                _this.authTypeDetails = _this.patronDetail.authentications;
                var a = _this.patronDetail.dateOfBirth;
                var b = moment(a).toDate();
                _this.patronDetail.dateOfBirth = b;
                _this.getPatron();
                _this.auth();
                _this.patronAuth();
            });
            this.msgs = [];
            this.msgs.push({ severity: 'success', summary: 'Patron authentication saved successfully' });
        }
    };
    //update patron authentication
    PatronListComponent.prototype.updateAuthType = function (tabNumber, mode, perDetail) {
        var _this = this;
        var selectedPatron = {};
        ;
        var selectedPatronAuth = {};
        ;
        this.AutheticationHeader = "Edit Authentication";
        this.tab1Authenticationvisible = false;
        this.tab2Authenticationvisible = true;
        selectedPatron = this.patronDetails.find(function (x) { return x.id == _this.patronId; });
        if (selectedPatron != null) {
            selectedPatronAuth = selectedPatron.authentications.find(function (x) { return x.id == perDetail.id; });
        }
        if (selectedPatronAuth != null) {
            this.authenticationTypeDetail = selectedPatronAuth;
            this.selectedAuthMode = this.authenticationTypeDetail.mode;
        }
        this.selectedTab = tabNumber;
    };
    //delete patron authentication
    PatronListComponent.prototype.deleteAuthType = function (authDetail) {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Do you want to delete Authentication ' + "<b>" + authDetail.hashValue + "</b >" + '?',
            header: 'Delete Confirmation',
            icon: 'fa fa-trash',
            accept: function () {
                _this._setupService.deletePatronAutheticationType(_this.patronId, authDetail.id).subscribe(function (response) {
                    if (response === 200) {
                        //this.authTypeDetails.forEach((u: AuthenticationTypeDetail, i) => {
                        //    if (u.id === authDetail.id) {
                        //        this.authTypeDetails.splice(i, 1);
                        //    }
                        //});
                        _this.authTypeDetails = _this.authTypeDetails.filter(function (x) { return x.id != authDetail.id; });
                        _this.getPatron();
                        _this.auth();
                        _this.patronAuth();
                        _this.msgs = [];
                        _this.msgs.push({ severity: 'error', summary: 'Authentication deleted successfully' });
                    }
                });
            }
        });
    };
    //  tab change for patron authentication
    PatronListComponent.prototype.handleChange1 = function (e) {
        this.validatePatronAuth();
        this.selectedTab = 1;
    };
    //for activate tab if add authentication
    PatronListComponent.prototype.activateTab1 = function (tabNumber, mode) {
        this.AutheticationHeader = "Add Authentication";
        this.tab1Authenticationvisible = false;
        this.tab2Authenticationvisible = true;
        if (mode == 'add') {
            this.authenticationTypeDetail = null;
            this.patronAuth();
            this.validatePatronAuth();
            this.selectedTab = tabNumber;
        }
    };
    //for patron auth cancle
    PatronListComponent.prototype.onCancel = function (number) {
        this.tab1Authenticationvisible = true;
        this.tab2Authenticationvisible = false;
        this.selectedTab = number;
    };
    return PatronListComponent;
}());
tslib_1.__decorate([
    core_1.ViewChild("fileInput"),
    tslib_1.__metadata("design:type", Object)
], PatronListComponent.prototype, "fileInput", void 0);
tslib_1.__decorate([
    core_1.ViewChild("personImage"),
    tslib_1.__metadata("design:type", Object)
], PatronListComponent.prototype, "personImage", void 0);
PatronListComponent = tslib_1.__decorate([
    core_1.Component({
        selector: 'patronlist',
        template: __webpack_require__(214),
        providers: [primeng_1.ConfirmationService, setup_service_1.SetupService]
    }),
    tslib_1.__metadata("design:paramtypes", [primeng_1.ConfirmationService, setup_service_1.SetupService, forms_1.FormBuilder])
], PatronListComponent);
exports.PatronListComponent = PatronListComponent;


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var primeng_1 = __webpack_require__(2);
var http_1 = __webpack_require__(12);
var router_1 = __webpack_require__(5);
var setup_service_1 = __webpack_require__(11);
var moment = __webpack_require__(0);
var PersonChartComponent = (function () {
    function PersonChartComponent(http, _setupService, activatedRoute, _router) {
        this._setupService = _setupService;
        this.activatedRoute = activatedRoute;
        this._router = _router;
        this.organizationId = localStorage.getItem("OrganizationId");
        this.msgs = [];
        this.pSchool = null;
        this.selectedTab = 0;
        //this.selectedDate = moment(new Date()).toDate();
        this.selectedDate = moment(new Date()).format('YYYY-MM-DD');
        this.http = http;
        this.pSchool = "School";
        this.showPresentPerson();
        this.showScatterChart();
    }
    PersonChartComponent.prototype.handleChange = function (e) {
        if (e.index == 0) {
            this.selectedTab = 0;
        }
        else if (e.index == 1) {
            this.selectedTab = 1;
        }
        else if (e.index == 2) {
            this.selectedTab = 2;
        }
        else if (e.index == 3) {
            this.selectedTab = 3;
        }
    };
    PersonChartComponent.prototype.activatedTab = function (number) {
        this.selectedTab = number;
    };
    PersonChartComponent.prototype.getPersonTrackingData = function (trackingTypeList) {
        var _this = this;
        this.persontrackingTypeDetails = [];
        var personInfo;
        this._setupService.getPerson().subscribe(function (result) {
            _this.personDetailList1 = result;
            _this.presentPersonImageList = [];
            for (var _i = 0, trackingTypeList_1 = trackingTypeList; _i < trackingTypeList_1.length; _i++) {
                var item = trackingTypeList_1[_i];
                _this.presentPersonImage = {};
                _this.personTracking = {};
                personInfo = _this.personDetailList1.find(function (x) { return x.id == item.personId; });
                if (personInfo != null) {
                    _this.personTracking.firstName = personInfo.firstName;
                    _this.personTracking.lastName = personInfo.lastName;
                    _this.personTracking.emailId = personInfo.emailId;
                    _this.personTracking.role = personInfo.role;
                    _this.personTracking.primaryMobile = personInfo.primaryMobile;
                    _this.personTracking.trackingTime = moment(item.trackingTime, 'H:mm').format('h:mm a');
                    _this.presentPersonImage.personTracking = _this.personTracking;
                    _this.presentPersonImage.imagePath = personInfo.imgUrl;
                    _this.presentPersonImageList.push(_this.presentPersonImage);
                }
            }
        });
    };
    PersonChartComponent.prototype.download = function () {
        var tempList = [];
        if (this.selectedTab == 1) {
            for (var _i = 0, _a = this.presentPersonImageList; _i < _a.length; _i++) {
                var presentPerson = _a[_i];
                tempList.push({
                    "Name": presentPerson.personTracking.personName,
                    "Role ": presentPerson.personTracking.role,
                    "EmailId": presentPerson.personTracking.emailId,
                    "Phone Number": presentPerson.personTracking.primaryMobile,
                    "TrackingTime": presentPerson.personTracking.trackingTime,
                });
            }
        }
        if (this.selectedTab == 2) {
            for (var _b = 0, _c = this.absentPersonList; _b < _c.length; _b++) {
                var absentPerson = _c[_b];
                tempList.push({
                    "Name": absentPerson.firstName + " " + absentPerson.lastName,
                    "Role ": absentPerson.role,
                    "EmailId": absentPerson.emailId,
                    "Phone Number": absentPerson.primaryMobile,
                });
            }
        }
        if (this.selectedTab == 3) {
            for (var _d = 0, _e = this.personOnLeaveDescriptionList; _d < _e.length; _d++) {
                var leavePerson = _e[_d];
                tempList.push({
                    "Name": leavePerson.personInfo.firstName + " " + leavePerson.personInfo.lastName,
                    "Role ": leavePerson.personInfo.role,
                    "EmailId": leavePerson.personInfo.emailId,
                    "Phone Number": leavePerson.personInfo.primaryMobile,
                    "Description": leavePerson.description,
                });
            }
        }
        var csvData = this.ConvertToCSV(tempList);
        var a = document.createElement("a");
        a.setAttribute('style', 'display:none;');
        document.body.appendChild(a);
        var blob = new Blob([csvData], { type: 'text/csv' });
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = 'file.csv';
        a.click();
    };
    PersonChartComponent.prototype.ConvertToCSV = function (objArray) {
        var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
        var str = '';
        var row = "";
        for (var index in objArray[0]) {
            //Now convert each value to string and comma-separated
            row += index + ',';
        }
        row = row.slice(0, -1);
        //append Label row with line break
        str += row + '\r\n';
        for (var i = 0; i < array.length; i++) {
            var line = '';
            for (var index in array[i]) {
                if (line != '')
                    line += ',';
                line += array[i][index];
            }
            str += line + '\r\n';
        }
        return str;
    };
    PersonChartComponent.prototype.getSelectedDate = function ($event) {
        var a = this.selectedDate;
        var b = moment(a).format('YYYY-MM-DD');
        this.selectedDate = b;
        this.showPresentPerson();
        this.showScatterChart();
    };
    PersonChartComponent.prototype.showPresentPerson = function () {
        var _this = this;
        var tempPersonTrackingSummary;
        var updatePersonList = [];
        this._setupService.getPresentPerson(this.selectedDate).subscribe(function (result) {
            _this.presentPerson = result;
            _this.getPersonTrackingData(_this.presentPerson);
            _this._setupService.getPersonOnLeave(_this.selectedDate).subscribe(function (result) {
                _this.personLeaveDetail = result;
                for (var _i = 0, _a = _this.presentPerson; _i < _a.length; _i++) {
                    var pat = _a[_i];
                    if (_this.personLeaveDetail.find(function (x) { return x.personId == pat.personId; })) {
                        updatePersonList.push(pat);
                    }
                }
                _this._setupService.getPerson().subscribe(function (result) {
                    _this.totalPersonList = result;
                    _this.totalPerson = _this.totalPersonList.length;
                    _this.presentPersonCount = _this.presentPerson.length;
                    _this.presentOnleave = _this.personLeaveDetail.length - updatePersonList.length;
                    _this.absentperson = _this.totalPerson - (_this.presentPerson.length + _this.presentOnleave);
                    _this.showOnLeavePerson();
                });
            });
        });
    };
    PersonChartComponent.prototype.showOnLeavePerson = function () {
        var _this = this;
        var personOnLeaveDescription;
        var OnLeaveRemoved = new Array();
        this.personOnLeaveDescriptionList = [];
        personOnLeaveDescription = {};
        for (var _i = 0, _a = this.personLeaveDetail; _i < _a.length; _i++) {
            var leave = _a[_i];
            OnLeaveRemoved = this.presentPerson.filter(function (a) { return a.personId == leave.personId; });
            if (OnLeaveRemoved.length == 0) {
                this._setupService.getPersonById(leave.personId).subscribe(function (result) {
                    _this.personDetail = result;
                    personOnLeaveDescription.personInfo = _this.personDetail;
                    personOnLeaveDescription.description = leave.description;
                    personOnLeaveDescription.imagePath = _this.personDetail.imgUrl;
                    _this.personOnLeaveDescriptionList.push(personOnLeaveDescription);
                });
            }
        }
        this.showAbsentPerson();
    };
    PersonChartComponent.prototype.showAbsentPerson = function () {
        var _this = this;
        var tempPersonAbsentList = new Array();
        this.absentPersonList = [];
        this.tempAbsentPersonList = [];
        for (var i = 0; i < this.totalPersonList.length; i++) {
            var personTrack = new Array();
            personTrack = this.presentPerson.filter(function (a) { return a.personId == _this.totalPersonList[i].id; });
            if (personTrack.length == 0) {
                this.tempAbsentPersonList.push(this.totalPersonList[i]);
            }
        }
        for (var _i = 0, _a = this.tempAbsentPersonList; _i < _a.length; _i++) {
            var pat = _a[_i];
            var personLeave = new Array();
            personLeave = this.personLeaveDetail.filter(function (a) { return a.personId == pat.id; });
            if (personLeave.length == 0) {
                this.absentPersonList.push(pat);
            }
        }
    };
    PersonChartComponent.prototype.updateAttendance = function (selectedPerson) {
        var _this = this;
        var personTracking = {};
        personTracking.personId = selectedPerson.id;
        personTracking.organizationid = this.organizationId;
        personTracking.trackingDate = this.selectedDate.toString();
        personTracking.trackingTime = moment(new Date()).format('HH:mm');
        personTracking.createDate = new Date();
        personTracking.emailId = selectedPerson.emailId;
        personTracking.role = selectedPerson.role;
        personTracking.primaryMobile = selectedPerson.primaryMobile;
        this._setupService.markPresent1(personTracking).subscribe(function (result) {
            _this.showPresentPerson();
            _this.showScatterChart();
        });
    };
    PersonChartComponent.prototype.showScatterChart = function () {
        var _this = this;
        this._setupService.getPresentPerson(this.selectedDate).subscribe(function (result) {
            _this.personPresentDetailList = result;
            var tempStartTime = '07:00';
            _this.personCountArr = new Array();
            if (_this.personPresentDetailList.length > 0) {
                for (var i = 0; i <= 30; i++) {
                    var noPerson = 0;
                    var personCount = new Array();
                    var beginningTime = moment(tempStartTime, 'HH:mm');
                    var startTime = beginningTime.format('HH:mm');
                    var endTime = moment(beginningTime).startOf('minutes').add(10, 'minutes').format('HH:mm');
                    personCount = _this.personPresentDetailList.filter(function (x) { return x.trackingTime >= startTime && x.trackingTime < endTime; });
                    if (personCount.length > 0) {
                        _this.personCountArr.push(personCount.length);
                    }
                    else {
                        _this.personCountArr.push(noPerson);
                    }
                    tempStartTime = endTime;
                }
            }
            _this.updateLine(_this.chart);
        });
        this.data1 = {
            labels: ['7:00', '7:10', '7:20', '7:30', '7:40', '7:50 ',
                '8:00', '8:10', '8:20', '8:30', '8:40', '8:50',
                '9:00', '9:10', '9:20', '9:30', '9:40', '9:50',
                '10:00', '10:10', '10:20', '10:30', '10:40', '10:50',
                '11:00', '11:10', '11:20', '11:30', '11:40', '11:50', '12:00'
            ],
            datasets: [
                {
                    label: 'Present Person',
                    data: [
                        this.personCountArr != null ? this.personCountArr[0] : 0, this.personCountArr != null ? this.personCountArr[1] : 0, this.personCountArr != null ? this.personCountArr[2] : 0, this.personCountArr != null ? this.personCountArr[3] : 0,
                        this.personCountArr != null ? this.personCountArr[4] : 0, this.personCountArr != null ? this.personCountArr[5] : 0, this.personCountArr != null ? this.personCountArr[6] : 0, this.personCountArr != null ? this.personCountArr[7] : 0, this.personCountArr != null ? this.personCountArr[8] : 0,
                        this.personCountArr != null ? this.personCountArr[9] : 0, this.personCountArr != null ? this.personCountArr[10] : 0, this.personCountArr != null ? this.personCountArr[11] : 0, this.personCountArr != null ? this.personCountArr[12] : 0, this.personCountArr != null ? this.personCountArr[13] : 0,
                        this.personCountArr != null ? this.personCountArr[14] : 0, this.personCountArr != null ? this.personCountArr[15] : 0, this.personCountArr != null ? this.personCountArr[16] : 0, this.personCountArr != null ? this.personCountArr[17] : 0, this.personCountArr != null ? this.personCountArr[18] : 0,
                        this.personCountArr != null ? this.personCountArr[19] : 0, this.personCountArr != null ? this.personCountArr[20] : 0, this.personCountArr != null ? this.personCountArr[21] : 0, this.personCountArr != null ? this.personCountArr[22] : 0, this.personCountArr != null ? this.personCountArr[23] : 0,
                        this.personCountArr != null ? this.personCountArr[24] : 0, this.personCountArr != null ? this.personCountArr[25] : 0, this.personCountArr != null ? this.personCountArr[26] : 0, this.personCountArr != null ? this.personCountArr[27] : 0, this.personCountArr != null ? this.personCountArr[28] : 0,
                        this.personCountArr != null ? this.personCountArr[29] : 0, this.personCountArr != null ? this.personCountArr[30] : 0
                    ],
                    fill: false,
                    backgroundColor: '#42A5F5',
                    borderColor: "#1E88E5",
                },
            ]
        };
    };
    PersonChartComponent.prototype.updateLine = function (chart) {
        this.data1.datasets[0].data = [this.personCountArr.length > 0 ? this.personCountArr[0] : 0, this.personCountArr.length > 0 ? this.personCountArr[1] : 0, this.personCountArr.length > 0 ? this.personCountArr[2] : 0, this.personCountArr.length > 0 ? this.personCountArr[3] : 0,
            this.personCountArr.length > 0 ? this.personCountArr[4] : 0, this.personCountArr.length > 0 ? this.personCountArr[5] : 0, this.personCountArr.length > 0 ? this.personCountArr[6] : 0, this.personCountArr.length > 0 ? this.personCountArr[7] : 0, this.personCountArr.length > 0 ? this.personCountArr[8] : 0,
            this.personCountArr.length > 0 ? this.personCountArr[9] : 0, this.personCountArr.length > 0 ? this.personCountArr[10] : 0, this.personCountArr.length > 0 ? this.personCountArr[11] : 0, this.personCountArr.length > 0 ? this.personCountArr[12] : 0, this.personCountArr.length > 0 ? this.personCountArr[13] : 0,
            this.personCountArr.length > 0 ? this.personCountArr[14] : 0, this.personCountArr.length > 0 ? this.personCountArr[15] : 0, this.personCountArr.length > 0 ? this.personCountArr[16] : 0, this.personCountArr.length > 0 ? this.personCountArr[17] : 0, this.personCountArr.length > 0 ? this.personCountArr[18] : 0,
            this.personCountArr.length > 0 ? this.personCountArr[19] : 0, this.personCountArr.length > 0 ? this.personCountArr[20] : 0, this.personCountArr.length > 0 ? this.personCountArr[21] : 0, this.personCountArr.length > 0 ? this.personCountArr[22] : 0, this.personCountArr.length > 0 ? this.personCountArr[23] : 0,
            this.personCountArr.length > 0 ? this.personCountArr[24] : 0, this.personCountArr.length > 0 ? this.personCountArr[25] : 0, this.personCountArr.length > 0 ? this.personCountArr[26] : 0, this.personCountArr.length > 0 ? this.personCountArr[27] : 0, this.personCountArr.length > 0 ? this.personCountArr[28] : 0,
            this.personCountArr.length > 0 ? this.personCountArr[29] : 0, this.personCountArr.length > 0 ? this.personCountArr[30] : 0
        ];
        chart.refresh();
    };
    PersonChartComponent.prototype.selectData1 = function () {
    };
    PersonChartComponent.prototype.ngOnInit = function () {
    };
    return PersonChartComponent;
}());
tslib_1.__decorate([
    core_1.ViewChild("chart"),
    tslib_1.__metadata("design:type", primeng_1.UIChart)
], PersonChartComponent.prototype, "chart", void 0);
tslib_1.__decorate([
    core_1.ViewChild("chartLine"),
    tslib_1.__metadata("design:type", primeng_1.UIChart)
], PersonChartComponent.prototype, "chartLine", void 0);
PersonChartComponent = tslib_1.__decorate([
    core_1.Component({
        selector: 'personchart',
        template: __webpack_require__(215),
        providers: [setup_service_1.SetupService]
    }),
    tslib_1.__metadata("design:paramtypes", [http_1.Http, setup_service_1.SetupService, router_1.ActivatedRoute, router_1.Router])
], PersonChartComponent);
exports.PersonChartComponent = PersonChartComponent;


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var ng = __webpack_require__(1);
var core_1 = __webpack_require__(1);
var forms_1 = __webpack_require__(6);
var http_1 = __webpack_require__(12);
var router_1 = __webpack_require__(5);
var primeng_1 = __webpack_require__(2);
var setup_service_1 = __webpack_require__(11);
var global_constants_1 = __webpack_require__(15);
var angular2_uuid_1 = __webpack_require__(23);
var moment = __webpack_require__(0);
var PersonListComponent = (function () {
    function PersonListComponent(activatedRoute, confirmationService, _setupService, fb) {
        //this.http = http;
        var _this = this;
        this.activatedRoute = activatedRoute;
        this.confirmationService = confirmationService;
        this._setupService = _setupService;
        this.fb = fb;
        this.file = [];
        this.image = "DefaultImage.jpg";
        this.msgs = [];
        this.organizationid = global_constants_1.AppSettings.ORGANIZATION_ID;
        this.selectedTab = 1;
        // staffperson list
        this.staffPersonDialog = false;
        //private router: Router
        this.personArr = [];
        this.uploadedFiles = [];
        //for person contect person form
        //for contact person form
        this.personContactPersonDialog = false;
        //for personAuthentication form
        this.personAuthDialog = false;
        this.tab1visible = true;
        this.tab2visible = true;
        this.tab1Authenticationvisible = true;
        this.tab2Authenticationvisible = true;
        this.getPerson();
        this.personViewStaff();
        this.activatedRoute.params.subscribe(function (params) {
            _this.personViewId = params['personViewId'];
        });
        this._setupService.getPersonViewById(this.personViewId).subscribe(function (result) {
            _this.pViewDetail = result;
            _this.personViewDetails = _this.pViewDetail.personObj;
            _this.authTypeDetails = _this.pViewDetail.authentications;
            for (var i = 0; i < _this.authTypeDetails.length; i++) {
                if (_this.authTypeDetails[i].mode == "2") {
                    _this.authTypeDetails[i].modeType = "RFID";
                }
                else if (_this.authTypeDetails[i].mode == "1") {
                    _this.authTypeDetails[i].modeType = "Finger Scan";
                }
                else {
                    _this.authTypeDetails[i].modeType = "NA";
                }
            }
        });
        this.country = this._setupService.getCountries();
        this.countries = [];
        //this.countries.push({ label: 'Country', value: null });
        for (var i = 0; i < this.country.length; i++) {
            this.countries.push({ label: this.country[i].name, value: this.country[i].name });
        }
        this.states = this._setupService.getStates();
        this.countryStates = [];
        //this.countryStates.push({ label: 'State', value: null });
        for (var i = 0; i < this.states.length; i++) {
            this.countryStates.push({ label: this.states[i].name, value: this.states[i].name });
        }
        this.personDetail = {
            id: angular2_uuid_1.UUID.UUID(),
            patronId: '',
            personViewId: '',
            firstName: '',
            lastName: '',
            role: '',
            emailId: '',
            address: '',
            gender: '',
            dateOfBirth: new Date(),
            isActive: false,
            password: '',
            primaryMobile: '',
            secondaryMobile: '',
            country: '',
            organizationId: this.organizationid,
            state: '',
            zipCode: '',
            isPrimaryContact: false,
            isHavingSmartPhone: false,
            relation: '',
            imgUrl: '',
            createDate: new Date(),
            lastUpdated: new Date()
        };
        //this.http = http;
        this.authMode = [];
        //this.authMode.push({ label: 'Select Mode', value: null });
        this.authMode.push({ label: 'RFID', value: '2' });
        this.authMode.push({ label: 'Finger Scan', value: '1' });
        this.authenticationTypeDetail = {
            id: angular2_uuid_1.UUID.UUID(),
            hashValue: '',
            patronId: '',
            mode: '',
            modeType: '',
            createDate: new Date(),
            lastUpdated: new Date(),
            organizationId: this.organizationid,
            remark: ''
        };
        this.activatedRoute.params.subscribe(function (params) {
            _this.authTypeId = params['authTypeId'];
            _this.patronId = params['patronId'];
        });
        this.activatedRoute.params.subscribe(function (params) {
            _this.personViewId = params['personViewId'];
        });
        this.role = [];
        {
            //this.role.push({ label: 'Select Role', value: null });
            this.role.push({ label: 'Parents', value: 'Parents' });
            this.role.push({ label: 'Admin', value: 'Admin' });
            this.role.push({ label: 'Teacher', value: 'Teacher' });
            this.role.push({ label: 'Driver', value: 'Driver' });
            this.role.push({ label: 'Coordinator', value: 'Coordinator' });
            this.role.push({ label: 'Guest', value: 'Guest' });
        }
        this.relations = [];
        //this.relations.push({ label: 'Relation', value: null });
        this.relations.push({ label: 'Father', value: 'father' });
        this.relations.push({ label: 'Mother', value: 'mother' });
        this.relations.push({ label: 'Brother', value: 'brother' });
        this.relations.push({ label: 'Sister', value: 'sister' });
        this.relations.push({ label: 'Uncle', value: 'uncle' });
        this.relations.push({ label: 'Aunt', value: 'aunt' });
        this.relations.push({ label: 'Husband', value: 'husband' });
        this.relations.push({ label: 'Wife', value: 'wife' });
        //patron authentication
        this.authMode = [];
        //this.authMode.push({ label: 'Select Mode', value: null });
        this.authMode.push({ label: 'RFID', value: '2' });
        this.authMode.push({ label: 'Finger Scan', value: '1' });
    }
    ;
    //--------------------------------------End Constructor------------------------------------------------
    //Start Person view (Staff) operation
    PersonListComponent.prototype.personViewStaff = function () {
        this.pViewDetail = {
            id: '',
            personId: '',
            patronId: '',
            firstName: '',
            lastName: '',
            role: '',
            emailId: '',
            address: '',
            gender: '',
            dateOfBirth: new Date(),
            isActive: false,
            password: '',
            confirmPassword: '',
            organizationId: this.organizationid,
            authentications: this.authTypeDetails = [],
            primaryMobile: '',
            secondaryMobile: '',
            country: '',
            state: '',
            zipCode: '',
            isPrimaryContact: false,
            isHavingSmartPhone: false,
            relation: '',
            imgUrl: this.image,
            createDate: new Date(),
            lastUpdated: new Date(),
            personObj: this.personViewDetails = []
        };
    };
    PersonListComponent.prototype.personContact = function () {
        this.personDetail = {
            id: angular2_uuid_1.UUID.UUID(),
            patronId: '',
            personViewId: '',
            firstName: '',
            lastName: '',
            role: '',
            emailId: '',
            address: '',
            gender: '',
            dateOfBirth: new Date(),
            isActive: false,
            password: '',
            primaryMobile: '',
            secondaryMobile: '',
            country: '',
            organizationId: this.organizationid,
            state: '',
            zipCode: '',
            isPrimaryContact: false,
            isHavingSmartPhone: false,
            relation: '',
            imgUrl: this.image,
            createDate: new Date(),
            lastUpdated: new Date()
        };
    };
    PersonListComponent.prototype.addPersonView = function () {
        this.employeeHeader = "Add Person";
        this.personViewStaff();
        this.validateStaffPerson();
        this.staffPersonDialog = true;
    };
    PersonListComponent.prototype.createEmployee = function (number) {
        var _this = this;
        var a = this.pViewDetail.dateOfBirth;
        var b = moment(a).format('YYYY-MM-DD');
        this.pViewDetail.dateOfBirth = moment(b).toDate();
        if (b >= global_constants_1.AppSettings.CURRENT_DATE) {
            this.msgs = [];
            this.msgs.push({ severity: 'error', summary: 'Date of birth should not be greater than current date ' });
        }
        else {
            var fileToUpload_1;
            var fileArrys;
            var savedPerson;
            var fi_1 = this.fileInput.nativeElement;
            if (fi_1.files && fi_1.files[0]) {
                fileToUpload_1 = fi_1.files[0];
                fileArrys = fileToUpload_1.name.split(".");
            }
            var headers = new http_1.Headers();
            headers.append('Content-Type', 'application/json');
            this.pViewDetail.country = this.selectedCountry;
            this.pViewDetail.state = this.selectedState;
            this.pViewDetail.relation = this.selectedRelation;
            this.pViewDetail.role = this.selectedRole;
            if (this.pViewDetail.id) {
                this._setupService.updatePerson(this.personViewId, this.pViewDetail).subscribe(function (response) {
                    if (response === 204) {
                        if (_this.pViewDetail != null && fi_1.files && fi_1.files[0]) {
                            _this._setupService.updatePersonImageName(_this.pViewDetail.id, fileArrys[1]).subscribe(function (response) {
                            });
                            _this._setupService.fileuploadsforPerson(fileToUpload_1, _this.pViewDetail.id + "." + fileArrys[1]).subscribe(function (response) {
                                if (response === 204) {
                                    _this.getPerson();
                                }
                            });
                        }
                        else {
                            _this.getPerson();
                        }
                    }
                });
                this.msgs = [];
                this.msgs.push({ severity: 'success', summary: 'Person update successfully' });
                this.staffPersonDialog = false;
            }
            else {
                this._setupService.saveAndGetIdforPerson(this.pViewDetail).subscribe(function (response) {
                    savedPerson = response;
                    if (_this.pViewDetail != null && fi_1.files && fi_1.files[0]) {
                        _this._setupService.updatePersonImageName(savedPerson.id, fileArrys[1]).subscribe(function (response) {
                            _this._setupService.fileuploadsforPerson(fileToUpload_1, savedPerson.id + "." + fileArrys[1]).subscribe(function (response) {
                                _this.getPerson();
                            });
                        });
                    }
                    else {
                        _this.getPerson();
                    }
                    _this.msgs = [];
                    _this.msgs.push({ severity: 'success', summary: 'Person Saved Successfully' });
                });
                this.staffPersonDialog = false;
            }
        }
    };
    PersonListComponent.prototype.deletePerson = function (personDetail) {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Do you want to delete ' + "<b>" + personDetail.firstName + " " + personDetail.lastName + "</b > " + '?',
            header: 'Delete Confirmation',
            icon: 'fa fa-trash',
            accept: function () {
                _this._setupService.deletePerson(personDetail).subscribe(function (response) {
                    if (response === 204) {
                        //this.personDetails.forEach((u: PersonDetail, i) => {
                        //    if (u.id === personDetail.id) {
                        //        this.personDetails.splice(i, 1);
                        //    }
                        //});
                        _this.personDetails = _this.personDetails.filter(function (x) { return x.id != personDetail.id; });
                        _this.msgs = [];
                        _this.msgs.push({ severity: 'error', summary: 'Person deleted successfully' });
                        //this.getPerson();
                    }
                });
            }
        });
    };
    PersonListComponent.prototype.validateStaffPerson = function () {
        this.personviewform = this.fb.group({
            'firstName': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.pattern('[a-zA-Z]+')]),
            'lastName': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.pattern('[a-zA-Z]+')]),
            'dateOfBirth': new forms_1.FormControl('', forms_1.Validators.required),
            'role': new forms_1.FormControl('', forms_1.Validators.required),
            'emailId': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.email]),
            'password': new forms_1.FormControl('', forms_1.Validators.compose([forms_1.Validators.required, forms_1.Validators.minLength(4)])),
            'confirmPassword': new forms_1.FormControl(''),
            'gender': new forms_1.FormControl('', forms_1.Validators.required),
            'primaryMobile': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.minLength(10), forms_1.Validators.maxLength(10), forms_1.Validators.pattern('[0-9]+')]),
            'secondaryMobile': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.minLength(10), forms_1.Validators.maxLength(10), forms_1.Validators.pattern('[0-9]+')]),
            'address': new forms_1.FormControl('', forms_1.Validators.required),
            'countries': new forms_1.FormControl('', forms_1.Validators.required),
            'state': new forms_1.FormControl('', forms_1.Validators.required),
            'zipCode': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.minLength(3), forms_1.Validators.maxLength(8), forms_1.Validators.pattern('[0-9]+')]),
            'isPrimaryContact': new forms_1.FormControl(''),
            'isHavingSmartPhone': new forms_1.FormControl(''),
            'isActive': new forms_1.FormControl(''),
            'imgUrl': new forms_1.FormControl(''),
        }, { validator: this.matchingPasswords('password', 'confirmPassword') });
    };
    PersonListComponent.prototype.matchingPasswords = function (passwordKey, confirmPasswordKey) {
        return function (group) {
            var password = group.controls[passwordKey];
            var confirmPassword = group.controls[confirmPasswordKey];
            if (password.value !== confirmPassword.value) {
                return {
                    mismatchedPasswords: true
                };
            }
        };
    };
    PersonListComponent.prototype.ngOnInit = function () {
        this.validateStaffPerson(); //call to validatePatron
        this.validatePerson();
        this.validatePersonAuth();
    };
    PersonListComponent.prototype.download = function () {
        var tempList = [];
        for (var _i = 0, _a = this.personDetails; _i < _a.length; _i++) {
            var patron = _a[_i];
            tempList.push({
                "FirstName": patron.firstName,
                "LastName": patron.lastName,
                "EmailId": patron.emailId,
                "Role": patron.role,
                "Primary Mobile": patron.primaryMobile,
            });
        }
        var csvData = this.ConvertToCSV(tempList);
        var a = document.createElement("a");
        a.setAttribute('style', 'display:none;');
        document.body.appendChild(a);
        var blob = new Blob([csvData], { type: 'text/csv' });
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = 'PersonDetails.csv';
        a.click();
    };
    PersonListComponent.prototype.ConvertToCSV = function (objArray) {
        var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
        var str = '';
        var row = "";
        for (var index in objArray[0]) {
            //Now convert each value to string and comma-separated
            row += index + ',';
        }
        row = row.slice(0, -1);
        //append Label row with line break
        str += row + '\r\n';
        for (var i = 0; i < array.length; i++) {
            var line = '';
            for (var index in array[i]) {
                if (line != '')
                    line += ',';
                line += array[i][index];
            }
            str += line + '\r\n';
        }
        return str;
    };
    PersonListComponent.prototype.showPassword = function (input) {
        input.type = input.type === 'password' ? 'text' : 'password';
    };
    PersonListComponent.prototype.personCancel = function () {
        this.staffPersonDialog = false;
        //this.confirmationService.confirm({
        //    message: 'Are you sure you want to cancel this form?',
        //    accept: () => {
        //    }
        //});
    };
    //--------------------------------------End Person view (Staff) operation---------------------------------------------------
    //start person contact person operation
    PersonListComponent.prototype.validatePerson = function () {
        this.personform = this.fb.group({
            'firstName': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.pattern('[a-zA-Z]+')]),
            'lastName': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.pattern('[a-zA-Z]+')]),
            'dateOfBirth': new forms_1.FormControl('', forms_1.Validators.required),
            'relation': new forms_1.FormControl('', forms_1.Validators.required),
            'emailId': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.email]),
            'password': new forms_1.FormControl(''),
            'gender': new forms_1.FormControl(''),
            'primaryMobile': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.minLength(10), forms_1.Validators.maxLength(10), forms_1.Validators.pattern('[0-9]+')]),
            'secondaryMobile': new forms_1.FormControl('', [forms_1.Validators.minLength(10), forms_1.Validators.maxLength(10), forms_1.Validators.pattern('[0-9]+')]),
            'address': new forms_1.FormControl('', forms_1.Validators.required),
            'countries': new forms_1.FormControl('', forms_1.Validators.required),
            'state': new forms_1.FormControl('', forms_1.Validators.required),
            'zipCode': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.minLength(3), forms_1.Validators.maxLength(8), forms_1.Validators.pattern('[0-9]+')]),
            'isPrimaryContact': new forms_1.FormControl(''),
            'isHavingSmartPhone': new forms_1.FormControl(''),
            'isActive': new forms_1.FormControl(''),
        });
    };
    PersonListComponent.prototype.addContactperson = function (pViewDetail) {
        this.personViewId = pViewDetail.id;
        this.personViewDetails = pViewDetail.personObj;
        this.selectedTab = 1;
        this.personContactPersonDialog = true;
        this.tab1visible = true;
        this.tab2visible = false;
    };
    PersonListComponent.prototype.createPerson = function (number) {
        var _this = this;
        var a = this.personDetail.dateOfBirth;
        var b = moment(a).format('YYYY-MM-DD');
        this.personDetail.dateOfBirth = moment(b).toDate();
        if (b >= global_constants_1.AppSettings.CURRENT_DATE) {
            this.msgs = [];
            this.msgs.push({ severity: 'error', summary: 'Date of birth should not be greater than current date ' });
        }
        else {
            var addedPerson;
            this.tab1visible = true;
            this.tab2visible = false;
            this.selectedTab = number;
            var updatedPerson;
            var fileToUpload_2;
            var fileArrys;
            var newPersonId;
            var fi_2 = this.personImage.nativeElement;
            if (fi_2.files && fi_2.files[0]) {
                fileToUpload_2 = fi_2.files[0];
                fileArrys = fileToUpload_2.name.split(".");
            }
            this.personDetail.country = this.selectedCountry;
            this.personDetail.state = this.selectedState;
            this.personDetail.relation = this.selectedRelation;
            this.personDetail.role = this.selectedRole;
            //alert("personViewId = "+this.personViewId);
            if (this.personViewId) {
                if (this.personDetail.imgUrl == null || this.personDetail.imgUrl == this.image) {
                    this.personDetail.imgUrl = this.image;
                }
                this.personDetail.organizationId = this.organizationid;
                this._setupService.createPersonContactPerson(this.personViewId, this.personDetail).subscribe(function (result) {
                    updatedPerson = result;
                    addedPerson = updatedPerson.personObj[updatedPerson.personObj.length - 1];
                    newPersonId = addedPerson.id;
                    if (_this.personDetail != null && fi_2.files && fi_2.files[0]) {
                        _this._setupService.personContactPersonFileUploads(fileToUpload_2, newPersonId + "." + fileArrys[1]).subscribe(function (response) {
                            _this._setupService.updatePersonContactPersonImageName(_this.personViewId, newPersonId, fileArrys[1]).subscribe(function (response) {
                                _this.pViewDetail = response;
                                _this.personViewDetails = _this.pViewDetail.personObj;
                                var a = _this.pViewDetail.dateOfBirth;
                                var b = moment(a).toDate();
                                _this.pViewDetail.dateOfBirth = b;
                                _this.getPerson();
                                _this.personContact();
                                _this.msgs = [];
                                _this.msgs.push({ severity: 'success', summary: 'Contact person saved successfully' });
                            });
                        });
                    }
                    else {
                        _this.personViewDetails = updatedPerson.personObj;
                        _this.msgs = [];
                        _this.msgs.push({ severity: 'success', summary: 'Contact person saved successfully' });
                    }
                });
            }
        }
    };
    //update perosn 
    PersonListComponent.prototype.updatePerson = function (employeeDetail) {
        this.employeeHeader = "Edit Person";
        this.pViewDetail = employeeDetail;
        this.selectedCountry = this.pViewDetail.country;
        this.selectedState = this.pViewDetail.state;
        this.selectedRelation = this.pViewDetail.relation;
        this.selectedRole = this.pViewDetail.role;
        var a = employeeDetail.dateOfBirth;
        var b = moment(a).format('YYYY-MM-DD');
        employeeDetail.dateOfBirth = moment(b).toDate();
        this.staffPersonDialog = true;
    };
    //Update patron contact person form
    PersonListComponent.prototype.updateContactPerson = function (tabNumber, mode, personDetail) {
        var _this = this;
        var selectedPerson;
        var contactPerson = {};
        this.header = "Edit Contact Person";
        this.tab1visible = false;
        this.tab2visible = true;
        selectedPerson = this.personDetails.find(function (x) { return x.id == _this.personViewId; });
        contactPerson = selectedPerson.personObj.find(function (x) { return x.id == personDetail.id; });
        //alert("gender : " + contactPerson.gender.length);
        //this._setupService.editPersonContactPerson(this.personViewId, personDetail.id).subscribe(result => {
        //    this.personDetailList = result;
        if (contactPerson != null) {
            this.personDetail = contactPerson;
            this.selectedRelation = this.personDetail.relation;
            this.selectedCountry = this.personDetail.country;
            this.selectedState = this.personDetail.state;
            //this.selectedRole = this.personDetail.role;
            this.selectedGender = this.personDetail.gender;
            //this.personDetail.gender = this.personDetail.gender ;
            var a = this.personDetail.dateOfBirth;
            var b = moment(a).format('YYYY-MM-DD');
            this.personDetail.dateOfBirth = moment(b).toDate();
        }
        //});
        //this.selectedRelation = this.personDetail.relation;
        //this.selectedCountry = this.personDetail.country;
        //this.selectedState = this.personDetail.state;
        //this.selectedRole = this.personDetail.role
        this.selectedTab = tabNumber;
    };
    // delete person contact person  from list
    PersonListComponent.prototype.deletePersonContact = function (personDetail) {
        var _this = this;
        if (this.personViewDetails.length == 1) {
            this.msgs = [];
            this.msgs.push({ severity: 'error', summary: 'Contact person can not be delete' });
        }
        else {
            this.confirmationService.confirm({
                message: 'Do you want to delete ' + "<b>" + personDetail.firstName + " " + personDetail.lastName + "</b > " + ' ? ',
                header: 'Delete Confirmation',
                icon: 'fa fa-trash',
                accept: function () {
                    _this._setupService.deletePersonContactPerson(_this.personViewId, personDetail.id).subscribe(function (response) {
                        if (response === 200) {
                            //this.personViewDetails.forEach((u: PersonDetail, i) => {
                            //    if (u.id === personDetail.id) {
                            //        this.personViewDetails.splice(i, 1);
                            //        this.personContact();
                            //    }
                            //});
                            _this.personViewDetails = _this.personViewDetails.filter(function (x) { return x.id != personDetail.id; });
                            _this.getPerson();
                            _this.personContact();
                            _this.msgs = [];
                            _this.msgs.push({ severity: 'error', summary: 'Contact person deleted successfully' });
                        }
                    });
                }
            });
        }
    };
    // for tab  change  from tab button
    PersonListComponent.prototype.handleChange = function (e) {
        this.validatePerson();
        this.selectedTab = 1;
    };
    // for tab change from add and edit button
    PersonListComponent.prototype.activateTab = function (tabNumber, mode) {
        this.header = "Add contact Person";
        this.tab1visible = false;
        this.tab2visible = true;
        if (mode == 'add') {
            this.personDetail = null;
            this.personContact();
            this.validatePerson();
            this.selectedTab = tabNumber;
        }
    };
    PersonListComponent.prototype.contactcancel = function (number) {
        this.tab1visible = true;
        this.tab2visible = false;
        this.selectedTab = number;
    };
    PersonListComponent.prototype.getPerson = function () {
        var _this = this;
        this.loading = true;
        setTimeout(function () {
            _this.loading = false;
        }, 15000);
        this._setupService.getPerson().subscribe(function (response) {
            _this.personDetails = [];
            _this.personDetailsList = [];
            _this.personDetails = response;
            _this.loading = false;
        });
    };
    //------------------------------End  Person Contact Person Operation-------------------------------------
    PersonListComponent.prototype.personAuth = function () {
        this.authenticationTypeDetail = {
            id: angular2_uuid_1.UUID.UUID(),
            hashValue: '',
            patronId: '',
            mode: '',
            modeType: '',
            createDate: new Date(),
            lastUpdated: new Date(),
            organizationId: this.organizationid,
            remark: ''
        };
    };
    //Validate person authntication
    PersonListComponent.prototype.validatePersonAuth = function () {
        this.authform = this.fb.group({
            'hashvalue': new forms_1.FormControl('', forms_1.Validators.required),
            'authmode': new forms_1.FormControl('', forms_1.Validators.required),
            'remark': new forms_1.FormControl(),
        });
    };
    PersonListComponent.prototype.auth = function () {
        for (var i = 0; i < this.authTypeDetails.length; i++) {
            if (this.authTypeDetails[i].mode == "2") {
                this.authTypeDetails[i].modeType = "RFID";
            }
            else if (this.authTypeDetails[i].mode == "1") {
                this.authTypeDetails[i].modeType = "Finger Scan";
            }
            else {
                this.authTypeDetails[i].modeType = "NA";
            }
        }
    };
    // add patron authentication
    PersonListComponent.prototype.addAuthType = function (personViewDetail) {
        this.personViewId = personViewDetail.id;
        //this.getPerson();
        this.authTypeDetails = personViewDetail.authentications;
        this.auth();
        this.validatePersonAuth();
        this.selectedTab = 1;
        this.personAuthDialog = true;
        this.tab1Authenticationvisible = true;
        this.tab2Authenticationvisible = false;
    };
    //create form and save patron authentication
    PersonListComponent.prototype.createAuthType = function (number) {
        var _this = this;
        this.tab1Authenticationvisible = true;
        this.tab2Authenticationvisible = false;
        this.selectedTab = number;
        var headers = new http_1.Headers();
        headers.append('Content-Type', 'application/json');
        this.authenticationTypeDetail.mode = this.selectedAuthMode;
        if (this.personViewId) {
            this._setupService.createPersonAuth(this.personViewId, this.authenticationTypeDetail).subscribe(function (result) {
                _this.pViewDetail = result;
                _this.authTypeDetails = _this.pViewDetail.authentications;
                var a = _this.pViewDetail.dateOfBirth;
                var b = moment(a).toDate();
                _this.pViewDetail.dateOfBirth = b;
                _this.getPerson();
                _this.auth();
                _this.personAuth();
            });
            this.msgs = [];
            this.msgs.push({ severity: 'success', summary: 'Authentication saved successfully' });
        }
    };
    //update patron authentication
    PersonListComponent.prototype.updateAuthType = function (tabNumber, mode, personDetail) {
        var _this = this;
        var selectedPerson;
        var selectedPersonAuth;
        this.header = "Edit Authentication";
        this.tab1Authenticationvisible = false;
        this.tab2Authenticationvisible = true;
        selectedPerson = this.personDetails.find(function (x) { return x.id == _this.personViewId; });
        selectedPersonAuth = selectedPerson.authentications.find(function (x) { return x.id == personDetail.id; });
        //this._setupService.editPersonAuth(this.personViewId, personDetail.id).subscribe(result => {
        //    this.authenticationTypeList = result;
        if (selectedPersonAuth != null) {
            this.authenticationTypeDetail = selectedPersonAuth;
            this.selectedAuthMode = this.authenticationTypeDetail.mode;
        }
        //});
        this.selectedTab = tabNumber;
    };
    //delete patron authentication
    PersonListComponent.prototype.deleteAuthType = function (authType) {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Do you want to delete ' + "<b>" + authType.hashValue + "</b >" + '?',
            header: 'Delete Confirmation',
            icon: 'fa fa-trash',
            accept: function () {
                _this._setupService.deletePersonAutheticationType(_this.personViewId, authType.id).subscribe(function (response) {
                    if (response === 200) {
                        //this.authTypeDetails.forEach((u: AuthenticationTypeDetail, i) => {
                        //    if (u.id === authType.id) {
                        //        this.authTypeDetails.splice(i, 1);
                        //    }
                        //});
                        _this.authTypeDetails = _this.authTypeDetails.filter(function (x) { return x.id != authType.id; });
                        _this.getPerson();
                        _this.auth();
                        _this.personAuth();
                        _this.msgs = [];
                        _this.msgs.push({ severity: 'error', summary: 'Authentication deleted successfully' });
                    }
                });
            }
        });
    };
    //  tab change for patron authentication
    PersonListComponent.prototype.handleChange1 = function (e) {
        this.validatePersonAuth();
        this.selectedTab = 1;
    };
    //for activate tab if add authentication
    PersonListComponent.prototype.activateTab1 = function (tabNumber, mode) {
        this.tab1Authenticationvisible = false;
        this.tab2Authenticationvisible = true;
        if (mode == 'add') {
            this.authenticationTypeDetail = null;
            this.personAuth();
            this.validatePersonAuth();
            this.selectedTab = tabNumber;
        }
    };
    //for patron auth cancle
    PersonListComponent.prototype.onCancel = function (number) {
        this.tab1Authenticationvisible = true;
        this.tab2Authenticationvisible = false;
        this.selectedTab = number;
    };
    return PersonListComponent;
}());
tslib_1.__decorate([
    core_1.ViewChild("fileInput"),
    tslib_1.__metadata("design:type", Object)
], PersonListComponent.prototype, "fileInput", void 0);
tslib_1.__decorate([
    core_1.ViewChild("personImage"),
    tslib_1.__metadata("design:type", Object)
], PersonListComponent.prototype, "personImage", void 0);
PersonListComponent = tslib_1.__decorate([
    ng.Component({
        selector: 'personlist',
        template: __webpack_require__(216),
        providers: [primeng_1.ConfirmationService, setup_service_1.SetupService]
    }),
    tslib_1.__metadata("design:paramtypes", [router_1.ActivatedRoute, primeng_1.ConfirmationService, setup_service_1.SetupService, forms_1.FormBuilder])
], PersonListComponent);
exports.PersonListComponent = PersonListComponent;


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var forms_1 = __webpack_require__(6);
var primeng_1 = __webpack_require__(2);
var setup_service_1 = __webpack_require__(11);
var moment = __webpack_require__(0);
var global_constants_1 = __webpack_require__(15);
var ScheduleComponent = (function () {
    function ScheduleComponent(confirmationService, _setupService, fb) {
        var _this = this;
        this.confirmationService = confirmationService;
        this._setupService = _setupService;
        this.fb = fb;
        this.sessionDialog = false;
        this.breakDialog = false;
        this.termDialog = false;
        this.gradeDialog = false;
        this.daysOfWeek = "";
        this.msgs = [];
        this.orgId = global_constants_1.AppSettings.ORGANIZATION_ID;
        this.selectedDays = [];
        this.tempSelectedDays = [];
        this.currentDate = moment(new Date()).format('YYYY-MM-DD');
        this.loading = true;
        setTimeout(function () {
            _this._setupService.getSession().subscribe(function (sessionDetails) { return _this.sessionDetails = sessionDetails; });
            _this.loading = false;
        }, 1000);
        this._setupService.getBreak().subscribe(function (breakDetails) { return _this.breakDetails = breakDetails; });
        this._setupService.getTerm().subscribe(function (termDetails) { return _this.termDetails = termDetails; });
        this._setupService.getGrade().subscribe(function (gradeDetails) { return _this.gradeDetails = gradeDetails; });
        this._setupService.getPatron().subscribe(function (response) { _this.patronDetails = response; });
        this._setupService.getWeek().subscribe(function (result) {
            _this.weekDetails = result;
            _this.daysOfWeekId = _this.weekDetails[0].id;
            _this.daysCreatedDate = _this.weekDetails[0].createDate;
            _this.selectedDays = _this.weekDetails[0].dayofweek.split(",");
            _this.tempSelectedDays = _this.weekDetails[0].dayofweek.split(",");
        });
        this.days = [];
        this.days.push({ label: 'Monday', value: 'Monday' });
        this.days.push({ label: 'Tuesday', value: 'Tuesday' });
        this.days.push({ label: 'Wednesday', value: 'Wednesday' });
        this.days.push({ label: 'Thursday', value: 'Thursday' });
        this.days.push({ label: 'Friday', value: 'Friday' });
        this.days.push({ label: 'Saturday', value: 'Saturday' });
        this.days.push({ label: 'Sunday', value: 'Sunday' });
        this.grade = [];
        //this.grade.push({ label: 'Select Class', value: null });
        this.grade.push({ label: '1', value: '1' });
        this.grade.push({ label: '2', value: '2' });
        this.grade.push({ label: '3', value: '3' });
        this.grade.push({ label: '4', value: '4' });
        this.grade.push({ label: '5', value: '5' });
        this.grade.push({ label: '6', value: '6' });
        this.grade.push({ label: '7', value: '7' });
        this.grade.push({ label: '8', value: '8' });
        this.grade.push({ label: '9', value: '9' });
        this.grade.push({ label: '10', value: '10' });
        this.grade.push({ label: '11', value: '11' });
        this.grade.push({ label: '12', value: '12' });
        this.section = [];
        //this.section.push({ label: 'Select Section', value: null });
        this.section.push({ label: 'A', value: 'A' });
        this.section.push({ label: 'B', value: 'B' });
        this.section.push({ label: 'C', value: 'C' });
        this.section.push({ label: 'D', value: 'D' });
        this.section.push({ label: 'E', value: 'E' });
        this.section.push({ label: 'F', value: 'F' });
        this.section.push({ label: 'G', value: 'G' });
        this.section.push({ label: 'H', value: 'H' });
        this.getSession();
        this.getTerm();
        this.getBreak();
        this.getGrade();
    }
    ;
    ScheduleComponent.prototype.getSession = function () {
        this.sessionDetail = {
            id: '',
            sessionName: '',
            startDate: '',
            endDate: '',
            sessionBreak: [],
            sessionTerm: [],
            sessionWeek: [],
            status: '',
            createDate: new Date(),
            lastUpdated: new Date(),
            organizationid: this.orgId,
            type: ''
        };
    };
    ScheduleComponent.prototype.getBreak = function () {
        this.breakDetail = {
            id: '',
            breakName: '',
            startDate: '',
            endDate: '',
            tag: '',
            organizationid: this.orgId,
            createDate: new Date(),
            lastUpdated: new Date()
        };
    };
    ScheduleComponent.prototype.getTerm = function () {
        this.termDetail = {
            id: '',
            termName: '',
            startDate: '',
            endDate: '',
            tag: '',
            organizationid: this.orgId,
            createDate: new Date(),
            lastUpdated: new Date()
        };
    };
    ScheduleComponent.prototype.getGrade = function () {
        this.gradeDetail = {
            id: '',
            grade: '',
            section: '',
            organizationid: this.orgId,
            createDate: new Date(),
            lastUpdated: new Date()
        };
    };
    ScheduleComponent.prototype.addSession = function () {
        this.getSession();
        this.validate();
        this.sessionDialog = true;
    };
    ScheduleComponent.prototype.addBreak = function () {
        this.getBreak();
        this.validate();
        this.breakDialog = true;
    };
    ScheduleComponent.prototype.addTerm = function () {
        this.getTerm();
        this.validate();
        this.termDialog = true;
    };
    ScheduleComponent.prototype.addGrade = function () {
        this.validate();
        this.gradeDialog = true;
    };
    //Create Session
    ScheduleComponent.prototype.createSession = function () {
        var _this = this;
        var savedSession;
        var a = moment(this.sessionDetail.startDate).toDate();
        this.sessionDetail.startDate = moment(a).format('YYYY-MM-DD');
        var b = moment(this.sessionDetail.endDate).toDate();
        this.sessionDetail.endDate = moment(b).format('YYYY-MM-DD');
        if (this.sessionDetail.id) {
            if (this.sessionDetail.startDate > this.sessionDetail.endDate) {
            }
            else {
                // call for update update session with session id and session detail
                this._setupService.updateSession(this.sessionDetail.id, this.sessionDetail).subscribe(function (response) {
                    if (response === 204) {
                        // Call for get updated session
                        _this._setupService.getSession().subscribe(function (sessionDetails) {
                            return _this.sessionDetails = sessionDetails;
                        });
                        _this.msgs = [];
                        _this.msgs.push({ severity: 'success', summary: 'Session update successfully' });
                    }
                });
                this.sessionDialog = false;
            }
        }
        else {
            this.sessionDetail.status = "Active";
            this.sessionDetail.sessionBreak = [];
            this.sessionDetail.sessionTerm = [];
            //call for create new session  with active status and get new createtd session id
            this._setupService.saveAndGetSessionId(this.sessionDetail).subscribe(function (response) {
                savedSession = response;
                if (savedSession != null) {
                    _this._setupService.getSession().subscribe(function (sessionDetails) {
                        return _this.sessionDetails = sessionDetails;
                    });
                    _this.msgs = [];
                    _this.msgs.push({ severity: 'success', summary: 'Session saved successfully' });
                    //call for update session status (Completed) for old created session      
                    _this._setupService.updateSessionStatus(savedSession.id).subscribe(function (response) {
                    });
                }
            });
            this.sessionDialog = false;
        }
    };
    //Create Term
    ScheduleComponent.prototype.createTerm = function (value) {
        var _this = this;
        var savedTerm;
        var a = moment(this.termDetail.startDate).toDate();
        this.termDetail.startDate = moment(a).format('YYYY-MM-DD');
        var b = moment(this.termDetail.endDate).toDate();
        this.termDetail.endDate = moment(b).format('YYYY-MM-DD');
        if (this.termDetail.id) {
            if (this.termDetail.startDate > this.termDetail.endDate) {
            }
            else {
                this._setupService.updateTerm(this.termDetail.id, this.termDetail).subscribe(function (response) {
                    if (response === 204) {
                        _this._setupService.updateTermInSessionDetail(_this.termDetail.id, _this.termDetail).subscribe(function (response) {
                            _this._setupService.getTerm().subscribe(function (termDetails) { return _this.termDetails = termDetails; });
                            _this.msgs = [];
                            _this.msgs.push({ severity: 'success', summary: 'Term update successfully' });
                        });
                    }
                });
                this.termDialog = false;
            }
        }
        else {
            this._setupService.saveAndGetTermId(this.termDetail).subscribe(function (response) {
                savedTerm = response;
                if (savedTerm != null) {
                    _this._setupService.updateSessionTermDetail(savedTerm).subscribe(function (response) {
                        _this._setupService.getTerm().subscribe(function (termDetails) { return _this.termDetails = termDetails; });
                        _this.msgs = [];
                        _this.msgs.push({ severity: 'success', summary: 'Term saved successfully' });
                    });
                }
            });
            this.termDialog = false;
        }
    };
    //Create Break 
    ScheduleComponent.prototype.createBreak = function () {
        var _this = this;
        var savedBreak;
        var a = moment(this.breakDetail.startDate).toDate();
        this.breakDetail.startDate = moment(a).format('YYYY-MM-DD');
        var b = moment(this.breakDetail.endDate).toDate();
        this.breakDetail.endDate = moment(b).format('YYYY-MM-DD');
        if (this.breakDetail.id) {
            if (this.breakDetail.startDate > this.breakDetail.endDate) {
            }
            else {
                this._setupService.updateBreak(this.breakDetail.id, this.breakDetail).subscribe(function (response) {
                    if (response === 204) {
                        _this._setupService.updateBreakInSessionDetail(_this.breakDetail.id, _this.breakDetail).subscribe(function (response) {
                            _this._setupService.getBreak().subscribe(function (breakDetails) { return _this.breakDetails = breakDetails; });
                            _this.msgs = [];
                            _this.msgs.push({ severity: 'success', summary: 'Break update successfully' });
                        });
                    }
                });
                this.breakDialog = false;
            }
        }
        else {
            this._setupService.saveAndGetBreakId(this.breakDetail).subscribe(function (response) {
                savedBreak = response;
                if (savedBreak != null) {
                    _this._setupService.getBreak().subscribe(function (breakDetails) { return _this.breakDetails = breakDetails; });
                    _this.msgs = [];
                    _this.msgs.push({ severity: 'success', summary: 'Break saved successfully' });
                    _this._setupService.updateSessionBreakDetail(savedBreak).subscribe(function (response) {
                    });
                }
            });
            this.breakDialog = false;
        }
    };
    // Create Weeek
    ScheduleComponent.prototype.createWeek = function () {
        var _this = this;
        this.daysOfWeek = '';
        if (this.selectedDays.length > 0) {
            for (var day in this.selectedDays) {
                this.daysOfWeek += this.selectedDays[day] + ",";
            }
            this.daysOfWeek = this.daysOfWeek.replace(/^,|,$/g, ''); // remove end commas           
            if (this.daysOfWeekId) {
                this._setupService.updateWeek(this.daysOfWeekId, this.daysOfWeek, this.daysCreatedDate).subscribe(function (response) {
                    if (response === 204) {
                        _this.msgs = [];
                        _this.msgs.push({ severity: 'success', summary: 'Week update successfully' });
                    }
                });
            }
            else {
                this._setupService.createWeek(this.daysOfWeek).subscribe(function (response) {
                    if (response === 204) {
                        _this.msgs = [];
                        _this.msgs.push({ severity: 'success', summary: 'Week saved successfully' });
                    }
                });
            }
            this._setupService.updateSessionWeekDetail(this.daysOfWeek).subscribe(function (response) {
            });
        }
        else {
            this.msgs = [];
            this.msgs.push({ severity: 'error', summary: 'Please select at least one day !' });
            this.selectedDays = this.tempSelectedDays;
        }
    };
    //Create Grade
    ScheduleComponent.prototype.createGrade = function () {
        var _this = this;
        this._setupService.createGrade(this.selectedGrade, this.selectedSection).subscribe(function (response) {
            if (response === 204) {
                _this._setupService.getGrade().subscribe(function (gradeDetails) { return _this.gradeDetails = gradeDetails; });
                _this.msgs = [];
                _this.msgs.push({ severity: 'success', summary: 'Grade saved successfully' });
            }
        });
        this.gradeDialog = false;
    };
    ScheduleComponent.prototype.updateSession = function (sessionDetail) {
        this.sessionDetail = sessionDetail;
        this.sessionDialog = true;
    };
    ScheduleComponent.prototype.updateBreak = function (breakDetail) {
        this.breakDetail = breakDetail;
        this.breakDialog = true;
    };
    ScheduleComponent.prototype.updateTerm = function (termDetail) {
        this.termDetail = termDetail;
        this.termDialog = true;
    };
    ScheduleComponent.prototype.cancelSession = function () {
        this.sessionDialog = false;
    };
    ScheduleComponent.prototype.cancelBreak = function () {
        this.breakDialog = false;
    };
    ScheduleComponent.prototype.cancelTerm = function () {
        this.termDialog = false;
    };
    ScheduleComponent.prototype.cancelgrade = function () {
        this.gradeDialog = false;
    };
    ScheduleComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.validate();
        this._setupService.getTermById(this.termId).subscribe(function (termDetail) { return _this.termDetail = termDetail; });
        this._setupService.getBreakById(this.breakId).subscribe(function (breakDetail) { return _this.breakDetail = breakDetail; });
        this._setupService.getSessionById(this.sessionId).subscribe(function (sessionDetail) { return _this.sessionDetail = sessionDetail; });
    };
    ScheduleComponent.prototype.matchingDates = function (startdateKey, enddateKey) {
        return function (group) {
            var startdate = group.controls[startdateKey];
            var enddate = group.controls[enddateKey];
            if (startdate.value > enddate.value) {
                return {
                    invalidDate: true
                };
            }
        };
    };
    ScheduleComponent.prototype.validate = function () {
        this.sessionform = this.fb.group({
            //'sessionname': new FormControl('', [Validators.required, Validators.pattern(`\\d{4}[-\\.\\s]\\d{4}`)]),
            'sessionname': new forms_1.FormControl('', forms_1.Validators.required),
            'startdate': new forms_1.FormControl('', forms_1.Validators.required),
            'enddate': new forms_1.FormControl('', forms_1.Validators.required),
        }, { validator: this.matchingDates('startdate', 'enddate') });
        this.breakform = this.fb.group({
            'breakname': new forms_1.FormControl('', forms_1.Validators.required),
            'startdate': new forms_1.FormControl('', forms_1.Validators.required),
            'enddate': new forms_1.FormControl('', forms_1.Validators.required),
        }, { validator: this.matchingDates('startdate', 'enddate') });
        this.termform = this.fb.group({
            'termname': new forms_1.FormControl('', forms_1.Validators.required),
            'startdate': new forms_1.FormControl('', forms_1.Validators.required),
            'enddate': new forms_1.FormControl('', forms_1.Validators.required),
        }, { validator: this.matchingDates('startdate', 'enddate') });
        this.gradeform = this.fb.group({
            'grade': new forms_1.FormControl('', forms_1.Validators.required),
            'section': new forms_1.FormControl('', forms_1.Validators.required),
        });
    };
    ScheduleComponent.prototype.deleteSession = function (sessionDetail) {
        var _this = this;
        if (sessionDetail.status == "Active") {
            this.msgs = [];
            this.msgs.push({ severity: 'error', summary: 'Session cannot be deleted' });
        }
        else {
            this.confirmationService.confirm({
                message: 'Do you want to delete ' + "<b>" + sessionDetail.sessionName + "</b>" + ' Session ?',
                header: 'Delete Confirmation',
                icon: 'fa fa-trash',
                accept: function () {
                    _this._setupService.deleteSession(sessionDetail).subscribe(function (response) {
                        if (response === 204) {
                            _this.sessionDetails.forEach(function (u, i) {
                                if (u.id === sessionDetail.id) {
                                    _this.sessionDetails.splice(i, 1);
                                }
                            });
                            _this.msgs = [];
                            _this.msgs.push({ severity: 'error', summary: 'Session deleted successfully' });
                        }
                    });
                }
            });
        }
    };
    ScheduleComponent.prototype.deleteBreak = function (breakDetail) {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Do you want to delete ' + "<b>" + breakDetail.breakName + "</b>" + ' break ? ',
            header: 'Delete Confirmation',
            icon: 'fa fa-trash',
            accept: function () {
                _this._setupService.deleteBreak(breakDetail).subscribe(function (response) {
                    if (response === 204) {
                        _this.breakDetails.forEach(function (u, i) {
                            if (u.id === breakDetail.id) {
                                _this.breakDetails.splice(i, 1);
                                _this.msgs = [];
                                _this.msgs.push({ severity: 'error', summary: 'Break deleted successfully' });
                            }
                        });
                        _this._setupService.deleteBreakFromSession(breakDetail).subscribe(function (result) {
                        });
                    }
                });
            }
        });
    };
    ScheduleComponent.prototype.deleteTerm = function (termDetail) {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Do you want to delete ' + "<b>" + termDetail.termName + "</b>" + ' term ? ',
            header: 'Delete Confirmation',
            icon: 'fa fa-trash',
            accept: function () {
                _this._setupService.deleteTerm(termDetail).subscribe(function (response) {
                    if (response === 204) {
                        _this.termDetails.forEach(function (u, i) {
                            if (u.id === termDetail.id) {
                                _this.termDetails.splice(i, 1);
                                _this.msgs = [];
                                _this.msgs.push({ severity: 'error', summary: 'Term deleted successfully' });
                            }
                        });
                        _this._setupService.deleteTermFromSession(termDetail).subscribe(function (result) {
                        });
                    }
                });
            }
        });
    };
    ScheduleComponent.prototype.deleteGrade = function (gradeDetail) {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Do you want to delete class ' + "<b>" + gradeDetail.grade + "</b>" + " section " + "<b>" + gradeDetail.section + "</b>" + ' ?',
            header: 'Delete Confirmation',
            icon: 'fa fa-trash',
            accept: function () {
                _this._setupService.isStudentExistInClass(gradeDetail.grade, gradeDetail.section).subscribe(function (result) {
                    _this.patronDetails = result;
                    if (_this.patronDetails.length == 0) {
                        _this._setupService.deleteGrade(gradeDetail).subscribe(function (response) {
                            if (response === 204) {
                                _this.gradeDetails.forEach(function (u, i) {
                                    if (u.id === gradeDetail.id) {
                                        _this.gradeDetails.splice(i, 1);
                                    }
                                });
                                _this.msgs = [];
                                _this.msgs.push({ severity: 'error', summary: 'Class deleted successfully' });
                            }
                        });
                    }
                    else {
                        _this.msgs = [];
                        _this.msgs.push({ severity: 'error', summary: ' Patrons are exist in this class so class can not be deleted' });
                    }
                });
            }
        });
    };
    return ScheduleComponent;
}());
ScheduleComponent = tslib_1.__decorate([
    core_1.Component({
        selector: 'schedule',
        template: __webpack_require__(217),
        providers: [primeng_1.ConfirmationService, setup_service_1.SetupService]
    }),
    tslib_1.__metadata("design:paramtypes", [primeng_1.ConfirmationService, setup_service_1.SetupService, forms_1.FormBuilder])
], ScheduleComponent);
exports.ScheduleComponent = ScheduleComponent;


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var forms_1 = __webpack_require__(6);
var setup_service_1 = __webpack_require__(11);
var primeng_1 = __webpack_require__(2);
var moment = __webpack_require__(0);
var TransportMessageComponent = (function () {
    function TransportMessageComponent(_setupService, fb) {
        // this.http = http;
        var _this = this;
        this._setupService = _setupService;
        this.fb = fb;
        this.organizationId = localStorage.getItem("OrganizationId");
        //displayDialog: boolean;
        //submitted: boolean;
        this.selectedRoute = [];
        this.selectedStoppage = [];
        this.messageCenterDialog = false;
        this.msgs = [];
        this.showStoppage = false;
        this.loading = true;
        var firstName;
        var lastName;
        this.personId = localStorage.getItem("UserId");
        firstName = localStorage.getItem("GivenName");
        lastName = localStorage.getItem("SurName");
        this.userName = firstName + " " + lastName;
        this.image = localStorage.getItem("ImgUrl");
        this._setupService.getTranportRoute().subscribe(function (result) {
            _this.tDetails = result;
            _this.getAllRoutes();
            _this.getTransportMessage();
        });
        this.transportMsg();
    }
    TransportMessageComponent.prototype.getTransportMessage = function () {
        var _this = this;
        var transportRoute;
        var transportStoppage;
        var message;
        this._setupService.getOutgoingTransportMessage().subscribe(function (result) {
            _this.transportMessageDetails = result;
            _this.messageList = [];
            for (var _i = 0, _a = _this.transportMessageDetails; _i < _a.length; _i++) {
                var msg = _a[_i];
                message = {};
                message.senderName = msg.senderName;
                message.broadcastTo = msg.broadcastTo;
                message.subject = msg.subject;
                message.senderId = msg.senderId;
                message.senderImage = msg.senderImage;
                message.senderName = msg.senderName;
                message.stopId = msg.stopId;
                message.message = msg.message;
                message.messageDate = msg.messageDate;
                message.messageTime = msg.messageTime;
                message.routeId = msg.routeId;
                message.senderRole = msg.senderRole;
                _this.routeIdList = msg.routeId;
                message.routeNumber = [];
                message.stoppageName = [];
                message.stoppageField = "";
                for (var _b = 0, _c = _this.routeIdList; _b < _c.length; _b++) {
                    var routeId = _c[_b];
                    transportRoute = _this.tDetails.find(function (x) { return x.id == routeId; });
                    message.routeNumber.push(transportRoute.routeNumber);
                    if (msg.stopId != null && msg.stopId.length > 0) {
                        message.stoppageField = "Stoppage :-";
                        for (var _d = 0, _e = msg.stopId; _d < _e.length; _d++) {
                            var stoppage = _e[_d];
                            transportStoppage = transportRoute.transportStoppages.find(function (x) { return x.id == stoppage; });
                            message.stoppageName.push(transportStoppage.name);
                        }
                    }
                }
                _this.messageList.push(message);
            }
            _this.loading = false;
        });
    };
    TransportMessageComponent.prototype.transportMsg = function () {
        this.transportMessage = {
            id: '',
            subject: '',
            senderId: '',
            senderName: '',
            senderImage: '',
            senderRole: '',
            broadcastTo: 'Parents',
            message: '',
            patronId: [],
            routeId: [],
            stopId: [],
            routeNumber: [],
            stoppageName: [],
            personId: [],
            createDate: new Date(),
            lastUpdated: new Date(),
            organizationId: this.organizationId,
            messageTime: '',
            messageDate: ''
        };
    };
    TransportMessageComponent.prototype.addMessage = function () {
        this.showStoppage = false;
        this.transportMsg();
        this.messageCenterDialog = true;
    };
    TransportMessageComponent.prototype.getAllRoutes = function () {
        this.routeList = [];
        for (var _i = 0, _a = this.tDetails; _i < _a.length; _i++) {
            var route = _a[_i];
            this.routeList.push({ label: "Route " + route.routeNumber, value: route.id });
        }
    };
    TransportMessageComponent.prototype.displayStoppages = function () {
        var _this = this;
        this.stoppageList = [];
        var selectedTransportRoute;
        if (this.selectedRoute.length == 1 && this.transportMessage.broadcastTo == "Parents") {
            selectedTransportRoute = this.tDetails.find(function (x) { return x.id == _this.selectedRoute[0]; });
            for (var _i = 0, _a = selectedTransportRoute.transportStoppages; _i < _a.length; _i++) {
                var stoppage = _a[_i];
                this.stoppageList.push({ label: stoppage.name, value: stoppage.id });
            }
            this.showStoppage = true;
        }
        else {
            this.showStoppage = false;
        }
    };
    // send out going message to patrons by organization,class,class section level
    TransportMessageComponent.prototype.sendMessageToPatron = function () {
        var _this = this;
        var patronsDetail = [];
        var selectedTransportRoute;
        var selectStoppage;
        var driverList = [];
        var patronList;
        var routeStoppage;
        for (var _i = 0, _a = this.selectedRoute; _i < _a.length; _i++) {
            var route = _a[_i];
            selectedTransportRoute = this.tDetails.find(function (x) { return x.id == route; });
            if (this.transportMessage.broadcastTo == "Parents") {
                if (this.selectedStoppage != null) {
                    for (var _b = 0, _c = this.selectedStoppage; _b < _c.length; _b++) {
                        var stoppage = _c[_b];
                        routeStoppage = selectedTransportRoute.transportStoppages.find(function (x) { return x.id == stoppage; });
                        patronList = [];
                        patronList = routeStoppage.patronId;
                        if (patronList != null) {
                            for (var _d = 0, patronList_1 = patronList; _d < patronList_1.length; _d++) {
                                var patron = patronList_1[_d];
                                if (patron != null) {
                                    patronsDetail.push(patron);
                                }
                            }
                        }
                    }
                }
                else {
                    selectStoppage = selectedTransportRoute.transportStoppages;
                    for (var _e = 0, selectStoppage_1 = selectStoppage; _e < selectStoppage_1.length; _e++) {
                        var stop = selectStoppage_1[_e];
                        patronList = [];
                        patronList = stop.patronId;
                        if (patronList != null) {
                            for (var _f = 0, patronList_2 = patronList; _f < patronList_2.length; _f++) {
                                var patron = patronList_2[_f];
                                if (patron != null) {
                                    patronsDetail.push(patron);
                                }
                            }
                        }
                    }
                }
            }
            else if (this.transportMessage.broadcastTo === "Driver") {
                driverList.push(selectedTransportRoute.driverId);
            }
        }
        this.transportMessage.routeId = this.selectedRoute;
        if (this.selectedStoppage.length > 0) {
            this.transportMessage.stopId = this.selectedStoppage;
        }
        this.transportMessage.patronId = patronsDetail;
        this.transportMessage.personId = driverList;
        this.transportMessage.senderId = this.personId;
        this.transportMessage.senderName = this.userName;
        this.transportMessage.senderImage = this.image;
        this.transportMessage.messageDate = moment(new Date()).format('YYYY-MM-DD');
        this.transportMessage.messageTime = moment(new Date()).format('h:mm a');
        this._setupService.createTransportOutgoingMessage(this.transportMessage).subscribe(function (messageDetails) {
            _this.getTransportMessage();
            _this.msgs = [];
            _this.msgs.push({ severity: 'success', summary: 'Message send successfully' });
        });
        this.messageCenterDialog = false;
    };
    TransportMessageComponent.prototype.onCancel = function (event) {
        this.messageform.reset();
        this.messageCenterDialog = false;
    };
    TransportMessageComponent.prototype.validate = function () {
        this.messageform = this.fb.group({
            'broadcastTo': new forms_1.FormControl(),
            'routeList': new forms_1.FormControl('', forms_1.Validators.required),
            'stoppageList': new forms_1.FormControl(),
            'subject': new forms_1.FormControl('', forms_1.Validators.required),
            'message': new forms_1.FormControl('', forms_1.Validators.required),
        });
    };
    TransportMessageComponent.prototype.ngOnInit = function () {
        this.validate();
    };
    return TransportMessageComponent;
}());
TransportMessageComponent = tslib_1.__decorate([
    core_1.Component({
        selector: 'transportmessage',
        template: __webpack_require__(218),
        providers: [setup_service_1.SetupService, primeng_1.ConfirmationService]
    }),
    tslib_1.__metadata("design:paramtypes", [setup_service_1.SetupService, forms_1.FormBuilder])
], TransportMessageComponent);
exports.TransportMessageComponent = TransportMessageComponent;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var ng = __webpack_require__(1);
var forms_1 = __webpack_require__(6);
var primeng_1 = __webpack_require__(2);
var setup_service_1 = __webpack_require__(11);
var angular2_uuid_1 = __webpack_require__(23);
var moment = __webpack_require__(0);
var global_constants_1 = __webpack_require__(15);
var TransportRouteListComponent = (function () {
    function TransportRouteListComponent(confirmationService, _setupService, fb) {
        var _this = this;
        this.confirmationService = confirmationService;
        this._setupService = _setupService;
        this.fb = fb;
        this.msgs = [];
        this.selectedDriver = {};
        this.selectedCoordinator = {};
        this.selectedRouteStaff = {};
        this.mapVisible = false; // use dialog and map      
        this.orgId = global_constants_1.AppSettings.ORGANIZATION_ID;
        this.selectedTab = 1;
        this.zoom = 12;
        this.patronWithStoppage = {};
        this.schoolIcon = global_constants_1.AppSettings.SCHOOL_IMAGE;
        this.tab1stoppage = true;
        this.tab2stoppage = true;
        this.locationicon = global_constants_1.AppSettings.STOPPAGE_IMAGE;
        this.tempDriverList = [];
        this.tempCoordinateList = [];
        this.tempRouteStaffList = [];
        this.transportRoute = {};
        this.transportStoppage = {};
        this.loading = true;
        // Get Organization Detail
        this._setupService.getOrganization().subscribe(function (result) {
            _this.org = result;
        });
        // get data from transport route show in list-- RouteDetails
        this._setupService.getTranportRouteWithDetails().subscribe(function (result) {
            _this.tRouteDetails = result;
            _this._setupService.getPerson().subscribe(function (result) {
                _this.pDetails = result;
                _this.createPersonList();
                _this.getPersonData();
                _this.createPatronList();
            });
        });
        this.sequence = this._setupService.getSequence();
        this.sequenceList = [];
        //this.sequenceList.push({ label: 'Sequence', value: null });
        for (var i = 0; i < this.sequence.length; i++) {
            this.sequenceList.push({ label: this.sequence[i].id.toString(), value: this.sequence[i].name });
        }
        //Get person detail
        this.transportRouteDetail = {
            id: '',
            driver: this.personDetail,
            driverId: '',
            coordinator: this.personDetail,
            coordinatorId: '',
            routeNumber: '',
            registrationNumber: '',
            routeStaff: this.personDetail,
            routeStaffId: '',
            description: '',
            remarks: '',
            createDate: new Date(),
            lastUpdated: new Date(),
            transportStoppages: [],
            organizationid: this.orgId
        };
        //initilize stoppage component value
        this.transportStoppageDetail = {
            id: angular2_uuid_1.UUID.UUID(),
            name: '',
            sequence: 0,
            lattitude: '',
            longitude: '',
            pickupTime: '',
            dropTime: '',
            description: '',
            organizationid: this.orgId,
            patronId: [],
            createDate: new Date(),
            lastUpdated: new Date()
        };
    }
    ;
    TransportRouteListComponent.prototype.createPatronList = function () {
        var _this = this;
        //alert("creating fresh list");
        var transportRoute;
        var transportStoppage;
        this.patronRouteList = [];
        this._setupService.getPatron().subscribe(function (result) {
            _this.patronDetails = result;
            for (var _i = 0, _a = _this.patronDetails; _i < _a.length; _i++) {
                var patron = _a[_i];
                _this.patronTransportInfo = {};
                _this.patronTransportInfo.id = patron.id;
                _this.patronTransportInfo.imagePath = patron.imgUrl;
                _this.patronTransportInfo.firstName = patron.firstName;
                _this.patronTransportInfo.lastName = patron.lastName;
                _this.patronTransportInfo.class = patron.class.toString();
                _this.patronTransportInfo.section = patron.section;
                transportRoute = _this.tRouteDetails.find(function (x) { return x.id == patron.transportRouteId; });
                if (transportRoute) {
                    _this.patronTransportInfo.routeNumber = transportRoute.routeNumber;
                    _this.patronTransportInfo.transportRouteId = transportRoute.id;
                    transportStoppage = transportRoute.transportStoppages.find(function (x) { return x.id == patron.stoppageId; });
                    if (transportStoppage) {
                        _this.patronTransportInfo.stoppagename = transportStoppage.name;
                        _this.patronTransportInfo.stoppageId = transportStoppage.id;
                    }
                    else {
                        _this.patronTransportInfo.stoppagename = "NA";
                        _this.patronTransportInfo.stoppageId = "NA";
                    }
                }
                else {
                    _this.patronTransportInfo.routeNumber = "NA";
                    _this.patronTransportInfo.stoppagename = "NA";
                    _this.patronTransportInfo.transportRouteId = "NA";
                    _this.patronTransportInfo.stoppageId = "NA";
                }
                _this.patronRouteList.push(_this.patronTransportInfo);
            }
        });
    };
    TransportRouteListComponent.prototype.getTransport = function () {
        var _this = this;
        this._setupService.getTranportRouteWithDetails().subscribe(function (result) {
            _this.tRouteDetails = result;
            _this._setupService.getPerson().subscribe(function (result) {
                _this.pDetails = result;
                _this.createPersonList();
                _this.getPersonData();
            });
        });
    };
    TransportRouteListComponent.prototype.getPersonData = function () {
        this.loading = false;
        var personInfo = {};
        this.transportRouteDetails = [];
        for (var _i = 0, _a = this.tRouteDetails; _i < _a.length; _i++) {
            var item = _a[_i];
            personInfo = this.pDetails.find(function (x) { return x.id == item.driverId; });
            if (personInfo != null) {
                item.driverName = personInfo.firstName + " " + personInfo.lastName;
                item.driverImage = personInfo.imgUrl;
                personInfo = this.pDetails.find(function (x) { return x.id == item.coordinatorId; });
                if (personInfo != null) {
                    item.coordinatorName = personInfo.firstName + " " + personInfo.lastName;
                    item.coordinatorImage = personInfo.imgUrl;
                    personInfo = this.pDetails.find(function (x) { return x.id == item.routeStaffId; });
                    if (personInfo != null) {
                        item.routeStaffName = personInfo.firstName + " " + personInfo.lastName;
                        item.routeStaffImage = personInfo.imgUrl;
                    }
                }
            }
            this.transportRouteDetails.push(item);
        }
    };
    // show driver,coordinator,routestaff list in dropdown 
    TransportRouteListComponent.prototype.createPersonList = function () {
        var _this = this;
        this.driverList = [];
        //this.driverList.push({ label: AppSettings.DRIVER, value: '' });
        this.coordinatorList = [];
        //  this.coordinatorList.push({ label: AppSettings.COORDINATOR, value: '' });
        this.routeStaffList = [];
        //  this.routeStaffList.push({ label: AppSettings.TEACHER, value: '' });
        for (var i = 0; i < this.pDetails.length; i++) {
            if (this.pDetails[i].role == global_constants_1.AppSettings.DRIVER) {
                if (!this.tRouteDetails.find(function (x) { return x.driverId == _this.pDetails[i].id; })) {
                    this.driverList.push({ label: this.pDetails[i].firstName + " " + this.pDetails[i].lastName, value: this.pDetails[i] });
                }
            }
            if (this.pDetails[i].role == global_constants_1.AppSettings.COORDINATOR) {
                if (!this.tRouteDetails.find(function (x) { return x.coordinatorId == _this.pDetails[i].id; })) {
                    this.coordinatorList.push({ label: this.pDetails[i].firstName + " " + this.pDetails[i].lastName, value: this.pDetails[i] });
                }
            }
            if (this.pDetails[i].role == global_constants_1.AppSettings.TEACHER) {
                if (!this.tRouteDetails.find(function (x) { return x.routeStaffId == _this.pDetails[i].id; })) {
                    this.routeStaffList.push({ label: this.pDetails[i].firstName + " " + this.pDetails[i].lastName, value: this.pDetails[i] });
                }
            }
            //alert("image = " + this.driverList[0].value);
        }
        this.tempDriverList = this.driverList;
        this.tempCoordinateList = this.coordinatorList;
        this.tempRouteStaffList = this.routeStaffList;
    };
    // function for add new transport route
    TransportRouteListComponent.prototype.addTransportRoute = function () {
        this.driverList = [];
        this.driverList = this.tempDriverList;
        this.coordinatorList = [];
        this.coordinatorList = this.tempCoordinateList;
        this.routeStaffList = [];
        this.routeStaffList = this.tempRouteStaffList;
        this.transportRouteDetail = {
            id: '',
            driver: this.personDetail,
            driverId: '',
            coordinator: this.personDetail,
            coordinatorId: '',
            routeNumber: '',
            registrationNumber: '',
            routeStaff: this.personDetail,
            routeStaffId: '',
            description: '',
            remarks: '',
            createDate: new Date(),
            lastUpdated: new Date(),
            transportStoppages: [],
            organizationid: this.orgId
        };
        this.selectedDriver = this.personDetail; // empty driver in form before add
        this.selectedCoordinator = this.personDetail; // empty Coordinator in form before add
        this.selectedRouteStaff = this.personDetail; // empty Staff in form before add
        this.transportValidation();
        this.transportRouteDialog = true;
    };
    // method for create and edit transport route
    TransportRouteListComponent.prototype.createTransportRoute = function () {
        var _this = this;
        if (this.selectedCoordinator != null) {
            this.transportRouteDetail.coordinatorId = this.selectedCoordinator.id;
        }
        if (this.selectedDriver != null) {
            this.transportRouteDetail.driverId = this.selectedDriver.id;
        }
        if (this.selectedRouteStaff != null) {
            this.transportRouteDetail.routeStaffId = this.selectedRouteStaff.id;
        }
        if (this.transportRouteDetail.id) {
            this._setupService.updatetransportroute(this.transportRouteDetail.id, this.transportRouteDetail).subscribe(function (result) {
                if (result == 204) {
                    _this._setupService.getTranportRouteWithDetails().subscribe(function (result) {
                        _this.tRouteDetails = result;
                        if (_this.tRouteDetails.length > 0) {
                            _this.getPersonData();
                        }
                    });
                    _this.msgs = [];
                    _this.msgs.push({ severity: 'success', summary: 'Route update successfully' });
                    _this.transportRouteDialog = false;
                }
            });
        }
        else {
            this._setupService.createTransportRoute(this.transportRouteDetail).subscribe(function (result) {
                if (result == 204) {
                    _this._setupService.getTranportRouteWithDetails().subscribe(function (result) {
                        _this.tRouteDetails = result;
                        if (_this.tRouteDetails.length > 0) {
                            _this.getPersonData();
                        }
                    });
                    _this.msgs = [];
                    _this.msgs.push({ severity: 'success', summary: 'Route saved successfully' });
                    _this.transportRouteDialog = false;
                }
            });
        }
    };
    TransportRouteListComponent.prototype.transportValidation = function () {
        this.transportForm = this.fb.group({
            'routeNumber': new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.pattern('[0-9]+')]),
            'registrationNumber': new forms_1.FormControl('', forms_1.Validators.required),
            'driverList': new forms_1.FormControl('', forms_1.Validators.required),
            'coordinatorList': new forms_1.FormControl('', forms_1.Validators.required),
            'routeStaffList': new forms_1.FormControl('', forms_1.Validators.required),
            'description': new forms_1.FormControl('', forms_1.Validators.required),
            'remarks': new forms_1.FormControl(''),
            'transportid': new forms_1.FormControl(''),
        });
    };
    //method for upadate transport route
    TransportRouteListComponent.prototype.updateTransportRoute = function (transportRouteDetail) {
        var _this = this;
        this.createPersonList();
        this.transportRouteDetail = transportRouteDetail;
        this.selectedDriver = this.pDetails.find(function (x) { return x.id == _this.transportRouteDetail.driverId; });
        if (this.selectedDriver != null) {
            this.driverList.push({ label: this.selectedDriver.firstName + " " + this.selectedDriver.lastName, value: this.selectedDriver });
        }
        //  this.driverList.push({ label: this.selectedDriver.firstName + " " + this.pDetails[i].lastName, value: this.pDetails[i] });
        this.selectedCoordinator = this.pDetails.find(function (x) { return x.id == _this.transportRouteDetail.coordinatorId; });
        if (this.selectedCoordinator != null) {
            this.coordinatorList.push({ label: this.selectedCoordinator.firstName + " " + this.selectedCoordinator.lastName, value: this.selectedCoordinator });
        }
        this.selectedRouteStaff = this.pDetails.find(function (x) { return x.id == _this.transportRouteDetail.routeStaffId; });
        if (this.selectedRouteStaff != null) {
            this.routeStaffList.push({ label: this.selectedRouteStaff.firstName + " " + this.selectedRouteStaff.lastName, value: this.selectedRouteStaff });
        }
        this.transportRouteDialog = true;
    };
    // delete transport route
    TransportRouteListComponent.prototype.deleteTransportRoute = function (transportRouteDetail) {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Do you want to delete this Route?',
            header: 'Delete Confirmation',
            icon: 'fa fa-trash',
            accept: function () {
                _this._setupService.deleteTransportRoute(transportRouteDetail.id).subscribe(function (response) {
                    if (response === 204) {
                        //this.transportRouteDetails.forEach((u: TransportRouteDetail, i) => {
                        //    if (u.id === transportRouteDetail.id) {
                        //        this.transportRouteDetails.splice(i, 1);
                        //    }
                        //});
                        _this.transportRouteDetails = _this.transportRouteDetails.filter(function (x) { return x.id != transportRouteDetail.id; });
                        _this.msgs = [];
                        _this.msgs.push({ severity: 'error', summary: 'Route deleted successfully' });
                    }
                });
                _this._setupService.deleteRoutesFromPatron(transportRouteDetail).subscribe(function (result) {
                });
            }
        });
    };
    // Add Stoppage
    TransportRouteListComponent.prototype.addStoppage = function (transportRoueDetail) {
        this.routeId = transportRoueDetail.id;
        this.flushStoppage();
        this.stoppageValidation();
        this.updateStoppage(null);
        this.selectedTab = 1;
        this.stoppageDialog = true;
        this.tab1stoppage = true;
        this.tab2stoppage = false;
    };
    TransportRouteListComponent.prototype.cancelTransportStoppage = function (number) {
        this.tab1stoppage = true;
        this.tab2stoppage = false;
        this.selectedTab = number;
    };
    // create stoppage
    TransportRouteListComponent.prototype.createTransportStoppage = function (number) {
        var _this = this;
        this.tab1stoppage = true;
        this.tab2stoppage = false;
        this.selectedTab = number;
        var a = this.transportStoppageDetail.pickupTime;
        var b = moment(a, 'H:mm').format('H:mm');
        this.transportStoppageDetail.pickupTime = b;
        var c = this.transportStoppageDetail.dropTime;
        var d = moment(c, 'H:mm').format('H:mm');
        this.transportStoppageDetail.dropTime = d;
        this.transportStoppageDetail.sequence = this.selectedSequence;
        if (this.routeId) {
            this._setupService.createTransportStoppage(this.routeId, this.transportStoppageDetail).subscribe(function (result) {
                _this.transportRouteDetail = result;
                _this.selectedRouteStoppage = _this.transportRouteDetail.transportStoppages;
                _this._setupService.getTranportRouteWithDetails().subscribe(function (result) {
                    _this.tRouteDetails = result;
                    _this._setupService.getPerson().subscribe(function (result) {
                        _this.pDetails = result;
                        _this.createPersonList();
                        _this.getPersonData();
                    });
                });
                _this.flushStoppage();
                _this.msgs = [];
                _this.msgs.push({ severity: 'success', summary: global_constants_1.AppSettings.STOPPGAE_SAVED });
            });
        }
    };
    TransportRouteListComponent.prototype.stoppageValidation = function () {
        this.stoppageForm = this.fb.group({
            'name': new forms_1.FormControl('', forms_1.Validators.required),
            'seqList': new forms_1.FormControl('', forms_1.Validators.required),
            'lattitude': new forms_1.FormControl(''),
            'longitude': new forms_1.FormControl(''),
            'pickupTime': new forms_1.FormControl('', forms_1.Validators.required),
            'dropTime': new forms_1.FormControl('', forms_1.Validators.required),
            'description': new forms_1.FormControl(''),
        });
    };
    // update Stoppage
    TransportRouteListComponent.prototype.updateStoppage = function (stoppageId) {
        var _this = this;
        //this.patronWithStoppageList = [];
        // this.getTransport();
        this.selectedStoppageId = stoppageId;
        this.resulArr = [];
        var routeDetail = {};
        this.patronWithStoppageList = [];
        var patron = {};
        var selectStoppage = {};
        routeDetail = this.tRouteDetails.find(function (x) { return x.id == _this.routeId; });
        if (stoppageId != null) {
            this.selectLocation = [];
            if (routeDetail != null) {
                selectStoppage = routeDetail.transportStoppages.find(function (s) { return s.id == _this.selectedStoppage.id; });
                if (selectStoppage != null) {
                    this.transportStoppageDetail = selectStoppage;
                    this.selectedSequence = this.transportStoppageDetail.sequence;
                    this.selectLocation.push({ lat: Number(this.transportStoppageDetail.lattitude), lng: Number(this.transportStoppageDetail.longitude), icon: this.locationicon, draggable: true, });
                    this.stoppagePatron = selectStoppage.patronId;
                    for (var i = 0; i < this.stoppagePatron.length; i++) {
                        patron = this.patronDetails.find(function (x) { return x.id == _this.stoppagePatron[i]; });
                        if (patron != null) {
                            this.patronWithStoppage = {};
                            this.patronWithStoppage.patron = patron;
                            this.patronWithStoppage.imgUrl = patron.imgUrl;
                            this.patronWithStoppage.stoppageName = selectStoppage.name,
                                this.patronWithStoppageList.push(this.patronWithStoppage);
                        }
                    }
                }
            }
        }
        else {
            if (routeDetail != null) {
                this.selectedRouteStoppage = routeDetail.transportStoppages;
                for (var _i = 0, _a = this.selectedRouteStoppage; _i < _a.length; _i++) {
                    var stoppage = _a[_i];
                    this.stoppagePatron = stoppage.patronId;
                    for (var i = 0; i < this.stoppagePatron.length; i++) {
                        patron = this.patronDetails.find(function (x) { return x.id == _this.stoppagePatron[i]; });
                        if (patron != null) {
                            this.patronWithStoppage = {};
                            this.patronWithStoppage.patron = patron;
                            this.patronWithStoppage.imgUrl = patron.imgUrl;
                            this.patronWithStoppage.stoppageName = stoppage.name,
                                this.patronWithStoppageList.push(this.patronWithStoppage);
                        }
                    }
                }
            }
        }
    };
    TransportRouteListComponent.prototype.flushStoppage = function () {
        this.transportStoppageDetail = {
            id: angular2_uuid_1.UUID.UUID(),
            name: '',
            sequence: 0,
            lattitude: '',
            longitude: '',
            pickupTime: '',
            dropTime: '',
            description: '',
            patronId: [],
            createDate: new Date(),
            lastUpdated: new Date(),
            organizationid: this.orgId
        };
    };
    TransportRouteListComponent.prototype.handleChange = function (e) {
        this.selectedTab = 1;
    };
    TransportRouteListComponent.prototype.unmappedPatron = function (e) {
        var isChecked = e.checked;
        if (isChecked) {
            this.tempPatronRouteList = this.patronRouteList;
            this.filteredPatronList = this.patronRouteList.filter(function (x) { return x.routeNumber == "NA" || x.stoppagename == "NA"; });
            this.patronRouteList = this.filteredPatronList;
        }
        else {
            this.patronRouteList = this.tempPatronRouteList;
        }
    };
    TransportRouteListComponent.prototype.activateTab = function (tabNumber, mode) {
        var _this = this;
        this.seqList = [];
        this.mapVisible = true;
        this.orgMarkers = [];
        this.orgMarkers.push({ lat: Number(this.org.location.latitude), lng: Number(this.org.location.longitude), icon: this.schoolIcon, label: this.org.name, draggable: false, });
        this.lat1 = this.org.location.latitude;
        this.lng2 = this.org.location.longitude;
        if (mode == 'add') {
            this.stoppageHeader = "Add Stop";
            for (var _i = 0, _a = this.sequenceList; _i < _a.length; _i++) {
                var sequence = _a[_i];
                if (!this.selectedRouteStoppage.find(function (x) { return x.sequence == sequence.value; })) {
                    this.seqList.push(sequence);
                }
            }
            this.startSequence = this.selectedRouteStoppage.length;
            this.tab1stoppage = false;
            this.tab2stoppage = true;
            this.selectLocation = [];
            this.transportStoppageDetail = {};
            this.flushStoppage();
            this.selectedTab = tabNumber;
        }
        if (mode == 'edit') {
            this.stoppageHeader = "Edit Stop";
            var editSequence = {};
            editSequence = this.sequenceList.find(function (x) { return x.value == _this.transportStoppageDetail.sequence.toString(); });
            if (editSequence != null) {
                this.seqList.push(editSequence);
            }
            //this.seqList = this.transportStoppageDetail.sequence;
            if (this.selectedStoppageId == null) {
                this.tab1stoppage = true;
                this.tab2stoppage = false;
                this.msgs = [];
                this.msgs.push({ severity: 'warn', summary: 'Please select a stoppage' });
            }
            else {
                this.tab1stoppage = false;
                this.tab2stoppage = true;
                this.selectedSequence = this.transportStoppageDetail.sequence;
                //this.seqList.push();
                //alert("this.selectedSequence = " + this.selectedSequence);
                this.selectedTab = tabNumber;
            }
        }
    };
    //    
    //DeleteStoppage
    TransportRouteListComponent.prototype.deleteStoppage = function (stopaggeInfo) {
        var _this = this;
        if (this.selectedStoppage == null) {
            this.msgs = [];
            this.msgs.push({ severity: 'warn', summary: 'Please select a stoppage' });
        }
        else {
            this.confirmationService.confirm({
                message: 'Do you want to delete this record?',
                header: 'Delete Confirmation',
                icon: 'fa fa-trash',
                accept: function () {
                    _this._setupService.deleteTransportStoppage(_this.routeId, stopaggeInfo.id).subscribe(function (response) {
                        if (response === 200) {
                            //this.selectedRouteStoppage.forEach((u: TransportStoppageDetail, i) => {
                            //    if (u.id == stopaggeInfo.id) {
                            _this.selectedRouteStoppage = _this.selectedRouteStoppage.filter(function (x) { return x.id != stopaggeInfo.id; });
                            //this.selectedRouteStoppage.splice(i, 1);
                            _this.flushStoppage();
                            _this.patronWithStoppageList = [];
                            //    }
                            //});
                            _this.msgs = [];
                            _this.msgs.push({ severity: 'error', summary: 'Stoppage deleted successfully' });
                        }
                    });
                }
            });
        }
    };
    TransportRouteListComponent.prototype.ngOnInit = function () {
        var _this = this;
        this._setupService.getTransportRouteById(this.transportRouteDetail.id).subscribe(function (result) {
            _this.transportRouteDetail = result;
        });
        this.transportValidation();
        this.stoppageValidation();
    };
    // method for click event in map
    TransportRouteListComponent.prototype.handleMapClick = function ($event) {
        this.selectLocation = [];
        this.transportStoppageDetail.lattitude = $event.coords.lat;
        this.transportStoppageDetail.longitude = $event.coords.lng;
        this.locationicon = global_constants_1.AppSettings.STOPPAGE_IMAGE;
        this.selectLocation.push({ lat: Number(this.transportStoppageDetail.lattitude), lng: Number(this.transportStoppageDetail.longitude), icon: this.locationicon, draggable: true, });
    };
    // create stoppage list in dropdown
    TransportRouteListComponent.prototype.createStoppageList = function () {
        this.stoppageList = [];
        this.stoppageList.push({ label: 'Stoppage', value: null });
        for (var i = 0; i < this.tDetails.transportStoppages.length; i++) {
            this.stoppageList.push({ label: this.tDetails.transportStoppages[i].name, value: this.tDetails.transportStoppages[i] });
        }
    };
    TransportRouteListComponent.prototype.addpatron = function (transportRoueDetail) {
        var _this = this;
        this.routeId = transportRoueDetail.id;
        this._setupService.getTransportRouteById(transportRoueDetail.id).subscribe(function (result) {
            _this.tDetails = result;
            _this.createStoppageList();
            _this._setupService.getPatron().subscribe(function (result) {
                _this.patronDetails = result;
            });
        });
        this.patronMapDialog = true;
    };
    TransportRouteListComponent.prototype.removePatron = function (selectedRoutePatron, selectedStoppage) {
        var _this = this;
        if (selectedStoppage == null || selectedRoutePatron == null) {
            this.msgs = [];
            this.msgs.push({ severity: 'warn', summary: 'Please select stoppage and patron' });
        }
        else {
            this.confirmationService.confirm({
                message: 'Do you want to Remove the Patron?',
                header: 'Remove Patron',
                icon: 'fa fa-trash',
                accept: function () {
                    _this._setupService.RemovePatronToStoppage(_this.routeId, selectedStoppage.id, selectedRoutePatron.patron.id).subscribe(function (response) {
                        if (response === 200) {
                            _this.removePatronWithTransport(selectedRoutePatron.patron.id);
                            //this.patronWithStoppageList.forEach((u: PatronSummary, i) => {
                            //if (u.patron.id === selectedRoutePatron.patron.id) {
                            _this.patronWithStoppageList = _this.patronWithStoppageList.filter(function (x) { return x.patron.id != selectedRoutePatron.patron.id; });
                            //this.patronWithStoppageList.splice(i, 1);                                    
                            _this._setupService.getPatron().subscribe(function (result) {
                                _this.patronDetails = result;
                                _this.createPatronList();
                            });
                            _this.getTransport();
                            //}
                            //});
                            _this.msgs = [];
                            _this.msgs.push({ severity: 'error', summary: 'Patron removed successfully' });
                        }
                    });
                }
            });
        }
    };
    TransportRouteListComponent.prototype.mapPatron = function (selectedPatron, selectedStoppage) {
        var _this = this;
        var patron = {};
        var patronInfo;
        if (selectedPatron == null) {
            this.msgs = [];
            this.msgs.push({ severity: 'warn', summary: 'Please select at least one patron' });
        }
        else {
            patronInfo = [];
            //var stoppagePatron: StoppagePatron;
            if (selectedPatron.transportRouteId == null || selectedPatron.transportRouteId == "") {
                this._setupService.addPatronToStoppage(this.routeId, selectedStoppage.id, selectedPatron.id).subscribe(function (result) {
                    //this._setupService.getStoppagePatrons(selectedStoppage.id).subscribe(result => {
                    //    patronInfo = result;
                    patronInfo = selectedStoppage.patronId;
                    patronInfo.push(selectedPatron.id);
                    _this.updatePatronWithTransport(selectedPatron.id, selectedStoppage.id);
                    _this.patronWithStoppageList = [];
                    for (var _i = 0, patronInfo_1 = patronInfo; _i < patronInfo_1.length; _i++) {
                        var patronId = patronInfo_1[_i];
                        //stoppagePatron = patronInfo[i];
                        patron = _this.patronDetails.find(function (x) { return x.id == patronId; });
                        if (patron != null) {
                            _this.patronWithStoppage = {};
                            _this.patronWithStoppage.patron = patron;
                            _this.patronWithStoppage.imgUrl = patron.imgUrl;
                            //this.patronWithStoppage.stoppageName = selectedStoppage.name,
                            _this.patronWithStoppageList.push(_this.patronWithStoppage);
                            _this.getTransport();
                            _this.msgs = [];
                            _this.msgs.push({ severity: 'success', summary: 'Patron mapped successfully' });
                        }
                    }
                    _this._setupService.getPatron().subscribe(function (result) {
                        _this.patronDetails = result;
                    });
                    //});
                });
            }
            else {
                var routeName;
                var routestop = {};
                this._setupService.getTransportRouteById(selectedPatron.transportRouteId).subscribe(function (result) {
                    _this.selectedPatronroutes = result;
                    routeName = _this.selectedPatronroutes.routeNumber;
                    routestop = _this.selectedPatronroutes.transportStoppages.find(function (x) { return x.id == selectedPatron.stoppageId; });
                    if (routestop != null) {
                        _this.confirmationService.confirm({
                            message: "<b>" + selectedPatron.firstName + " " + selectedPatron.lastName + "</b>" + ' Already mapped with ' + "<b>" + routestop.name + "</b>" + ' of route number ' + "<b>" + routeName + "</b>" + '.Do you want to Overwrite ?',
                            header: 'Map Patron',
                            icon: 'fa fa-trash',
                            accept: function () {
                                _this._setupService.RemovePatronToStoppage(selectedPatron.transportRouteId, selectedPatron.stoppageId, selectedPatron.id).subscribe(function (response) {
                                    if (response === 200) {
                                        _this.updatePatronWithTransport(selectedPatron.id, selectedStoppage.id);
                                        _this._setupService.addPatronToStoppage(_this.routeId, selectedStoppage.id, selectedPatron.id).subscribe(function (response) {
                                            _this._setupService.editTransportStoppage(_this.routeId, selectedStoppage.id).subscribe(function (result) {
                                                _this.resulArr = result;
                                                _this.transportStoppageDetail = _this.resulArr[0];
                                                _this.stoppagePatron = _this.transportStoppageDetail.patronId;
                                                for (var i = 0; i < _this.stoppagePatron.length; i++) {
                                                    patron = _this.patronDetails.find(function (x) { return x.id == _this.stoppagePatron[i]; });
                                                    if (patron != null) {
                                                        _this.patronWithStoppage = {};
                                                        _this.patronWithStoppage.patron = patron;
                                                        _this.patronWithStoppage.imgUrl = patron.imgUrl;
                                                        _this.patronWithStoppage.stoppageName = selectedStoppage.name,
                                                            _this.patronWithStoppageList.push(_this.patronWithStoppage);
                                                        _this.getTransport();
                                                        _this.msgs = [];
                                                        _this.msgs.push({ severity: 'success', summary: 'Patron mapped successfully' });
                                                    }
                                                }
                                                _this._setupService.getPatron().subscribe(function (result) {
                                                    _this.patronDetails = result;
                                                });
                                            });
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
            this.patronMapDialog = false;
        }
    };
    TransportRouteListComponent.prototype.updatePatronWithTransport = function (patronId, stoppageId) {
        this._setupService.updatePatronTransport(this.routeId, stoppageId, patronId).subscribe(function (result) {
        });
    };
    TransportRouteListComponent.prototype.removePatronWithTransport = function (patronId) {
        this._setupService.removePatronTransport(patronId).subscribe(function (result) {
        });
    };
    // Map Patron With transport Stoppage
    TransportRouteListComponent.prototype.openSearchBox = function (selectedStoppage) {
        // this.patronRouteList = [];
        if (this.selectedStoppage == null) {
            this.msgs = [];
            this.msgs.push({ severity: 'warn', summary: 'Please select stoppage' });
        }
        else {
            this.patronMapDialog = true;
        }
    };
    TransportRouteListComponent.prototype.onCancel = function (event) {
        this.transportRouteDialog = false;
    };
    TransportRouteListComponent.prototype.onSearchCancel = function (event) {
        this.patronRouteList = [];
        this.patronMapDialog = false;
    };
    //Stoppage Sequence Move Up
    TransportRouteListComponent.prototype.moveUp = function () {
        var _this = this;
        var oldsequence = 0;
        var transRoute;
        oldsequence = this.selectedStoppage.sequence;
        var newsequence = 0;
        var transStoppage;
        var newTransportStoppage;
        var oldTransportStoppage;
        oldTransportStoppage = this.selectedStoppage;
        transRoute = this.tRouteDetails.find(function (x) { return x.id == _this.routeId; });
        if (transRoute != null) {
            transStoppage = transRoute.transportStoppages;
            //this._setupService.moveUpSequence(this.routeId, this.selectedStoppage.id, this.selectedStoppage.sequence).subscribe(result => {
            //    transStoppage = result;
            transStoppage = transStoppage.filter(function (x) { return x.sequence < _this.selectedStoppage.sequence; }).sort(function (a, b) {
                return b.sequence - a.sequence;
            });
            if (transStoppage.length == 0) {
                this.msgs = [];
                this.msgs.push({ severity: 'warn', summary: global_constants_1.AppSettings.INVALID_SEQUENCE });
            }
            else {
                newsequence = transStoppage[0].sequence;
                newTransportStoppage = transStoppage[0];
                oldTransportStoppage.sequence = newsequence;
                newTransportStoppage.sequence = oldsequence;
                this._setupService.createTransportStoppage(this.routeId, oldTransportStoppage).subscribe(function (result) {
                    _this.transportRouteDetail = result;
                    if (_this.transportRouteDetail != null) {
                        _this._setupService.createTransportStoppage(_this.routeId, newTransportStoppage).subscribe(function (result) {
                            _this.transportRouteDetail = result;
                            _this.selectedRouteStoppage = _this.transportRouteDetail.transportStoppages;
                            _this.transportStoppageDetail = oldTransportStoppage;
                            _this.msgs = [];
                            _this.msgs.push({ severity: 'success', summary: global_constants_1.AppSettings.SEQUENCE_CHANGED });
                        });
                    }
                });
            }
        }
        //});
    };
    //Stoppage Sequence Move Down
    TransportRouteListComponent.prototype.moveDown = function () {
        var _this = this;
        var oldsequence = 0;
        var newsequence = 0;
        oldsequence = this.selectedStoppage.sequence;
        var transStoppage;
        var transRoute;
        var newTransportStoppage;
        var oldTransportStoppage;
        oldTransportStoppage = this.selectedStoppage;
        transRoute = this.tRouteDetails.find(function (x) { return x.id == _this.routeId; });
        if (transRoute != null) {
            transStoppage = transRoute.transportStoppages;
            //this._setupService.moveDownSequence(this.routeId, this.selectedStoppage.id, this.selectedStoppage.sequence).subscribe(result => {
            //    transStoppage = result;
            transStoppage = transStoppage.filter(function (x) { return x.sequence > _this.selectedStoppage.sequence; }).sort(function (a, b) {
                return a.sequence - b.sequence;
            });
            if (transStoppage.length == 0) {
                this.msgs = [];
                this.msgs.push({ severity: 'warn', summary: global_constants_1.AppSettings.INVALID_SEQUENCE });
            }
            else {
                newsequence = transStoppage[0].sequence;
                newTransportStoppage = transStoppage[0];
                oldTransportStoppage.sequence = newsequence;
                newTransportStoppage.sequence = oldsequence;
                this._setupService.createTransportStoppage(this.routeId, oldTransportStoppage).subscribe(function (result) {
                    _this.transportRouteDetail = result;
                    if (_this.transportRouteDetail != null) {
                        _this._setupService.createTransportStoppage(_this.routeId, newTransportStoppage).subscribe(function (result) {
                            _this.transportRouteDetail = result;
                            _this.selectedRouteStoppage = _this.transportRouteDetail.transportStoppages;
                            _this.transportStoppageDetail = oldTransportStoppage;
                            _this.msgs = [];
                            _this.msgs.push({ severity: 'success', summary: global_constants_1.AppSettings.SEQUENCE_CHANGED });
                        });
                    }
                });
            }
        }
        //});
    };
    //Transport List DownLoad
    TransportRouteListComponent.prototype.transportList = function () {
        var tempList = [];
        for (var _i = 0, _a = this.transportRouteDetails; _i < _a.length; _i++) {
            var transport = _a[_i];
            tempList.push({
                "RouteNumber": transport.routeNumber,
                "RegistrationNumber ": transport.registrationNumber,
                "DriverName": transport.driverName,
                "CoordinatorName": transport.coordinatorName,
                "RouteStaffName": transport.routeStaffName,
                "description": transport.description,
            });
        }
        var csvData = this.ConvertToCSV(tempList);
        var a = document.createElement("a");
        a.setAttribute('style', 'display:none;');
        document.body.appendChild(a);
        var blob = new Blob([csvData], { type: 'text/csv' });
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = 'TransportRouteDetails.csv';
        a.click();
    };
    TransportRouteListComponent.prototype.ConvertToCSV = function (objArray) {
        var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
        var str = '';
        var row = "";
        for (var index in objArray[0]) {
            //Now convert each value to string and comma-separated
            row += index + ',';
        }
        row = row.slice(0, -1);
        //append Label row with line break
        str += row + '\r\n';
        for (var i = 0; i < array.length; i++) {
            var line = '';
            for (var index in array[i]) {
                if (line != '')
                    line += ',';
                line += array[i][index];
            }
            str += line + '\r\n';
        }
        return str;
    };
    //Transport Stoppage List DownLoad
    TransportRouteListComponent.prototype.stoppageDownload = function () {
        var tempList = [];
        for (var _i = 0, _a = this.selectedRouteStoppage; _i < _a.length; _i++) {
            var patron = _a[_i];
            tempList.push({
                "Sequence": patron.sequence,
                "Name": patron.name,
                "PickupTime": patron.pickupTime,
                "DropTime": patron.dropTime,
            });
        }
        var csvData = this.ConvertToCSV1(tempList);
        var a = document.createElement("a");
        a.setAttribute('style', 'display:none;');
        document.body.appendChild(a);
        var blob = new Blob([csvData], { type: 'text/csv' });
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = 'TransportStoppageDetail.csv';
        a.click();
    };
    TransportRouteListComponent.prototype.ConvertToCSV1 = function (objArray) {
        var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
        var str = '';
        var row = "";
        for (var index in objArray[0]) {
            //Now convert each value to string and comma-separated
            row += index + ',';
        }
        row = row.slice(0, -1);
        //append Label row with line break
        str += row + '\r\n';
        for (var i = 0; i < array.length; i++) {
            var line = '';
            for (var index in array[i]) {
                if (line != '')
                    line += ',';
                line += array[i][index];
            }
            str += line + '\r\n';
        }
        return str;
    };
    //Transport Student List DownLoad
    TransportRouteListComponent.prototype.studentDownload = function () {
        var tempList = [];
        for (var _i = 0, _a = this.patronWithStoppageList; _i < _a.length; _i++) {
            var pat = _a[_i];
            tempList.push({
                "FirstName": pat.patron.firstName,
                "LastName": pat.patron.lastName,
                "Class": pat.patron.class,
                "Section": pat.patron.section,
                "StoppageName": pat.stoppageName,
            });
        }
        var csvData = this.ConvertToCSV2(tempList);
        var a = document.createElement("a");
        a.setAttribute('style', 'display:none;');
        document.body.appendChild(a);
        var blob = new Blob([csvData], { type: 'text/csv' });
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = 'StoppagePatronDetails.csv';
        a.click();
    };
    TransportRouteListComponent.prototype.ConvertToCSV2 = function (objArray) {
        var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
        var str = '';
        var row = "";
        for (var index in objArray[0]) {
            //Now convert each value to string and comma-separated
            row += index + ',';
        }
        row = row.slice(0, -1);
        //append Label row with line break
        str += row + '\r\n';
        for (var i = 0; i < array.length; i++) {
            var line = '';
            for (var index in array[i]) {
                if (line != '')
                    line += ',';
                line += array[i][index];
            }
            str += line + '\r\n';
        }
        return str;
    };
    return TransportRouteListComponent;
}());
TransportRouteListComponent = tslib_1.__decorate([
    ng.Component({
        selector: 'transportroutelist',
        template: __webpack_require__(219),
        providers: [primeng_1.ConfirmationService, setup_service_1.SetupService],
        styles: ["\n    .sebm-google-map-container {\n       height:446px;\n     }\n  "],
    }),
    tslib_1.__metadata("design:paramtypes", [primeng_1.ConfirmationService, setup_service_1.SetupService, forms_1.FormBuilder])
], TransportRouteListComponent);
exports.TransportRouteListComponent = TransportRouteListComponent;


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var forms_1 = __webpack_require__(6);
var primeng_1 = __webpack_require__(2);
var setup_service_1 = __webpack_require__(11);
var global_constants_1 = __webpack_require__(15);
var moment = __webpack_require__(0);
var TransportWalkerComponent = (function () {
    function TransportWalkerComponent(confirmationService, _setupService, fb) {
        var _this = this;
        this.confirmationService = confirmationService;
        this._setupService = _setupService;
        this.fb = fb;
        this.msgs = [];
        this.orgId = global_constants_1.AppSettings.ORGANIZATION_ID;
        this.transportWalkerDialog = false;
        this.loading = true;
        this.currentWalker();
        this.selectedYear = global_constants_1.AppSettings.SELECTED_YEAR;
        this.selectedTime = global_constants_1.AppSettings.CURRENT_TIME;
        this.startDate = global_constants_1.AppSettings.CURRENT_DATE;
        this.currentDate = global_constants_1.AppSettings.CURRENT_DATE;
        this.endDate = moment(new Date(), "YYYY-MM-DD").add(1, 'days').format('YYYY-MM-DD');
        this._setupService.getTransportPatron().subscribe(function (result) {
            _this.patronDetails = result;
            _this.getwalker();
        });
        this.transportWalkingRequest = {
            id: '',
            patronId: '',
            requestBy: '',
            requestMode: '',
            reason: '',
            description: '',
            requestDate: global_constants_1.AppSettings.CURRENT_DATE,
            requestTime: '',
            pick: false,
            drop: false,
            isAcknowledged: true,
            transpportRouteId: '',
            stoppageId: '',
            createDate: new Date(),
            lastUpdated: new Date(),
            organizationId: this.orgId
        };
        this.requestModeList = [];
        //this.requestModeList.push({ label: 'select', value: 'null' });
        this.requestModeList.push({ label: 'In person', value: 'In person' });
        this.requestModeList.push({ label: 'Email', value: 'Email' });
        this.requestModeList.push({ label: 'Via Phone', value: 'Via Phone' });
        this.requestModeList.push({ label: 'Other', value: 'Other' });
        this.requestByList = [];
        //  this.requestByList.push({ label: 'select', value: 'null' });
        this.requestByList.push({ label: 'Parents', value: 'Parents' });
        this.requestByList.push({ label: 'Admin', value: 'Admin' });
        this.requestByList.push({ label: 'Self', value: 'Self' });
        //this.reasonList = [];
        //this.reasonList.push({ label: 'select', value: 'null' });
        //this.reasonList.push({ label: 'Sick', value: 'Sick' });
        //this.reasonList.push({ label: 'Family Function', value: 'Family Function' });
    }
    TransportWalkerComponent.prototype.ngOnInit = function () {
        this.validateWalker();
    };
    TransportWalkerComponent.prototype.historyWalker = function () {
        var _this = this;
        this.current = false;
        this.transportWalkerList = [];
        this.history = true;
        this.startDate = new Date();
        this.endDate = new Date();
        this.loading = true;
        setTimeout(function () {
            _this.loading = false;
        }, 15000);
        this.getwalker();
    };
    TransportWalkerComponent.prototype.currentWalker = function () {
        var _this = this;
        this.history = false;
        this.transportWalkerList = [];
        this.current = true;
        this.startDate = global_constants_1.AppSettings.CURRENT_DATE;
        this.endDate = moment(new Date(), "YYYY-MM-DD").add(1, 'days').format('YYYY-MM-DD');
        this.loading = true;
        setTimeout(function () {
            _this.loading = false;
        }, 15000);
        this.getwalker();
    };
    TransportWalkerComponent.prototype.getwalker = function () {
        var _this = this;
        this._setupService.getTransportWalkingRequest(this.startDate, this.endDate).subscribe(function (result) {
            _this.transportWalkerPatronList = result;
            _this.createTransportWalkerList();
        });
    };
    TransportWalkerComponent.prototype.getSelectedDateWalker = function (value) {
        var a = this.startDate;
        this.startDate = moment(a).format('YYYY-MM-DD');
        var b = this.endDate;
        this.endDate = moment(b).format('YYYY-MM-DD');
        if (this.startDate == null || this.endDate == null) {
            this.msgs = [];
            this.msgs.push({ severity: 'error', summary: 'Please select start date and end date ' });
        }
        else if (this.startDate > this.endDate) {
            this.msgs = [];
            this.msgs.push({ severity: 'error', summary: 'End date should be greater than start date ' });
        }
        else if (this.endDate > this.currentDate) {
            this.msgs = [];
            this.msgs.push({ severity: 'error', summary: 'End date should be greater than crrent date ' });
        }
        else {
            this.loading = true;
            this.getwalker();
        }
    };
    TransportWalkerComponent.prototype.isAcknowledge = function (transportWalkingDetail) {
        var _this = this;
        if (this.selectedWalkerDetail == null) {
            this.msgs = [];
            this.msgs.push({ severity: 'warn', detail: 'Please select at least one walker' });
        }
        else {
            for (var _i = 0, transportWalkingDetail_1 = transportWalkingDetail; _i < transportWalkingDetail_1.length; _i++) {
                var walker = transportWalkingDetail_1[_i];
                this._setupService.updateAcknowledge(walker.id, true).subscribe(function (response) {
                    _this.loading = true;
                    _this.getwalker();
                    _this.msgs = [];
                    _this.msgs.push({ severity: 'success', summary: 'Walker request approved sucessfully' });
                });
            }
        }
    };
    TransportWalkerComponent.prototype.createTransportWalkerList = function () {
        var patronInfo = {};
        this.transportWalkerList = [];
        for (var _i = 0, _a = this.transportWalkerPatronList; _i < _a.length; _i++) {
            var patron = _a[_i];
            this.pickImage = global_constants_1.AppSettings.UNCHECK_IMAGE;
            this.dropImage = global_constants_1.AppSettings.UNCHECK_IMAGE;
            patronInfo = this.patronDetails.find(function (x) { return x.id == patron.patronId; });
            if (patron.pick)
                this.pickImage = global_constants_1.AppSettings.CHECK_IMAGE;
            if (patron.drop)
                this.dropImage = global_constants_1.AppSettings.CHECK_IMAGE;
            if (patronInfo != null) {
                patron.imgUrl = patronInfo.imgUrl;
                patron.firstName = patronInfo.firstName;
                patron.lastName = patronInfo.lastName;
                patron.class = patronInfo.class.toString();
                patron.section = patronInfo.section;
                patron.rollNumber = patronInfo.rollNo.toString();
                patron.pickImage = this.pickImage;
                patron.dropImage = this.dropImage;
                this.transportWalkerList.push(patron);
            }
        }
        this.loading = false;
    };
    TransportWalkerComponent.prototype.validateWalker = function () {
        this.walkerform = this.fb.group({
            'patronid': new forms_1.FormControl(''),
            'pick': new forms_1.FormControl(''),
            'drop': new forms_1.FormControl(''),
            'requestDate': new forms_1.FormControl('', forms_1.Validators.required),
            'requestModeList': new forms_1.FormControl('', forms_1.Validators.required),
            'requestByList': new forms_1.FormControl('', forms_1.Validators.required),
            'description': new forms_1.FormControl('', forms_1.Validators.required),
        });
    };
    TransportWalkerComponent.prototype.addRequest = function () {
        this.transportWalkingRequest = {
            id: '',
            patronId: '',
            requestBy: '',
            requestMode: '',
            reason: '',
            description: '',
            requestDate: '',
            requestTime: '',
            pick: false,
            drop: false,
            isAcknowledged: true,
            transpportRouteId: '',
            stoppageId: '',
            createDate: new Date(),
            lastUpdated: new Date(),
            organizationId: this.orgId
        };
        this.validateWalker();
        // empty reason in form before add 
        this.transportWalkerDialog = true;
    };
    TransportWalkerComponent.prototype.openSearchBox = function () {
        this.patronMapDialog = true;
    };
    TransportWalkerComponent.prototype.mapPatron = function (selectedPat) {
        this.selectedPatron = selectedPat;
        if (this.selectedPatron != undefined) {
            this.transportWalkingRequest.patronId = "Name- " + this.selectedPatron.firstName + " " + this.selectedPatron.lastName + ", Class- " + this.selectedPatron.class + " " + this.selectedPatron.section;
            this.patronMapDialog = false;
        }
        else {
            this.msgs = [];
            this.msgs.push({ severity: 'warn', summary: 'Please select at least one patron' });
        }
    };
    TransportWalkerComponent.prototype.onSearchCancel = function (event) {
        this.patronMapDialog = false;
    };
    TransportWalkerComponent.prototype.createTransportWalker = function (number) {
        var _this = this;
        this.loading = true;
        var a = moment(this.transportWalkingRequest.requestDate).toDate();
        this.transportWalkingRequest.requestDate = moment(a).format('YYYY-MM-DD');
        if (this.selectedPatron != undefined) {
            this.transportWalkingRequest.patronId = this.selectedPatron.id;
            this.transportWalkingRequest.requestTime = this.selectedTime;
            this.transportWalkingRequest.transpportRouteId = this.selectedPatron.transportRouteId;
            this.transportWalkingRequest.stoppageId = this.selectedPatron.stoppageId;
            this.transportWalkingRequest.requestBy = this.selectedRequestBy;
            this.transportWalkingRequest.requestMode = this.selectedMode;
            this.transportWalkingRequest.reason = this.selectedReason;
            this._setupService.createTransportWalkingRequest(this.transportWalkingRequest).subscribe(function (result) {
                if (result == 204) {
                    _this.loading = true;
                    setTimeout(function () {
                        _this.loading = false;
                    }, 15000);
                    _this.getwalker();
                    _this.msgs = [];
                    _this.msgs.push({ severity: 'success', summary: 'Transport walker saved sucessfully' });
                }
            });
            this.transportWalkerDialog = false;
        }
        else {
            this.loading = false;
            this.msgs = [];
            this.msgs.push({ severity: 'warn', summary: 'Please select at least one patron' });
        }
    };
    TransportWalkerComponent.prototype.deleteWalker = function (transportWalkingDetail) {
        var _this = this;
        if (this.selectedWalkerDetail == null) {
            this.msgs = [];
            this.msgs.push({ severity: 'warn', detail: 'Please select at least one walker' });
        }
        else {
            this.confirmationService.confirm({
                message: 'Do you want to delete this record(s)?',
                header: 'Delete Confirmation',
                icon: 'fa fa-trash',
                accept: function () {
                    var _loop_1 = function (walker) {
                        _this._setupService.deleteWalker(walker.id).subscribe(function (response) {
                            if (response === 204) {
                                _this.transportWalkerList.forEach(function (u, i) {
                                    if (u.id === walker.id) {
                                        _this.loading = true;
                                        _this.getwalker();
                                        _this.loading = false;
                                        _this.msgs = [];
                                        _this.msgs.push({ severity: 'error', detail: 'Walker deleted successfully' });
                                    }
                                });
                            }
                        });
                    };
                    for (var _i = 0, transportWalkingDetail_2 = transportWalkingDetail; _i < transportWalkingDetail_2.length; _i++) {
                        var walker = transportWalkingDetail_2[_i];
                        _loop_1(walker);
                    }
                }
            });
        }
    };
    TransportWalkerComponent.prototype.onCancel = function (event) {
        this.transportWalkerDialog = false;
    };
    TransportWalkerComponent.prototype.download = function () {
        var tempList = [];
        for (var _i = 0, _a = this.transportWalkerList; _i < _a.length; _i++) {
            var walker = _a[_i];
            tempList.push({
                "FirstName": walker.firstName,
                "LastName": walker.lastName,
                "RequestMode": walker.requestMode,
                "RequestBy": walker.requestBy,
                "Reason": walker.reason,
                "Description": walker.description,
                "IsAcknowledged": walker.isAcknowledged,
            });
        }
        var csvData = this.ConvertToCSV(tempList);
        var a = document.createElement("a");
        a.setAttribute('style', 'display:none;');
        document.body.appendChild(a);
        var blob = new Blob([csvData], { type: 'text/csv' });
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = 'TransportWalkerList.csv';
        a.click();
    };
    TransportWalkerComponent.prototype.ConvertToCSV = function (objArray) {
        var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
        var str = '';
        var row = "";
        for (var index in objArray[0]) {
            //Now convert each value to string and comma-separated
            row += index + ',';
        }
        row = row.slice(0, -1);
        //append Label row with line break
        str += row + '\r\n';
        for (var i = 0; i < array.length; i++) {
            var line = '';
            for (var index in array[i]) {
                if (line != '')
                    line += ',';
                line += array[i][index];
            }
            str += line + '\r\n';
        }
        return str;
    };
    return TransportWalkerComponent;
}());
TransportWalkerComponent = tslib_1.__decorate([
    core_1.Component({
        selector: 'transportwalker',
        template: __webpack_require__(220),
        providers: [primeng_1.ConfirmationService, setup_service_1.SetupService]
    }),
    tslib_1.__metadata("design:paramtypes", [primeng_1.ConfirmationService, setup_service_1.SetupService, forms_1.FormBuilder])
], TransportWalkerComponent);
exports.TransportWalkerComponent = TransportWalkerComponent;


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var router_1 = __webpack_require__(5);
var AuthGuard = (function () {
    function AuthGuard(router) {
        this.router = router;
    }
    AuthGuard.prototype.canActivate = function (route, state) {
        console.log('canActivate called');
        if (localStorage.getItem('ObjectIdentifier')) {
            // logged in so return true
            console.log('Object Identifier found');
            return true;
        }
        console.log('Object Identifier not  found');
        // not logged in so redirect to login page with the return url
        window.location.href = 'Login';
        return false;
    };
    return AuthGuard;
}());
AuthGuard = tslib_1.__decorate([
    core_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [router_1.Router])
], AuthGuard);
exports.AuthGuard = AuthGuard;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var Subject_1 = __webpack_require__(183);
var ConfirmationService = (function () {
    function ConfirmationService() {
        this.requireConfirmationSource = new Subject_1.Subject();
        this.acceptConfirmationSource = new Subject_1.Subject();
        this.requireConfirmation$ = this.requireConfirmationSource.asObservable();
        this.accept = this.acceptConfirmationSource.asObservable();
    }
    ConfirmationService.prototype.confirm = function (confirmation) {
        this.requireConfirmationSource.next(confirmation);
        return this;
    };
    ConfirmationService.prototype.onAccept = function () {
        this.acceptConfirmationSource.next();
    };
    return ConfirmationService;
}());
ConfirmationService = __decorate([
    core_1.Injectable()
], ConfirmationService);
exports.ConfirmationService = ConfirmationService;
//# sourceMappingURL=confirmationservice.js.map

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var Subject_1 = __webpack_require__(183);
var TreeDragDropService = (function () {
    function TreeDragDropService() {
        this.dragStartSource = new Subject_1.Subject();
        this.dragStopSource = new Subject_1.Subject();
        this.dragStart$ = this.dragStartSource.asObservable();
        this.dragStop$ = this.dragStopSource.asObservable();
    }
    TreeDragDropService.prototype.startDrag = function (event) {
        this.dragStartSource.next(event);
    };
    TreeDragDropService.prototype.stopDrag = function (event) {
        this.dragStopSource.next(event);
    };
    return TreeDragDropService;
}());
TreeDragDropService = __decorate([
    core_1.Injectable()
], TreeDragDropService);
exports.TreeDragDropService = TreeDragDropService;
//# sourceMappingURL=treedragdropservice.js.map

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var Messages = (function () {
    function Messages() {
        this.closable = true;
        this.valueChange = new core_1.EventEmitter();
    }
    Messages.prototype.hasMessages = function () {
        return this.value && this.value.length > 0;
    };
    Messages.prototype.getSeverityClass = function () {
        return this.value[0].severity;
    };
    Messages.prototype.clear = function (event) {
        this.value = [];
        this.valueChange.emit(this.value);
        event.preventDefault();
    };
    Object.defineProperty(Messages.prototype, "icon", {
        get: function () {
            var icon = null;
            if (this.hasMessages()) {
                var msg = this.value[0];
                switch (msg.severity) {
                    case 'success':
                        icon = 'fa-check';
                        break;
                    case 'info':
                        icon = 'fa-info-circle';
                        break;
                    case 'error':
                        icon = 'fa-close';
                        break;
                    case 'warn':
                        icon = 'fa-warning';
                        break;
                    case 'success':
                        icon = 'fa-check';
                        break;
                    default:
                        icon = 'fa-info-circle';
                        break;
                }
            }
            return icon;
        },
        enumerable: true,
        configurable: true
    });
    return Messages;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], Messages.prototype, "value", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Messages.prototype, "closable", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Messages.prototype, "valueChange", void 0);
Messages = __decorate([
    core_1.Component({
        selector: 'p-messages',
        template: "\n        <div *ngIf=\"hasMessages()\" class=\"ui-messages ui-widget ui-corner-all\" style=\"display:block\"\n                    [ngClass]=\"{'ui-messages-info':(value[0].severity === 'info'),\n                    'ui-messages-warn':(value[0].severity === 'warn'),\n                    'ui-messages-error':(value[0].severity === 'error'),\n                    'ui-messages-success':(value[0].severity === 'success')}\">\n            <a href=\"#\" class=\"ui-messages-close\" (click)=\"clear($event)\" *ngIf=\"closable\">\n                <i class=\"fa fa-close\"></i>\n            </a>\n            <span class=\"ui-messages-icon fa fa-fw fa-2x\" [ngClass]=\"icon\"></span>\n            <ul>\n                <li *ngFor=\"let msg of value\">\n                    <span class=\"ui-messages-summary\">{{msg.summary}}</span>\n                    <span class=\"ui-messages-detail\">{{msg.detail}}</span>\n                </li>\n            </ul>\n        </div>\n    "
    })
], Messages);
exports.Messages = Messages;
var MessagesModule = (function () {
    function MessagesModule() {
    }
    return MessagesModule;
}());
MessagesModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Messages],
        declarations: [Messages]
    })
], MessagesModule);
exports.MessagesModule = MessagesModule;
//# sourceMappingURL=messages.js.map

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var ProgressBar = (function () {
    function ProgressBar() {
        this.showValue = true;
        this.unit = '%';
    }
    return ProgressBar;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ProgressBar.prototype, "value", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ProgressBar.prototype, "showValue", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ProgressBar.prototype, "unit", void 0);
ProgressBar = __decorate([
    core_1.Component({
        selector: 'p-progressBar',
        template: "\n        <div class=\"ui-progressbar ui-widget ui-widget-content ui-corner-all\" role=\"progressbar\" aria-valuemin=\"0\" [attr.aria-valuenow]=\"value\" aria-valuemax=\"100\">\n            <div class=\"ui-progressbar-value ui-progressbar-value-animate ui-widget-header ui-corner-all\" [style.width]=\"value + '%'\" style=\"display:block\"></div>\n            <div class=\"ui-progressbar-label\" [style.display]=\"value ? 'block' : 'none'\" *ngIf=\"showValue\">{{value}}{{unit}}</div>\n        </div>\n    "
    })
], ProgressBar);
exports.ProgressBar = ProgressBar;
var ProgressBarModule = (function () {
    function ProgressBarModule() {
    }
    return ProgressBarModule;
}());
ProgressBarModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [ProgressBar],
        declarations: [ProgressBar]
    })
], ProgressBarModule);
exports.ProgressBarModule = ProgressBarModule;
//# sourceMappingURL=progressbar.js.map

/***/ }),
/* 182 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(13)

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(26)

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(266)

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(229);
__webpack_require__(198);
__webpack_require__(185);
__webpack_require__(336);
__webpack_require__(337);
__webpack_require__(338);
__webpack_require__(332);
__webpack_require__(334);
__webpack_require__(339);
__webpack_require__(335);
__webpack_require__(333);
__webpack_require__(329);
__webpack_require__(331);
__webpack_require__(330);
var platform_browser_dynamic_1 = __webpack_require__(301);
var core_1 = __webpack_require__(1);
var app_module_1 = __webpack_require__(223);
// Enable either Hot Module Reloading or production mode
/* tslint:disable */
if (true) {
    module['hot'].accept();
    module['hot'].dispose(function () { });
}
else {
    core_1.enableProdMode();
}
platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule);


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__resourceQuery, module) {/*eslint-env browser*/
/*global __resourceQuery __webpack_public_path__*/

var options = {
  path: "/__webpack_hmr",
  timeout: 20 * 1000,
  overlay: true,
  reload: false,
  log: true,
  warn: true,
  name: ''
};
if (true) {
  var querystring = __webpack_require__(297);
  var overrides = querystring.parse(__resourceQuery.slice(1));
  if (overrides.path) options.path = overrides.path;
  if (overrides.timeout) options.timeout = overrides.timeout;
  if (overrides.overlay) options.overlay = overrides.overlay !== 'false';
  if (overrides.reload) options.reload = overrides.reload !== 'false';
  if (overrides.noInfo && overrides.noInfo !== 'false') {
    options.log = false;
  }
  if (overrides.name) {
    options.name = overrides.name;
  }
  if (overrides.quiet && overrides.quiet !== 'false') {
    options.log = false;
    options.warn = false;
  }
  if (overrides.dynamicPublicPath) {
    options.path = __webpack_require__.p + options.path;
  }
}

if (typeof window === 'undefined') {
  // do nothing
} else if (typeof window.EventSource === 'undefined') {
  console.warn(
    "webpack-hot-middleware's client requires EventSource to work. " +
    "You should include a polyfill if you want to support this browser: " +
    "https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events#Tools"
  );
} else {
  connect();
}

function EventSourceWrapper() {
  var source;
  var lastActivity = new Date();
  var listeners = [];

  init();
  var timer = setInterval(function() {
    if ((new Date() - lastActivity) > options.timeout) {
      handleDisconnect();
    }
  }, options.timeout / 2);

  function init() {
    source = new window.EventSource(options.path);
    source.onopen = handleOnline;
    source.onerror = handleDisconnect;
    source.onmessage = handleMessage;
  }

  function handleOnline() {
    if (options.log) console.log("[HMR] connected");
    lastActivity = new Date();
  }

  function handleMessage(event) {
    lastActivity = new Date();
    for (var i = 0; i < listeners.length; i++) {
      listeners[i](event);
    }
  }

  function handleDisconnect() {
    clearInterval(timer);
    source.close();
    setTimeout(init, options.timeout);
  }

  return {
    addMessageListener: function(fn) {
      listeners.push(fn);
    }
  };
}

function getEventSourceWrapper() {
  if (!window.__whmEventSourceWrapper) {
    window.__whmEventSourceWrapper = {};
  }
  if (!window.__whmEventSourceWrapper[options.path]) {
    // cache the wrapper for other entries loaded on
    // the same page with the same options.path
    window.__whmEventSourceWrapper[options.path] = EventSourceWrapper();
  }
  return window.__whmEventSourceWrapper[options.path];
}

function connect() {
  getEventSourceWrapper().addMessageListener(handleMessage);

  function handleMessage(event) {
    if (event.data == "\uD83D\uDC93") {
      return;
    }
    try {
      processMessage(JSON.parse(event.data));
    } catch (ex) {
      if (options.warn) {
        console.warn("Invalid HMR message: " + event.data + "\n" + ex);
      }
    }
  }
}

// the reporter needs to be a singleton on the page
// in case the client is being used by multiple bundles
// we only want to report once.
// all the errors will go to all clients
var singletonKey = '__webpack_hot_middleware_reporter__';
var reporter;
if (typeof window !== 'undefined') {
  if (!window[singletonKey]) {
    window[singletonKey] = createReporter();
  }
  reporter = window[singletonKey];
}

function createReporter() {
  var strip = __webpack_require__(298);

  var overlay;
  if (typeof document !== 'undefined' && options.overlay) {
    overlay = __webpack_require__(299);
  }

  var styles = {
    errors: "color: #ff0000;",
    warnings: "color: #999933;"
  };
  var previousProblems = null;
  function log(type, obj) {
    var newProblems = obj[type].map(function(msg) { return strip(msg); }).join('\n');
    if (previousProblems == newProblems) {
      return;
    } else {
      previousProblems = newProblems;
    }

    var style = styles[type];
    var name = obj.name ? "'" + obj.name + "' " : "";
    var title = "[HMR] bundle " + name + "has " + obj[type].length + " " + type;
    // NOTE: console.warn or console.error will print the stack trace
    // which isn't helpful here, so using console.log to escape it.
    if (console.group && console.groupEnd) {
      console.group("%c" + title, style);
      console.log("%c" + newProblems, style);
      console.groupEnd();
    } else {
      console.log(
        "%c" + title + "\n\t%c" + newProblems.replace(/\n/g, "\n\t"),
        style + "font-weight: bold;",
        style + "font-weight: normal;"
      );
    }
  }

  return {
    cleanProblemsCache: function () {
      previousProblems = null;
    },
    problems: function(type, obj) {
      if (options.warn) {
        log(type, obj);
      }
      if (overlay && type !== 'warnings') overlay.showProblems(type, obj[type]);
    },
    success: function() {
      if (overlay) overlay.clear();
    },
    useCustomOverlay: function(customOverlay) {
      overlay = customOverlay;
    }
  };
}

var processUpdate = __webpack_require__(300);

var customHandler;
var subscribeAllHandler;
function processMessage(obj) {
  switch(obj.action) {
    case "building":
      if (options.log) {
        console.log(
          "[HMR] bundle " + (obj.name ? "'" + obj.name + "' " : "") +
          "rebuilding"
        );
      }
      break;
    case "built":
      if (options.log) {
        console.log(
          "[HMR] bundle " + (obj.name ? "'" + obj.name + "' " : "") +
          "rebuilt in " + obj.time + "ms"
        );
      }
      // fall through
    case "sync":
      if (obj.name && options.name && obj.name !== options.name) {
        return;
      }
      if (obj.errors.length > 0) {
        if (reporter) reporter.problems('errors', obj);
      } else {
        if (reporter) {
          if (obj.warnings.length > 0) {
            reporter.problems('warnings', obj);
          } else {
            reporter.cleanProblemsCache();
          }
          reporter.success();
        }
        processUpdate(obj.hash, obj.modules, options);
      }
      break;
    default:
      if (customHandler) {
        customHandler(obj);
      }
  }

  if (subscribeAllHandler) {
    subscribeAllHandler(obj);
  }
}

if (module) {
  module.exports = {
    subscribeAll: function subscribeAll(handler) {
      subscribeAllHandler = handler;
    },
    subscribe: function subscribe(handler) {
      customHandler = handler;
    },
    useCustomOverlay: function useCustomOverlay(customOverlay) {
      if (reporter) reporter.useCustomOverlay(customOverlay);
    }
  };
}

/* WEBPACK VAR INJECTION */}.call(exports, "?path=%2F__webpack_hmr", __webpack_require__(182)(module)))

/***/ }),
/* 188 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_animations__ = __webpack_require__(13);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return AnimationDriver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AnimationEngine; });
/* unused harmony export ɵAnimation */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return AnimationStyleNormalizer; });
/* unused harmony export ɵNoopAnimationStyleNormalizer */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return WebAnimationsStyleNormalizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return NoopAnimationDriver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return DomAnimationEngine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return NoopAnimationEngine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return WebAnimationsDriver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return supportsWebAnimations; });
/* unused harmony export ɵWebAnimationsPlayer */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * @license Angular v4.1.0
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @experimental
 */
var NoopAnimationDriver = (function () {
    function NoopAnimationDriver() {
    }
    NoopAnimationDriver.prototype.animate = function (element, keyframes, duration, delay, easing, previousPlayers) {
        if (previousPlayers === void 0) { previousPlayers = []; }
        return new __WEBPACK_IMPORTED_MODULE_0__angular_animations__["NoopAnimationPlayer"]();
    };
    return NoopAnimationDriver;
}());
/**
 * @experimental
 */
var AnimationDriver = (function () {
    function AnimationDriver() {
    }
    return AnimationDriver;
}());
AnimationDriver.NOOP = new NoopAnimationDriver();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @abstract
 */
var AnimationEngine = (function () {
    function AnimationEngine() {
    }
    /**
     * @abstract
     * @param {?} trigger
     * @param {?=} name
     * @return {?}
     */
    AnimationEngine.prototype.registerTrigger = function (trigger, name) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} domFn
     * @return {?}
     */
    AnimationEngine.prototype.onInsert = function (element, domFn) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} domFn
     * @return {?}
     */
    AnimationEngine.prototype.onRemove = function (element, domFn) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    AnimationEngine.prototype.setProperty = function (element, property, value) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} eventName
     * @param {?} eventPhase
     * @param {?} callback
     * @return {?}
     */
    AnimationEngine.prototype.listen = function (element, eventName, eventPhase, callback) { };
    /**
     * @abstract
     * @return {?}
     */
    AnimationEngine.prototype.flush = function () { };
    Object.defineProperty(AnimationEngine.prototype, "activePlayers", {
        /**
         * @return {?}
         */
        get: function () { throw new Error('...'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnimationEngine.prototype, "queuedPlayers", {
        /**
         * @return {?}
         */
        get: function () { throw new Error('...'); },
        enumerable: true,
        configurable: true
    });
    return AnimationEngine;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ONE_SECOND = 1000;
/**
 * @param {?} exp
 * @param {?} errors
 * @return {?}
 */
function parseTimeExpression(exp, errors) {
    var /** @type {?} */ regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i;
    var /** @type {?} */ duration;
    var /** @type {?} */ delay = 0;
    var /** @type {?} */ easing = null;
    if (typeof exp === 'string') {
        var /** @type {?} */ matches = exp.match(regex);
        if (matches === null) {
            errors.push("The provided timing value \"" + exp + "\" is invalid.");
            return { duration: 0, delay: 0, easing: null };
        }
        var /** @type {?} */ durationMatch = parseFloat(matches[1]);
        var /** @type {?} */ durationUnit = matches[2];
        if (durationUnit == 's') {
            durationMatch *= ONE_SECOND;
        }
        duration = Math.floor(durationMatch);
        var /** @type {?} */ delayMatch = matches[3];
        var /** @type {?} */ delayUnit = matches[4];
        if (delayMatch != null) {
            var /** @type {?} */ delayVal = parseFloat(delayMatch);
            if (delayUnit != null && delayUnit == 's') {
                delayVal *= ONE_SECOND;
            }
            delay = Math.floor(delayVal);
        }
        var /** @type {?} */ easingVal = matches[5];
        if (easingVal) {
            easing = easingVal;
        }
    }
    else {
        duration = (exp);
    }
    return { duration: duration, delay: delay, easing: easing };
}
/**
 * @param {?} styles
 * @return {?}
 */
function normalizeStyles(styles) {
    var /** @type {?} */ normalizedStyles = {};
    if (Array.isArray(styles)) {
        styles.forEach(function (data) { return copyStyles(data, false, normalizedStyles); });
    }
    else {
        copyStyles(styles, false, normalizedStyles);
    }
    return normalizedStyles;
}
/**
 * @param {?} styles
 * @param {?} readPrototype
 * @param {?=} destination
 * @return {?}
 */
function copyStyles(styles, readPrototype, destination) {
    if (destination === void 0) { destination = {}; }
    if (readPrototype) {
        // we make use of a for-in loop so that the
        // prototypically inherited properties are
        // revealed from the backFill map
        for (var /** @type {?} */ prop in styles) {
            destination[prop] = styles[prop];
        }
    }
    else {
        Object.keys(styles).forEach(function (prop) { return destination[prop] = styles[prop]; });
    }
    return destination;
}
/**
 * @param {?} element
 * @param {?} styles
 * @return {?}
 */
function setStyles(element, styles) {
    if (element['style']) {
        Object.keys(styles).forEach(function (prop) { return element.style[prop] = styles[prop]; });
    }
}
/**
 * @param {?} element
 * @param {?} styles
 * @return {?}
 */
function eraseStyles(element, styles) {
    if (element['style']) {
        Object.keys(styles).forEach(function (prop) {
            // IE requires '' instead of null
            // see https://github.com/angular/angular/issues/7916
            element.style[prop] = '';
        });
    }
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} visitor
 * @param {?} node
 * @param {?} context
 * @return {?}
 */
function visitAnimationNode(visitor, node, context) {
    switch (node.type) {
        case 0 /* State */:
            return visitor.visitState(/** @type {?} */ (node), context);
        case 1 /* Transition */:
            return visitor.visitTransition(/** @type {?} */ (node), context);
        case 2 /* Sequence */:
            return visitor.visitSequence(/** @type {?} */ (node), context);
        case 3 /* Group */:
            return visitor.visitGroup(/** @type {?} */ (node), context);
        case 4 /* Animate */:
            return visitor.visitAnimate(/** @type {?} */ (node), context);
        case 5 /* KeyframeSequence */:
            return visitor.visitKeyframeSequence(/** @type {?} */ (node), context);
        case 6 /* Style */:
            return visitor.visitStyle(/** @type {?} */ (node), context);
        default:
            throw new Error("Unable to resolve animation metadata node #" + node.type);
    }
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ANY_STATE = '*';
/**
 * @param {?} transitionValue
 * @param {?} errors
 * @return {?}
 */
function parseTransitionExpr(transitionValue, errors) {
    var /** @type {?} */ expressions = [];
    if (typeof transitionValue == 'string') {
        ((transitionValue))
            .split(/\s*,\s*/)
            .forEach(function (str) { return parseInnerTransitionStr(str, expressions, errors); });
    }
    else {
        expressions.push(/** @type {?} */ (transitionValue));
    }
    return expressions;
}
/**
 * @param {?} eventStr
 * @param {?} expressions
 * @param {?} errors
 * @return {?}
 */
function parseInnerTransitionStr(eventStr, expressions, errors) {
    if (eventStr[0] == ':') {
        eventStr = parseAnimationAlias(eventStr, errors);
    }
    var /** @type {?} */ match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
    if (match == null || match.length < 4) {
        errors.push("The provided transition expression \"" + eventStr + "\" is not supported");
        return expressions;
    }
    var /** @type {?} */ fromState = match[1];
    var /** @type {?} */ separator = match[2];
    var /** @type {?} */ toState = match[3];
    expressions.push(makeLambdaFromStates(fromState, toState));
    var /** @type {?} */ isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
    if (separator[0] == '<' && !isFullAnyStateExpr) {
        expressions.push(makeLambdaFromStates(toState, fromState));
    }
}
/**
 * @param {?} alias
 * @param {?} errors
 * @return {?}
 */
function parseAnimationAlias(alias, errors) {
    switch (alias) {
        case ':enter':
            return 'void => *';
        case ':leave':
            return '* => void';
        default:
            errors.push("The transition alias value \"" + alias + "\" is not supported");
            return '* => *';
    }
}
/**
 * @param {?} lhs
 * @param {?} rhs
 * @return {?}
 */
function makeLambdaFromStates(lhs, rhs) {
    return function (fromState, toState) {
        var /** @type {?} */ lhsMatch = lhs == ANY_STATE || lhs == fromState;
        var /** @type {?} */ rhsMatch = rhs == ANY_STATE || rhs == toState;
        return lhsMatch && rhsMatch;
    };
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} keyframes
 * @param {?} duration
 * @param {?} delay
 * @param {?} easing
 * @return {?}
 */
function createTimelineInstruction(keyframes, duration, delay, easing) {
    return {
        type: 1 /* TimelineAnimation */,
        keyframes: keyframes,
        duration: duration,
        delay: delay,
        totalTime: duration + delay, easing: easing
    };
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} ast
 * @param {?=} startingStyles
 * @param {?=} finalStyles
 * @return {?}
 */
function buildAnimationKeyframes(ast, startingStyles, finalStyles) {
    if (startingStyles === void 0) { startingStyles = {}; }
    if (finalStyles === void 0) { finalStyles = {}; }
    var /** @type {?} */ normalizedAst = Array.isArray(ast) ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_animations__["sequence"])(/** @type {?} */ (ast)) : (ast);
    return new AnimationTimelineVisitor().buildKeyframes(normalizedAst, startingStyles, finalStyles);
}
var AnimationTimelineContext = (function () {
    /**
     * @param {?} errors
     * @param {?} timelines
     * @param {?=} initialTimeline
     */
    function AnimationTimelineContext(errors, timelines, initialTimeline) {
        this.errors = errors;
        this.timelines = timelines;
        this.previousNode = ({});
        this.subContextCount = 0;
        this.currentTimeline = initialTimeline || new TimelineBuilder(0);
        timelines.push(this.currentTimeline);
    }
    /**
     * @return {?}
     */
    AnimationTimelineContext.prototype.createSubContext = function () {
        var /** @type {?} */ context = new AnimationTimelineContext(this.errors, this.timelines, this.currentTimeline.fork());
        context.previousNode = this.previousNode;
        context.currentAnimateTimings = this.currentAnimateTimings;
        this.subContextCount++;
        return context;
    };
    /**
     * @param {?=} newTime
     * @return {?}
     */
    AnimationTimelineContext.prototype.transformIntoNewTimeline = function (newTime) {
        if (newTime === void 0) { newTime = 0; }
        this.currentTimeline = this.currentTimeline.fork(newTime);
        this.timelines.push(this.currentTimeline);
        return this.currentTimeline;
    };
    /**
     * @param {?} time
     * @return {?}
     */
    AnimationTimelineContext.prototype.incrementTime = function (time) {
        this.currentTimeline.forwardTime(this.currentTimeline.duration + time);
    };
    return AnimationTimelineContext;
}());
var AnimationTimelineVisitor = (function () {
    function AnimationTimelineVisitor() {
    }
    /**
     * @param {?} ast
     * @param {?} startingStyles
     * @param {?} finalStyles
     * @return {?}
     */
    AnimationTimelineVisitor.prototype.buildKeyframes = function (ast, startingStyles, finalStyles) {
        var /** @type {?} */ context = new AnimationTimelineContext([], []);
        context.currentTimeline.setStyles(startingStyles);
        visitAnimationNode(this, ast, context);
        // this checks to see if an actual animation happened
        var /** @type {?} */ timelines = context.timelines.filter(function (timeline) { return timeline.hasStyling(); });
        if (timelines.length && Object.keys(finalStyles).length) {
            var /** @type {?} */ tl = timelines[timelines.length - 1];
            if (!tl.allowOnlyTimelineStyles()) {
                tl.setStyles(finalStyles);
            }
        }
        return timelines.length ? timelines.map(function (timeline) { return timeline.buildKeyframes(); }) :
            [createTimelineInstruction([], 0, 0, '')];
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineVisitor.prototype.visitState = function (ast, context) {
        // these values are not visited in this AST
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineVisitor.prototype.visitTransition = function (ast, context) {
        // these values are not visited in this AST
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineVisitor.prototype.visitSequence = function (ast, context) {
        var _this = this;
        var /** @type {?} */ subContextCount = context.subContextCount;
        if (context.previousNode.type == 6 /* Style */) {
            context.currentTimeline.forwardFrame();
            context.currentTimeline.snapshotCurrentStyles();
        }
        ast.steps.forEach(function (s) { return visitAnimationNode(_this, s, context); });
        // this means that some animation function within the sequence
        // ended up creating a sub timeline (which means the current
        // timeline cannot overlap with the contents of the sequence)
        if (context.subContextCount > subContextCount) {
            context.transformIntoNewTimeline();
        }
        context.previousNode = ast;
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineVisitor.prototype.visitGroup = function (ast, context) {
        var _this = this;
        var /** @type {?} */ innerTimelines = [];
        var /** @type {?} */ furthestTime = context.currentTimeline.currentTime;
        ast.steps.forEach(function (s) {
            var /** @type {?} */ innerContext = context.createSubContext();
            visitAnimationNode(_this, s, innerContext);
            furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);
            innerTimelines.push(innerContext.currentTimeline);
        });
        // this operation is run after the AST loop because otherwise
        // if the parent timeline's collected styles were updated then
        // it would pass in invalid data into the new-to-be forked items
        innerTimelines.forEach(function (timeline) { return context.currentTimeline.mergeTimelineCollectedStyles(timeline); });
        context.transformIntoNewTimeline(furthestTime);
        context.previousNode = ast;
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineVisitor.prototype.visitAnimate = function (ast, context) {
        var /** @type {?} */ timings = ast.timings.hasOwnProperty('duration') ? (ast.timings) :
            parseTimeExpression(/** @type {?} */ (ast.timings), context.errors);
        context.currentAnimateTimings = timings;
        if (timings.delay) {
            context.incrementTime(timings.delay);
            context.currentTimeline.snapshotCurrentStyles();
        }
        var /** @type {?} */ astType = ast.styles ? ast.styles.type : -1;
        if (astType == 5 /* KeyframeSequence */) {
            this.visitKeyframeSequence(/** @type {?} */ (ast.styles), context);
        }
        else {
            var /** @type {?} */ styleAst = (ast.styles);
            if (!styleAst) {
                var /** @type {?} */ newStyleData = {};
                if (timings.easing) {
                    newStyleData['easing'] = timings.easing;
                }
                styleAst = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_animations__["style"])(newStyleData);
                ((styleAst))['treatAsEmptyStep'] = true;
            }
            context.incrementTime(timings.duration);
            if (styleAst) {
                this.visitStyle(styleAst, context);
            }
        }
        context.currentAnimateTimings = null;
        context.previousNode = ast;
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineVisitor.prototype.visitStyle = function (ast, context) {
        // this is a special case when a style() call is issued directly after
        // a call to animate(). If the clock is not forwarded by one frame then
        // the style() calls will be merged into the previous animate() call
        // which is incorrect.
        if (!context.currentAnimateTimings &&
            context.previousNode.type == 4 /* Animate */) {
            context.currentTimeline.forwardFrame();
        }
        var /** @type {?} */ normalizedStyles = normalizeStyles(ast.styles);
        var /** @type {?} */ easing = context.currentAnimateTimings && context.currentAnimateTimings.easing;
        this._applyStyles(normalizedStyles, easing, ((ast))['treatAsEmptyStep'] ? true : false, context);
        context.previousNode = ast;
    };
    /**
     * @param {?} styles
     * @param {?} easing
     * @param {?} treatAsEmptyStep
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineVisitor.prototype._applyStyles = function (styles, easing, treatAsEmptyStep, context) {
        if (styles.hasOwnProperty('easing')) {
            easing = easing || (styles['easing']);
            delete styles['easing'];
        }
        context.currentTimeline.setStyles(styles, easing, treatAsEmptyStep);
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTimelineVisitor.prototype.visitKeyframeSequence = function (ast, context) {
        var _this = this;
        var /** @type {?} */ MAX_KEYFRAME_OFFSET = 1;
        var /** @type {?} */ limit = ast.steps.length - 1;
        var /** @type {?} */ firstKeyframe = ast.steps[0];
        var /** @type {?} */ offsetGap = 0;
        var /** @type {?} */ containsOffsets = getOffset(firstKeyframe) != null;
        if (!containsOffsets) {
            offsetGap = MAX_KEYFRAME_OFFSET / limit;
        }
        var /** @type {?} */ startTime = context.currentTimeline.duration;
        var /** @type {?} */ duration = ((context.currentAnimateTimings)).duration;
        var /** @type {?} */ innerContext = context.createSubContext();
        var /** @type {?} */ innerTimeline = innerContext.currentTimeline;
        innerTimeline.easing = ((context.currentAnimateTimings)).easing;
        ast.steps.forEach(function (step, i) {
            var /** @type {?} */ normalizedStyles = normalizeStyles(step.styles);
            var /** @type {?} */ offset = containsOffsets ?
                (step.offset != null ? step.offset : parseFloat(/** @type {?} */ (normalizedStyles['offset']))) :
                (i == limit ? MAX_KEYFRAME_OFFSET : i * offsetGap);
            innerTimeline.forwardTime(offset * duration);
            _this._applyStyles(normalizedStyles, null, false, innerContext);
        });
        // this will ensure that the parent timeline gets all the styles from
        // the child even if the new timeline below is not used
        context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);
        // we do this because the window between this timeline and the sub timeline
        // should ensure that the styles within are exactly the same as they were before
        context.transformIntoNewTimeline(startTime + duration);
        context.previousNode = ast;
    };
    return AnimationTimelineVisitor;
}());
var TimelineBuilder = (function () {
    /**
     * @param {?} startTime
     * @param {?=} globalTimelineStyles
     */
    function TimelineBuilder(startTime, globalTimelineStyles) {
        this.startTime = startTime;
        this.duration = 0;
        this.easing = '';
        this._previousKeyframe = {};
        this._keyframes = new Map();
        this._styleSummary = {};
        this._backFill = {};
        this._currentEmptyStepKeyframe = null;
        this._localTimelineStyles = Object.create(this._backFill, {});
        this._globalTimelineStyles =
            globalTimelineStyles ? globalTimelineStyles : this._localTimelineStyles;
        this._loadKeyframe();
    }
    /**
     * @return {?}
     */
    TimelineBuilder.prototype.hasStyling = function () { return this._keyframes.size > 1; };
    Object.defineProperty(TimelineBuilder.prototype, "currentTime", {
        /**
         * @return {?}
         */
        get: function () { return this.startTime + this.duration; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} currentTime
     * @return {?}
     */
    TimelineBuilder.prototype.fork = function (currentTime) {
        if (currentTime === void 0) { currentTime = 0; }
        return new TimelineBuilder(currentTime || this.currentTime, this._globalTimelineStyles);
    };
    /**
     * @return {?}
     */
    TimelineBuilder.prototype._loadKeyframe = function () {
        if (this._currentKeyframe) {
            this._previousKeyframe = this._currentKeyframe;
        }
        this._currentKeyframe = ((this._keyframes.get(this.duration)));
        if (!this._currentKeyframe) {
            this._currentKeyframe = Object.create(this._backFill, {});
            this._keyframes.set(this.duration, this._currentKeyframe);
        }
    };
    /**
     * @return {?}
     */
    TimelineBuilder.prototype.forwardFrame = function () {
        this.duration++;
        this._loadKeyframe();
    };
    /**
     * @param {?} time
     * @return {?}
     */
    TimelineBuilder.prototype.forwardTime = function (time) {
        this.duration = time;
        this._loadKeyframe();
    };
    /**
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    TimelineBuilder.prototype._updateStyle = function (prop, value) {
        this._localTimelineStyles[prop] = value; /** @type {?} */
        ((this._globalTimelineStyles))[prop] = value;
        this._styleSummary[prop] = { time: this.currentTime, value: value };
    };
    /**
     * @return {?}
     */
    TimelineBuilder.prototype.allowOnlyTimelineStyles = function () { return this._currentEmptyStepKeyframe !== this._currentKeyframe; };
    /**
     * @param {?} styles
     * @param {?=} easing
     * @param {?=} treatAsEmptyStep
     * @return {?}
     */
    TimelineBuilder.prototype.setStyles = function (styles, easing, treatAsEmptyStep) {
        var _this = this;
        if (easing === void 0) { easing = null; }
        if (treatAsEmptyStep === void 0) { treatAsEmptyStep = false; }
        if (easing) {
            ((this._previousKeyframe))['easing'] = easing;
        }
        if (treatAsEmptyStep) {
            // special case for animate(duration):
            // all missing styles are filled with a `*` value then
            // if any destination styles are filled in later on the same
            // keyframe then they will override the overridden styles
            // We use `_globalTimelineStyles` here because there may be
            // styles in previous keyframes that are not present in this timeline
            Object.keys(this._globalTimelineStyles).forEach(function (prop) {
                _this._backFill[prop] = _this._globalTimelineStyles[prop] || __WEBPACK_IMPORTED_MODULE_0__angular_animations__["AUTO_STYLE"];
                _this._currentKeyframe[prop] = __WEBPACK_IMPORTED_MODULE_0__angular_animations__["AUTO_STYLE"];
            });
            this._currentEmptyStepKeyframe = this._currentKeyframe;
        }
        else {
            Object.keys(styles).forEach(function (prop) {
                if (prop !== 'offset') {
                    var /** @type {?} */ val = styles[prop];
                    _this._currentKeyframe[prop] = val;
                    if (!_this._localTimelineStyles[prop]) {
                        _this._backFill[prop] = _this._globalTimelineStyles[prop] || __WEBPACK_IMPORTED_MODULE_0__angular_animations__["AUTO_STYLE"];
                    }
                    _this._updateStyle(prop, val);
                }
            });
            Object.keys(this._localTimelineStyles).forEach(function (prop) {
                if (!_this._currentKeyframe.hasOwnProperty(prop)) {
                    _this._currentKeyframe[prop] = _this._localTimelineStyles[prop];
                }
            });
        }
    };
    /**
     * @return {?}
     */
    TimelineBuilder.prototype.snapshotCurrentStyles = function () { copyStyles(this._localTimelineStyles, false, this._currentKeyframe); };
    /**
     * @return {?}
     */
    TimelineBuilder.prototype.getFinalKeyframe = function () { return ((this._keyframes.get(this.duration))); };
    Object.defineProperty(TimelineBuilder.prototype, "properties", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ properties = [];
            for (var /** @type {?} */ prop in this._currentKeyframe) {
                properties.push(prop);
            }
            return properties;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} timeline
     * @return {?}
     */
    TimelineBuilder.prototype.mergeTimelineCollectedStyles = function (timeline) {
        var _this = this;
        Object.keys(timeline._styleSummary).forEach(function (prop) {
            var /** @type {?} */ details0 = _this._styleSummary[prop];
            var /** @type {?} */ details1 = timeline._styleSummary[prop];
            if (!details0 || details1.time > details0.time) {
                _this._updateStyle(prop, details1.value);
            }
        });
    };
    /**
     * @return {?}
     */
    TimelineBuilder.prototype.buildKeyframes = function () {
        var _this = this;
        var /** @type {?} */ finalKeyframes = [];
        // special case for when there are only start/destination
        // styles but no actual animation animate steps...
        if (this.duration == 0) {
            var /** @type {?} */ targetKeyframe = this.getFinalKeyframe();
            var /** @type {?} */ firstKeyframe = copyStyles(targetKeyframe, true);
            firstKeyframe['offset'] = 0;
            finalKeyframes.push(firstKeyframe);
            var /** @type {?} */ lastKeyframe = copyStyles(targetKeyframe, true);
            lastKeyframe['offset'] = 1;
            finalKeyframes.push(lastKeyframe);
        }
        else {
            this._keyframes.forEach(function (keyframe, time) {
                var /** @type {?} */ finalKeyframe = copyStyles(keyframe, true);
                finalKeyframe['offset'] = time / _this.duration;
                finalKeyframes.push(finalKeyframe);
            });
        }
        return createTimelineInstruction(finalKeyframes, this.duration, this.startTime, this.easing);
    };
    return TimelineBuilder;
}());
/**
 * @param {?} ast
 * @return {?}
 */
function getOffset(ast) {
    var /** @type {?} */ offset = ast.offset;
    if (offset == null) {
        var /** @type {?} */ styles = ast.styles;
        if (Array.isArray(styles)) {
            for (var /** @type {?} */ i = 0; i < styles.length; i++) {
                var /** @type {?} */ o = (styles[i]['offset']);
                if (o != null) {
                    offset = o;
                    break;
                }
            }
        }
        else {
            offset = (styles['offset']);
        }
    }
    return ((offset));
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} triggerName
 * @param {?} fromState
 * @param {?} toState
 * @param {?} isRemovalTransition
 * @param {?} fromStyles
 * @param {?} toStyles
 * @param {?} timelines
 * @return {?}
 */
function createTransitionInstruction(triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines) {
    return {
        type: 0 /* TransitionAnimation */,
        triggerName: triggerName,
        isRemovalTransition: isRemovalTransition,
        fromState: fromState,
        fromStyles: fromStyles,
        toState: toState,
        toStyles: toStyles,
        timelines: timelines
    };
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var AnimationTransitionFactory = (function () {
    /**
     * @param {?} _triggerName
     * @param {?} ast
     * @param {?} matchFns
     * @param {?} _stateStyles
     */
    function AnimationTransitionFactory(_triggerName, ast, matchFns, _stateStyles) {
        this._triggerName = _triggerName;
        this.matchFns = matchFns;
        this._stateStyles = _stateStyles;
        var normalizedAst = Array.isArray(ast.animation) ?
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_animations__["sequence"])(ast.animation) :
            ast.animation;
        this._animationAst = normalizedAst;
    }
    /**
     * @param {?} currentState
     * @param {?} nextState
     * @return {?}
     */
    AnimationTransitionFactory.prototype.match = function (currentState, nextState) {
        if (!oneOrMoreTransitionsMatch(this.matchFns, currentState, nextState))
            return;
        var /** @type {?} */ backupStateStyles = this._stateStyles['*'] || {};
        var /** @type {?} */ currentStateStyles = this._stateStyles[currentState] || backupStateStyles;
        var /** @type {?} */ nextStateStyles = this._stateStyles[nextState] || backupStateStyles;
        var /** @type {?} */ timelines = buildAnimationKeyframes(this._animationAst, currentStateStyles, nextStateStyles);
        return createTransitionInstruction(this._triggerName, currentState, nextState, nextState === 'void', currentStateStyles, nextStateStyles, timelines);
    };
    return AnimationTransitionFactory;
}());
/**
 * @param {?} matchFns
 * @param {?} currentState
 * @param {?} nextState
 * @return {?}
 */
function oneOrMoreTransitionsMatch(matchFns, currentState, nextState) {
    return matchFns.some(function (fn) { return fn(currentState, nextState); });
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} ast
 * @return {?}
 */
function validateAnimationSequence(ast) {
    var /** @type {?} */ normalizedAst = Array.isArray(ast) ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_animations__["sequence"])(/** @type {?} */ (ast)) : (ast);
    return new AnimationValidatorVisitor().validate(normalizedAst);
}
var AnimationValidatorVisitor = (function () {
    function AnimationValidatorVisitor() {
    }
    /**
     * @param {?} ast
     * @return {?}
     */
    AnimationValidatorVisitor.prototype.validate = function (ast) {
        var /** @type {?} */ context = new AnimationValidatorContext();
        visitAnimationNode(this, ast, context);
        return context.errors;
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationValidatorVisitor.prototype.visitState = function (ast, context) {
        // these values are not visited in this AST
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationValidatorVisitor.prototype.visitTransition = function (ast, context) {
        // these values are not visited in this AST
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationValidatorVisitor.prototype.visitSequence = function (ast, context) {
        var _this = this;
        ast.steps.forEach(function (step) { return visitAnimationNode(_this, step, context); });
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationValidatorVisitor.prototype.visitGroup = function (ast, context) {
        var _this = this;
        var /** @type {?} */ currentTime = context.currentTime;
        var /** @type {?} */ furthestTime = 0;
        ast.steps.forEach(function (step) {
            context.currentTime = currentTime;
            visitAnimationNode(_this, step, context);
            furthestTime = Math.max(furthestTime, context.currentTime);
        });
        context.currentTime = furthestTime;
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationValidatorVisitor.prototype.visitAnimate = function (ast, context) {
        // we reassign the timings here so that they are not reparsed each
        // time an animation occurs
        context.currentAnimateTimings = ast.timings =
            parseTimeExpression(/** @type {?} */ (ast.timings), context.errors);
        var /** @type {?} */ astType = ast.styles && ast.styles.type;
        if (astType == 5 /* KeyframeSequence */) {
            this.visitKeyframeSequence(/** @type {?} */ (ast.styles), context);
        }
        else {
            context.currentTime +=
                context.currentAnimateTimings.duration + context.currentAnimateTimings.delay;
            if (astType == 6 /* Style */) {
                this.visitStyle(/** @type {?} */ (ast.styles), context);
            }
        }
        context.currentAnimateTimings = null;
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationValidatorVisitor.prototype.visitStyle = function (ast, context) {
        var /** @type {?} */ styleData = normalizeStyles(ast.styles);
        var /** @type {?} */ timings = context.currentAnimateTimings;
        var /** @type {?} */ endTime = context.currentTime;
        var /** @type {?} */ startTime = context.currentTime;
        if (timings && startTime > 0) {
            startTime -= timings.duration + timings.delay;
        }
        Object.keys(styleData).forEach(function (prop) {
            var /** @type {?} */ collectedEntry = context.collectedStyles[prop];
            var /** @type {?} */ updateCollectedStyle = true;
            if (collectedEntry) {
                if (startTime != endTime && startTime >= collectedEntry.startTime &&
                    endTime <= collectedEntry.endTime) {
                    context.errors.push("The CSS property \"" + prop + "\" that exists between the times of \"" + collectedEntry.startTime + "ms\" and \"" + collectedEntry.endTime + "ms\" is also being animated in a parallel animation between the times of \"" + startTime + "ms\" and \"" + endTime + "ms\"");
                    updateCollectedStyle = false;
                }
                // we always choose the smaller start time value since we
                // want to have a record of the entire animation window where
                // the style property is being animated in between
                startTime = collectedEntry.startTime;
            }
            if (updateCollectedStyle) {
                context.collectedStyles[prop] = { startTime: startTime, endTime: endTime };
            }
        });
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationValidatorVisitor.prototype.visitKeyframeSequence = function (ast, context) {
        var _this = this;
        var /** @type {?} */ totalKeyframesWithOffsets = 0;
        var /** @type {?} */ offsets = [];
        var /** @type {?} */ offsetsOutOfOrder = false;
        var /** @type {?} */ keyframesOutOfRange = false;
        var /** @type {?} */ previousOffset = 0;
        ast.steps.forEach(function (step) {
            var /** @type {?} */ styleData = normalizeStyles(step.styles);
            var /** @type {?} */ offset = 0;
            if (styleData.hasOwnProperty('offset')) {
                totalKeyframesWithOffsets++;
                offset = (styleData['offset']);
            }
            keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;
            offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;
            previousOffset = offset;
            offsets.push(offset);
        });
        if (keyframesOutOfRange) {
            context.errors.push("Please ensure that all keyframe offsets are between 0 and 1");
        }
        if (offsetsOutOfOrder) {
            context.errors.push("Please ensure that all keyframe offsets are in order");
        }
        var /** @type {?} */ length = ast.steps.length;
        var /** @type {?} */ generatedOffset = 0;
        if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {
            context.errors.push("Not all style() steps within the declared keyframes() contain offsets");
        }
        else if (totalKeyframesWithOffsets == 0) {
            generatedOffset = 1 / length;
        }
        var /** @type {?} */ limit = length - 1;
        var /** @type {?} */ currentTime = context.currentTime;
        var /** @type {?} */ animateDuration = ((context.currentAnimateTimings)).duration;
        ast.steps.forEach(function (step, i) {
            var /** @type {?} */ offset = generatedOffset > 0 ? (i == limit ? 1 : (generatedOffset * i)) : offsets[i];
            var /** @type {?} */ durationUpToThisFrame = offset * animateDuration;
            context.currentTime =
                currentTime + ((context.currentAnimateTimings)).delay + durationUpToThisFrame; /** @type {?} */
            ((context.currentAnimateTimings)).duration = durationUpToThisFrame;
            _this.visitStyle(step, context);
        });
    };
    return AnimationValidatorVisitor;
}());
var AnimationValidatorContext = (function () {
    function AnimationValidatorContext() {
        this.errors = [];
        this.currentTime = 0;
        this.collectedStyles = {};
    }
    return AnimationValidatorContext;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@experimental Animation support is experimental.
 * @param {?} name
 * @param {?} definitions
 * @return {?}
 */
function buildTrigger(name, definitions) {
    return new AnimationTriggerVisitor().buildTrigger(name, definitions);
}
/**
 * \@experimental Animation support is experimental.
 */
var AnimationTrigger = (function () {
    /**
     * @param {?} name
     * @param {?} states
     * @param {?} _transitionAsts
     */
    function AnimationTrigger(name, states, _transitionAsts) {
        var _this = this;
        this.name = name;
        this._transitionAsts = _transitionAsts;
        this.transitionFactories = [];
        this.states = {};
        Object.keys(states).forEach(function (stateName) { _this.states[stateName] = copyStyles(states[stateName], false); });
        var errors = [];
        _transitionAsts.forEach(function (ast) {
            var exprs = parseTransitionExpr(ast.expr, errors);
            var sequenceErrors = validateAnimationSequence(ast);
            if (sequenceErrors.length) {
                errors.push.apply(errors, sequenceErrors);
            }
            else {
                _this.transitionFactories.push(new AnimationTransitionFactory(_this.name, ast, exprs, states));
            }
        });
        if (errors.length) {
            var LINE_START = '\n - ';
            throw new Error("Animation parsing for the " + name + " trigger have failed:" + LINE_START + errors.join(LINE_START));
        }
    }
    /**
     * @param {?} currentState
     * @param {?} nextState
     * @return {?}
     */
    AnimationTrigger.prototype.createFallbackInstruction = function (currentState, nextState) {
        var /** @type {?} */ backupStateStyles = this.states['*'] || {};
        var /** @type {?} */ currentStateStyles = this.states[currentState] || backupStateStyles;
        var /** @type {?} */ nextStateStyles = this.states[nextState] || backupStateStyles;
        return createTransitionInstruction(this.name, currentState, nextState, nextState == 'void', currentStateStyles, nextStateStyles, []);
    };
    /**
     * @param {?} currentState
     * @param {?} nextState
     * @return {?}
     */
    AnimationTrigger.prototype.matchTransition = function (currentState, nextState) {
        for (var /** @type {?} */ i = 0; i < this.transitionFactories.length; i++) {
            var /** @type {?} */ result = this.transitionFactories[i].match(currentState, nextState);
            if (result)
                return result;
        }
        return null;
    };
    return AnimationTrigger;
}());
var AnimationTriggerContext = (function () {
    function AnimationTriggerContext() {
        this.errors = [];
        this.states = {};
        this.transitions = [];
    }
    return AnimationTriggerContext;
}());
var AnimationTriggerVisitor = (function () {
    function AnimationTriggerVisitor() {
    }
    /**
     * @param {?} name
     * @param {?} definitions
     * @return {?}
     */
    AnimationTriggerVisitor.prototype.buildTrigger = function (name, definitions) {
        var _this = this;
        var /** @type {?} */ context = new AnimationTriggerContext();
        definitions.forEach(function (def) { return visitAnimationNode(_this, def, context); });
        return new AnimationTrigger(name, context.states, context.transitions);
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTriggerVisitor.prototype.visitState = function (ast, context) {
        var /** @type {?} */ styles = normalizeStyles(ast.styles.styles);
        ast.name.split(/\s*,\s*/).forEach(function (name) { context.states[name] = styles; });
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTriggerVisitor.prototype.visitTransition = function (ast, context) {
        context.transitions.push(ast);
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTriggerVisitor.prototype.visitSequence = function (ast, context) {
        // these values are not visited in this AST
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTriggerVisitor.prototype.visitGroup = function (ast, context) {
        // these values are not visited in this AST
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTriggerVisitor.prototype.visitAnimate = function (ast, context) {
        // these values are not visited in this AST
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTriggerVisitor.prototype.visitStyle = function (ast, context) {
        // these values are not visited in this AST
    };
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    AnimationTriggerVisitor.prototype.visitKeyframeSequence = function (ast, context) {
        // these values are not visited in this AST
    };
    return AnimationTriggerVisitor;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var MARKED_FOR_ANIMATION_CLASSNAME = 'ng-animating';
var MARKED_FOR_ANIMATION_SELECTOR = '.ng-animating';
var MARKED_FOR_REMOVAL = '$$ngRemove';
var VOID_STATE = 'void';
var DomAnimationEngine = (function () {
    /**
     * @param {?} _driver
     * @param {?} _normalizer
     */
    function DomAnimationEngine(_driver, _normalizer) {
        this._driver = _driver;
        this._normalizer = _normalizer;
        this._flaggedInserts = new Set();
        this._queuedRemovals = new Map();
        this._queuedTransitionAnimations = [];
        this._activeTransitionAnimations = new Map();
        this._activeElementAnimations = new Map();
        this._elementTriggerStates = new Map();
        this._triggers = Object.create(null);
        this._triggerListeners = new Map();
        this._pendingListenerRemovals = new Map();
    }
    Object.defineProperty(DomAnimationEngine.prototype, "queuedPlayers", {
        /**
         * @return {?}
         */
        get: function () {
            return this._queuedTransitionAnimations.map(function (q) { return q.player; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DomAnimationEngine.prototype, "activePlayers", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ players = [];
            this._activeElementAnimations.forEach(function (activePlayers) { return players.push.apply(players, activePlayers); });
            return players;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} trigger
     * @param {?=} name
     * @return {?}
     */
    DomAnimationEngine.prototype.registerTrigger = function (trigger, name) {
        name = name || trigger.name;
        if (this._triggers[name]) {
            return;
        }
        this._triggers[name] = buildTrigger(name, trigger.definitions);
    };
    /**
     * @param {?} element
     * @param {?} domFn
     * @return {?}
     */
    DomAnimationEngine.prototype.onInsert = function (element, domFn) {
        if (element['nodeType'] == 1) {
            this._flaggedInserts.add(element);
        }
        domFn();
    };
    /**
     * @param {?} element
     * @param {?} domFn
     * @return {?}
     */
    DomAnimationEngine.prototype.onRemove = function (element, domFn) {
        var _this = this;
        if (element['nodeType'] != 1) {
            domFn();
            return;
        }
        var /** @type {?} */ lookupRef = this._elementTriggerStates.get(element);
        if (lookupRef) {
            var /** @type {?} */ possibleTriggers = Object.keys(lookupRef);
            var /** @type {?} */ hasRemoval = possibleTriggers.some(function (triggerName) {
                var /** @type {?} */ oldValue = ((lookupRef))[triggerName];
                var /** @type {?} */ instruction = _this._triggers[triggerName].matchTransition(oldValue, VOID_STATE);
                return !!instruction;
            });
            if (hasRemoval) {
                element[MARKED_FOR_REMOVAL] = true;
                this._queuedRemovals.set(element, domFn);
                return;
            }
        }
        // this means that there are no animations to take on this
        // leave operation therefore we should fire the done|start callbacks
        if (this._triggerListeners.has(element)) {
            element[MARKED_FOR_REMOVAL] = true;
            this._queuedRemovals.set(element, function () { });
        }
        this._onRemovalTransition(element).forEach(function (player) { return player.destroy(); });
        domFn();
    };
    /**
     * @param {?} element
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    DomAnimationEngine.prototype.setProperty = function (element, property, value) {
        var /** @type {?} */ trigger = this._triggers[property];
        if (!trigger) {
            throw new Error("The provided animation trigger \"" + property + "\" has not been registered!");
        }
        var /** @type {?} */ lookupRef = this._elementTriggerStates.get(element);
        if (!lookupRef) {
            this._elementTriggerStates.set(element, lookupRef = {});
        }
        var /** @type {?} */ oldValue = lookupRef.hasOwnProperty(property) ? lookupRef[property] : VOID_STATE;
        if (oldValue !== value) {
            value = normalizeTriggerValue(value);
            var /** @type {?} */ instruction = trigger.matchTransition(oldValue, value);
            if (!instruction) {
                // we do this to make sure we always have an animation player so
                // that callback operations are properly called
                instruction = trigger.createFallbackInstruction(oldValue, value);
            }
            this.animateTransition(element, instruction);
            lookupRef[property] = value;
        }
    };
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} eventPhase
     * @param {?} callback
     * @return {?}
     */
    DomAnimationEngine.prototype.listen = function (element, eventName, eventPhase, callback) {
        var _this = this;
        if (!eventPhase) {
            throw new Error("Unable to listen on the animation trigger \"" + eventName + "\" because the provided event is undefined!");
        }
        if (!this._triggers[eventName]) {
            throw new Error("Unable to listen on the animation trigger event \"" + eventPhase + "\" because the animation trigger \"" + eventName + "\" doesn't exist!");
        }
        var /** @type {?} */ elementListeners = this._triggerListeners.get(element);
        if (!elementListeners) {
            this._triggerListeners.set(element, elementListeners = []);
        }
        validatePlayerEvent(eventName, eventPhase);
        var /** @type {?} */ tuple = ({ triggerName: eventName, phase: eventPhase, callback: callback });
        elementListeners.push(tuple);
        return function () {
            // this is queued up in the event that a removal animation is set
            // to fire on the element (the listeners need to be set during flush)
            getOrSetAsInMap(_this._pendingListenerRemovals, element, []).push(tuple);
        };
    };
    /**
     * @return {?}
     */
    DomAnimationEngine.prototype._clearPendingListenerRemovals = function () {
        var _this = this;
        this._pendingListenerRemovals.forEach(function (tuples, element) {
            var /** @type {?} */ elementListeners = _this._triggerListeners.get(element);
            if (elementListeners) {
                tuples.forEach(function (tuple) {
                    var /** @type {?} */ index = elementListeners.indexOf(tuple);
                    if (index >= 0) {
                        elementListeners.splice(index, 1);
                    }
                });
            }
        });
        this._pendingListenerRemovals.clear();
    };
    /**
     * @param {?} element
     * @return {?}
     */
    DomAnimationEngine.prototype._onRemovalTransition = function (element) {
        // when a parent animation is set to trigger a removal we want to
        // find all of the children that are currently animating and clear
        // them out by destroying each of them.
        var /** @type {?} */ elms = element.querySelectorAll(MARKED_FOR_ANIMATION_SELECTOR);
        var _loop_1 = function (i) {
            var /** @type {?} */ elm = elms[i];
            var /** @type {?} */ activePlayers = this_1._activeElementAnimations.get(elm);
            if (activePlayers) {
                activePlayers.forEach(function (player) { return player.destroy(); });
            }
            var /** @type {?} */ activeTransitions = this_1._activeTransitionAnimations.get(elm);
            if (activeTransitions) {
                Object.keys(activeTransitions).forEach(function (triggerName) {
                    var /** @type {?} */ player = activeTransitions[triggerName];
                    if (player) {
                        player.destroy();
                    }
                });
            }
        };
        var this_1 = this;
        for (var /** @type {?} */ i = 0; i < elms.length; i++) {
            _loop_1(/** @type {?} */ i);
        }
        // we make a copy of the array because the actual source array is modified
        // each time a player is finished/destroyed (the forEach loop would fail otherwise)
        return copyArray(/** @type {?} */ ((this._activeElementAnimations.get(element))));
    };
    /**
     * @param {?} element
     * @param {?} instruction
     * @return {?}
     */
    DomAnimationEngine.prototype.animateTransition = function (element, instruction) {
        var _this = this;
        var /** @type {?} */ triggerName = instruction.triggerName;
        var /** @type {?} */ previousPlayers;
        if (instruction.isRemovalTransition) {
            previousPlayers = this._onRemovalTransition(element);
        }
        else {
            previousPlayers = [];
            var /** @type {?} */ existingTransitions = this._activeTransitionAnimations.get(element);
            var /** @type {?} */ existingPlayer = existingTransitions ? existingTransitions[triggerName] : null;
            if (existingPlayer) {
                previousPlayers.push(existingPlayer);
            }
        }
        // it's important to do this step before destroying the players
        // so that the onDone callback below won't fire before this
        eraseStyles(element, instruction.fromStyles);
        // we first run this so that the previous animation player
        // data can be passed into the successive animation players
        var /** @type {?} */ totalTime = 0;
        var /** @type {?} */ players = instruction.timelines.map(function (timelineInstruction, i) {
            totalTime = Math.max(totalTime, timelineInstruction.totalTime);
            return _this._buildPlayer(element, timelineInstruction, previousPlayers, i);
        });
        previousPlayers.forEach(function (previousPlayer) { return previousPlayer.destroy(); });
        var /** @type {?} */ player = optimizeGroupPlayer(players);
        player.onDone(function () {
            player.destroy();
            var /** @type {?} */ elmTransitionMap = _this._activeTransitionAnimations.get(element);
            if (elmTransitionMap) {
                delete elmTransitionMap[triggerName];
                if (Object.keys(elmTransitionMap).length == 0) {
                    _this._activeTransitionAnimations.delete(element);
                }
            }
            deleteFromArrayMap(_this._activeElementAnimations, element, player);
            setStyles(element, instruction.toStyles);
        });
        var /** @type {?} */ elmTransitionMap = getOrSetAsInMap(this._activeTransitionAnimations, element, {});
        elmTransitionMap[triggerName] = player;
        this._queuePlayer(element, triggerName, player, makeAnimationEvent(element, triggerName, instruction.fromState, instruction.toState, null, // this will be filled in during event creation
        totalTime));
        return player;
    };
    /**
     * @param {?} element
     * @param {?} instructions
     * @param {?=} previousPlayers
     * @return {?}
     */
    DomAnimationEngine.prototype.animateTimeline = function (element, instructions, previousPlayers) {
        var _this = this;
        if (previousPlayers === void 0) { previousPlayers = []; }
        var /** @type {?} */ players = instructions.map(function (instruction, i) {
            var /** @type {?} */ player = _this._buildPlayer(element, instruction, previousPlayers, i);
            player.onDestroy(function () { deleteFromArrayMap(_this._activeElementAnimations, element, player); });
            _this._markPlayerAsActive(element, player);
            return player;
        });
        return optimizeGroupPlayer(players);
    };
    /**
     * @param {?} element
     * @param {?} instruction
     * @param {?} previousPlayers
     * @param {?=} index
     * @return {?}
     */
    DomAnimationEngine.prototype._buildPlayer = function (element, instruction, previousPlayers, index) {
        if (index === void 0) { index = 0; }
        // only the very first animation can absorb the previous styles. This
        // is here to prevent the an overlap situation where a group animation
        // absorbs previous styles multiple times for the same element.
        if (index && previousPlayers.length) {
            previousPlayers = [];
        }
        return this._driver.animate(element, this._normalizeKeyframes(instruction.keyframes), instruction.duration, instruction.delay, instruction.easing, previousPlayers);
    };
    /**
     * @param {?} keyframes
     * @return {?}
     */
    DomAnimationEngine.prototype._normalizeKeyframes = function (keyframes) {
        var _this = this;
        var /** @type {?} */ errors = [];
        var /** @type {?} */ normalizedKeyframes = [];
        keyframes.forEach(function (kf) {
            var /** @type {?} */ normalizedKeyframe = {};
            Object.keys(kf).forEach(function (prop) {
                var /** @type {?} */ normalizedProp = prop;
                var /** @type {?} */ normalizedValue = kf[prop];
                if (prop != 'offset') {
                    normalizedProp = _this._normalizer.normalizePropertyName(prop, errors);
                    normalizedValue =
                        _this._normalizer.normalizeStyleValue(prop, normalizedProp, kf[prop], errors);
                }
                normalizedKeyframe[normalizedProp] = normalizedValue;
            });
            normalizedKeyframes.push(normalizedKeyframe);
        });
        if (errors.length) {
            var /** @type {?} */ LINE_START = '\n - ';
            throw new Error("Unable to animate due to the following errors:" + LINE_START + errors.join(LINE_START));
        }
        return normalizedKeyframes;
    };
    /**
     * @param {?} element
     * @param {?} player
     * @return {?}
     */
    DomAnimationEngine.prototype._markPlayerAsActive = function (element, player) {
        var /** @type {?} */ elementAnimations = getOrSetAsInMap(this._activeElementAnimations, element, []);
        elementAnimations.push(player);
    };
    /**
     * @param {?} element
     * @param {?} triggerName
     * @param {?} player
     * @param {?} event
     * @return {?}
     */
    DomAnimationEngine.prototype._queuePlayer = function (element, triggerName, player, event) {
        var /** @type {?} */ tuple = ({ element: element, player: player, triggerName: triggerName, event: event });
        this._queuedTransitionAnimations.push(tuple);
        player.init();
        element.classList.add(MARKED_FOR_ANIMATION_CLASSNAME);
        player.onDone(function () { element.classList.remove(MARKED_FOR_ANIMATION_CLASSNAME); });
    };
    /**
     * @return {?}
     */
    DomAnimationEngine.prototype._flushQueuedAnimations = function () {
        var _loop_2 = function () {
            var _a = ((this_2._queuedTransitionAnimations.shift())), player = _a.player, element = _a.element, triggerName = _a.triggerName, event = _a.event;
            var /** @type {?} */ parent = element;
            while (parent = parent.parentNode) {
                // this means that a parent element will or will not
                // have its own animation operation which in this case
                // there's no point in even trying to do an animation
                if (parent[MARKED_FOR_REMOVAL])
                    return "continue-parentLoop";
            }
            var /** @type {?} */ listeners = this_2._triggerListeners.get(element);
            if (listeners) {
                listeners.forEach(function (tuple) {
                    if (tuple.triggerName == triggerName) {
                        listenOnPlayer(player, tuple.phase, event, tuple.callback);
                    }
                });
            }
            // if a removal exists for the given element then we need cancel
            // all the queued players so that a proper removal animation can go
            if (this_2._queuedRemovals.has(element)) {
                player.destroy();
                return "continue";
            }
            this_2._markPlayerAsActive(element, player);
            // in the event that an animation throws an error then we do
            // not want to re-run animations on any previous animations
            // if they have already been kicked off beforehand
            player.init();
            if (!player.hasStarted()) {
                player.play();
            }
        };
        var this_2 = this;
        parentLoop: while (this._queuedTransitionAnimations.length) {
            var state_1 = _loop_2();
            switch (state_1) {
                case "continue-parentLoop": continue parentLoop;
            }
        }
    };
    /**
     * @return {?}
     */
    DomAnimationEngine.prototype.flush = function () {
        var _this = this;
        var /** @type {?} */ leaveListeners = new Map();
        this._queuedRemovals.forEach(function (callback, element) {
            var /** @type {?} */ tuple = _this._pendingListenerRemovals.get(element);
            if (tuple) {
                leaveListeners.set(element, tuple);
                _this._pendingListenerRemovals.delete(element);
            }
        });
        this._clearPendingListenerRemovals();
        this._pendingListenerRemovals = leaveListeners;
        this._flushQueuedAnimations();
        var /** @type {?} */ flushAgain = false;
        this._queuedRemovals.forEach(function (callback, element) {
            // an item that was inserted/removed in the same flush means
            // that an animation should not happen anyway
            if (_this._flaggedInserts.has(element))
                return;
            var /** @type {?} */ parent = element;
            var /** @type {?} */ players = [];
            while (parent = parent.parentNode) {
                // there is no reason to even try to
                if (parent[MARKED_FOR_REMOVAL]) {
                    callback();
                    return;
                }
                var /** @type {?} */ match = _this._activeElementAnimations.get(parent);
                if (match) {
                    players.push.apply(players, match);
                    break;
                }
            }
            // the loop was unable to find an parent that is animating even
            // though this element has set to be removed, so the algorithm
            // should check to see if there are any triggers on the element
            // that are present to handle a leave animation and then setup
            // those players to facilitate the callback after done
            if (players.length == 0) {
                // this means that the element has valid state triggers
                var /** @type {?} */ stateDetails_1 = _this._elementTriggerStates.get(element);
                if (stateDetails_1) {
                    Object.keys(stateDetails_1).forEach(function (triggerName) {
                        flushAgain = true;
                        var /** @type {?} */ oldValue = stateDetails_1[triggerName];
                        var /** @type {?} */ instruction = _this._triggers[triggerName].matchTransition(oldValue, VOID_STATE);
                        if (instruction) {
                            players.push(_this.animateTransition(element, instruction));
                        }
                        else {
                            var /** @type {?} */ event = makeAnimationEvent(element, triggerName, oldValue, VOID_STATE, '', 0);
                            var /** @type {?} */ player = new __WEBPACK_IMPORTED_MODULE_0__angular_animations__["NoopAnimationPlayer"]();
                            _this._queuePlayer(element, triggerName, player, event);
                        }
                    });
                }
            }
            if (players.length) {
                optimizeGroupPlayer(players).onDone(callback);
            }
            else {
                callback();
            }
        });
        this._queuedRemovals.clear();
        this._flaggedInserts.clear();
        // this means that one or more leave animations were detected
        if (flushAgain) {
            this._flushQueuedAnimations();
            this._clearPendingListenerRemovals();
        }
    };
    return DomAnimationEngine;
}());
/**
 * @param {?} map
 * @param {?} key
 * @param {?} defaultValue
 * @return {?}
 */
function getOrSetAsInMap(map, key, defaultValue) {
    var /** @type {?} */ value = map.get(key);
    if (!value) {
        map.set(key, value = defaultValue);
    }
    return value;
}
/**
 * @param {?} map
 * @param {?} key
 * @param {?} value
 * @return {?}
 */
function deleteFromArrayMap(map, key, value) {
    var /** @type {?} */ arr = map.get(key);
    if (arr) {
        var /** @type {?} */ index = arr.indexOf(value);
        if (index >= 0) {
            arr.splice(index, 1);
            if (arr.length == 0) {
                map.delete(key);
            }
        }
    }
}
/**
 * @param {?} players
 * @return {?}
 */
function optimizeGroupPlayer(players) {
    switch (players.length) {
        case 0:
            return new __WEBPACK_IMPORTED_MODULE_0__angular_animations__["NoopAnimationPlayer"]();
        case 1:
            return players[0];
        default:
            return new __WEBPACK_IMPORTED_MODULE_0__angular_animations__["ɵAnimationGroupPlayer"](players);
    }
}
/**
 * @param {?} source
 * @return {?}
 */
function copyArray(source) {
    return source ? source.splice(0) : [];
}
/**
 * @param {?} triggerName
 * @param {?} eventName
 * @return {?}
 */
function validatePlayerEvent(triggerName, eventName) {
    switch (eventName) {
        case 'start':
        case 'done':
            return;
        default:
            throw new Error("The provided animation trigger event \"" + eventName + "\" for the animation trigger \"" + triggerName + "\" is not supported!");
    }
}
/**
 * @param {?} player
 * @param {?} eventName
 * @param {?} baseEvent
 * @param {?} callback
 * @return {?}
 */
function listenOnPlayer(player, eventName, baseEvent, callback) {
    switch (eventName) {
        case 'start':
            player.onStart(function () {
                var /** @type {?} */ event = copyAnimationEvent(baseEvent);
                event.phaseName = 'start';
                callback(event);
            });
            break;
        case 'done':
            player.onDone(function () {
                var /** @type {?} */ event = copyAnimationEvent(baseEvent);
                event.phaseName = 'done';
                callback(event);
            });
            break;
    }
}
/**
 * @param {?} e
 * @return {?}
 */
function copyAnimationEvent(e) {
    return makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, e.phaseName, e.totalTime);
}
/**
 * @param {?} element
 * @param {?} triggerName
 * @param {?} fromState
 * @param {?} toState
 * @param {?} phaseName
 * @param {?} totalTime
 * @return {?}
 */
function makeAnimationEvent(element, triggerName, fromState, toState, phaseName, totalTime) {
    return ({ element: element, triggerName: triggerName, fromState: fromState, toState: toState, phaseName: phaseName, totalTime: totalTime });
}
/**
 * @param {?} value
 * @return {?}
 */
function normalizeTriggerValue(value) {
    switch (typeof value) {
        case 'boolean':
            return value ? '1' : '0';
        default:
            return value ? value.toString() : null;
    }
}
/**
 * \@experimental Animation support is experimental.
 * @abstract
 */
var AnimationStyleNormalizer = (function () {
    function AnimationStyleNormalizer() {
    }
    /**
     * @abstract
     * @param {?} propertyName
     * @param {?} errors
     * @return {?}
     */
    AnimationStyleNormalizer.prototype.normalizePropertyName = function (propertyName, errors) { };
    /**
     * @abstract
     * @param {?} userProvidedProperty
     * @param {?} normalizedProperty
     * @param {?} value
     * @param {?} errors
     * @return {?}
     */
    AnimationStyleNormalizer.prototype.normalizeStyleValue = function (userProvidedProperty, normalizedProperty, value, errors) { };
    return AnimationStyleNormalizer;
}());
/**
 * \@experimental Animation support is experimental.
 */
var NoopAnimationStyleNormalizer = (function () {
    function NoopAnimationStyleNormalizer() {
    }
    /**
     * @param {?} propertyName
     * @param {?} errors
     * @return {?}
     */
    NoopAnimationStyleNormalizer.prototype.normalizePropertyName = function (propertyName, errors) { return propertyName; };
    /**
     * @param {?} userProvidedProperty
     * @param {?} normalizedProperty
     * @param {?} value
     * @param {?} errors
     * @return {?}
     */
    NoopAnimationStyleNormalizer.prototype.normalizeStyleValue = function (userProvidedProperty, normalizedProperty, value, errors) {
        return (value);
    };
    return NoopAnimationStyleNormalizer;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var Animation = (function () {
    /**
     * @param {?} input
     */
    function Animation(input) {
        var ast = Array.isArray(input) ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_animations__["sequence"])(input) : input;
        var errors = validateAnimationSequence(ast);
        if (errors.length) {
            var errorMessage = "animation validation failed:\n" + errors.join("\n");
            throw new Error(errorMessage);
        }
        this._animationAst = ast;
    }
    /**
     * @param {?} startingStyles
     * @param {?} destinationStyles
     * @return {?}
     */
    Animation.prototype.buildTimelines = function (startingStyles, destinationStyles) {
        var /** @type {?} */ start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) : (startingStyles);
        var /** @type {?} */ dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) : (destinationStyles);
        return buildAnimationKeyframes(this._animationAst, start, dest);
    };
    /**
     * @param {?} injector
     * @param {?} element
     * @param {?=} startingStyles
     * @param {?=} destinationStyles
     * @return {?}
     */
    Animation.prototype.create = function (injector, element, startingStyles, destinationStyles) {
        if (startingStyles === void 0) { startingStyles = {}; }
        if (destinationStyles === void 0) { destinationStyles = {}; }
        var /** @type {?} */ instructions = this.buildTimelines(startingStyles, destinationStyles);
        // note the code below is only here to make the tests happy (once the new renderer is
        // within core then the code below will interact with Renderer.transition(...))
        var /** @type {?} */ driver = injector.get(AnimationDriver);
        var /** @type {?} */ normalizer = injector.get(AnimationStyleNormalizer);
        var /** @type {?} */ engine = new DomAnimationEngine(driver, normalizer);
        return engine.animateTimeline(element, instructions);
    };
    return Animation;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var WebAnimationsStyleNormalizer = (function (_super) {
    __extends(WebAnimationsStyleNormalizer, _super);
    function WebAnimationsStyleNormalizer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} propertyName
     * @param {?} errors
     * @return {?}
     */
    WebAnimationsStyleNormalizer.prototype.normalizePropertyName = function (propertyName, errors) {
        return dashCaseToCamelCase(propertyName);
    };
    /**
     * @param {?} userProvidedProperty
     * @param {?} normalizedProperty
     * @param {?} value
     * @param {?} errors
     * @return {?}
     */
    WebAnimationsStyleNormalizer.prototype.normalizeStyleValue = function (userProvidedProperty, normalizedProperty, value, errors) {
        var /** @type {?} */ unit = '';
        var /** @type {?} */ strVal = value.toString().trim();
        if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {
            if (typeof value === 'number') {
                unit = 'px';
            }
            else {
                var /** @type {?} */ valAndSuffixMatch = value.match(/^[+-]?[\d\.]+([a-z]*)$/);
                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
                    errors.push("Please provide a CSS unit value for " + userProvidedProperty + ":" + value);
                }
            }
        }
        return strVal + unit;
    };
    return WebAnimationsStyleNormalizer;
}(AnimationStyleNormalizer));
var DIMENSIONAL_PROP_MAP = makeBooleanMap('width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent'
    .split(','));
/**
 * @param {?} keys
 * @return {?}
 */
function makeBooleanMap(keys) {
    var /** @type {?} */ map = {};
    keys.forEach(function (key) { return map[key] = true; });
    return map;
}
var DASH_CASE_REGEXP = /-+([a-z0-9])/g;
/**
 * @param {?} input
 * @return {?}
 */
function dashCaseToCamelCase(input) {
    return input.replace(DASH_CASE_REGEXP, function () {
        var m = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            m[_i] = arguments[_i];
        }
        return m[1].toUpperCase();
    });
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var DEFAULT_STATE_VALUE = 'void';
var DEFAULT_STATE_STYLES = '*';
var NoopAnimationEngine = (function (_super) {
    __extends(NoopAnimationEngine, _super);
    function NoopAnimationEngine() {
        var _this = _super.apply(this, arguments) || this;
        _this._listeners = new Map();
        _this._changes = [];
        _this._flaggedRemovals = new Set();
        _this._onDoneFns = [];
        _this._triggerStyles = Object.create(null);
        return _this;
    }
    /**
     * @param {?} trigger
     * @param {?=} name
     * @return {?}
     */
    NoopAnimationEngine.prototype.registerTrigger = function (trigger, name) {
        name = name || trigger.name;
        if (this._triggerStyles[name]) {
            return;
        }
        var /** @type {?} */ stateMap = {};
        trigger.definitions.forEach(function (def) {
            if (def.type === 0 /* State */) {
                var /** @type {?} */ stateDef = (def);
                stateMap[stateDef.name] = normalizeStyles(stateDef.styles.styles);
            }
        });
        this._triggerStyles[name] = stateMap;
    };
    /**
     * @param {?} element
     * @param {?} domFn
     * @return {?}
     */
    NoopAnimationEngine.prototype.onInsert = function (element, domFn) { domFn(); };
    /**
     * @param {?} element
     * @param {?} domFn
     * @return {?}
     */
    NoopAnimationEngine.prototype.onRemove = function (element, domFn) {
        domFn();
        if (element['nodeType'] == 1) {
            this._flaggedRemovals.add(element);
        }
    };
    /**
     * @param {?} element
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    NoopAnimationEngine.prototype.setProperty = function (element, property, value) {
        var /** @type {?} */ storageProp = makeStorageProp(property);
        var /** @type {?} */ oldValue = element[storageProp] || DEFAULT_STATE_VALUE;
        this._changes.push(/** @type {?} */ ({ element: element, oldValue: oldValue, newValue: value, triggerName: property }));
        var /** @type {?} */ triggerStateStyles = this._triggerStyles[property] || {};
        var /** @type {?} */ fromStateStyles = triggerStateStyles[oldValue] || triggerStateStyles[DEFAULT_STATE_STYLES];
        if (fromStateStyles) {
            eraseStyles(element, fromStateStyles);
        }
        element[storageProp] = value;
        this._onDoneFns.push(function () {
            var /** @type {?} */ toStateStyles = triggerStateStyles[value] || triggerStateStyles[DEFAULT_STATE_STYLES];
            if (toStateStyles) {
                setStyles(element, toStateStyles);
            }
        });
    };
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} eventPhase
     * @param {?} callback
     * @return {?}
     */
    NoopAnimationEngine.prototype.listen = function (element, eventName, eventPhase, callback) {
        var /** @type {?} */ listeners = this._listeners.get(element);
        if (!listeners) {
            this._listeners.set(element, listeners = []);
        }
        var /** @type {?} */ tuple = ({ triggerName: eventName, eventPhase: eventPhase, callback: callback });
        listeners.push(tuple);
        return function () { return tuple.doRemove = true; };
    };
    /**
     * @return {?}
     */
    NoopAnimationEngine.prototype.flush = function () {
        var _this = this;
        var /** @type {?} */ onStartCallbacks = [];
        var /** @type {?} */ onDoneCallbacks = [];
        /**
         * @param {?} listener
         * @param {?} data
         * @return {?}
         */
        function handleListener(listener, data) {
            var /** @type {?} */ phase = listener.eventPhase;
            var /** @type {?} */ event = makeAnimationEvent$1(data.element, data.triggerName, data.oldValue, data.newValue, phase, 0);
            if (phase == 'start') {
                onStartCallbacks.push(function () { return listener.callback(event); });
            }
            else if (phase == 'done') {
                onDoneCallbacks.push(function () { return listener.callback(event); });
            }
        }
        this._changes.forEach(function (change) {
            var /** @type {?} */ element = change.element;
            var /** @type {?} */ listeners = _this._listeners.get(element);
            if (listeners) {
                listeners.forEach(function (listener) {
                    if (listener.triggerName == change.triggerName) {
                        handleListener(listener, change);
                    }
                });
            }
        });
        // upon removal ALL the animation triggers need to get fired
        this._flaggedRemovals.forEach(function (element) {
            var /** @type {?} */ listeners = _this._listeners.get(element);
            if (listeners) {
                listeners.forEach(function (listener) {
                    var /** @type {?} */ triggerName = listener.triggerName;
                    var /** @type {?} */ storageProp = makeStorageProp(triggerName);
                    handleListener(listener, /** @type {?} */ ({
                        element: element,
                        triggerName: triggerName,
                        oldValue: element[storageProp] || DEFAULT_STATE_VALUE,
                        newValue: DEFAULT_STATE_VALUE
                    }));
                });
            }
        });
        // remove all the listeners after everything is complete
        Array.from(this._listeners.keys()).forEach(function (element) {
            var /** @type {?} */ listenersToKeep = ((_this._listeners.get(element))).filter(function (l) { return !l.doRemove; });
            if (listenersToKeep.length) {
                _this._listeners.set(element, listenersToKeep);
            }
            else {
                _this._listeners.delete(element);
            }
        });
        onStartCallbacks.forEach(function (fn) { return fn(); });
        onDoneCallbacks.forEach(function (fn) { return fn(); });
        this._flaggedRemovals.clear();
        this._changes = [];
        this._onDoneFns.forEach(function (doneFn) { return doneFn(); });
        this._onDoneFns = [];
    };
    Object.defineProperty(NoopAnimationEngine.prototype, "activePlayers", {
        /**
         * @return {?}
         */
        get: function () { return []; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NoopAnimationEngine.prototype, "queuedPlayers", {
        /**
         * @return {?}
         */
        get: function () { return []; },
        enumerable: true,
        configurable: true
    });
    return NoopAnimationEngine;
}(AnimationEngine));
/**
 * @param {?} element
 * @param {?} triggerName
 * @param {?} fromState
 * @param {?} toState
 * @param {?} phaseName
 * @param {?} totalTime
 * @return {?}
 */
function makeAnimationEvent$1(element, triggerName, fromState, toState, phaseName, totalTime) {
    return ({ element: element, triggerName: triggerName, fromState: fromState, toState: toState, phaseName: phaseName, totalTime: totalTime });
}
/**
 * @param {?} property
 * @return {?}
 */
function makeStorageProp(property) {
    return '_@_' + property;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var WebAnimationsPlayer = (function () {
    /**
     * @param {?} element
     * @param {?} keyframes
     * @param {?} options
     * @param {?=} previousPlayers
     */
    function WebAnimationsPlayer(element, keyframes, options, previousPlayers) {
        if (previousPlayers === void 0) { previousPlayers = []; }
        var _this = this;
        this.element = element;
        this.keyframes = keyframes;
        this.options = options;
        this._onDoneFns = [];
        this._onStartFns = [];
        this._onDestroyFns = [];
        this._initialized = false;
        this._finished = false;
        this._started = false;
        this._destroyed = false;
        this.time = 0;
        this.parentPlayer = null;
        this._duration = options['duration'];
        this._delay = options['delay'] || 0;
        this.time = this._duration + this._delay;
        this.previousStyles = {};
        previousPlayers.forEach(function (player) {
            var styles = player._captureStyles();
            Object.keys(styles).forEach(function (prop) { return _this.previousStyles[prop] = styles[prop]; });
        });
    }
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype._onFinish = function () {
        if (!this._finished) {
            this._finished = true;
            this._onDoneFns.forEach(function (fn) { return fn(); });
            this._onDoneFns = [];
        }
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.init = function () {
        var _this = this;
        if (this._initialized)
            return;
        this._initialized = true;
        var /** @type {?} */ keyframes = this.keyframes.map(function (styles) {
            var /** @type {?} */ formattedKeyframe = {};
            Object.keys(styles).forEach(function (prop, index) {
                var /** @type {?} */ value = styles[prop];
                if (value == __WEBPACK_IMPORTED_MODULE_0__angular_animations__["AUTO_STYLE"]) {
                    value = _computeStyle(_this.element, prop);
                }
                if (value != undefined) {
                    formattedKeyframe[prop] = value;
                }
            });
            return formattedKeyframe;
        });
        var /** @type {?} */ previousStyleProps = Object.keys(this.previousStyles);
        if (previousStyleProps.length) {
            var /** @type {?} */ startingKeyframe_1 = keyframes[0];
            var /** @type {?} */ missingStyleProps_1 = [];
            previousStyleProps.forEach(function (prop) {
                if (!startingKeyframe_1.hasOwnProperty(prop)) {
                    missingStyleProps_1.push(prop);
                }
                startingKeyframe_1[prop] = _this.previousStyles[prop];
            });
            if (missingStyleProps_1.length) {
                var /** @type {?} */ self_1 = this;
                var _loop_3 = function () {
                    var /** @type {?} */ kf = keyframes[i];
                    missingStyleProps_1.forEach(function (prop) {
                        kf[prop] = _computeStyle(self_1.element, prop);
                    });
                };
                // tslint:disable-next-line
                for (var /** @type {?} */ i = 1; i < keyframes.length; i++) {
                    _loop_3();
                }
            }
        }
        this._player = this._triggerWebAnimation(this.element, keyframes, this.options);
        this._finalKeyframe =
            keyframes.length ? _copyKeyframeStyles(keyframes[keyframes.length - 1]) : {};
        // this is required so that the player doesn't start to animate right away
        this._resetDomPlayerState();
        this._player.addEventListener('finish', function () { return _this._onFinish(); });
    };
    /**
     * \@internal
     * @param {?} element
     * @param {?} keyframes
     * @param {?} options
     * @return {?}
     */
    WebAnimationsPlayer.prototype._triggerWebAnimation = function (element, keyframes, options) {
        // jscompiler doesn't seem to know animate is a native property because it's not fully
        // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]
        return (element['animate'](keyframes, options));
    };
    Object.defineProperty(WebAnimationsPlayer.prototype, "domPlayer", {
        /**
         * @return {?}
         */
        get: function () { return this._player; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    WebAnimationsPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
    /**
     * @param {?} fn
     * @return {?}
     */
    WebAnimationsPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
    /**
     * @param {?} fn
     * @return {?}
     */
    WebAnimationsPlayer.prototype.onDestroy = function (fn) { this._onDestroyFns.push(fn); };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.play = function () {
        this.init();
        if (!this.hasStarted()) {
            this._onStartFns.forEach(function (fn) { return fn(); });
            this._onStartFns = [];
            this._started = true;
        }
        this._player.play();
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.pause = function () {
        this.init();
        this._player.pause();
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.finish = function () {
        this.init();
        this._onFinish();
        this._player.finish();
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.reset = function () {
        this._resetDomPlayerState();
        this._destroyed = false;
        this._finished = false;
        this._started = false;
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype._resetDomPlayerState = function () {
        if (this._player) {
            this._player.cancel();
        }
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.restart = function () {
        this.reset();
        this.play();
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.hasStarted = function () { return this._started; };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.destroy = function () {
        if (!this._destroyed) {
            this._resetDomPlayerState();
            this._onFinish();
            this._destroyed = true;
            this._onDestroyFns.forEach(function (fn) { return fn(); });
            this._onDestroyFns = [];
        }
    };
    /**
     * @param {?} p
     * @return {?}
     */
    WebAnimationsPlayer.prototype.setPosition = function (p) { this._player.currentTime = p * this.time; };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.getPosition = function () { return this._player.currentTime / this.time; };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype._captureStyles = function () {
        var _this = this;
        var /** @type {?} */ styles = {};
        if (this.hasStarted()) {
            Object.keys(this._finalKeyframe).forEach(function (prop) {
                if (prop != 'offset') {
                    styles[prop] =
                        _this._finished ? _this._finalKeyframe[prop] : _computeStyle(_this.element, prop);
                }
            });
        }
        return styles;
    };
    return WebAnimationsPlayer;
}());
/**
 * @param {?} element
 * @param {?} prop
 * @return {?}
 */
function _computeStyle(element, prop) {
    return ((window.getComputedStyle(element)))[prop];
}
/**
 * @param {?} styles
 * @return {?}
 */
function _copyKeyframeStyles(styles) {
    var /** @type {?} */ newStyles = {};
    Object.keys(styles).forEach(function (prop) {
        if (prop != 'offset') {
            newStyles[prop] = styles[prop];
        }
    });
    return newStyles;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var WebAnimationsDriver = (function () {
    function WebAnimationsDriver() {
    }
    /**
     * @param {?} element
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @return {?}
     */
    WebAnimationsDriver.prototype.animate = function (element, keyframes, duration, delay, easing, previousPlayers) {
        if (previousPlayers === void 0) { previousPlayers = []; }
        var /** @type {?} */ playerOptions = { 'duration': duration, 'delay': delay, 'fill': 'forwards' };
        // we check for this to avoid having a null|undefined value be present
        // for the easing (which results in an error for certain browsers #9752)
        if (easing) {
            playerOptions['easing'] = easing;
        }
        var /** @type {?} */ previousWebAnimationPlayers = (previousPlayers.filter(function (player) { return player instanceof WebAnimationsPlayer; }));
        return new WebAnimationsPlayer(element, keyframes, playerOptions, previousWebAnimationPlayers);
    };
    return WebAnimationsDriver;
}());
/**
 * @return {?}
 */
function supportsWebAnimations() {
    return typeof Element !== 'undefined' && typeof ((Element)).prototype['animate'] === 'function';
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all animation APIs of the animation browser package.
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the animation package.
 */
/**
 * Generated bundle index. Do not edit.
 */

//# sourceMappingURL=browser.es5.js.map


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__(1);
var google_map_kml_layer_1 = __webpack_require__(37);
var google_map_1 = __webpack_require__(41);
var google_map_circle_1 = __webpack_require__(36);
var google_map_info_window_1 = __webpack_require__(26);
var google_map_marker_1 = __webpack_require__(38);
var google_map_polygon_1 = __webpack_require__(39);
var google_map_polyline_1 = __webpack_require__(40);
var google_map_polyline_point_1 = __webpack_require__(27);
var lazy_maps_api_loader_1 = __webpack_require__(33);
var lazy_maps_api_loader_2 = __webpack_require__(33);
var maps_api_loader_1 = __webpack_require__(22);
var browser_globals_1 = __webpack_require__(42);
/**
 * @internal
 */
function coreDirectives() {
    return [
        google_map_1.SebmGoogleMap, google_map_marker_1.SebmGoogleMapMarker, google_map_info_window_1.SebmGoogleMapInfoWindow, google_map_circle_1.SebmGoogleMapCircle,
        google_map_polygon_1.SebmGoogleMapPolygon, google_map_polyline_1.SebmGoogleMapPolyline, google_map_polyline_point_1.SebmGoogleMapPolylinePoint, google_map_kml_layer_1.SebmGoogleMapKmlLayer
    ];
}
exports.coreDirectives = coreDirectives;
;
/**
 * The angular2-google-maps core module. Contains all Directives/Services/Pipes
 * of the core module. Please use `AgmCoreModule.forRoot()` in your app module.
 */
var AgmCoreModule = (function () {
    function AgmCoreModule() {
    }
    /**
     * Please use this method when you register the module at the root level.
     */
    AgmCoreModule.forRoot = function (lazyMapsAPILoaderConfig) {
        return {
            ngModule: AgmCoreModule,
            providers: browser_globals_1.BROWSER_GLOBALS_PROVIDERS.concat([
                { provide: maps_api_loader_1.MapsAPILoader, useClass: lazy_maps_api_loader_1.LazyMapsAPILoader },
                { provide: lazy_maps_api_loader_2.LAZY_MAPS_API_CONFIG, useValue: lazyMapsAPILoaderConfig }
            ]),
        };
    };
    AgmCoreModule.decorators = [
        { type: core_1.NgModule, args: [{ declarations: coreDirectives(), exports: coreDirectives() },] },
    ];
    /** @nocollapse */
    AgmCoreModule.ctorParameters = function () { return []; };
    return AgmCoreModule;
}());
exports.AgmCoreModule = AgmCoreModule;
//# sourceMappingURL=core-module.js.map

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var google_map_1 = __webpack_require__(41);
exports.SebmGoogleMap = google_map_1.SebmGoogleMap;
var google_map_circle_1 = __webpack_require__(36);
exports.SebmGoogleMapCircle = google_map_circle_1.SebmGoogleMapCircle;
var google_map_info_window_1 = __webpack_require__(26);
exports.SebmGoogleMapInfoWindow = google_map_info_window_1.SebmGoogleMapInfoWindow;
var google_map_kml_layer_1 = __webpack_require__(37);
exports.SebmGoogleMapKmlLayer = google_map_kml_layer_1.SebmGoogleMapKmlLayer;
var google_map_marker_1 = __webpack_require__(38);
exports.SebmGoogleMapMarker = google_map_marker_1.SebmGoogleMapMarker;
var google_map_polygon_1 = __webpack_require__(39);
exports.SebmGoogleMapPolygon = google_map_polygon_1.SebmGoogleMapPolygon;
var google_map_polyline_1 = __webpack_require__(40);
exports.SebmGoogleMapPolyline = google_map_polyline_1.SebmGoogleMapPolyline;
var google_map_polyline_point_1 = __webpack_require__(27);
exports.SebmGoogleMapPolylinePoint = google_map_polyline_point_1.SebmGoogleMapPolylinePoint;
//# sourceMappingURL=directives.js.map

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
// main modules
__export(__webpack_require__(190));
__export(__webpack_require__(192));
// Google Maps types
// core module
// we explicitly export the module here to prevent this Ionic 2 bug:
// http://stevemichelotti.com/integrate-angular-2-google-maps-into-ionic-2/
var core_module_1 = __webpack_require__(189);
exports.AgmCoreModule = core_module_1.AgmCoreModule;
//# sourceMappingURL=index.js.map

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var google_maps_api_wrapper_1 = __webpack_require__(17);
exports.GoogleMapsAPIWrapper = google_maps_api_wrapper_1.GoogleMapsAPIWrapper;
var circle_manager_1 = __webpack_require__(28);
exports.CircleManager = circle_manager_1.CircleManager;
var info_window_manager_1 = __webpack_require__(29);
exports.InfoWindowManager = info_window_manager_1.InfoWindowManager;
var marker_manager_1 = __webpack_require__(21);
exports.MarkerManager = marker_manager_1.MarkerManager;
var polygon_manager_1 = __webpack_require__(31);
exports.PolygonManager = polygon_manager_1.PolygonManager;
var polyline_manager_1 = __webpack_require__(32);
exports.PolylineManager = polyline_manager_1.PolylineManager;
var kml_layer_manager_1 = __webpack_require__(30);
exports.KmlLayerManager = kml_layer_manager_1.KmlLayerManager;
var lazy_maps_api_loader_1 = __webpack_require__(33);
exports.GoogleMapsScriptProtocol = lazy_maps_api_loader_1.GoogleMapsScriptProtocol;
exports.LAZY_MAPS_API_CONFIG = lazy_maps_api_loader_1.LAZY_MAPS_API_CONFIG;
exports.LazyMapsAPILoader = lazy_maps_api_loader_1.LazyMapsAPILoader;
var maps_api_loader_1 = __webpack_require__(22);
exports.MapsAPILoader = maps_api_loader_1.MapsAPILoader;
var noop_maps_api_loader_1 = __webpack_require__(193);
exports.NoOpMapsAPILoader = noop_maps_api_loader_1.NoOpMapsAPILoader;
//# sourceMappingURL=services.js.map

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * When using the NoOpMapsAPILoader, the Google Maps API must be added to the page via a `<script>`
 * Tag.
 * It's important that the Google Maps API script gets loaded first on the page.
 */
var NoOpMapsAPILoader = (function () {
    function NoOpMapsAPILoader() {
    }
    NoOpMapsAPILoader.prototype.load = function () {
        if (!window.google || !window.google.maps) {
            throw new Error('Google Maps API not loaded on page. Make sure window.google.maps is available!');
        }
        return Promise.resolve();
    };
    ;
    return NoOpMapsAPILoader;
}());
exports.NoOpMapsAPILoader = NoOpMapsAPILoader;
//# sourceMappingURL=noop-maps-api-loader.js.map

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ansiHTML

// Reference to https://github.com/sindresorhus/ansi-regex
var _regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/

var _defColors = {
  reset: ['fff', '000'], // [FOREGROUD_COLOR, BACKGROUND_COLOR]
  black: '000',
  red: 'ff0000',
  green: '209805',
  yellow: 'e8bf03',
  blue: '0000ff',
  magenta: 'ff00ff',
  cyan: '00ffee',
  lightgrey: 'f0f0f0',
  darkgrey: '888'
}
var _styles = {
  30: 'black',
  31: 'red',
  32: 'green',
  33: 'yellow',
  34: 'blue',
  35: 'magenta',
  36: 'cyan',
  37: 'lightgrey'
}
var _openTags = {
  '1': 'font-weight:bold', // bold
  '2': 'opacity:0.5', // dim
  '3': '<i>', // italic
  '4': '<u>', // underscore
  '8': 'display:none', // hidden
  '9': '<del>' // delete
}
var _closeTags = {
  '23': '</i>', // reset italic
  '24': '</u>', // reset underscore
  '29': '</del>' // reset delete
}

;[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
  _closeTags[n] = '</span>'
})

/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */
function ansiHTML (text) {
  // Returns the text if the string has no ANSI escape code.
  if (!_regANSI.test(text)) {
    return text
  }

  // Cache opened sequence.
  var ansiCodes = []
  // Replace with markup.
  var ret = text.replace(/\033\[(\d+)*m/g, function (match, seq) {
    var ot = _openTags[seq]
    if (ot) {
      // If current sequence has been opened, close it.
      if (!!~ansiCodes.indexOf(seq)) { // eslint-disable-line no-extra-boolean-cast
        ansiCodes.pop()
        return '</span>'
      }
      // Open tag.
      ansiCodes.push(seq)
      return ot[0] === '<' ? ot : '<span style="' + ot + ';">'
    }

    var ct = _closeTags[seq]
    if (ct) {
      // Pop sequence
      ansiCodes.pop()
      return ct
    }
    return ''
  })

  // Make sure tags are closed.
  var l = ansiCodes.length
  ;(l > 0) && (ret += Array(l + 1).join('</span>'))

  return ret
}

/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */
ansiHTML.setColors = function (colors) {
  if (typeof colors !== 'object') {
    throw new Error('`colors` parameter must be an Object.')
  }

  var _finalColors = {}
  for (var key in _defColors) {
    var hex = colors.hasOwnProperty(key) ? colors[key] : null
    if (!hex) {
      _finalColors[key] = _defColors[key]
      continue
    }
    if ('reset' === key) {
      if (typeof hex === 'string') {
        hex = [hex]
      }
      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {
        return typeof h !== 'string'
      })) {
        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000')
      }
      var defHexColor = _defColors[key]
      if (!hex[0]) {
        hex[0] = defHexColor[0]
      }
      if (hex.length === 1 || !hex[1]) {
        hex = [hex[0]]
        hex.push(defHexColor[1])
      }

      hex = hex.slice(0, 2)
    } else if (typeof hex !== 'string') {
      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000')
    }
    _finalColors[key] = hex
  }
  _setTags(_finalColors)
}

/**
 * Reset colors.
 */
ansiHTML.reset = function () {
  _setTags(_defColors)
}

/**
 * Expose tags, including open and close.
 * @type {Object}
 */
ansiHTML.tags = {}

if (Object.defineProperty) {
  Object.defineProperty(ansiHTML.tags, 'open', {
    get: function () { return _openTags }
  })
  Object.defineProperty(ansiHTML.tags, 'close', {
    get: function () { return _closeTags }
  })
} else {
  ansiHTML.tags.open = _openTags
  ansiHTML.tags.close = _closeTags
}

function _setTags (colors) {
  // reset all
  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]
  // inverse
  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]
  // dark grey
  _openTags['90'] = 'color:#' + colors.darkgrey

  for (var code in _styles) {
    var color = _styles[code]
    var oriColor = colors[color] || '000'
    _openTags[code] = 'color:#' + oriColor
    code = parseInt(code)
    _openTags[(code + 10).toString()] = 'background:#' + oriColor
  }
}

ansiHTML.reset()


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function () {
	return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g;
};


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(306);
__webpack_require__(307);
__webpack_require__(308);
__webpack_require__(309);
__webpack_require__(310);
__webpack_require__(313);
__webpack_require__(311);
__webpack_require__(312);
__webpack_require__(314);
__webpack_require__(315);
__webpack_require__(316);
__webpack_require__(317);
__webpack_require__(319);
__webpack_require__(318);
module.exports = __webpack_require__(184).Reflect;

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(320);
__webpack_require__(321);
__webpack_require__(323);
__webpack_require__(322);
__webpack_require__(325);
__webpack_require__(324);
__webpack_require__(326);
__webpack_require__(327);
__webpack_require__(328);
module.exports = __webpack_require__(184).Reflect;


/***/ }),
/* 198 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  XmlEntities: __webpack_require__(201),
  Html4Entities: __webpack_require__(200),
  Html5Entities: __webpack_require__(43),
  AllHtmlEntities: __webpack_require__(43)
};


/***/ }),
/* 200 */
/***/ (function(module, exports) {

var HTML_ALPHA = ['apos', 'nbsp', 'iexcl', 'cent', 'pound', 'curren', 'yen', 'brvbar', 'sect', 'uml', 'copy', 'ordf', 'laquo', 'not', 'shy', 'reg', 'macr', 'deg', 'plusmn', 'sup2', 'sup3', 'acute', 'micro', 'para', 'middot', 'cedil', 'sup1', 'ordm', 'raquo', 'frac14', 'frac12', 'frac34', 'iquest', 'Agrave', 'Aacute', 'Acirc', 'Atilde', 'Auml', 'Aring', 'Aelig', 'Ccedil', 'Egrave', 'Eacute', 'Ecirc', 'Euml', 'Igrave', 'Iacute', 'Icirc', 'Iuml', 'ETH', 'Ntilde', 'Ograve', 'Oacute', 'Ocirc', 'Otilde', 'Ouml', 'times', 'Oslash', 'Ugrave', 'Uacute', 'Ucirc', 'Uuml', 'Yacute', 'THORN', 'szlig', 'agrave', 'aacute', 'acirc', 'atilde', 'auml', 'aring', 'aelig', 'ccedil', 'egrave', 'eacute', 'ecirc', 'euml', 'igrave', 'iacute', 'icirc', 'iuml', 'eth', 'ntilde', 'ograve', 'oacute', 'ocirc', 'otilde', 'ouml', 'divide', 'oslash', 'ugrave', 'uacute', 'ucirc', 'uuml', 'yacute', 'thorn', 'yuml', 'quot', 'amp', 'lt', 'gt', 'OElig', 'oelig', 'Scaron', 'scaron', 'Yuml', 'circ', 'tilde', 'ensp', 'emsp', 'thinsp', 'zwnj', 'zwj', 'lrm', 'rlm', 'ndash', 'mdash', 'lsquo', 'rsquo', 'sbquo', 'ldquo', 'rdquo', 'bdquo', 'dagger', 'Dagger', 'permil', 'lsaquo', 'rsaquo', 'euro', 'fnof', 'Alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon', 'Zeta', 'Eta', 'Theta', 'Iota', 'Kappa', 'Lambda', 'Mu', 'Nu', 'Xi', 'Omicron', 'Pi', 'Rho', 'Sigma', 'Tau', 'Upsilon', 'Phi', 'Chi', 'Psi', 'Omega', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigmaf', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'thetasym', 'upsih', 'piv', 'bull', 'hellip', 'prime', 'Prime', 'oline', 'frasl', 'weierp', 'image', 'real', 'trade', 'alefsym', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'crarr', 'lArr', 'uArr', 'rArr', 'dArr', 'hArr', 'forall', 'part', 'exist', 'empty', 'nabla', 'isin', 'notin', 'ni', 'prod', 'sum', 'minus', 'lowast', 'radic', 'prop', 'infin', 'ang', 'and', 'or', 'cap', 'cup', 'int', 'there4', 'sim', 'cong', 'asymp', 'ne', 'equiv', 'le', 'ge', 'sub', 'sup', 'nsub', 'sube', 'supe', 'oplus', 'otimes', 'perp', 'sdot', 'lceil', 'rceil', 'lfloor', 'rfloor', 'lang', 'rang', 'loz', 'spades', 'clubs', 'hearts', 'diams'];
var HTML_CODES = [39, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 34, 38, 60, 62, 338, 339, 352, 353, 376, 710, 732, 8194, 8195, 8201, 8204, 8205, 8206, 8207, 8211, 8212, 8216, 8217, 8218, 8220, 8221, 8222, 8224, 8225, 8240, 8249, 8250, 8364, 402, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 977, 978, 982, 8226, 8230, 8242, 8243, 8254, 8260, 8472, 8465, 8476, 8482, 8501, 8592, 8593, 8594, 8595, 8596, 8629, 8656, 8657, 8658, 8659, 8660, 8704, 8706, 8707, 8709, 8711, 8712, 8713, 8715, 8719, 8721, 8722, 8727, 8730, 8733, 8734, 8736, 8743, 8744, 8745, 8746, 8747, 8756, 8764, 8773, 8776, 8800, 8801, 8804, 8805, 8834, 8835, 8836, 8838, 8839, 8853, 8855, 8869, 8901, 8968, 8969, 8970, 8971, 9001, 9002, 9674, 9824, 9827, 9829, 9830];

var alphaIndex = {};
var numIndex = {};

var i = 0;
var length = HTML_ALPHA.length;
while (i < length) {
    var a = HTML_ALPHA[i];
    var c = HTML_CODES[i];
    alphaIndex[a] = String.fromCharCode(c);
    numIndex[c] = a;
    i++;
}

/**
 * @constructor
 */
function Html4Entities() {}

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.decode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/&(#?[\w\d]+);?/g, function(s, entity) {
        var chr;
        if (entity.charAt(0) === "#") {
            var code = entity.charAt(1).toLowerCase() === 'x' ?
                parseInt(entity.substr(2), 16) :
                parseInt(entity.substr(1));

            if (!(isNaN(code) || code < -32768 || code > 65535)) {
                chr = String.fromCharCode(code);
            }
        } else {
            chr = alphaIndex[entity];
        }
        return chr || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.decode = function(str) {
    return new Html4Entities().decode(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var alpha = numIndex[str.charCodeAt(i)];
        result += alpha ? "&" + alpha + ";" : str.charAt(i);
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encode = function(str) {
    return new Html4Entities().encode(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encodeNonUTF = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var cc = str.charCodeAt(i);
        var alpha = numIndex[cc];
        if (alpha) {
            result += "&" + alpha + ";";
        } else if (cc < 32 || cc > 126) {
            result += "&#" + cc + ";";
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encodeNonUTF = function(str) {
    return new Html4Entities().encodeNonUTF(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encodeNonASCII = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encodeNonASCII = function(str) {
    return new Html4Entities().encodeNonASCII(str);
};

module.exports = Html4Entities;


/***/ }),
/* 201 */
/***/ (function(module, exports) {

var ALPHA_INDEX = {
    '&lt': '<',
    '&gt': '>',
    '&quot': '"',
    '&apos': '\'',
    '&amp': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&apos;': '\'',
    '&amp;': '&'
};

var CHAR_INDEX = {
    60: 'lt',
    62: 'gt',
    34: 'quot',
    39: 'apos',
    38: 'amp'
};

var CHAR_S_INDEX = {
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    '\'': '&apos;',
    '&': '&amp;'
};

/**
 * @constructor
 */
function XmlEntities() {}

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/<|>|"|'|&/g, function(s) {
        return CHAR_S_INDEX[s];
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encode = function(str) {
    return new XmlEntities().encode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.decode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/&#?[0-9a-zA-Z]+;?/g, function(s) {
        if (s.charAt(1) === '#') {
            var code = s.charAt(2).toLowerCase() === 'x' ?
                parseInt(s.substr(3), 16) :
                parseInt(s.substr(2));

            if (isNaN(code) || code < -32768 || code > 65535) {
                return '';
            }
            return String.fromCharCode(code);
        }
        return ALPHA_INDEX[s] || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.decode = function(str) {
    return new XmlEntities().decode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encodeNonUTF = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        var alpha = CHAR_INDEX[c];
        if (alpha) {
            result += "&" + alpha + ";";
            i++;
            continue;
        }
        if (c < 32 || c > 126) {
            result += '&#' + c + ';';
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encodeNonUTF = function(str) {
    return new XmlEntities().encodeNonUTF(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encodeNonASCII = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLenght = str.length;
    var result = '';
    var i = 0;
    while (i < strLenght) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encodeNonASCII = function(str) {
    return new XmlEntities().encodeNonASCII(str);
 };

module.exports = XmlEntities;


/***/ }),
/* 202 */
/***/ (function(module, exports) {

module.exports = "<div class=\"wrapper\" [ngClass]=\"{'sidebar-inactive-l':menuInactiveDesktop, 'sidebar-active-m':menuActiveMobile}\">\r\n    <div class=\"topbar clearfix\">\r\n        <a id=\"omega-menu-button\" href=\"#\" (click)=\"toggleMenu($event)\">\r\n            <span class=\"fa fa-bars\"></span>\r\n        </a>\r\n        <span class=\"topbar-title\"></span>\r\n        <a id=\"options-menu-button\" href=\"#\" (click)=\"toggleTopMenu($event)\">\r\n            <span class=\"fa fa-ellipsis-h\"></span>\r\n        </a>\r\n        <a>\r\n            <span>Last Login</span>              \r\n        </a> \r\n        <div id=\"topbar-icons\" class=\"animated\" [ngClass]=\"{'topbar-icons-visible flipInX':topMenuActive,'flipOutX':topMenuLeaving}\">\r\n            <!--<span class=\"topbar-search\" (click)=\"onSearchClick($event)\">\r\n                <input type=\"text\" placeholder=\"Search\" />\r\n                <span class=\"topbar-search-icon fa fa-search\"></span>\r\n            <!--</span>\r\n            <a>\r\n                <span class=\"topbar-item-text\">Messages</span>\r\n                <span class=\"topbar-icon fa fa-envelope-o animated swing\"></span>\r\n                <span class=\"topbar-badge animated rubberBand\">5</span>\r\n            </a>\r\n            <!--<a href=\"#\">\r\n                <a>\r\n                    <span class=\"topbar-item-text\">Settings</span>\r\n                    <span class=\"topbar-icon fa fa-gear\"></span>\r\n                </a>\r\n            <a href=\"#\">\r\n                <span class=\"topbar-item-text\">User</span>\r\n                <span class=\"topbar-icon fa fa-user\"></span>\r\n            </a>-->\r\n        </div><br> \r\n        &nbsp;&nbsp; {{lastLogin}}\r\n    </div>\r\n    <div class=\"sidebar\" (click)=\"onMenuClick($event)\">\r\n        <div #scroller class=\"nano\">\r\n            <div class=\"nano-content sidebar-scroll-content\">\r\n                <div class=\"logo\">\r\n                    <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{logoImage}}\"height=\"47\" width=\"80%\" />                    \r\n                </div>\r\n                <div class=\"profile\">\r\n                    <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{image}}\" class=\"rounded-circle\" height=\"56\" width=\"50\" />\r\n                    <a id=\"profile-button\" href=\"#\" (click)=\"toggleProfile($event)\">\r\n                        <span class=\"username\">{{userName}}</span>                    </a>\r\n                    <ul [@submenu]=\"profileActive ? 'visible' : 'hidden'\">\r\n                       <li><a  style=\"cursor: pointer;\" ata-toggle=\"modal\" data-target=\"#myModal\" (click)=\"password($event)\"><i class=\"fa fa-fw fa-sliders\"></i><span>Change Password</span></a></li>\r\n                        <li><a href=\"#\"><i class=\"fa fa-fw fa-sign-out\"></i><span>Logout</span></a></li>\r\n                    </ul>\r\n                    <!--<div [@submenu]=\"changePasswordForm ? 'visible' : 'hidden'\">\r\n                        asdasdsadas\r\n                    </div>-->\r\n                </div>                \r\n                <app-menu></app-menu>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"main\">\r\n        <router-outlet></router-outlet>\r\n    </div>\r\n    \r\n</div>";

/***/ }),
/* 203 */
/***/ (function(module, exports) {

module.exports = "\r\n <div class=\"ui-g-12 ui-md-6 ui-lg-4\" style=\"margin-left:290px;margin-top:85px;width:500px;\">\r\n        <p-panel header=\"Change Password\" [style]=\"{'text-align':'left','background':'#fff', 'height':'100%'}\">           \r\n            <form [formGroup]=\"passwordForm\" (ngSubmit)=\"updateAdminPassword(passwordForm.value)\" style=\"height:262px;width:500px;\">\r\n                <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px;margin-top:5px;\">\r\n                    <div class=\"ui-grid-row\">\r\n                        <div class=\"ui-grid-col-4\">\r\n                            Current Password :\r\n                        </div>\r\n                        <div class=\"ui-grid-col-6\">\r\n                            <input pInputText type=\"password\" formControlName=\"password\" placeholder=\"Required\" [(ngModel)]=\"changePassword.password\" />\r\n                            <div style=\"color:brown\" *ngIf=\"!passwordForm.controls['password'].valid&&passwordForm.controls['password'].dirty\">\r\n                                Current password is required.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                    <div class=\"ui-grid-row\">\r\n                        <div class=\"ui-grid-col-4\">\r\n                            New Password :\r\n                        </div>\r\n                        <div class=\"ui-grid-col-6\">\r\n                            <input pPassword type=\"password\"  #input  formControlName=\"newPassword\" placeholder=\"Required\" [(ngModel)]=\"changePassword.newPassword\" />\r\n                            <div style=\"color:brown\" *ngIf=\"!passwordForm.controls['newPassword'].valid&&passwordForm.controls['newPassword'].dirty\">\r\n                                <span *ngIf=\"passwordForm.controls['newPassword'].errors['required']\">Password is required.</span>\r\n                                <span *ngIf=\"passwordForm.controls['newPassword'].errors['minlength']\">Must be longer than 4 characters</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                    <div class=\"ui-grid-row\">\r\n                        <div class=\"ui-grid-col-4\">\r\n                            Confirm Password :\r\n                        </div>\r\n                        <div class=\"ui-grid-col-6\">\r\n                            <input pPassword type=\"password\" formControlName=\"confirmPassword\" placeholder=\"Required\" [(ngModel)]=\"changePassword.confirmPassword\" />\r\n                            <div style=\"color:brown\" *ngIf=\"passwordForm.controls.confirmPassword.touched&&passwordForm.hasError('mismatchedPasswords')\">\r\n                                Passwords do not match.\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <footer style=\"text-align: center; margin-top: 24px; margin-left: -42px;\">\r\n                    <div>\r\n                        <button pButton type=\"submit\" style=\"width:110px;height:30px;\" label=\"Submit\" [disabled]=\"!passwordForm.valid\"></button>\r\n                    </div>\r\n                </footer>\r\n            </form>\r\n        </p-panel>\r\n    </div>\r\n<p-confirmDialog width=\"425\"></p-confirmDialog>\r\n<p-growl [value]=\"msgs\" life=\"3000\"></p-growl>";

/***/ }),
/* 204 */
/***/ (function(module, exports) {

module.exports = "\r\n<div class=\"ui-fluid\">\r\n    <div class=\"ui-g\">\r\n        <div class=\"ui-g-12\">\r\n            <div class=\"card card-w-title\">\r\n                <p-toolbar>\r\n                    <div class=\"ui-toolbar-group-left\">\r\n                        <p-calendar dateFormat=\"yy-mm-dd\" [(ngModel)]=\"selectedDate\" [style]=\"{'width':'100px'}\"></p-calendar>\r\n                        <button pButton type=\"button\" style=\"width:100px;height:29px;\" (click)=\"getpresentpatron($event)\" label=\"School\" icon=\"fa fa-university\"></button>\r\n                        <p-dropdown [options]=\"classList\" [style]=\"{'width':'80px'}\" (onChange)=\"getSelectedClassSection($event)\" [(ngModel)]=\"patronClass\"></p-dropdown>\r\n                        <p-dropdown [options]=\"sectonList\" [style]=\"{'width':'80px'}\" [(ngModel)]=\"section\"></p-dropdown>\r\n                        <button type=\"button\" pButton label=\"go\" style=\"width:50px;height:29px;\" (click)=\"getSelectedDate($event)\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"click here\"></button>\r\n                    </div>\r\n\r\n                    <div class=\"ui-toolbar-group-right\">\r\n                        <input #gb type=\"text\" pInputText size=\"30\" placeholder=\"search\" style=\"width:200px\">\r\n                        <i class=\"fa fa-search\" style=\"margin:4px 4px 0 0;width:10px\"></i>\r\n                        <button type=\"button\" style=\"width:100px;height:29px;\" pButton icon=\"fa-file-o\" iconPos=\"left\" label=\"Export\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Download\" (click)=\"download()\"></button>\r\n                    </div>\r\n                </p-toolbar>\r\n                <br>\r\n                <p-tabView (onChange)=\"handleChange($event)\">\r\n                    <p-tabPanel header=\"Chart\" [selected]=\"selectedTab===0\">\r\n\r\n                        <div class=\"ui-fluid\">\r\n                            <p-toolbar style=\"margin-top:1px\">\r\n                                <div (click)=\"activateTab(1)\" class=\"ui-grid-col-3\" style=\"cursor:pointer;text-align:center;background-color:forestgreen;width:150px;height:50px;font-size:14px; color:#ffffff; font-weight:bold;padding:4px 10px;border-bottom: 0 none;margin-top:1px\">\r\n                                    Present  <br>   {{presentPatronCount}}\r\n                                </div>\r\n                                <div class=\"ui-grid-col-3\" style=\"text-align:center;width:3px;height:50px;padding:4px 10px;margin-top:2px\">\r\n                                    <i class=\"fa fa-plus-circle\" aria-hidden=\"true\" style=\"margin-top:11px;margin-left:-3px\"></i>\r\n                                </div>\r\n\r\n                                &nbsp;&nbsp;\r\n                                <div (click)=\"activateTab(2)\" class=\"ui-grid-col-4\" style=\"text-align:center; cursor:pointer;background-color:orangered;width:150px;height:50px;font-size:14px; color:#ffffff; font-weight:bold;padding:4px 10px;border-bottom: 0 none;margin-top:1px\">\r\n                                    Absent  <br>   {{absentpatron}}\r\n                                </div>\r\n                                <div class=\"ui-grid-col-3\" style=\"text-align:center;width:5px;height:50px; font-weight:bold;padding:4px 10px;margin-top:2px\">\r\n                                    <i class=\"fa fa-plus-circle\" aria-hidden=\"true\" style=\"margin-top:11px;margin-left:-3px\"></i>\r\n\r\n                                </div>\r\n                                &nbsp;&nbsp;\r\n                                <div (click)=\"activateTab(3)\" class=\"ui-grid-col-6\" style=\"text-align:center; cursor:pointer;background-color:orange;width:150px;height:50px;font-size:14px; color:#ffffff; font-weight:bold;padding:4px 10px;border-bottom: 0 none;margin-top:1px\">\r\n                                    On Leave <br>     {{presentOnleave}}\r\n\r\n                                </div>\r\n                                <div class=\"ui-grid-col-3\" style=\"text-align:center;width:5px;height:50px; font-weight:bold;padding:4px 10px;margin-top:2px\">\r\n                                    <i class=\"fa fa-plus-circle\" aria-hidden=\"true\" style=\"margin-top:11px;margin-left:-3px\"></i>\r\n\r\n                                </div>\r\n                                &nbsp;&nbsp;\r\n                                <div (click)=\"activateTab(4)\" class=\"ui-grid-col-3\" style=\"cursor:pointer;text-align:center;background-color:purple;width:150px;height:50px;font-size:14px; color:#ffffff; font-weight:bold;padding:4px 10px;border-bottom: 0 none;margin-top:1px\">\r\n                                    Absconded  <br>   {{absconedPatronCount}}\r\n                                </div>\r\n                                <div class=\"ui-grid-col-3\" style=\"text-align:center;width:3px;height:50px;padding:4px 10px;margin-top:2px\">\r\n                                    <b style=\"margin-top:15px;margin-left:-3px;width:5px;font-size:larger\">= </b>\r\n                                </div>\r\n                                &nbsp;&nbsp;\r\n                                <div class=\"ui-grid-col-8\" style=\"text-align:center; cursor:pointer;background-color:deepskyblue;width:150px;height:50px;font-size:14px; color:#ffffff; font-weight:bold;padding:4px 10px;border-bottom: 0 none;margin-top:1px\">\r\n                                    Total  <br>    {{totalPatron}}\r\n                                </div>\r\n                            </p-toolbar>\r\n                        </div>\r\n\r\n                        <br>\r\n                        <div class=\"ui-fluid\">\r\n                            <p-chart #chart type=\"bar\" [data]=\"data1\" (onDataSelect)=\"selectData1($event)\"></p-chart>\r\n                        </div>\r\n\r\n\r\n                    </p-tabPanel>\r\n                    <p-tabPanel header=\"Present\" [selected]=\"selectedTab===1\">\r\n                        <div class=\"ui-fluid \">\r\n                            <p-dataTable [(value)]=\"presentPatronImageList\" selectionMode=\"single\" [(selection)]=\"selectedTrackingDetail\" [paginator]=\"true\" [rows]=\"8\" [responsive]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [globalFilter]=\"gb\">\r\n                                <p-column field=\"imagePath\" header=\"Image\" [style]=\"{'width':'70px'}\">\r\n                                    <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                                        <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                                    </ng-template>\r\n                                </p-column>\r\n                                <p-column field=\"patronTracking.firstName\" header=\"FirstName\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"patronTracking.lastName\" header=\"LastName\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"patronTracking.rollNumber\" header=\"RollNumber\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"patronTracking.class\" header=\"Class\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"patronTracking.section\" header=\"Section\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"patronTracking.trackingTime\" header=\"Time\" [filter]=\"true\"></p-column>\r\n\r\n                            </p-dataTable>\r\n                        </div>\r\n                    </p-tabPanel>\r\n\r\n                    <p-tabPanel header=\"Absent\" [selected]=\"selectedTab===2\">\r\n                        <div class=\"ui-fluid \">\r\n\r\n                            <p-dataTable [value]=\"absentPatronList\" selectionMode=\"single\" [(selection)]=\"selectedAbsentStudent\" [rows]=\"8\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,20]\" [globalFilter]=\"gb\">\r\n                                <p-column field=\"imgUrl\" header=\"Image\" [style]=\"{'width':'70px'}\">\r\n                                    <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                                        <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                                    </ng-template>\r\n                                </p-column>\r\n                                <p-column field=\"firstName\" header=\"First Name\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"lastName\" header=\"Last Name\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"rollNo\" header=\"RollNo\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"class\" header=\"Class\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"section\" header=\"Section\" [filter]=\"true\"></p-column>\r\n\r\n\r\n                            </p-dataTable>\r\n                            <p-toolbar>\r\n                                <button type=\"button\" style=\"float:initial;width:140px;\" label=\"Mark Present\" pButton (click)=\"updateAttendance(selectedAbsentStudent)\"></button>\r\n                            </p-toolbar>\r\n                        </div>\r\n                    </p-tabPanel>\r\n\r\n\r\n                    <p-tabPanel header=\"On Leave\" [selected]=\"selectedTab===3\">\r\n                        <div class=\"ui-fluid \">\r\n                            <p-dataTable [value]=\"patronOnLeaveDescriptionList\" selectionMode=\"single\" [(selection)]=\"selectedOnLeaveStudent\" [rows]=\"8\" [paginator]=\"true\" [pageLinks]=\"5\" [rowsPerPageOptions]=\"[5,10,20]\" [globalFilter]=\"gb\">\r\n                                <p-column field=\"imagePath\" header=\"Image\" [style]=\"{'width':'70px'}\">\r\n                                    <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                                        <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                                    </ng-template>\r\n                                </p-column>\r\n                                <p-column field=\"patronInfo.firstName\" header=\"First Name\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"patronInfo.lastName\" header=\"Last Name\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"patronInfo.rollNo\" header=\"RollNo\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"patronInfo.class\" header=\"Class\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"patronInfo.section\" header=\"Section\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"description\" header=\"Description\" [filter]=\"true\"></p-column>\r\n                            </p-dataTable>\r\n                            <p-toolbar>\r\n                                <button type=\"button\" style=\"float:initial;width:140px;\" label=\"Mark Present\" pButton (click)=\"updateAttendance1(selectedOnLeaveStudent)\"></button>\r\n                            </p-toolbar>\r\n                        </div>\r\n                    </p-tabPanel>\r\n                    <p-tabPanel header=\"Absconded\" [selected]=\"selectedTab===4\">\r\n                        <div class=\"ui-fluid \">\r\n                            <p-dataTable [value]=\"absconedPatronDetailList\" selectionMode=\"single\" [rows]=\"8\" [paginator]=\"true\" [pageLinks]=\"5\" [rowsPerPageOptions]=\"[5,10,20]\" [globalFilter]=\"gb\">\r\n                                <p-column field=\"imgUrl\" header=\"Image\" [style]=\"{'width':'70px'}\">\r\n                                    <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                                        <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                                    </ng-template>\r\n                                </p-column>\r\n                                <p-column field=\"firstName\" header=\"First Name\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"lastName\" header=\"Last Name\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"rollNo\" header=\"RollNo\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"class\" header=\"Class\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"section\" header=\"Section\" [filter]=\"true\"></p-column>\r\n                            </p-dataTable>\r\n                        </div>\r\n                    </p-tabPanel>\r\n                </p-tabView>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>";

/***/ }),
/* 205 */
/***/ (function(module, exports) {

module.exports = "<div class=\"card card-w-title\">\r\n    \r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;margin-top:20px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div>\r\n                <button type=\"button\" pButton icon=\"fa-trash \" style=\"float:left\" (click)=\"deleteOutgoingMessage(selectedMessageDetail)\" label=\"Delete \"data-toggle=\"tooltip\" data-placement=\"right\" title=\"delete message\"></button>\r\n            </div>&nbsp;\r\n        </div>\r\n    </div>\r\n         <p-column [style]=\"{'width':'10px'}\" selectionMode=\"multiple\"></p-column>\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none\">\r\n        <div class=\"ui-grid-row\">\r\n            <header style=\"text-align:left;font-size:120%\">Draft Message</header>\r\n        </div>\r\n    </div>\r\n    <p-dataTable #dt [(value)]=\"outgoingMessageDetails\" [(selection)]=\"selectedMessageDetail\"   expandableRows=\"true\" [rows]=\"15\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [responsive]=\"true\">\r\n   \r\n        <p-column [style]=\"{'width':'5px'}\" selectionMode=\"multiple\"></p-column>\r\n        <p-column header=\"Action\" [style]=\"{'width':'35px'}\">\r\n            <ng-template let-messageDetail=\"rowData\" pTemplate type=\"body\">\r\n                <button type=\"button\" pButton icon=\"fa-plus\" style=\"float:left\" (click)=\"createMessage(messageDetail)\" label=\"Add\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Edit draft message\"></button>\r\n            </ng-template>\r\n        </p-column>\r\n        <p-column field=\"subject\" header=\"Subject\" [style]=\"{'width':'90px'}\"></p-column>\r\n        <p-column field=\"message\" header=\"Message\" [style]=\"{'width':'175px'}\"></p-column>\r\n        <p-column field=\"messageDate\" header=\"MessageDate\" [style]=\"{'width':'40px'}\"></p-column>\r\n    </p-dataTable>\r\n</div>\r\n<p-dialog header=\"OutgoingMessage\" [(visible)]=\"messageCenterDialog\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"700\" height=\"450\">\r\n    <div hidden=\"hidden\"><input id=\"id\" class=\"form-control\" type=\"text\" placeholder=\"id\" [(ngModel)]=\"outgoingMessage.id\" /></div>\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-3\">\r\n                Broadcast To :\r\n            </div>\r\n            <div class=\"ui-grid-col-8\">\r\n                <p-dropdown [options]=\"outgoingMessageTo\" [style]=\"{'width':'150px'}\" (onChange)=\"onSelectMode()\" [(ngModel)]=\"selectedBroadCast\"></p-dropdown>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"showClassSection\" class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-3\">\r\n                Class :\r\n            </div>\r\n            <div class=\"ui-grid-col-2\">\r\n                <p-multiSelect [options]=\"classSectionList\" [style]=\"{'width':'150px'}\" [(ngModel)]=\"selectedClassSection\"></p-multiSelect>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"showClass\" class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-3\">\r\n                Class :\r\n            </div>\r\n            <div class=\"ui-grid-col-2\">\r\n                <p-multiSelect [options]=\"classList\" [style]=\"{'width':'150px'}\" [(ngModel)]=\"selectedGrade\"></p-multiSelect>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"patron\" class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-3\">\r\n                Patron :\r\n            </div>\r\n            <div class=\"ui-grid-col-15\">\r\n                <button type=\"button\" pButton style=\"float:left;width:90px\" icon=\"fa-user-plus\" (click)=\"openSearchBox()\" label=\"Select\"></button>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"showIsResponseNeed\" class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-3\">\r\n                Is Response Need :\r\n            </div>\r\n            <div class=\"ui-grid-col-2\">\r\n                <p-checkbox name=\"isResponseNeed\" value=\"isResponseNeed\" binary=\"true\" [(ngModel)]=\"outgoingMessage.isResponseNeed\"></p-checkbox>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-3\">\r\n                subject :\r\n            </div>\r\n            <div class=\"ui-grid-col-6\">\r\n                <input pInputText type=\"text\" placeholder=\"Required\" [(ngModel)]=\"outgoingMessage.subject\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-grid-fluid\" style=\"margin:10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-3\">\r\n                Message:\r\n            </div>\r\n            <div class=\"ui-grid-col-8\">\r\n                <textarea rows=\"5\" cols=\"40\" pInputTextarea [(ngModel)]=\"outgoingMessage.message\"></textarea>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col\">\r\n            </div>\r\n            <div>\r\n                <button type=\"button\" style=\"float:initial;\" label=\"Save\" pButton (click)=\"sendMessageToPatron(0)\"></button>\r\n            </div>\r\n            <div>\r\n                <button type=\"button\" style=\"float:initial;\" label=\"Send\" pButton (click)=\"sendMessageToPatron(1)\"></button>\r\n            </div>\r\n            <div>\r\n                <button type=\"button\" label=\"Cancel\" pButton (click)=\"onCancel($event)\"></button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</p-dialog>\r\n\r\n<p-dialog [(visible)]=\"displayDialog\" header=\"Acknowledge Detail\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"500\" height=\"600\">\r\n    <p-dataTable #dt [(value)]=\"deviceDetails\" selectionMode=\"single\" [rows]=\"15\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [responsive]=\"true\">\r\n        <p-column field=\"receivedBy\" header=\"Recived By\"></p-column>\r\n        <p-column field=\"acknowledgeTime\" header=\"Acknowledge Time\"></p-column>\r\n        <p-column header=\"Acknowledge\">\r\n            <ng-template let-deviceDetail=\"rowData\" pTemplate type=\"body\">\r\n                <p-checkbox name=\"isAcknowledge\" value=\"isAcknowledge\" binary=\"true\" [(ngModel)]=\"deviceDetail.isAcknowledge\"></p-checkbox>\r\n            </ng-template>\r\n        </p-column>\r\n    </p-dataTable>\r\n</p-dialog>\r\n<!--\r\n<p-dialog header=\"AddPatron\" [(visible)]=\"patronMapDialog\" [resizable]=\"false\" [responsive]=\"true\" showEffect=\"fade\" [modal]=\"true\" width=\"750\" height=\"645\">\r\n    <div class=\"ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;margin-top:20px\">\r\n        <input #gbb type=\"text\" pInputText size=\"30\" style=\"float:left\" placeholder=\"search\">\r\n        <i class=\"fa fa-search\" style=\"float:left;margin:4px 4px 0 0\"></i>\r\n    </div>\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <p-dataTable #dt [(value)]=\"patronDetails\" [(selection)]=\"selectedPatronDetail\" [rows]=\"7\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15,20]\" [responsive]=\"true\" [globalFilter]=\"gbb\">\r\n                <p-column [style]=\"{'width':'38px'}\" selectionMode=\"single\"></p-column>\r\n                <p-column field=\"imgUrl\" header=\"Image\" [style]=\"{'width':'77px'}\">\r\n                    <template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                        <img src=\"https://tstschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" height=\"40\" width=\"40\" />\r\n                    </template>\r\n                </p-column>\r\n                <p-column field=\"firstName\" header=\"First Name\" [sortable]=\"true\"></p-column>\r\n                <p-column field=\"lastName\" header=\"Last Name\" [sortable]=\"true\"></p-column>\r\n                <p-column field=\"rollNo\" header=\"Roll No\" [sortable]=\"true\"></p-column>\r\n                <p-column field=\"class\" header=\"Class\" [sortable]=\"true\"></p-column>\r\n                <p-column field=\"section\" header=\"Section\" [sortable]=\"true\"></p-column>\r\n\r\n                <footer>\r\n                    <div class=\"ui-helper-clearfix\" style=\"width:100%\">\r\n                        <div class=\"ui-grid-col-5\">\r\n                            <div>\r\n                                <button type=\"button\" pButton style=\"float:left;width:80px\" (click)=\"mapPatron()\" label=\"Add\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"MapPatron\"></button>\r\n                                <button type=\"button\" label=\"Cancel\" style=\"float:left;width:80px\" pButton (click)=\"onSearchCancel($event)\"></button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </footer>\r\n            </p-dataTable>\r\n        </div>\r\n    </div>\r\n</p-dialog>-->\r\n\r\n<p-dialog header=\"Patron List\" [(visible)]=\"patronMapDialog\" [resizable]=\"false\" [responsive]=\"true\" showEffect=\"fade\" [modal]=\"true\" width=\"750\" height=\"600\">\r\n\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;\">\r\n        <div class=\"ui-grid-row\">\r\n            <div>\r\n                <button type=\"button\" pButton style=\"float:left;width:80px\" (click)=\"mapPatron()\" label=\"Add\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"MapPatron\"></button>\r\n            </div>&nbsp;&nbsp;\r\n            <div>\r\n                <button type=\"button\" label=\"Cancel\" style=\"float:left;width:80px\" pButton (click)=\"onSearchCancel($event)\"></button>\r\n            </div>&nbsp;\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid-row\">\r\n        <p-dataTable #dt [(value)]=\"patronDetails\" [(selection)]=\"selectedPatronDetail\" [rows]=\"8\" [paginator]=\"true\" [pageLinks]=\"3\" [responsive]=\"true\" [globalFilter]=\"gbb\">\r\n            <p-column [style]=\"{'width':'38px'}\" selectionMode=\"single\"></p-column>\r\n            <p-column field=\"imgUrl\" [style]=\"{'width':'77px'}\">\r\n                <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                    <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                </ng-template>\r\n            </p-column>\r\n            <p-column field=\"firstName\" header=\"First Name\" [filter]=\"true\" [sortable]=\"true\"></p-column>\r\n            <p-column field=\"lastName\" header=\"LastName\" [filter]=\"true\" [sortable]=\"true\"></p-column>\r\n            <p-column field=\"rollNo\" header=\"RollNo\" [filter]=\"true\" [sortable]=\"true\"></p-column>\r\n            <p-column field=\"class\" header=\"Class\" [filter]=\"true\" [sortable]=\"true\"></p-column>\r\n            <p-column field=\"section\" header=\"Section\" [filter]=\"true\" [sortable]=\"true\"></p-column>\r\n        </p-dataTable>\r\n    </div>\r\n</p-dialog>\r\n<p-confirmDialog width=\"425\"></p-confirmDialog>\r\n<p-growl [value]=\"msgs\" life=\"3000\"></p-growl>";

/***/ }),
/* 206 */
/***/ (function(module, exports) {

module.exports = "<div class=\"card card-w-title\">\r\n    \r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;margin-top:20px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div>\r\n                <button type=\"button\" pButton icon=\"fa-plus\" style=\"float:left\" (click)=\"addEvent()\" label=\"Add\" data-placement=\"right\" title=\"Add Event\" data-toggle=\"tooltip\"></button>\r\n            </div>&nbsp;&nbsp;\r\n\r\n            <div class=\"ui-grid-col-4\">\r\n                <button type=\"button\" pButton icon=\"fa-trash\" style=\"float:left\" (click)=\"deleteEvent(selectedEventDetail)\" label=\"Delete\" data-placement=\"right\" title=\"Delete Event\" data-toggle=\"tooltip\"></button>\r\n            </div>\r\n\r\n            <div class=\"ui-grid-col-4\">\r\n\r\n            </div>&nbsp;\r\n\r\n            <div class=\"ui-grid-col-5\">\r\n                <input #gb type=\"text\" pInputText size=\"30\" style=\"float:right\" placeholder=\"search\">\r\n                <i class=\"fa fa-search\" style=\"float:right;margin:4px 4px 0 0\"></i>\r\n            </div>\r\n            &nbsp;\r\n            <div>\r\n                <button type=\"button\" style=\"float:right;\" pButton icon=\"fa-file-o\" iconPos=\"left\" label=\"Export\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Download\" (click)=\"download()\"></button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none\">\r\n        <div class=\"ui-grid-row\">\r\n            <header style=\"text-align:left;font-size:120%\">Events</header>\r\n        </div>\r\n    </div>\r\n    <p-dataTable #dt [(value)]=\"eventDetails\" [(selection)]=\"selectedEventDetail\" [rows]=\"15\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [responsive]=\"true\" [loading]=\"loading\">\r\n       \r\n        <p-column [style]=\"{'width':'10px'}\" selectionMode=\"multiple\"></p-column>\r\n        <p-column header=\"Action\" [style]=\"{'width':'50px'}\">\r\n            <ng-template let-eventDetail=\"rowData\" pTemplate type=\"body\">\r\n                <button type=\"button\" pButton (click)=\"addParticipants(eventDetail)\" icon=\"fa-user-plus\" data-placement=\"right\" title=\"Add Participants\" data-toggle=\"tooltip\"></button>\r\n                <button type=\"button\" pButton (click)=\"updateEvent(eventDetail)\" icon=\"fa-pencil-square-o\" data-placement=\"right\" title=\"Edit Event\" data-toggle=\"tooltip\"></button>\r\n            </ng-template>\r\n        </p-column>\r\n\r\n        <p-column field=\"title\" header=\"Title\" [style]=\"{'width':'90px'}\"></p-column>\r\n        <p-column field=\"occurenceType\" header=\"Occurence\" [style]=\"{'width':'60px'}\"></p-column>\r\n        <p-column field=\"startDate\" header=\"StartDate\" [style]=\"{'width':'60px'}\"></p-column>\r\n        <p-column field=\"endDate\" header=\"EndDate\" [style]=\"{'width':'60px'}\"></p-column>\r\n        <p-column field=\"startTime\" header=\"StartTime\" [style]=\"{'width':'50px'}\"></p-column>\r\n        <p-column field=\"endTime\" header=\"EndTime\" [style]=\"{'width':'50px'}\"></p-column>\r\n\r\n    </p-dataTable>\r\n</div>\r\n<p-dialog header=\"Participants List\" [(visible)]=\"participants\" [resizable]=\"false\" [responsive]=\"true\" showEffect=\"fade\" [modal]=\"true\" width=\"750\" height=\"500\">\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n\r\n        <!--<div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;\">\r\n            <div class=\"ui-grid-row\">\r\n                <div>\r\n                    <button type=\"button\" pButton style=\"float:left;width:80px\" icon=\"fa-plus\" (click)=\"openSearchBox()\" label=\"Add\"></button>\r\n                </div>&nbsp;&nbsp;\r\n                <div>\r\n                    <button type=\"button\" pButton style=\"float:left;width:90px\" icon=\"fa-trash\" (click)=\"declinepatron(selectedPatronDetail)\" label=\"Decline\"></button>\r\n                </div>&nbsp;\r\n                <div>\r\n                    <button type=\"button\" pButton style=\"float:left;width:80px\" label=\"Cancel\" (click)=\"onCancel($event)\"></button>\r\n                </div>\r\n                <div class=\"ui-grid-col-6\">\r\n                </div>&nbsp;\r\n                <div>\r\n                    <button type=\"button\" style=\"float:right;\" pButton icon=\"fa-file-o\" iconPos=\"left\" label=\"Export\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Download\" (click)=\"download()\"></button>\r\n                </div>\r\n            </div>\r\n        </div>-->\r\n        <p-toolbar>\r\n            <div class=\"ui-toolbar-group-left\">\r\n                <button type=\"button\" pButton style=\"float:left;width:80px\" icon=\"fa-plus\" (click)=\"openSearchBox()\" label=\"Add\"></button>\r\n                <button type=\"button\" pButton style=\"float:left;width:93px\" icon=\"fa-trash\" (click)=\"declinepatron(selectedPatronDetail)\" label=\"Decline\"></button>\r\n                <button type=\"button\" pButton style=\"float:left;width:80px\" label=\"Cancel\" (click)=\"onCancel($event)\"></button>\r\n            </div>\r\n\r\n            <div class=\"ui-toolbar-group-right\">\r\n                <button type=\"button\" style=\"float:right;width:90px\" pButton icon=\"fa-file-o\" iconPos=\"left\" label=\"Export\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Download\" (click)=\"download()\"></button>\r\n            </div>\r\n        </p-toolbar><div class=\"ui-grid-row\">\r\n            <p-dataTable #dt [(value)]=\"patronDetailList\" [(selection)]=\"selectedPatronDetail\" [rows]=\"8\" [paginator]=\"true\" [pageLinks]=\"3\" [responsive]=\"true\" [globalFilter]=\"gbb\">\r\n                <p-column [style]=\"{'width':'5px'}\" selectionMode=\"single\"></p-column>\r\n                <p-column field=\"imgUrl\" [style]=\"{'width':'30px'}\">\r\n                    <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                        <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                    </ng-template>\r\n                </p-column>\r\n                <p-column field=\"firstName\" header=\"First Name\" [sortable]=\"true\" [filter]=\"true\" [style]=\"{'width':'45px'}\"></p-column>\r\n                <p-column field=\"lastName\" header=\"LastName\" [sortable]=\"true\" [filter]=\"true\" [style]=\"{'width':'45px'}\"></p-column>\r\n                <p-column field=\"rollNo\" header=\"RollNo\" [sortable]=\"true\" [filter]=\"true\" [style]=\"{'width':'40px'}\"></p-column>\r\n                <p-column field=\"class\" header=\"Class\" [sortable]=\"true\" [filter]=\"true\" [style]=\"{'width':'40px'}\"></p-column>\r\n                <p-column field=\"section\" header=\"Section\" [sortable]=\"true\" [filter]=\"true\" [style]=\"{'width':'40px'}\"></p-column>\r\n\r\n            </p-dataTable>\r\n        </div>\r\n    </div>\r\n</p-dialog>\r\n\r\n<p-dialog header=\"Patron List\" [(visible)]=\"patronMapDialog\" [resizable]=\"false\" [responsive]=\"true\" showEffect=\"fade\" [modal]=\"true\" width=\"750\" height=\"600\">\r\n\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;\">\r\n        <div class=\"ui-grid-row\">\r\n            <div>\r\n                <button type=\"button\" pButton style=\"float:left;width:80px\" (click)=\"mapPatron(eventDetail,selectedPatronDetail)\" label=\"Add\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"MapPatron\"></button>\r\n            </div>&nbsp;&nbsp;\r\n            <div>\r\n                <button type=\"button\" label=\"Cancel\" style=\"float:left;width:80px\" pButton (click)=\"onSearchCancel($event)\"></button>\r\n            </div>&nbsp;\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid-row\">\r\n        <p-dataTable #dt [(value)]=\"patronDetails\" [(selection)]=\"selectedPatronDetail\" [rows]=\"7\" [paginator]=\"true\" [pageLinks]=\"3\" [responsive]=\"true\" [globalFilter]=\"gbb\">\r\n            <p-column [style]=\"{'width':'38px'}\" selectionMode=\"single\"></p-column>\r\n            <p-column field=\"imgUrl\" [style]=\"{'width':'77px'}\">\r\n                <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                    <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                </ng-template>\r\n            </p-column>\r\n            <p-column field=\"firstName\" header=\"First Name\" [sortable]=\"true\"></p-column>\r\n            <p-column field=\"lastName\" header=\"LastName\" [sortable]=\"true\"></p-column>\r\n            <p-column field=\"rollNo\" header=\"RollNo\" [sortable]=\"true\"></p-column>\r\n            <p-column field=\"class\" header=\"Class\" [sortable]=\"true\"></p-column>\r\n            <p-column field=\"section\" header=\"Section\" [sortable]=\"true\"></p-column>\r\n\r\n        </p-dataTable>\r\n    </div>\r\n\r\n</p-dialog>\r\n<p-dialog [(visible)]=\"deline\"header=\"Decline Event\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"600\" height=\"300\">\r\n   \r\n    <div hidden=\"hidden\"><input id=\"id\" class=\"form-control\" type=\"text\" placeholder=\"id\" [(ngModel)]=\"declineRequest\" /></div>\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-3\">\r\n                Deline Mode :\r\n            </div>\r\n            <div class=\"ui-grid-col-9\">\r\n                <p-dropdown [options]=\"delineMode\" [style]=\"{'width':'150px'}\" [(ngModel)]=\"selectedMode\"></p-dropdown>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-3\">\r\n                Description :\r\n            </div>\r\n            <div class=\"ui-grid-col-6\">\r\n                <textarea pInputText type=\"text\" placeholder=\"Required\" autoResize=\"autoResize\" [(ngModel)]=\"declineRequest.declineReason\"></textarea>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <footer>\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col\">\r\n                </div>\r\n                <div>\r\n                    <button type=\"button\" label=\"Save\" pButton (click)=\"delinedPatron()\" Width=\"89px\"></button>\r\n                </div>\r\n                <div>\r\n                    <button type=\"button\" label=\"Cancel\" pButton (click)=\"Cancel($event)\"></button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </footer>\r\n</p-dialog>\r\n<p-dialog [(visible)]=\"eventDialog\" header=\"Event\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"800\" height=\"610\">\r\n    <div hidden=\"hidden\"><input id=\"id\" class=\"form-control\" type=\"text\" placeholder=\"id\" [(ngModel)]=\"eventDetail.id\" /></div>\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-2\">\r\n                Title :\r\n            </div>\r\n            <div class=\"ui-grid-col-6\">\r\n                <input pInputText type=\"text\" placeholder=\"Required\" [(ngModel)]=\"eventDetail.title\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-2\">\r\n                Description :\r\n            </div>\r\n            <div class=\"ui-grid-col-6\">\r\n                <textarea pInputText type=\"text\" placeholder=\"Required\" autoResize=\"autoResize\" [(ngModel)]=\"eventDetail.description\"></textarea>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-2\">\r\n                Occurence :\r\n            </div>\r\n            <div class=\"ui-grid-col-9\">\r\n                <p-dropdown [options]=\"occurenceType\" [style]=\"{'width':'120px'}\" (onChange)=\"onSelectMode()\" [(ngModel)]=\"selectedOccurence\"></p-dropdown>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"showWeek\" class=\"ui-grid ui-grid-responsive ui-grid-pad \" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-2\">\r\n                Days of Week :\r\n            </div>\r\n            <div class=\"ui-grid-col-13\">\r\n                <p-selectButton [options]=\"days\" [(ngModel)]=\"selectedDays\" multiple=\"multiple\"></p-selectButton>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"showMonth\" class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-2\">\r\n                DayOfMonth :\r\n            </div>\r\n            <div>\r\n                <p-multiSelect [options]=\"months\" [(ngModel)]=\"selectedMonths\"></p-multiSelect>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-2\">\r\n                Start Date :\r\n            </div>\r\n            <div class=\"ui-grid-col-4\">\r\n                <p-calendar dateFormat=\"dd/mm/yy\" [showIcon]=\"true\" [(ngModel)]=\"eventDetail.startDate\"></p-calendar>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-2\">\r\n                End Date :\r\n            </div>\r\n            <div class=\"ui-grid-col-4\">\r\n                <p-calendar dateFormat=\"dd/mm/yy\" [showIcon]=\"true\" [(ngModel)]=\"eventDetail.endDate\"></p-calendar>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-2\">\r\n                Start Time :\r\n            </div>\r\n            <div class=\"ui-grid-col-2\">\r\n                <p-calendar [timeOnly]=\"true\" hourFormat=\"24\" [(ngModel)]=\"eventDetail.startTime\"></p-calendar>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-2\">\r\n                End Time :\r\n            </div>\r\n            <div class=\"ui-grid-col-2\">\r\n                <p-calendar [timeOnly]=\"true\" hourFormat=\"24\" [(ngModel)]=\"eventDetail.endTime\"></p-calendar>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-2\">\r\n                Remark :\r\n            </div>\r\n            <div class=\"ui-grid-col-6\">\r\n                <input pInputText type=\"text\" placeholder=\"Required\" [(ngModel)]=\"eventDetail.remarks\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div>\r\n                <button type=\"button\" label=\"Save\" pButton (click)=\"createEvent()\"></button>\r\n            </div>\r\n            <div>\r\n                <button type=\"button\" label=\"Cancel\" pButton (click)=\"eventCancel($event)\"></button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</p-dialog>\r\n<p-confirmDialog width=\"425\"></p-confirmDialog>\r\n<p-growl [value]=\"msgs\" life=\"3000\"></p-growl>\r\n";

/***/ }),
/* 207 */
/***/ (function(module, exports) {

module.exports = "\r\n<div class=\"ui-fluid\">\r\n    <div class=\"ui-g\">\r\n        <div class=\"ui-g-12\">\r\n            <div class=\"card card-w-title\">\r\n                <p-toolbar>\r\n                    <div class=\"ui-toolbar-group-left\">\r\n                        <p-dropdown [options]=\"eventList\" (onChange)=\"getSelectedDate($event)\" [(ngModel)]=\"selectedEvent\" [style]=\"{'width':'160px'}\"></p-dropdown>\r\n                    </div>\r\n                    <div class=\"ui-toolbar-group-right\">\r\n                        <input #gb type=\"text\" pInputText size=\"30\" placeholder=\"search\" style=\"width:200px\">\r\n                        <i class=\"fa fa-search\" style=\"margin:4px 4px 0 0;width:10px\"></i>\r\n                        <button type=\"button\" style=\"width:100px;height:29px;\" pButton icon=\"fa-file-o\" iconPos=\"left\" label=\"Export\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Download\" (click)=\"download()\"></button>\r\n                    </div>\r\n                </p-toolbar>\r\n                <br>\r\n                <p-tabView (onChange)=\"handleChange($event)\">\r\n                    <p-tabPanel header=\"Chart\" [selected]=\"selectedTab===0\">\r\n\r\n                        <div class=\"ui-fluid\">\r\n                            <p-toolbar style=\"margin-top:20px\">\r\n                                <div (click)=\"activateTab(1)\" class=\"ui-grid-col-3\" style=\"cursor:pointer;text-align:center;background-color:forestgreen;width:150px;height:50px;font-size:14px; color:#ffffff; font-weight:bold;padding:4px 10px;border-bottom: 0 none;margin-top:1px\">\r\n                                    Present  <br>   {{presentPersonCount}}\r\n                                </div>\r\n                                <div class=\"ui-grid-col-3\" style=\"text-align:center;width:3px;height:50px;padding:4px 10px;margin-top:2px\">\r\n                                    <i class=\"fa fa-plus-circle\" aria-hidden=\"true\" style=\"margin-top:11px;margin-left:-3px\"></i>\r\n                                </div>\r\n\r\n                                &nbsp;&nbsp;\r\n                                <div (click)=\"activateTab(2)\" class=\"ui-grid-col-4\" style=\"text-align:center; cursor:pointer;background-color:orangered;width:150px;height:50px;font-size:14px; color:#ffffff; font-weight:bold;padding:4px 10px;border-bottom: 0 none;margin-top:1px\">\r\n                                    Absent  <br>   {{absentPersonCount}}\r\n                                </div>\r\n                            </p-toolbar>\r\n                        </div>\r\n\r\n                        <br>\r\n                        <div class=\"ui-fluid\">\r\n                            <p-chart #chart type=\"bar\" [data]=\"barGraph\"></p-chart>\r\n\r\n                        </div>\r\n\r\n\r\n                    </p-tabPanel>\r\n                    <p-tabPanel header=\"Present\" [selected]=\"selectedTab===1\">\r\n                        <div class=\"ui-fluid \">\r\n                            <p-dataTable sortMode=\"multiple\" [(value)]=\"trackingTypeDetails\" selectionMode=\"single\" [(selection)]=\"selectedTrackingDetail\"  [rows]=\"15\" [responsive]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [globalFilter]=\"gb\">\r\n\r\n                                <p-column field=\"imgUrl\" header=\"Image\" [style]=\"{'width':'77px'}\">\r\n                                    <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                                        <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                                    </ng-template>\r\n                                </p-column>\r\n                                <p-column field=\"title\" header=\"Title\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"name\" header=\"Name\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"rollNumber\" header=\"RollNumber\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"class\" header=\"Class\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"section\" header=\"Section\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"role\" header=\"Role\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"trackingTime\" header=\"Time\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"trackingDate\" header=\"Date\" [sortable]=\"true\"></p-column>\r\n\r\n                            </p-dataTable>\r\n                        </div>\r\n                    </p-tabPanel>\r\n\r\n                    <p-tabPanel header=\"Absent\" [selected]=\"selectedTab===2\">\r\n                        <div class=\"ui-fluid \">\r\n\r\n                            <p-dataTable sortMode=\"multiple\" [(value)]=\"absentPatronList\" selectionMode=\"single\" [(selection)]=\"selectedTrackingDetail\" [paginator]=\"true\" [rows]=\"15\" [responsive]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [globalFilter]=\"gb\">\r\n                                <p-column field=\"imgUrl\" [style]=\"{'width':'77px'}\">\r\n                                    <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                                        <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                                    </ng-template>\r\n                                </p-column>\r\n                                <p-column field=\"firstName\" header=\"FirstName\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"lastName\" header=\"LastName\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"rollNo\" header=\"RollNumber\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"class\" header=\"Class\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"section\" header=\"Section\" [filter]=\"true\"></p-column>\r\n                            </p-dataTable>\r\n                            \r\n                        </div>\r\n                    </p-tabPanel>\r\n                </p-tabView>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>";

/***/ }),
/* 208 */
/***/ (function(module, exports) {

module.exports = "<div class=\"ui-g ui-fluid dashboard\" style=\"margin-top: 0px;\">\r\n   \r\n    <!--<div class=\"ui-g-12 ui-md-4\">\r\n        <div class=\"card clearfix summary\">\r\n            <span class=\"title\">Bus</span>\r\n            <span class=\"detail\">Route Bus status</span>\r\n            <span class=\"count purchases\">{{busStatusLength}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-g-12 ui-md-4\">\r\n        <div class=\"card clearfix summary\">\r\n            <span class=\"title\">Message</span>\r\n            <span class=\"detail\">Message for today</span>\r\n            <span class=\"count revenue\">{{messagelength}}</span>\r\n        </div>\r\n    </div>-->\r\n    <div class=\"ui-g-12 ui-md-6 ui-lg-3\">\r\n        <div class=\"highlight-box\" style=\"height:75%;\"  (click)=\"op3.toggle($event)\">\r\n            <div class=\"initials\" style=\"background-color:#20d077;color:#038d4a; font-size:30px;padding-top:10px;\">MP</div>\r\n            <div class=\"card\">\r\n                <!--<span class=\"fa fa-question-circle-o\"></span>-->\r\n                <span style=\"margin-top:-10px\">Missing Patron</span>\r\n                <span class=\"count\" style=\"font-size:20px;align-content:flex-start;margin-top: 2px;margin-left: 35px;\">{{missinglength}}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12 ui-md-6 ui-lg-3\">\r\n        <div class=\"highlight-box\" style=\"height:75%;\"  (click)=\"op2.toggle($event)\">\r\n            <div class=\"initials\" style=\"background-color:#007be5;color:#00448f;font-size:30px;padding-top: 10px;\">LP</div>\r\n            <div class=\"card\">\r\n                <span style=\"margin-top:-10px; margin-left:-5px;\">Patron on Leave</span>\r\n                <span class=\"count\" style=\"font-size:20px;align-content:flex-start;margin-top: 2px;margin-left: 35px;\">{{leaveLength}}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12 ui-md-6 ui-lg-3\">\r\n        <div class=\"highlight-box\" style=\"height:75%;\" (click)=\"op1.toggle($event)\" >\r\n            <div class=\"initials\" style=\"background-color:#ef6262;color:#a83d3b;font-size:30px;padding-top:10px;\">WP</div>\r\n            <div class=\"card\">\r\n                <!--<span class=\"fa fa-question-circle\"></span>-->\r\n                <span style=\"margin-top:-10px\">Walker Patron</span>\r\n                <span class=\"count\" style=\"font-size:20px;align-content:flex-start;margin-top: 2px;margin-left: 35px;\">{{walkerlength}}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12 ui-md-6 ui-lg-3\">\r\n        <div class=\"highlight-box\" style=\"height:75%;\" (click)=\"op4.toggle($event)\">\r\n            <div class=\"initials\" style=\"background-color:#f9c851;color:#b58c2b; font-size:30px;padding-top:10px;\">PP</div>\r\n            <div class=\"card\">\r\n                <!--<span class=\"fa fa-check\"></span>-->\r\n                <span style=\"margin-top:-10px\">Present Patron</span>\r\n                <span class=\"count\" style=\"font-size:20px;align-content:flex-start;margin-top: 2px;margin-left: 35px;\">{{presentPatronCount}}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n \r\n\r\n</div>\r\n\r\n\r\n<div class=\"ui-g ui-fluid dashboard\" style=\"margin-top: -24px;\">\r\n    <div class=\"ui-g-12 ui-md-3\" style=\"margin-top: -18px;\">\r\n        <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;margin-top:20px\">\r\n            <div class=\"ui-grid-row\">\r\n\r\n                <!--<div class=\"ui-grid-col-5\">\r\n                    Route Detail\r\n                </div>-->\r\n                <div class=\"ui-grid-col-9\" >\r\n                    <button type=\"button\" *ngIf=\"button\" pButton pTooltip=\"All Route Map\" tooltipPosition=\"top\"  (click)=\"selectRoute(transportRoute)\"label=\"All Route\" style=\"width:90px;float:left;\"></button>\r\n                </div>\r\n                &nbsp;\r\n                <div class=\"ui-grid-col-3\">\r\n                    <p-toggleButton [(ngModel)]=\"checked\" onLabel=\"Active\" (onChange)=\"handleChange($event)\" offLabel=\"All\" [style]=\"{'width':'65px','height':'27px','float':'right'}\" ></p-toggleButton>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" [style]=\"{'height':'495px'}\">\r\n            <p-orderList [value]=\"transportRouteCurrentLocationList\" [listStyle]=\"{'height':'447px'}\" [responsive]=\"true\" \r\n                         filter=\"filter\" filterBy=\"PatronFirstName,PatronLastName,Route,ComingStoppage,RouteDriver.firstName,RouteStaff.firstName,RouteCoordinator.firstName,RouteDriver.lastName,RouteStaff.lastName,RouteCoordinator.lastName\" dragdrop=\"true\">\r\n                <ng-template let-route pTemplate=\"item\" >\r\n                    <div class=\"ui-helper-clearfix\" style=\"border-bottom:1px solid;border-bottom-color: lightgray ;color:black; background:white !important; background-color:white !important; border-bottom-color:lightgray !important;\">\r\n                        <div class=\"ui-g-16\" (click)=\"selectRoute(route)\" >\r\n                            <div class=\"ui-g-4\" style=\"padding-top: 0;\">\r\n                                <span pTooltip=\"Route\" tooltipPosition=\"top\"><img src=\"{{route.RouteImage}}\" height=\"25\" width=\"25\" /></span>\r\n                            </div>\r\n                            <div class=\"ui-g-1\" style=\"text-align: right;padding-top: 0;\">\r\n                                <span pTooltip=\"Next Stop\" tooltipPosition=\"top\"><img src=\"{{route.ComingStopImage}}\" /></span>\r\n                            </div>\r\n                            <div hidden=\"hidden\">{{route.Route}}</div>\r\n                            <div hidden=\"hidden\">{{route.RouteDriver.firstName}}</div>\r\n                            <div hidden=\"hidden\">{{route.RouteStaff.firstName}}</div>\r\n                            <div hidden=\"hidden\">{{route.RouteCoordinator.firstName}}</div>\r\n                            <div hidden=\"hidden\">{{route.RouteDriver.lastName}}</div>\r\n                            <div hidden=\"hidden\">{{route.RouteStaff.lastName}}</div>\r\n                            <div hidden=\"hidden\">{{route.RouteCoordinator.lastName}}</div>\r\n                            <div hidden=\"hidden\">{{route.PatronFirstName}}</div>\r\n                            <div hidden=\"hidden\">{{route.PatronLastName}}</div>\r\n\r\n                            <!--<div *ngFor=\" let pat of route.Patron\" class=\"mdl-cell mdl-cell--4-col\">\r\n                                <div class=\"ui-g-7\" style=\"text-align: right;padding-top: 0;\">{{pat.firstName}}</div>\r\n                                <div class=\"ui-g-7\" style=\"text-align: right;padding-top: 0;\">{{pat.lastName}}</div>\r\n                            </div>-->\r\n\r\n\r\n                            \r\n                            <div class=\"ui-g-7\" style=\"text-align: right;padding-top: 0;\">{{route.ComingStoppage}}</div>\r\n                            <div class=\"ui-g-10\" style=\"padding-top: 0;\">\r\n                                <span><img src=\"{{timerImage1}}\" height=\"20\" width=\"20\" /></span>\r\n                                <span style=\"padding-left:3px\" pTooltip=\"Scheduled Time Arrival\" tooltipPosition=\"top\">  STA:</span><b style=\"padding-left:3px\">{{route.SchduledTime}}</b>\r\n                            </div>\r\n                            <div class=\"ui-g-12\" [style.background-color]=\"route.ColumnColor\">\r\n                                <span><img src=\"{{route.StopImage}}\" height=\"20\" width=\"20\" /></span>\r\n                                <span style=\"padding-left:3px\" pTooltip=\"Estimated Time Arrival\" tooltipPosition=\"top\">\r\n                                    ETA:\r\n                                </span>\r\n                                <b style=\"padding-left:3px\">\r\n                                    {{route.EstimatedTime}}\r\n                                </b>\r\n                                <span style=\"padding-left:49px\">\r\n                                    Patron:\r\n                                </span>\r\n                                <b style=\"padding-left:3px\">\r\n                                    {{route.PatronCount}}\r\n                                </b>\r\n                            </div>\r\n                         </div>\r\n\r\n                    </div>                  \r\n                </ng-template>\r\n            </p-orderList>\r\n            <!--<div style=\"overflow-y: scroll;height:488px\">\r\n              <div class=\"activity-header\" style=\"border-bottom: 1px solid #e3e3e3;padding-bottom:10px;padding-top:5px; cursor:pointer\" *ngFor=\"let transportRoute of transportRouteCurrentLocationList\" (click)=\"selectRoute(transportRoute)\" >\r\n                    <div class=\"ui-g\" >\r\n                        <div class=\"ui-g-16\" [style.background-color]=\"bgColor1\">\r\n                            <div class=\"ui-g-4\" style=\"padding-top: 0;\">\r\n                                <span pTooltip=\"Route\" tooltipPosition=\"top\" ><img src=\"{{transportRoute.RouteImage}}\" height=\"25\" width=\"25\" /></span>\r\n                            </div>\r\n                            <div class=\"ui-g-1\" style=\"text-align: right;padding-top: 0;\">\r\n                                <span pTooltip=\"Next Stop\" tooltipPosition=\"top\" ><img src=\"{{transportRoute.ComingStopImage}}\" /></span>\r\n                            </div>\r\n                            <div class=\"ui-g-7\" style=\"text-align: right;padding-top: 0;\">\r\n                                <span>{{transportRoute.ComingStoppage}}</span>\r\n                            </div>\r\n                            <div class=\"ui-g-10\" style=\"padding-top: 0;\">\r\n                                <span><img src=\"{{timerImage1}}\" height=\"20\" width=\"20\" /></span>\r\n                                <span style=\"padding-left:3px\" pTooltip=\"Scheduled Time Arrival\" tooltipPosition=\"top\" >  STA:</span><b style=\"padding-left:3px\">{{transportRoute.SchduledTime}}</b>\r\n                            </div>\r\n                            <div class=\"ui-g-12\" [style.background-color]=\"transportRoute.ColumnColor\" >\r\n                                <span><img src=\"{{transportRoute.StopImage}}\" height=\"20\" width=\"20\" /></span>\r\n                                <span style=\"padding-left:3px\" pTooltip=\"Estimated Time Arrival\" tooltipPosition=\"top\">\r\n                                    ETA:\r\n                                </span>\r\n                                <b style=\"padding-left:3px\" >\r\n                                    {{transportRoute.EstimatedTime}}\r\n                                </b>\r\n                                <span style=\"padding-left:49px\">\r\n                                    Patron:\r\n                                </span>\r\n                                <b  style=\"padding-left:3px\">\r\n                                   {{transportRoute.PatronCount}}\r\n                                </b>\r\n                            </div>\r\n                            </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>-->\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <div class=\"ui-g-12 ui-md-9\">\r\n        <div class=\"card\">\r\n\r\n            <p-tabView>\r\n                <div>\r\n                    <p-tabPanel header=\"Map\" leftIcon=\"fa fa-map-marker\">\r\n                        <div class=\"ui-fluid\">\r\n                            <sebm-google-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\" [disableDefaultUI]=\"false\" [zoomControl]=\"false\"\r\n                                             (mapClick)=\"mapClicked($event)\">\r\n                                <sebm-google-map-marker *ngFor=\"let m of markers; let i = index\" (markerClick)=\"clickedMarker(m.label, i)\" [latitude]=\"m.lat\"\r\n                                                        [longitude]=\"m.lng\" [label]=\"m.label\" [title]=\"m.title\" [markerDraggable]=\"m.draggable\" (dragEnd)=\"markerDragEnd(m, $event)\"\r\n                                                        [iconUrl]=\"m.icon\">\r\n                                </sebm-google-map-marker>\r\n\r\n                                <sebm-google-map-marker *ngFor=\"let org of orgMarkers; let i = index\" (markerClick)=\"clickedMarker(org.label, i)\" [latitude]=\"org.lat\"\r\n                                                        [longitude]=\"org.lng\"\r\n                                                        [iconUrl]=\"org.icon\">\r\n                                </sebm-google-map-marker>\r\n\r\n                                <sebm-google-map-marker *ngFor=\"let s of stops; let i = index\" (markerClick)=\"clickedMarker(s.label, i)\" [latitude]=\"s.lat\"\r\n                                                        [longitude]=\"s.lng\" [label]=\"s.label\" [title]=\"s.title\" [markerDraggable]=\"s.draggable\" (dragEnd)=\"markerDragEnd(s, $event)\"\r\n                                                        [iconUrl]=\"s.icon\">\r\n                                </sebm-google-map-marker>\r\n\r\n                                <sebm-google-map-polyline *ngFor=\"let p of polyline\" [draggable]=\"false\" [editable]=\"false\" [clickable]=\"false\"\r\n                                                          [strokeColor]=\"p.strokeColor\" [geodesic]=\"p.geodesic\" [strokeOpacity]=\"p.strokeOpacity\" [strokeWeight]=\"p.strokeWeight\">\r\n                                    <sebm-google-map-polyline-point *ngFor=\"let p of polyline\" [latitude]=\"p.lat\" [longitude]=\"p.lng\">\r\n                                    </sebm-google-map-polyline-point>\r\n                                </sebm-google-map-polyline>\r\n                            </sebm-google-map>\r\n                        </div>\r\n                    </p-tabPanel>\r\n                </div>\r\n                <!--<div [hidden]=\"tabVisible2\">-->\r\n                <p-tabPanel header=\"Route Detail\" leftIcon=\"fa fa-map-marker\" *ngIf=\"tabVisible1\">\r\n\r\n                    <div id=\"visualization\"></div>\r\n                    <div id=\"hoveredItem\"></div>\r\n                    <br>\r\n                </p-tabPanel>\r\n            </p-tabView>\r\n\r\n            <!--<div style=\"border:1px;\">\r\n                <sebm-google-map style=\"width:100%\" [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\" [disableDefaultUI]=\"false\" [zoomControl]=\"false\"\r\n                                 (mapClick)=\"mapClicked($event)\">\r\n                    <sebm-google-map-marker *ngFor=\"let m of markers; let i = index\" [latitude]=\"m.lat\"\r\n                                            [longitude]=\"m.lng\" [label]=\"m.label\" [title]=\"m.title\" [markerDraggable]=\"m.draggable\" (dragEnd)=\"markerDragEnd(m, $event)\"\r\n                                            [iconUrl]=\"m.icon\">\r\n                    </sebm-google-map-marker>\r\n                    <sebm-google-map-marker *ngFor=\"let m of orgMarkers; let i = index\"\r\n                                            [latitude]=\"m.lat\" [longitude]=\"m.lng\" [title]=\"m.title\"\r\n                                            [markerDraggable]=\"m.draggable\" (dragEnd)=\"markerDragEnd(m, $event)\" [iconUrl]=\"m.icon\">\r\n                    </sebm-google-map-marker>\r\n                    <sebm-google-map-marker *ngFor=\"let s of stops; let i = index\" (markerClick)=\"clickedMarker(s.label, i)\" [latitude]=\"s.lat\"\r\n                                            [longitude]=\"s.lng\" [label]=\"s.label\" [title]=\"s.title\" [markerDraggable]=\"s.draggable\" (dragEnd)=\"markerDragEnd(s, $event)\"\r\n                                            [iconUrl]=\"s.icon\">\r\n                    </sebm-google-map-marker>\r\n                    <sebm-google-map-polyline *ngFor=\"let p of polyline\" [draggable]=\"false\" [editable]=\"false\" [clickable]=\"false\"\r\n                                              [strokeColor]=\"p.strokeColor\" [geodesic]=\"p.geodesic\" [strokeOpacity]=\"p.strokeOpacity\" [strokeWeight]=\"p.strokeWeight\">\r\n                        <sebm-google-map-polyline-point *ngFor=\"let p of polyline\" [latitude]=\"p.lat\" [longitude]=\"p.lng\">\r\n                        </sebm-google-map-polyline-point>\r\n                    </sebm-google-map-polyline>\r\n                </sebm-google-map>\r\n            </div>-->\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<p-overlayPanel #op1>\r\n   \r\n        <p-dataTable [value]=\"transportWalkerList\" [rows]=\"5\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [responsive]=\"true\" [style]=\"{'width':'400px'}\" [loading]=\"WalkerPatronLoading\">\r\n            <p-header>Walker Request</p-header>\r\n            <p-column field=\"imgUrl\" [style]=\"{'width':'50px'}\">\r\n                <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                    <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                </ng-template>\r\n            </p-column>\r\n            <p-column field=\"name\" header=\"Name\"></p-column>\r\n            <!--<p-column field=\"lastName\" header=\"LastName\"></p-column>-->\r\n            <p-column field=\"requestBy\" header=\"Request By\"></p-column>\r\n            <p-column field=\"routeNumber\" header=\"Route\" [style]=\"{'width':'50px'}\"></p-column>\r\n            <p-column field=\"stoppageName\" header=\"Stoppage\"></p-column>\r\n        </p-dataTable>\r\n  \r\n</p-overlayPanel>\r\n<p-overlayPanel #op2>\r\n\r\n    <p-dataTable [value]=\"patronOnLeaveDescriptionList\" [rows]=\"5\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [style]=\"{'width':'400px'}\" [responsive]=\"true\" [loading]=\"PatronLeaveLoading\">\r\n        <p-header>Patron on Leave</p-header>\r\n        <p-column field=\"imagePath\" [style]=\"{'width':'50px'}\">\r\n            <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n            </ng-template>\r\n        </p-column>\r\n        <p-column field=\"name\" header=\"Name\"></p-column>\r\n        <!--<p-column field=\"patronInfo.lastName\" header=\"LastName\" ></p-column>-->\r\n        <p-column field=\"patronInfo.class\" header=\"Class\" [style]=\"{'width':'50px'}\"></p-column>\r\n        <p-column field=\"patronInfo.section\" header=\"Section\" [style]=\"{'width':'70px'}\"></p-column>\r\n        <p-column field=\"routeNumber\" header=\"Route\" [style]=\"{'width':'50px'}\"></p-column>\r\n    </p-dataTable>\r\n</p-overlayPanel>\r\n<p-overlayPanel #op3>\r\n\r\n    <p-dataTable #dt [value]=\"finalMissingList\" [rows]=\"5\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [style]=\"{'width':'400px'}\" [responsive]=\"true\" [loading]=\"MissingPatronLoading\" >\r\n        <p-header>Missing Patron in Bus</p-header>\r\n        <p-column field=\"imagePath\" [style]=\"{'width':'55px'}\">\r\n            <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n            </ng-template>\r\n        </p-column>\r\n        <p-column field=\"name\" header=\"Name\"></p-column>\r\n        <!--<p-column field=\"lastName\" header=\"LastName\"></p-column>-->\r\n        <p-column field=\"routeNumber\" header=\"Route\" [style]=\"{'width':'50px'}\"></p-column>\r\n        <p-column field=\"stoppagename\" header=\"Stoppage\"></p-column>\r\n    </p-dataTable>\r\n</p-overlayPanel>\r\n<p-overlayPanel #op4>\r\n\r\n    <p-dataTable #dt [value]=\"onBoardPatronList\" [rows]=\"5\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [style]=\"{'width':'400px'}\" [responsive]=\"true\" [loading]=\"MissingPatronLoading\">\r\n        <p-header>Present Patron in Bus</p-header>\r\n        <p-column field=\"imagePath\" [style]=\"{'width':'55px'}\">\r\n            <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n            </ng-template>\r\n        </p-column>\r\n        <p-column field=\"name\" header=\"Name\"></p-column>\r\n        <!--<p-column field=\"lastName\" header=\"LastName\"></p-column>-->\r\n        <p-column field=\"routeNumber\" header=\"Route\" [style]=\"{'width':'50px'}\"></p-column>\r\n        <p-column field=\"stoppagename\" header=\"Stoppage\"></p-column>\r\n    </p-dataTable>\r\n</p-overlayPanel>\r\n\r\n\r\n\r\n<p-growl [value]=\"msgs\" life=\"3000\"></p-growl>\r\n\r\n";

/***/ }),
/* 209 */
/***/ (function(module, exports) {

module.exports = "<div class=\"card card-w-title\">\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;margin-top:20px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div>\r\n                <button type=\"button\" pButton icon=\"fa-trash \" style=\"float:left\" (click)=\"deleteIncomingMessage(selectedIncomingMessage)\" label=\"Delete\"data-toggle=\"tooltip\" data-placement=\"right\" title=\"Delete Inbox Message\"></button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none\">\r\n        <div class=\"ui-grid-row\">\r\n            <header style=\"text-align:left;font-size:120%\">Inbox Message</header>\r\n        </div>\r\n    </div>\r\n    <p-dataTable #dt [(value)]=\"responseMessage\" expandableRows=\"true\"  [(selection)]=\"selectedIncomingMessage\" [rows]=\"15\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [responsive]=\"true\">\r\n      \r\n        <p-column [style]=\"{'width':'40px'}\" selectionMode=\"multiple\"></p-column>\r\n           <p-column header=\"Action\" [style]=\"{'width':'55px'}\">\r\n            <ng-template let-message=\"rowData\" pTemplate type=\"body\">\r\n                <button type=\"button\" pButton (click)=\"getMessage(message)\" icon=\"fa fa-sort-desc\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Response\"></button>\r\n            </ng-template>\r\n        </p-column>\r\n       <!-- <p-column expander=\"true\" styleclass=\"col-icon\" [style]=\"{'width':'40px'}\"data-toggle=\"tooltip\" data-placement=\"right\" title=\"Delete Message\"></p-column>-->\r\n        <p-column field=\"patronImage\"  [style]=\"{'width':'75px'}\">\r\n        <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n         </ng-template>\r\n         </p-column>\r\n         <p-column field=\"patronName\" header=\"Name\"[style]=\"{'width':'120px'}\" ></p-column>\r\n         <p-column field=\"patronClass\" header=\"Class\" [style]=\"{'width':'57px'}\"></p-column>\r\n         <p-column field=\"patronSection\" header=\"Section\" [style]=\"{'width':'77px'}\"></p-column>\r\n         <p-column field=\"outSubject\" header=\"Subject\" ></p-column>\r\n         <p-column field=\"messageTime\" header=\"Time\" [style]=\"{'width':'87px'}\"></p-column>\r\n         <p-column field=\"messageDate\" header=\"Date\" [style]=\"{'width':'100px'}\"></p-column>\r\n     </p-dataTable>\r\n</div>\r\n<p-dialog header=\"Inbox Message\" [(visible)]=\"messageDialog\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"500\" height=\"450\">\r\n    <div hidden=\"hidden\"><input id=\"id\" class=\"form-control\" type=\"text\" placeholder=\"id\" [(ngModel)]=\"responseMsg.id\" /></div>\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-grid-fluid\" style=\"margin:10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-10\">\r\n               <strong> Response Message</strong>\r\n         </div>\r\n        </div>\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-10\">\r\n                <textarea rows=\"5\" cols=\"60\" readonly=\"readonly\" pInputTextarea [(ngModel)]=\"inboundMessage\"></textarea>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-grid-fluid\" style=\"margin:10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-10\">\r\n                <strong> Request Message</strong>\r\n            </div>\r\n        </div>\r\n          <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-10\">\r\n                <textarea rows=\"5\" cols=\"60\" readonly=\"readonly\" pInputTextarea [(ngModel)]=\"outboundMessage\"></textarea>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div class=\"ui-grid-col-10\">\r\n            </div>\r\n            <div>\r\n                <button type=\"button\" label=\"Cancel\" pButton (click)=\"onCancel($event)\"></button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</p-dialog>\r\n\r\n<p-confirmDialog width=\"425\"></p-confirmDialog>\r\n<p-growl [value]=\"msgs\" life=\"3000\"></p-growl>\r\n";

/***/ }),
/* 210 */
/***/ (function(module, exports) {

module.exports = "<div class=\"card card-w-title\">\r\n    \r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;margin-top:20px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div>\r\n                <button type=\"button\" pButton icon=\"fa-inbox\" style=\"float:left\" (click)=\"createMessage()\" label=\"Add\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Create Message\"></button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none\">\r\n        <div class=\"ui-grid-row\">\r\n            <header style=\"text-align:left;font-size:120%\">Message List(s)</header>\r\n        </div>\r\n    </div>\r\n    <p-dataTable #dt [(value)]=\"messageCenterDetails\" selectionMode=\"single\"(onRowSelect)=\"confirm($event)\" [(selection)]=\"selectedMessageDetail\" expandableRows=\"true\" [rows]=\"15\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [responsive]=\"true\">\r\n        \r\n        <p-column field=\"message\" header=\"Message\" [style]=\"{'width':'175px'}\"></p-column>\r\n        <p-column field=\"messageDate\" header=\"Create Date\" [style]=\"{'width':'40px'}\"></p-column>\r\n        <p-column field=\"expiryDate\" header=\"Expiry Date\" [style]=\"{'width':'40px'}\"></p-column>\r\n        \r\n    </p-dataTable>\r\n</div>\r\n<p-dialog header=\"Message Center\" [(visible)]=\"messageCenterDialog\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"700\" height=\"500\">\r\n    \r\n        \r\n            <div hidden=\"hidden\"><input id=\"id\" class=\"form-control\" type=\"text\" placeholder=\"id\" [(ngModel)]=\"messageDetail.id\" /></div>\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Broadcast To :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-8\">\r\n                        <p-dropdown [options]=\"broadcastTo\" [style]=\"{'width':'150px'}\" (onChange)=\"onSelectMode()\" [(ngModel)]=\"selectedBroadCast\"></p-dropdown>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            <div *ngIf=\"showClassSection\" class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Class :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-2\">\r\n                        <p-multiSelect [options]=\"classSectionList\" [style]=\"{'width':'150px'}\" [(ngModel)]=\"selectedClassSection\"></p-multiSelect>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div *ngIf=\"showClass\" class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Class :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-2\">\r\n                        <p-multiSelect [options]=\"classList\" [style]=\"{'width':'150px'}\" [(ngModel)]=\"selectedGrade\"></p-multiSelect>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-grid-fluid\" style=\"margin:10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Message Category:\r\n                    </div>\r\n                    <div class=\"ui-grid-col-8\">\r\n                        <p-dropdown [options]=\"messageCategory\" [style]=\"{'width':'150px'}\" [(ngModel)]=\"selectedCategory\" maxlength=\"30\"></p-dropdown>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Expiry Date :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-3\">\r\n                         <!--   <input pInputText type=\"date\" placeholder=\"Required\" [(ngModel)]=\"messageDetail.expiryDate\" />-->\r\n                    <p-calendar dateFormat=\"dd/mm/yy\" [showIcon]=\"true\" [(ngModel)]=\"messageDetail.expiryDate\"></p-calendar>\r\n                      \r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-grid-fluid\" style=\"margin:10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Message:\r\n                    </div>\r\n                    <div class=\"ui-grid-col-8\">\r\n                        <textarea rows=\"5\" cols=\"40\" maxlength=\"100\" pInputTextarea [(ngModel)]=\"messageDetail.message\"></textarea>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col\">\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"button\" style=\"float:initial;\" label=\"Send\" pButton (click)=\"sendMessage()\"></button>\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"button\" label=\"Cancel\" pButton (click)=\"onCancel($event)\"></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n</p-dialog>\r\n\r\n<p-dialog [(visible)]=\"displayDialog\" header=\"Acknowledge Detail\"  [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"500\" height=\"430\">\r\n    <p-dataTable #dt [(value)]=\"deviceDetails\" selectionMode=\"single\" [rows]=\"9\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [responsive]=\"true\">\r\n        <p-column field=\"receivedBy\" header=\"Recived By\" ></p-column>\r\n        <p-column field=\"acknowledgeTime\" header=\"Acknowledge Time\" ></p-column>\r\n        <p-column  header=\"Acknowledge\">\r\n            <ng-template let-deviceDetail=\"rowData\" pTemplate type=\"body\">\r\n                <p-checkbox name=\"isAcknowledge\"  value=\"isAcknowledge\" binary=\"true\" [(ngModel)]=\"deviceDetail.isAcknowledge\"></p-checkbox>\r\n            </ng-template>\r\n        </p-column>\r\n    </p-dataTable>\r\n</p-dialog>\r\n\r\n<p-growl [value]=\"msgs\" life=\"3000\"></p-growl>\r\n<p-confirmDialog width=\"500\"></p-confirmDialog>";

/***/ }),
/* 211 */
/***/ (function(module, exports) {

module.exports = "<div id=\"parent\" class=\"ui-fluid\">\r\n    <div id=\"firstChild\" class=\"ui-g\">\r\n        <div id=\"secondChild\" class=\"ui-g-12\">\r\n            <div id=\"thirdChild\" class=\"card card-w-title\">\r\n                <p-toolbar>\r\n                    <div class=\"ui-toolbar-group-left\">\r\n                        <!--<p-calendar dateFormat=\"yy-mm-dd\"[monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"2000:2030\" [(ngModel)]=\"selectedDate\" [style]=\"{'width':'100px'}\" (onSelect)=\"selectRoute($event)\"></p-calendar>-->\r\n                        <p-dropdown [options]=\"routeList\" [style]=\"{'width':'95px'}\" [(ngModel)]=\"selectedRoute\" (onChange)=\"selectRoute($event)\"></p-dropdown>\r\n                    </div>\r\n                </p-toolbar>\r\n                <br>\r\n                <p-tabView *ngIf=\"visible\">\r\n                    <div>\r\n                        <p-tabPanel header=\"Map\" leftIcon=\"fa fa-map-marker\">\r\n                            <div class=\"ui-fluid\">\r\n                                <sebm-google-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\" [disableDefaultUI]=\"false\" [zoomControl]=\"false\"\r\n                                                 (mapClick)=\"mapClicked($event)\">\r\n                                    <sebm-google-map-marker *ngFor=\"let m of markers; let i = index\" (markerClick)=\"clickedMarker(m.label, i)\" [latitude]=\"m.lat\"\r\n                                                            [longitude]=\"m.lng\" [label]=\"m.label\" [title]=\"m.title\" [markerDraggable]=\"m.draggable\" (dragEnd)=\"markerDragEnd(m, $event)\"\r\n                                                            [iconUrl]=\"m.icon\">\r\n                                    </sebm-google-map-marker>\r\n\r\n                                    <sebm-google-map-marker *ngFor=\"let org of orgMarkers; let i = index\" (markerClick)=\"clickedMarker(org.label, i)\" [latitude]=\"org.lat\"\r\n                                                            [longitude]=\"org.lng\"\r\n                                                            [iconUrl]=\"org.icon\">\r\n                                    </sebm-google-map-marker>\r\n\r\n                                    <sebm-google-map-marker *ngFor=\"let s of stops; let i = index\" (markerClick)=\"clickedMarker(s.label, i)\" [latitude]=\"s.lat\"\r\n                                                            [longitude]=\"s.lng\" [label]=\"s.label\" [title]=\"s.title\" [markerDraggable]=\"s.draggable\" (dragEnd)=\"markerDragEnd(s, $event)\"\r\n                                                            [iconUrl]=\"s.icon\">\r\n                                    </sebm-google-map-marker>\r\n\r\n                                    <sebm-google-map-polyline *ngFor=\"let p of polyline\" [draggable]=\"false\" [editable]=\"false\" [clickable]=\"false\"\r\n                                                              [strokeColor]=\"p.strokeColor\" [geodesic]=\"p.geodesic\" [strokeOpacity]=\"p.strokeOpacity\" [strokeWeight]=\"p.strokeWeight\">\r\n                                        <sebm-google-map-polyline-point *ngFor=\"let p of polyline\" [latitude]=\"p.lat\" [longitude]=\"p.lng\">\r\n                                        </sebm-google-map-polyline-point>\r\n                                    </sebm-google-map-polyline>\r\n                                </sebm-google-map>\r\n                            </div>\r\n                        </p-tabPanel>\r\n                    </div>\r\n                    <!--<div [hidden]=\"tabVisible2\">-->\r\n                    <p-tabPanel header=\"Route Detail\" leftIcon=\"fa fa-map-marker\" *ngIf=\"tabVisible1\">\r\n                        <p-toolbar>\r\n\r\n                            <div class=\"ui-toolbar-group-left\">\r\n                                Route : <b>{{routeNumber}}</b>&nbsp;\r\n                                Driver : <b>\r\n                                    {{driverName}}&nbsp;<img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{driverImage}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                                </b>&nbsp;&nbsp;Staff : <b>\r\n                                    {{routeStaffName}}&nbsp;<img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{routeStaffImage}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                                </b>&nbsp;&nbsp;Coordinator : <b>\r\n                                    {{coordinatorName}}&nbsp;<img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{coordinatorImage}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                                </b>\r\n                            </div>\r\n                            &nbsp;&nbsp;\r\n                            <div class=\"ui-toolbar-group-right\" style=\"\r\n                                        width: 255px;\r\n                                        margin-top: 12px;\">\r\n                                <div class=\"ui-g-1\" style=\"background-color:red\"></div>\r\n                                <div class=\"ui-g-1\" style=\"\r\n                                        width: 45px;\r\n                                        margin-top: -10px;\">Late</div>\r\n                                <div class=\"ui-g-1\" style=\"background-color:greenyellow\"></div>\r\n                                <div class=\"ui-g-1\" style=\"\r\n                                        width: 68px;\r\n                                        margin-top: -10px\">On Time</div>\r\n                                <div class=\"ui-g-1\" style=\"background-color:lightgrey\"></div>\r\n                                <div class=\"ui-g-1\" style=\"\r\n                                        width: 75px;\r\n                                        margin-top: -10px;\">Next Stop</div>\r\n                                </div>\r\n                </p-toolbar>\r\n                        <div id=\"visualization\"></div>\r\n                        <div id=\"hoveredItem\"></div>\r\n                        <br>\r\n                        \r\n                        <div class=\"ui-g-12 ui-lg-5\" style=\"width: 49%;\">\r\n                            <p-dataTable [value]=\"patronStoppageSummaryArr\" [rows]=\"5\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [responsive]=\"true\" [style]=\"{'margin-bottom':'20px'}\">\r\n                                <p-header>Patron List</p-header>\r\n                                <p-column field=\"imgUrl\"[style]=\"{'width':'50px'}\">\r\n                                    <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                                        <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                                    </ng-template>\r\n                                </p-column>\r\n                                <p-column field=\"name\"  header=\"Name\"  [style]=\"{'width':'150px'}\"></p-column>\r\n                                <!--<p-column field=\"lastName\" header=\"LastName\"></p-column>-->\r\n                                <p-column field=\"patronClass\" header=\"Class\" [style]=\"{'width':'44px'}\"></p-column>\r\n                                <!--<p-column field=\"section\" header=\"Section\" [style]=\"{'width':'55px'}\"></p-column>-->\r\n                                <p-column field=\"rollNumber\" header=\"Roll No\" [style]=\"{'width':'57px'}\"></p-column>\r\n                                <p-column field=\"stoppageName\" header=\"Stoppage\" [style]=\"{'width':'135px'}\"></p-column>\r\n                                \r\n                            </p-dataTable>\r\n                        </div>\r\n                        <div class=\"ui-g-12 ui-lg-5\" style=\"width: 51%;\">\r\n\r\n                            <p-dataTable [value]=\"stoppageSummaryArr\" [rows]=\"5\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [responsive]=\"true\" [style]=\"{'margin-bottom':'20px'}\">\r\n                                <p-header>Stoppage Detail</p-header>\r\n                                <p-column field=\"imgUrl\" [style]=\"{'width':'50px'}\">\r\n                                    <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                                        <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                                    </ng-template>\r\n                                </p-column>\r\n                                <p-column field=\"name\" header=\"Name\" [style]=\"{'width':'120px'}\"></p-column>\r\n                                <p-column field=\"patronClass\" header=\"Class\" [style]=\"{'width':'44px'}\"></p-column>\r\n                                <!--<p-column field=\"section\" header=\"Section\" [style]=\"{'width':'55px'}\"></p-column>\r\n                                <p-column field=\"rollNumber\" header=\"RollNo\" [style]=\"{'width':'50px'}\"></p-column>-->\r\n                                <p-column field=\"reachedTime\" header=\"Arrival Time\" [style]=\"{'width':'50px'}\"></p-column>\r\n                                <p-column field=\"stoppageName\" header=\"Stoppage\" [style]=\"{'width':'100px'}\"></p-column>\r\n                                <!--<p-column field=\"status\" header=\"Status\" [style]=\"{'width':'60px'}\"></p-column> -->\r\n                                <p-column field=\"status\" header=\"Status\" [style]=\"{'width':'100px'}\">\r\n                                    <template let-col let-rep=\"rowData\" pTemplate>\r\n                                        <div [style.color]=\"rep.headerColor\">\r\n                                            <b>{{rep[col.field]}}</b>\r\n                                        </div>\r\n                                    </template>\r\n                                </p-column>\r\n                                \r\n                            </p-dataTable>\r\n\r\n                        </div>\r\n\r\n\r\n                        <!--<div class=\"ui-g-12 ui-lg-4\">\r\n            <p-panel header=\"Contacts\" [style]=\"{'height':'100%'}\">\r\n                <ul class=\"contacts\">\r\n                    <li>\r\n                        <a href=\"#\">\r\n                            <span class=\"name\">Claire Williams</span>\r\n                            <span class=\"email\">clare@pf-omega.com</span>\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#\">\r\n                            <span class=\"name\">Jason Dourne</span>\r\n                            <span class=\"email\">jason@pf-omega.com</span>\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#\">\r\n                            <span class=\"name\">Jane Davidson</span>\r\n                            <span class=\"email\">jane@pf-omega.com</span>\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#\">\r\n                            <span class=\"name\">Tony Corleone</span>\r\n                            <span class=\"email\">tony@pf-omega.com</span>\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </p-panel>\r\n        </div>-->\r\n\r\n\r\n                    </p-tabPanel>\r\n                    <!--</div>-->\r\n                    <!--<div [hidden]=\"tabVisible1\">-->\r\n                    <p-tabPanel header=\"Route Monitoring\" leftIcon=\"fa fa-map-marker\" *ngIf=\"tabVisible2\">\r\n                        <div style=\"float:left;width: 50px;height: 20px;margin: 5px;background-color:#FFC0CB;text-align:center\">Pickup</div>\r\n                        <div style=\"float:left;width: 50px;height: 20px;margin: 5px;background-color:hotpink;text-align:center\">Drop</div>\r\n                        <div style=\"float:left;width: 80px;height: 20px;margin: 5px;background-color:#FF83FA;text-align:center\">PickupTime</div>\r\n                        <div style=\"float:left;width: 80px;height: 20px;margin: 5px;background-color:#CD69C9;text-align:center\">DropTime</div>\r\n                        <div style=\"float:left;width: 70px;height: 20px;margin: 5px;background-color:#FFFF66;text-align:center\">UnMatch</div>\r\n                        <div style=\"width:auto;margin-top:10px\">\r\n                            <table class=\"table\" style=\"margin:0; overflow:scroll\">\r\n                                <tbody>\r\n                                    <tr *ngFor=\"let row of routeMonitorList\">\r\n                                        <td style=\"vertical-align:middle;background-color:coral\">\r\n                                            {{row[0].routeId}}\r\n                                        </td>\r\n                                        <td *ngFor=\"let col of row\">\r\n                                            <!--(click)=\"getData(col,row[0])\" -->\r\n                                            <div ng-repeat=\"col of row\">\r\n                                                <table>\r\n                                                    <tr>\r\n                                                        <td *ngIf=\"col.runDirection === '1' && col.pickUpTime === 'NA' \" colspan=\"2\" style=\"text-align:center; \">\r\n                                                            <div style=\"background-color:#ff6666;\">{{col.stoppageName}}</div>\r\n                                                        </td>\r\n                                                        <td *ngIf=\"col.runDirection === '1' && col.pickUpTime !== 'NA' \" colspan=\"2\" style=\"text-align:center; \">\r\n                                                            <div style=\"background-color:#66ff66;\">{{col.stoppageName}}</div>\r\n                                                        </td>\r\n                                                        <td *ngIf=\"col.runDirection === '2' && col.dropTime === 'NA' \" colspan=\"2\" style=\"text-align:center; \">\r\n                                                            <div style=\"background-color:#ff6666;\">{{col.stoppageName}}</div>\r\n                                                        </td>\r\n                                                        <td *ngIf=\"col.runDirection === '2' && col.dropTime !== 'NA' \" colspan=\"2\" style=\"text-align:center;\">\r\n                                                            <div style=\"background-color:#66ff66;\">{{col.stoppageName}}</div>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td *ngIf=\"col.expectedPickCount !== col.pickCount\" style=\"text-align:center;\">\r\n                                                            <div style=\"background-color:#FFFF66;text-align:center;cursor:pointer;\" (click)=\"getPickupData(col)\">\r\n                                                                {{col.expectedPickCount}} - {{col.pickCount}}\r\n                                                            </div>\r\n                                                        </td>\r\n                                                        <td *ngIf=\"col.expectedPickCount === col.pickCount\" style=\"text-align:center;\">\r\n                                                            <div style=\"background-color:#FFC0CB;text-align:center;cursor:pointer;\" (click)=\"getPickupData(col)\">\r\n                                                                {{col.expectedPickCount}} - {{col.pickCount}}\r\n                                                            </div>\r\n                                                        </td>\r\n                                                        <td *ngIf=\"col.expectedDropCount !== col.dropCount\" style=\"text-align:center;\">\r\n                                                            <div style=\"background-color:#FFFF66;text-align:center;cursor:pointer;\" (click)=\"getDropData(col)\">\r\n                                                                {{col.expectedDropCount}} - {{col.dropCount}}\r\n                                                            </div>\r\n                                                        </td>\r\n\r\n                                                        <td *ngIf=\"col.expectedDropCount === col.dropCount\" style=\"text-align:center;\">\r\n                                                            <div style=\"background-color:hotpink;text-align:center;cursor:pointer;\" (click)=\"getDropData(col)\">\r\n                                                                {{col.expectedDropCount}} - {{col.dropCount}}\r\n                                                            </div>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td *ngIf=\"col.pickUpTime !== 'NA'\" style=\"text-align:center;\">\r\n                                                            <div style=\"background-color:#FF83FA;text-align:center;width:85px;text-align:center;\">\r\n                                                                {{col.expectedPickTime}} - {{col.pickUpTime}}\r\n                                                            </div>\r\n                                                        </td>\r\n                                                        <td *ngIf=\"col.dropTime !== 'NA'\" style=\"text-align:center;\">\r\n                                                            <div style=\"background-color:#CD69C9;text-align:center; width:85px;text-align:center;\">\r\n                                                                {{col.expectedDropTime}} - {{col.dropTime}}\r\n                                                            </div>\r\n                                                        </td>\r\n                                                        <td *ngIf=\"col.pickUpTime === 'NA'\" style=\"text-align:center;\">\r\n                                                            <div style=\"background-color:#FFFF66;text-align:center;width:85px;text-align:center;\">\r\n                                                                {{col.expectedPickTime}} - {{col.pickUpTime}}\r\n                                                            </div>\r\n                                                        </td>\r\n                                                        <td *ngIf=\"col.dropTime === 'NA'\" style=\"text-align:center;\">\r\n                                                            <div style=\"background-color:#FFFF66;text-align:center;width:85px;text-align:center;\">\r\n                                                                {{col.expectedDropTime}} - {{col.dropTime}}\r\n                                                            </div>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                </table>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </p-tabPanel>\r\n                    <!--</div>-->\r\n                </p-tabView>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<p-dialog header=\"Patron Detail\" [(visible)]=\"patronDetail\" [resizable]=\"false\" [responsive]=\"true\" showEffect=\"fade\" [modal]=\"true\" width=\"600\" height=\"400\">\r\n    <div class=\"ui-grid-col-12\">\r\n        <div class=\"ui-grid-col-16\">\r\n            <div class=\"ui-grid ui-grid-responsive ui-fluid\">\r\n                <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;margin-top:20px\">\r\n                    <div class=\"ui-grid-row\">\r\n                        <div class=\"ui-grid-col-10\">\r\n                            <header style=\"text-align:left;font-size:120%\">\r\n                                Student List\r\n                            </header>\r\n                        </div>\r\n                        <div class=\"ui-grid-col-2\">\r\n                            <button type=\"button\" style=\"float:right;\" pButton icon=\"fa-file-o\" iconPos=\"left\" label=\"Export\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Download\" (click)=\"download()\"></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <p-dataTable [value]=\"patronInfoList\" [rows]=\"5\" [paginator]=\"true\">\r\n                    <p-column field=\"imgUrl\" [style]=\"{'width':'50px'}\">\r\n                        <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                            <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                        </ng-template>\r\n                    </p-column>\r\n                    <p-column field=\"patron.firstName\" header=\"FirstName\" [style]=\"{'width':'70px'} \"></p-column>\r\n                    <p-column field=\"patron.lastName\" header=\"LastName\" [style]=\"{'width':'70px'} \"></p-column>\r\n                    <p-column field=\"patron.class\" header=\"Class\" [style]=\"{'width':'40px'} \"></p-column>\r\n                    <p-column field=\"patron.section\" header=\"Section\" [style]=\"{'width':'40px'} \"></p-column>\r\n                    <p-column field=\"patron.rollNo\" header=\"RollNo\" [style]=\"{'width':'40px'} \"></p-column>\r\n                    <p-column field=\"patronStatus\" header=\"Status\" [style]=\"{'width':'50px'} \"></p-column>\r\n                </p-dataTable>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</p-dialog>";

/***/ }),
/* 212 */
/***/ (function(module, exports) {

module.exports = "<!-- div for set update button -->\r\n<div class=\"card card-w-title\">\r\n    <p-toolbar>\r\n        <div class=\"ui-toolbar-group-left\">\r\n            <button type=\"submit\" label=\"Update\" pTooltip=\"Update Organization\" tooltipPosition=\"top\" \r\n                    [disabled]=\"!organizationForm.valid\" (click)=\"updateOrganization(organizationForm.value)\" pButton></button>\r\n        </div>\r\n    </p-toolbar>\r\n    <div style=\"margin-top:-1px\">\r\n        <!-- start panel for organization-->\r\n        <p-panel header=\"{{organizationHeader}}\">\r\n            <form [formGroup]=\"organizationForm\">\r\n                <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px;margin-left: 50px;\">\r\n                    <div class=\"ui-grid-row\">\r\n                        <div class=\"ui-grid-col-1\">\r\n                            Name :\r\n                        </div>\r\n                        <div class=\"ui-grid-col-3\">\r\n                            <input pInputText type=\"text\" formControlName=\"name\" [(ngModel)]=\"organizationDetail.name\" />\r\n                            <div style=\"color:brown\" *ngIf=\"!organizationForm.controls['name'].valid&&organizationForm.controls['name'].dirty\">\r\n                                <span *ngIf=\"organizationForm.controls['name'].errors['required']\">Organization name is required.</span>\r\n                                <span *ngIf=\"organizationForm.controls['name'].errors['pattern']\">Organization name should be characters.</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"ui-grid-col-2\" style=\"margin-left:50px;\">\r\n                            Organization Plan :\r\n                        </div>\r\n                        <div class=\"ui-grid-col-4\">\r\n                            <p-radioButton name=\"plan\" formControlName=\"plan\" [disabled]=\"!silver\" value=\"silver\" label=\"Silver\" [(ngModel)]=\"selectedValue\"></p-radioButton>\r\n                            <p-radioButton name=\"plan\" formControlName=\"plan1\" [disabled]=\"!gold\" value=\"gold\" label=\"Gold\" [(ngModel)]=\"selectedValue\"></p-radioButton>\r\n                            <p-radioButton name=\"plan\" formControlName=\"plan2\" [disabled]=\"!platinum\" value=\"platinum\" label=\"Platinum\" [(ngModel)]=\"selectedValue\"></p-radioButton>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px;margin-left: 50px;\">\r\n                    <div class=\"ui-grid-row\">\r\n                        <div class=\"ui-grid-col-1\">\r\n                            Address :\r\n                        </div>\r\n                        <div class=\"ui-grid-col-3\">\r\n                            <textarea pInputText type=\"text\" formControlName=\"address\" placeholder=\"Required\" autoResize=\"autoResize\" [(ngModel)]=\"organizationDetail.address\"></textarea>\r\n                            <div style=\"color:brown\" *ngIf=\"!organizationForm.controls['address'].valid&&organizationForm.controls['address'].dirty\">\r\n                                Address is Required.\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"ui-grid-col-2\" style=\"margin-left:50px;\">\r\n                            Establishment Type :\r\n                        </div>\r\n                        <div class=\"ui-grid-col-4\">\r\n                            <p-radioButton name=\"establishmentType\" formControlName=\"establishmentType\" [disabled]=\"!school\" value=\"school\" label=\"School\" [(ngModel)]=\"selectedType\"></p-radioButton>\r\n                            <p-radioButton name=\"establishmentType\" formControlName=\"establishmentType\" [disabled]=\"!office\" value=\"office\" label=\"Office\" [(ngModel)]=\"selectedType\"></p-radioButton>\r\n                            <p-radioButton name=\"establishmentType\" formControlName=\"establishmentType\" [disabled]=\"!Shop\" value=\"shop\" label=\"Shop\" [(ngModel)]=\"selectedType\"></p-radioButton>\r\n                            <p-radioButton name=\"establishmentType\" formControlName=\"establishmentType\" [disabled]=\"!hospital\" value=\"hospital\" label=\"Hospital\" [(ngModel)]=\"selectedType\"></p-radioButton>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px;margin-left: 50px;\">\r\n                    <div class=\"ui-grid-row\">\r\n                        <div class=\"ui-grid-col-1\">\r\n                            City :\r\n                        </div>\r\n                        <div class=\"ui-grid-col-3\">\r\n                            <input pInputText type=\"text\" formControlName=\"city\" [(ngModel)]=\"organizationDetail.city\" />\r\n                            <div style=\"color:brown\" *ngIf=\"!organizationForm.controls['city'].valid&&organizationForm.controls['city'].dirty\">\r\n                                City is Required.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px;margin-left: 50px;\">\r\n                    <div class=\"ui-grid-row\">\r\n                        <div class=\"ui-grid-col-1\">\r\n                            Zip Code :\r\n                        </div>\r\n                        <div class=\"ui-grid-col-3\">\r\n                            <input pInputText type=\"text\" formControlName=\"zipCode\" [(ngModel)]=\"organizationDetail.zipCode\" />\r\n                            <div style=\"color:brown\" *ngIf=\"!organizationForm.controls['zipCode'].valid&&organizationForm.controls['zipCode'].dirty\">\r\n                                <span *ngIf=\"organizationForm.controls['zipCode'].errors['pattern']\">Postal Code should be Number</span>\r\n                                <span *ngIf=\"!organizationForm.controls['zipCode'].errors['pattern']&&organizationForm.controls['zipCode'].errors['minlength']\"> Code should not be less than 3 </span>\r\n                                <span *ngIf=\"!organizationForm.controls['zipCode'].errors['pattern']&&organizationForm.controls['zipCode'].errors['maxlength']\"> Code should not be grater than 8</span>\r\n                                <span *ngIf=\"organizationForm.controls['zipCode'].errors['required']\">Postal code is Required</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px;margin-left: 50px;\">\r\n                    <div class=\"ui-grid-row\">\r\n\r\n                        <div class=\"ui-grid-col-1\">\r\n                            Logo :\r\n                        </div>\r\n\r\n                        <div class=\"ui-grid-col-3\">\r\n                            <input #fileInput type=\"file\" class=\"form-control\" name=\"imgUrl\" />\r\n\r\n                        </div>\r\n\r\n                        <div class=\"ui-grid-col-2\">\r\n                            <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{organizationDetail.logoURL}}\" height=\"50\" width=\"210\" />\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </form>\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            </div>\r\n            <p-accordion>\r\n                <!--Start Notification setting-->\r\n\r\n                <p-accordionTab header=\"Notification Setting\" [selected]=\"true\">\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px;margin-left: 38px;\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-1\">\r\n                                <p-checkbox name=\"notifyParentForWhenTransportReachedStop\" value=\"notifyParentForWhenTransportReachedStop\" binary=\"true\" [(ngModel)]=\"notifications.notifyParentForWhenTransportReachedStop\"></p-checkbox>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-5\" pTooltip=\"Notify or send notifications to the parents when transport reached at Stop\" tooltipPosition=\"top\">\r\n                                Transport Reached At Stop\r\n                            </div>\r\n                            <div class=\"ui-grid-col-1\">\r\n                                <p-checkbox name=\"notifyParentForWhenTransportReachedSchool\" value=\"notifyParentForWhenTransportReachedSchool\" binary=\"true\" [(ngModel)]=\"notifications.notifyParentForWhenTransportReachedSchool\"></p-checkbox>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\" pTooltip=\"Notify or send notification to the parents when transport reached at School\" tooltipPosition=\"top\">\r\n                                Transport Reached At School\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px;margin-left: 38px;\">\r\n\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-1\">\r\n                                <p-checkbox name=\"notifyParentForPatronReachedSchool\" value=\"notifyParentForPatronReachedSchool\" binary=\"true\" [(ngModel)]=\"notifications.notifyParentForPatronReachedSchool\"></p-checkbox>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-5\" pTooltip=\"Notify or send notification to the parents when their kids reached at School\" tooltipPosition=\"top\">\r\n                                Patron Reached At School\r\n                            </div>\r\n                            <div class=\"ui-grid-col-1\">\r\n                                <p-checkbox name=\"notifyParentForPatronLeftSchool\" value=\"notifyParentForPatronLeftSchool\" binary=\"true\" [(ngModel)]=\"notifications.notifyParentForPatronLeftSchool\"></p-checkbox>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\" pTooltip=\"Notify or send notification to the parents when their kids Leave The School\" tooltipPosition=\"top\" >\r\n                                Patron Left From School\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px;margin-left: 38px;\">\r\n\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-1\">\r\n                                <p-checkbox name=\"notifyParentForPatronAbsent\" value=\"notifyParentForPatronAbsent\" binary=\"true\" [(ngModel)]=\"notifications.notifyParentForPatronAbsent\"></p-checkbox>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-5\" pTooltip=\"Notify or send notification to the parents when their kids are Absent\" tooltipPosition=\"top\">\r\n                                Patron Absent\r\n                            </div>\r\n                            <div class=\"ui-grid-col-1\">\r\n                                <p-checkbox name=\"notifyParentForPatronAbscond\" value=\"notifyParentForPatronAbscond\" binary=\"true\" [(ngModel)]=\"notifications.notifyParentForPatronAbscond\"></p-checkbox>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\" pTooltip=\"Notify or send Notification to the parents when their kids Absconded From School\" tooltipPosition=\"top\" >\r\n                                Patron Absconded\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px;margin-left: 38px;\">\r\n\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-1\">\r\n                                <p-checkbox name=\"notifyParentForWhenTransportLeftSchool\" value=\"notifyParentForWhenTransportLeftSchool\" binary=\"true\" [(ngModel)]=\"notifications.notifyParentForWhenTransportLeftSchool\"></p-checkbox>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-5\" pTooltip=\"Notify or send notification to the parents when transport left from School\" tooltipPosition=\"top\">\r\n                                Transport Left From School\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n                </p-accordionTab>\r\n                <!--End Notification setting-->\r\n                <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                </div>\r\n                <!--Start Organization setting-->\r\n                <p-accordionTab header=\"Organization Setting\">\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px; margin-left: 38px;\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-1\">\r\n                                <p-checkbox name=\"trackHalfSession\" value=\"trackHalfSession\" binary=\"true\" [(ngModel)]=\"settings.trackHalfSession\"></p-checkbox>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-5\" pTooltip=\"Track the attendance session wise\" tooltipPosition=\"top\" >\r\n                                Track Half Session\r\n                            </div>\r\n                            <div class=\"ui-grid-col-1\">\r\n                                <p-checkbox name=\"trackPeriods\" value=\"trackPeriods\" binary=\"true\" [(ngModel)]=\"settings.trackPeriods\"></p-checkbox>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\" pTooltip=\"Track The Attendance Period Wise\" tooltipPosition=\"top\"  >\r\n                                Track Periods\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px; margin-left: 38px;\">\r\n\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-1\">\r\n                                <p-checkbox name=\"trackSchoolEnd\" value=\"trackSchoolEnd\" binary=\"true\" [(ngModel)]=\"settings.trackSchoolEnd\"></p-checkbox>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-5\" pTooltip=\"Track the attendance just before school end time\" tooltipPosition=\"top\">\r\n                                Track School End\r\n                            </div>\r\n                            <div class=\"ui-grid-col-1\">\r\n                                <p-checkbox name=\"trackTransportStopDrop\" value=\"trackTransportStopDrop\" binary=\"true\" [(ngModel)]=\"settings.trackTransportStopDrop\"></p-checkbox>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\" pTooltip=\"Attendance For the transport Route\" tooltipPosition=\"top\" >\r\n                                Track Transport Pick/Drop\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px; margin-left: 38px;\">\r\n\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-1\">\r\n                                <p-checkbox name=\"enableSMSNotificaions\" value=\"enableSMSNotificaions\" binary=\"true\" [(ngModel)]=\"settings.enableSMSNotificaions\"></p-checkbox>\r\n                            </div>\r\n                            <div class=\"ui-grid-col--5\" pTooltip=\"Send Text Messages to the Parents\" tooltipPosition=\"top\"  >\r\n                                Enable SMS Notifications\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </p-accordionTab>\r\n            </p-accordion>\r\n            <!--End Organization setting-->\r\n\r\n        </p-panel>\r\n    </div>\r\n</div>\r\n\r\n<p-confirmDialog width=\"425\"></p-confirmDialog>\r\n<p-growl [value]=\"msgs\" life=\"3000\"></p-growl>";

/***/ }),
/* 213 */
/***/ (function(module, exports) {

module.exports = "<div class=\"card card-w-title\">\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;margin-top:20px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div>\r\n                <button type=\"button\" pButton icon=\"fa-inbox\" style=\"float:left\" (click)=\"createMessage()\" label=\"Add\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Add Message\"></button>\r\n            </div>&nbsp;\r\n             <div>\r\n                <button type=\"button\" pButton icon=\"fa-trash \" style=\"float:left\" (click)=\"deleteOutgoingMessage(selectedOutgoingMessage)\" label=\"Delete\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Delete Message\"></button>\r\n            </div>&nbsp;\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none\">\r\n        <div class=\"ui-grid-row\">\r\n            <header style=\"text-align:left;font-size:120%\">Outbox Message</header>\r\n        </div>\r\n    </div>\r\n    <p-dataTable #dt [(value)]=\"outgoingMessageDetails\" expandableRows=\"true\" [(selection)]=\"selectedOutgoingMessage\"  [rows]=\"15\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [responsive]=\"true\">\r\n        <p-column [style]=\"{'width':'10px'}\" selectionMode=\"multiple\"></p-column>\r\n        <p-column [style]=\"{'width':'10px'}\" expander=\"true\" styleClass=\"col-icon\" ></p-column>\r\n        <p-column field=\"subject\" header=\"Subject\" [style]=\"{'width':'110px'}\"></p-column>\r\n        <p-column field=\"senderImage\" [style]=\"{'width':'30px'}\">\r\n            <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                <img src=\"https://tstschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n            </ng-template>\r\n        </p-column>\r\n        <p-column field=\"senderName\" header=\"Message From\" [style]=\"{'width':'50px'}\"></p-column>\r\n        <p-column field=\"senderRole\" header=\"Role\" [style]=\"{'width':'20px'}\"></p-column>\r\n        <p-column field=\"broadcastTo\" header=\"Message To\" [style]=\"{'width':'50px'}\"></p-column>\r\n        <p-column field=\"messageTime\" header=\"Time\" [style]=\"{'width':'30px'}\"></p-column>\r\n        <p-column field=\"messageDate\" header=\"MessageDate\" [style]=\"{'width':'35px'}\"></p-column>\r\n        <ng-template let-outgoingMessageDetail pTemplate=\"rowexpansion\">\r\n            <div class=\"ui-grid ui-grid-responsive ui-fluid\" style=\"font-size:16px;padding:20px\">\r\n                <div class=\"ui-grid-row\">\r\n                   &nbsp;&nbsp;   {{outgoingMessageDetail.message}}\r\n            </div>\r\n            </div>\r\n        </ng-template>\r\n    </p-dataTable>\r\n</div>\r\n\r\n<p-dialog header=\"Outgoing Message\" [(visible)]=\"messageCenterDialog\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"700\" height=\"450\">\r\n            <div hidden=\"hidden\"><input id=\"id\" class=\"form-control\" type=\"text\" placeholder=\"id\" [(ngModel)]=\"outgoingMessage.id\" /></div>\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Broadcast To :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-8\">\r\n                        <p-dropdown [options]=\"outgoingMessageTo\" [style]=\"{'width':'150px'}\" (onChange)=\"onSelectMode()\" [(ngModel)]=\"selectedBroadCast\"></p-dropdown>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div *ngIf=\"showClassSection\" class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Class :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-2\">\r\n                        <p-multiSelect [options]=\"classSectionList\" [style]=\"{'width':'150px'}\" [(ngModel)]=\"selectedClassSection\"></p-multiSelect>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div *ngIf=\"showClass\" class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Class :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-2\">\r\n                        <p-multiSelect [options]=\"classList\" [style]=\"{'width':'150px'}\" [(ngModel)]=\"selectedGrade\"></p-multiSelect>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div *ngIf=\"patron\" class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Patron :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-15\">\r\n                        <button type=\"button\" pButton style=\"float:left;width:90px\" icon=\"fa-plus\" (click)=\"openSearchBox()\" label=\"Select\"></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div *ngIf=\"showIsResponseNeed\" class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                  <div class=\"ui-grid-col-3\">\r\n                      Is Response Need :\r\n                  </div>\r\n               <div class=\"ui-grid-col-2\">\r\n                    <p-checkbox name=\"isResponseNeed\" value=\"isResponseNeed\" binary=\"true\" [(ngModel)]=\"outgoingMessage.isResponseNeed\"></p-checkbox>\r\n               </div>\r\n              </div>\r\n          </div>\r\n\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Subject:\r\n                    </div>\r\n                    <div class=\"ui-grid-col-6\">\r\n                        <input pInputText type=\"text\" placeholder=\"Required\" [(ngModel)]=\"outgoingMessage.subject\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-grid-fluid\" style=\"margin:10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Message :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-8\">\r\n                        <!--<p-editor [(ngModel)]=\"outgoingMessage.message\" [style]=\"{'height':'320px'}\"></p-editor>-->\r\n                         <textarea rows=\"5\" cols=\"40\" pInputTextarea [(ngModel)]=\"outgoingMessage.message\"></textarea>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col\">\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"button\" style=\"float:initial;\" label=\"Save\" pButton (click)=\"sendMessageToPatron(0)\"></button>\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"button\" style=\"float:initial;\" label=\"Send\" pButton (click)=\"sendMessageToPatron(1)\"></button>\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"button\" label=\"Cancel\" pButton (click)=\"onCancel($event)\"></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n</p-dialog>\r\n\r\n<p-dialog [(visible)]=\"displayDialog\" header=\"Acknowledge Detail\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"500\" height=\"600\">\r\n    <p-dataTable #dt [(value)]=\"deviceDetails\" selectionMode=\"single\" [rows]=\"15\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [responsive]=\"true\">\r\n        <p-column field=\"receivedBy\" header=\"Recived By\"></p-column>\r\n        <p-column field=\"acknowledgeTime\" header=\"Acknowledge Time\"></p-column>\r\n        <p-column header=\"Acknowledge\">\r\n            <ng-template let-deviceDetail=\"rowData\" pTemplate type=\"body\">\r\n                <p-checkbox name=\"isAcknowledge\" value=\"isAcknowledge\" binary=\"true\" [(ngModel)]=\"deviceDetail.isAcknowledge\"></p-checkbox>\r\n            </ng-template>\r\n        </p-column>\r\n    </p-dataTable>\r\n</p-dialog>\r\n<!--\r\n<p-dialog header=\"AddPatron\" [(visible)]=\"patronMapDialog\" [resizable]=\"false\" [responsive]=\"true\" showEffect=\"fade\" [modal]=\"true\" width=\"750\" height=\"645\">\r\n    \r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n        <div class=\"ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;margin-top:20px\">\r\n            <input #gbb type=\"text\" pInputText size=\"30\" style=\"float:left\" placeholder=\"search\">\r\n            <i class=\"fa fa-search\" style=\"float:left;margin:4px 4px 0 0\"></i>\r\n        </div>\r\n        <div class=\"ui-grid-row\">\r\n            <p-dataTable #dt [(value)]=\"patronDetails\" [(selection)]=\"selectedPatronDetail\" [rows]=\"7\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15,20]\" [responsive]=\"true\" [globalFilter]=\"gbb\">\r\n                <p-column [style]=\"{'width':'38px'}\" selectionMode=\"single\"></p-column>\r\n                <p-column field=\"imgUrl\" header=\"Image\" [style]=\"{'width':'77px'}\">\r\n                    <template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                        <img src=\"https://tstschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"img-circle\" height=\"40\" width=\"40\" />\r\n                    </template>\r\n                </p-column>\r\n                <p-column field=\"firstName\" header=\"First Name\" [sortable]=\"true\"></p-column>\r\n                <p-column field=\"lastName\" header=\"Last Name\" [sortable]=\"true\"></p-column>\r\n                <p-column field=\"rollNo\" header=\"Roll No\" [sortable]=\"true\"></p-column>\r\n                <p-column field=\"class\" header=\"Class\" [sortable]=\"true\"></p-column>\r\n                <p-column field=\"section\" header=\"Section\" [sortable]=\"true\"></p-column>\r\n            </p-dataTable>\r\n        </div>\r\n        <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none\">\r\n            <div class=\"ui-grid-row\">\r\n                <div>\r\n                    <button type=\"button\" pButton style=\"float:left;width:80px\" (click)=\"mapPatron()\" label=\"Add\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"MapPatron\"></button>\r\n                </div>&nbsp;&nbsp;\r\n                <div class=\"ui-grid-col-4\">\r\n                    <button type=\"button\" label=\"Cancel\" style=\"float:left;width:80px\" pButton (click)=\"onSearchCancel($event)\"></button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    \r\n</p-dialog>-->\r\n\r\n\r\n\r\n<p-dialog header=\"Patron List\" [(visible)]=\"patronMapDialog\" [resizable]=\"false\" [responsive]=\"true\" showEffect=\"fade\" [modal]=\"true\" width=\"750\" height=\"600\">\r\n\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;\">\r\n        <div class=\"ui-grid-row\">\r\n            <div>\r\n                <button type=\"button\" pButton style=\"float:left;width:80px\" (click)=\"mapPatron()\" label=\"Add\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"MapPatron\"></button>\r\n            </div>&nbsp;&nbsp;\r\n            <div>\r\n                <button type=\"button\" label=\"Cancel\" style=\"float:left;width:80px\" pButton (click)=\"onSearchCancel($event)\"></button>\r\n            </div>&nbsp;\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid-row\">\r\n        <p-dataTable #dt [(value)]=\"patronDetails\" [(selection)]=\"selectedPatronDetail\" [rows]=\"8\" [paginator]=\"true\" [pageLinks]=\"3\" [responsive]=\"true\" [globalFilter]=\"gbb\">\r\n            <p-column [style]=\"{'width':'38px'}\" selectionMode=\"single\"></p-column>\r\n            <p-column field=\"imgUrl\" [style]=\"{'width':'77px'}\">\r\n                <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                    <img src=\"https://tstschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                </ng-template>\r\n            </p-column>\r\n            <p-column field=\"firstName\" header=\"First Name\"[filter]=\"true\" [sortable]=\"true\"></p-column>\r\n            <p-column field=\"lastName\" header=\"LastName\"[filter]=\"true\" [sortable]=\"true\"></p-column>\r\n            <p-column field=\"rollNo\" header=\"RollNo\"[filter]=\"true\" [sortable]=\"true\"></p-column>\r\n            <p-column field=\"class\" header=\"Class\"[filter]=\"true\" [sortable]=\"true\"></p-column>\r\n            <p-column field=\"section\" header=\"Section\" [filter]=\"true\" [sortable]=\"true\"></p-column>\r\n        </p-dataTable>\r\n    </div>\r\n</p-dialog>\r\n\r\n<p-confirmDialog width=\"425\"></p-confirmDialog>\r\n<p-growl [value]=\"msgs\" life=\"3000\"></p-growl>\r\n";

/***/ }),
/* 214 */
/***/ (function(module, exports) {

module.exports = "\r\n<p-dialog [(visible)]=\"patronDialog\" header=\"{{patronHeader}}\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"750\" height=\"595\">\r\n    <form [formGroup]=\"patronform\" (ngSubmit)=\"createPatron(patronform.value)\">      \r\n\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-2\">\r\n                    First Name :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <input pInputText type=\"text\" formControlName=\"firstName\" placeholder=\"Required\" [(ngModel)]=\"patronDetail.firstName\" />\r\n                    <div style=\"color:brown\" *ngIf=\"!patronform.controls['firstName'].valid&&patronform.controls['firstName'].dirty\">\r\n                    <span *ngIf=\"patronform.controls['firstName'].errors['required']\">  First name is required</span>\r\n                    <span *ngIf=\"patronform.controls['firstName'].errors['pattern']\">First name should be characters</span>       \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-2\">\r\n                    Last Name :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <input pInputText type=\"text\" formControlName=\"lastName\" placeholder=\"Required\" [(ngModel)]=\"patronDetail.lastName\" />\r\n                    <div style=\"color:brown\" *ngIf=\"!patronform.controls['lastName'].valid&&patronform.controls['lastName'].dirty\">\r\n                        <span *ngIf=\"patronform.controls['lastName'].errors['required']\">Last name is required</span>\r\n                        <span *ngIf=\"patronform.controls['lastName'].errors['pattern']\">Last name should be characters</span>  \r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-2\">\r\n                    Date of Birth :\r\n                </div>\r\n                <div class=\"ui-grid-col-3\">\r\n                    <p-calendar formControlName=\"dateOfBirth\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"2000:2030\" dateFormat=\"yy-mm-dd\" [showIcon]=\"true\" [(ngModel)]=\"patronDetail.dateOfBirth\"></p-calendar>\r\n                    <div style=\"color:brown\" *ngIf=\"!patronform.controls['dateOfBirth'].valid&&patronform.controls['dateOfBirth'].dirty\">\r\n                        <span *ngIf=\"patronform.controls['dateOfBirth'].errors['required']\">Date of birth is required</span>\r\n                        <!--<span *ngIf=\"patronform.controls.dateOfBirth.touched&&patronform.hasError('invalidDate')\">Date Should Not Be greater then Current Date</span>-->\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-2\">\r\n                    Class :\r\n                </div>\r\n                <div class=\"ui-grid-col-6\">\r\n                    <p-dropdown [options]=\"classList\" placeholder=\"Class\" (onChange)=\"getSelectedClassSection($event)\" formControlName=\"classList\" [style]=\"{'width':'85px'}\" [(ngModel)]=\"selectedClass\"></p-dropdown>\r\n                    <div style=\"color:brown\" *ngIf=\"!patronform.controls['classList'].valid&&patronform.controls['classList'].dirty\">\r\n                        Class is required\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-2\">\r\n                    Section :\r\n                </div>\r\n                <div class=\"ui-grid-col-6\">\r\n                    <p-dropdown [options]=\"sectionList\" placeholder=\"Section\" [style]=\"{'width':'85px','float':'left'}\" formControlName=\"sectionList\" [(ngModel)]=\"selectedSection\"></p-dropdown>\r\n                    <div style=\"color:brown\" *ngIf=\"!patronform.controls['sectionList'].valid&&patronform.controls['sectionList'].dirty\">\r\n                        Section is required\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-2\">\r\n                    Roll Number :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <input pInputText type=\"text\" formControlName=\"rollNo\" [style]=\"{'width':'85px'}\" [(ngModel)]=\"patronDetail.rollNo\" />\r\n                    <div style=\"color:brown\" *ngIf=\"!patronform.controls['rollNo'].valid&&patronform.controls['rollNo'].dirty\">\r\n                        <span *ngIf=\"patronform.controls['rollNo'].errors['required']\">Roll number is required</span>\r\n                        <span *ngIf=\"patronform.controls['rollNo'].errors['pattern']\">Roll number should be number</span>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-2\">\r\n                    Active :\r\n                </div>\r\n                <div class=\"ui-grid-col-6\">\r\n                    <p-checkbox name=\"isActive\" formControlName=\"isActive\" value=\"isActive\" binary=\"true\" [(ngModel)]=\"patronDetail.isActive\"></p-checkbox>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-2\">\r\n                    Image :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n\r\n                    <input #fileInput type=\"file\" class=\"form-control\" name=\"imgUrl\" />\r\n                </div>\r\n                <div class=\"ui-grid-col-6\">\r\n                    <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{patronDetail.imgUrl}}\" height=\"60\" width=\"60\" class=\"rounded-circle\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <footer style=\"margin-left:123px;\">\r\n            <div>               \r\n                <button type=\"button\" style=\"float:initial;width:110px;height:30px;\" label=\"Cancel\" pButton (click)=\"patronCancel($event)\"></button>\r\n                <button pButton type=\"submit\" style=\"width:110px;height:30px;\" label=\"Save\" [disabled]=\"!patronform.valid\"></button>\r\n            </div>\r\n        </footer>\r\n    </form>\r\n</p-dialog>\r\n<div class=\"card card-w-title\">\r\n    <!--<div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;margin-top:20px\">\r\n        <div class=\"ui-grid-row\">\r\n            <div>\r\n                <button type=\"button\" pButton icon=\"fa-user-plus\" style=\"float:left\" (click)=\"addPatron()\" label=\"Add\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Add Patron\"></button>\r\n            </div>&nbsp;&nbsp;\r\n            <div class=\"ui-grid-col-5\">\r\n\r\n            </div>\r\n            <div class=\"ui-grid-col-5\">\r\n                <input #gb type=\"text\" pInputText size=\"30\" style=\"float:right\" placeholder=\"search\">\r\n                <i class=\"fa fa-search\" style=\"float:right;margin:4px 4px 0 0\"></i>\r\n            </div>\r\n            &nbsp;\r\n            <div>\r\n                <button type=\"button\" style=\"float:right;\" pButton icon=\"fa-file-o\" iconPos=\"left\" label=\"Export\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Download\" (click)=\"download()\"></button>\r\n            </div>\r\n        </div>data-toggle=\"tooltip\" data-placement=\"right\" title=\"Add Patron\"\r\n    </div>-->\r\n    <p-toolbar>\r\n        <div class=\"ui-toolbar-group-left\">\r\n            <button type=\"button\" pButton icon=\"fa-user-plus\" style=\"float:left\" (click)=\"addPatron()\" label=\"Add\" pTooltip=\"Add Patron\" tooltipPosition=\"top\"></button>\r\n        </div>\r\n        <div class=\"ui-toolbar-group-right\">\r\n            <i class=\"fa fa-search\" style=\"margin:4px 4px 0 0\"></i>\r\n            <input #gb type=\"text\" pInputText size=\"30\" placeholder=\"search\">\r\n            <button type=\"button\"  pButton icon=\"fa-file-o\" iconPos=\"left\" label=\"Export\" pTooltip=\"Download\" tooltipPosition=\"top\" (click)=\"download()\"></button>\r\n        </div>\r\n    </p-toolbar>\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;margin-top:-1px\">\r\n        <div class=\"ui-grid-row\">\r\n            <header style=\"text-align:left;font-size:120%\">Patron</header>\r\n        </div>\r\n    </div>\r\n    <p-dataTable #dt [(value)]=\"patronDetails\" [(selection)]=\"selectedPatronDetail\" [rows]=\"10\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15,20]\" [responsive]=\"true\" [globalFilter]=\"gb\" [loading]=\"loading\" loadingIcon=\"fa-spinner\">\r\n        <p-column header=\"Action\" [style]=\"{'width':'81px'}\">\r\n            <ng-template let-patron=\"rowData\" pTemplate type=\"body\">\r\n                <button type=\"button\" pButton (click)=\"updatePatron(patron)\" icon=\"fa-pencil-square-o\" pTooltip=\"Edit Patron\" tooltipPosition=\"top\"></button>\r\n                <button type=\"button\" pButton (click)=\"deletePatron(patron)\" icon=\"fa-trash\" pTooltip=\"Delete Patron\" tooltipPosition=\"top\"></button>\r\n                <button type=\"button\" pButton (click)=\"addperson(patron)\" icon=\"fa fa-phone\"  pTooltip=\"Add Contact Person\" tooltipPosition=\"top\"></button>\r\n                <button type=\"button\" pButton (click)=\"addAuthType(patron)\" icon=\"fa fa-unlock-alt\" pTooltip=\"Add Authentication\" tooltipPosition=\"top\"></button>\r\n            </ng-template>\r\n        </p-column>\r\n        <p-column field=\"imgUrl\" [style]=\"{'width':'31px'}\">\r\n            <ng-template let-col let-car=\"rowData\" pTemplate=\"body\"> \r\n                <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n            </ng-template>\r\n        </p-column>\r\n        <p-column field=\"firstName\" header=\"First Name\" [sortable]=\"true\" [style]=\"{'width':'120px'}\"></p-column>\r\n        <p-column field=\"lastName\" header=\"Last Name\" [sortable]=\"true\" [style]=\"{'width':'120px'}\"></p-column>\r\n        <p-column field=\"isActive\" header=\"Active\" [sortable]=\"true\" [style]=\"{'width':'70px'}\"></p-column>\r\n        <p-column field=\"class\" header=\"Class\" [sortable]=\"true\"[style]=\"{'width':'50px'}\"></p-column>\r\n        <p-column field=\"section\" header=\"Section\" [style]=\"{'width':'60px'}\"></p-column>\r\n        <p-column field=\"rollNo\" header=\"Roll No\" [sortable]=\"true\" [style]=\"{'width':'55px'}\"></p-column>\r\n    </p-dataTable>\r\n</div>\r\n\r\n\r\n<p-dialog [(visible)]=\"patronContact\" header=\"Contact Person\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"830\" height=\"633\" [contentStyle]=\"{'overflow':'auto','max-height':'578px'}\">\r\n    <div style=\"padding:4px 10px;border-bottom: 0 none;margin-top:-25px\">\r\n        <p-tabView (onChange)=\"handleChange($event)\" [style]=\"{'width':'791px','margin-top':'17px','margin-left':'-13px'}\">\r\n            <p-tabPanel header=\"List\" [selected]=\"selectedTab===1\" *ngIf=\"tab1visible\">\r\n                \r\n                <p-toolbar [style]=\"{'width':'784px','margin-left':'-14px','margin-top':'-15px'}\">\r\n                    <div class=\"ui-toolbar-group-left\">\r\n                        <button type=\"button\" pButton style=\"float:left;width:80px\" icon=\"fa-plus\" (click)=\"activateTab(0,'add')\" label=\"Add\" pTooltip=\"Add Contact Person\" tooltipPosition=\"top\"></button>\r\n                    </div>\r\n\r\n                </p-toolbar>\r\n                <p-dataTable [(value)]=\"personDetails\" [(selection)]=\"selectedPersonDetail\" [rows]=\"8\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [responsive]=\"true\" [style]=\"{'width':'784px','margin-left':'-14px','margin-top':'-1px'}\">\r\n                    <p-column header=\"Action\" [style]=\"{'width':'70px'}\">\r\n                        <ng-template let-personDetail=\"rowData\" pTemplate type=\"body\">\r\n                            <button type=\"button\" pButton style=\"float:left\" icon=\"fa-pencil-square-o\" (click)=\"updateContactPerson(0,'edit',personDetail)\" pTooltip=\"Edit Contact Person\" tooltipPosition=\"top\"></button>\r\n                            <button type=\"button\" pButton style=\"float:left\" icon=\"fa-trash\" (click)=\"deletePerson(personDetail)\" pTooltip=\"Delete Contact Person\" tooltipPosition=\"top\"></button>\r\n                        </ng-template>\r\n                    </p-column>\r\n                    <p-column field=\"imgUrl\" [style]=\"{'width':'50px'}\">\r\n                        <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                            <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                        </ng-template>\r\n                    </p-column>\r\n                    <p-column field=\"firstName\" header=\"First Name\" [style]=\"{'width':'130px'}\"></p-column>\r\n                    <p-column field=\"lastName\" header=\"Last Name\" [style]=\"{'width':'130px'}\"></p-column>\r\n                    <p-column field=\"emailId\" header=\"Email Id\" [style]=\"{'width':'157px'}\"></p-column>\r\n                    <p-column field=\"primaryMobile\" header=\"Mobile\" [style]=\"{'width':'100px'}\"></p-column>\r\n                </p-dataTable>\r\n            </p-tabPanel>\r\n\r\n            <p-tabPanel header=\"{{ContactPersonHeader}}\" [selected]=\"selectedTab===0\" *ngIf=\"tab2visible\">\r\n                <form [formGroup]=\"personform\" (ngSubmit)=\"createPerson(1)\" style=\"margin-left: 20px;margin-bottom: 20px;margin-left:-10px;\">                    \r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-2\">\r\n                                First Name :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <input pInputText type=\"text\" formControlName=\"firstName\" placeholder=\"Required\" [(ngModel)]=\"personDetail.firstName\" />\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['firstName'].valid&&personform.controls['firstName'].dirty\">\r\n                                    <span *ngIf=\"personform.controls['firstName'].errors['required']\">First name is required</span>\r\n                                    <span *ngIf=\"personform.controls['firstName'].errors['pattern']\">First name should be characters</span>      \r\n                                    \r\n                                </div>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-2\">\r\n                                Last Name :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <input pInputText type=\"text\" formControlName=\"lastName\" placeholder=\"Required\" [(ngModel)]=\"personDetail.lastName\" />\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['lastName'].valid&&personform.controls['lastName'].dirty\">\r\n                                    <span *ngIf=\"personform.controls['lastName'].errors['required']\">Last name is required</span>\r\n                                    <span *ngIf=\"personform.controls['lastName'].errors['pattern']\">Last name should be characters</span>\r\n                                  \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-2\">\r\n                                Email Id :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <input pInputText type=\"email\" placeholder=\"example@gmail.com\" formControlName=\"emailId\"  [(ngModel)]=\"personDetail.emailId\" />\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['emailId'].valid&&personform.controls['emailId'].dirty\">\r\n                                    <span *ngIf=\"personform.controls['emailId'].errors['required']\">Email id is required</span>\r\n                                    <span *ngIf=\"personform.controls['emailId'].errors['email']\">Invalid email id</span>\r\n\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-2\">\r\n                                Relation :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-3\">\r\n                                <p-dropdown [options]=\"relations\" placeholder=\"Relation\" formControlName=\"relation\" [style]=\"{'width':'120px'}\" [(ngModel)]=\"selectedRelation\"></p-dropdown>\r\n\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['relation'].valid&&personform.controls['relation'].dirty\">\r\n                                    Relation is required\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <!--<div class=\"ui-grid-col-2\">\r\n                                Gender :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <p-radioButton name=\"gender\" formControlName=\"gender\" value=\"male\" label=\"Male\" [(ngModel)]=\"personDetail.gender\"></p-radioButton>\r\n                                <p-radioButton name=\"gender\" formControlName=\"gender\" value=\"female\" label=\"Female\" [(ngModel)]=\"personDetail.gender\"></p-radioButton>\r\n                            </div>-->\r\n                            <div class=\"ui-grid-col-2\">\r\n                                Date of Birth :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <p-calendar formControlName=\"dateOfBirth\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"1950:2030\" dateFormat=\"dd/mm/yy\" [showIcon]=\"true\" [(ngModel)]=\"personDetail.dateOfBirth\"></p-calendar>                                \r\n                          <div style=\"color:brown\" *ngIf=\"!personform.controls['dateOfBirth'].valid&&personform.controls['dateOfBirth'].dirty\">\r\n                        <span *ngIf=\"personform.controls['dateOfBirth'].errors['required']\">Date of birth is required</span>\r\n                    </div>\r\n                              \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-2\">\r\n                                 Mobile :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <input pInputText type=\"text\" formControlName=\"primaryMobile\" laceholder=\"Required\" [(ngModel)]=\"personDetail.primaryMobile\" />\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['primaryMobile'].valid&&personform.controls['primaryMobile'].dirty\">\r\n                                    <span *ngIf=\"personform.controls['primaryMobile'].errors['pattern']\">Mobile number should be number</span> \r\n                                    <span *ngIf=\"!personform.controls['primaryMobile'].errors['pattern']&&personform.controls['primaryMobile'].errors['minlength']\">Number should not be less than 10</span>\r\n                                    <span *ngIf=\"!personform.controls['primaryMobile'].errors['pattern']&&personform.controls['primaryMobile'].errors['maxlength']\">Number should not be grater than 10</span>\r\n                                    <span *ngIf=\"personform.controls['primaryMobile'].errors['required']\">Mobile number required</span>\r\n                                   \r\n                                </div>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-2\">\r\n                                 Phone  :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <input pInputText type=\"text\" formControlName=\"secondaryMobile\" placeholder=\"secondary mobile\" [(ngModel)]=\"personDetail.secondaryMobile\" />\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['secondaryMobile'].valid&&personform.controls['secondaryMobile'].dirty\">\r\n                       <span *ngIf=\"personform.controls['secondaryMobile'].errors['pattern']\">Phone number should be number</span> <span *ngIf=\"!personform.controls['secondaryMobile'].errors['pattern']&&personform.controls['secondaryMobile'].errors['minlength']\">Number should not be less than 10 </span>\r\n                         <span *ngIf=\"!personform.controls['secondaryMobile'].errors['pattern']&&personform.controls['secondaryMobile'].errors['maxlength']\">Number should not be grater than 10</span>\r\n                      \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-2\">\r\n                                Address :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <textarea pInputText type=\"text\" formControlName=\"address\" placeholder=\"Required\" autoResize=\"autoResize\" [(ngModel)]=\"personDetail.address\"></textarea>\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['address'].valid&&personform.controls['address'].dirty\">\r\n                                    Address is required\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-2\">\r\n                                Country :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <p-dropdown [options]=\"countries\" placeholder=\"Country\" formControlName=\"countries\" [style]=\"{'width':'150px'}\" [(ngModel)]=\"selectedCountry\"></p-dropdown>\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['countries'].valid&&personform.controls['countries'].dirty\">\r\n                                    Country is required\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-2\">\r\n                                State :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <p-dropdown [options]=\"countryStates\" placeholder=\"State\" formControlName=\"state\" [style]=\"{'width':'180px'}\" [(ngModel)]=\"selectedState\"></p-dropdown>\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['state'].valid&&personform.controls['state'].dirty\">\r\n                                    State is required\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-2\">\r\n                                Postal Code :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <input pInputText type=\"text\" formControlName=\"zipCode\" [(ngModel)]=\"personDetail.zipCode\" />\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['zipCode'].valid&&personform.controls['zipCode'].dirty\">\r\n                                    <span *ngIf=\"personform.controls['zipCode'].errors['pattern']\">Postal code should be number</span>\r\n                                    <span *ngIf=\"!personform.controls['zipCode'].errors['pattern']&&personform.controls['zipCode'].errors['minlength']\"> Code should not be less than 3 </span>\r\n                                    <span *ngIf=\"!personform.controls['zipCode'].errors['pattern']&&personform.controls['zipCode'].errors['maxlength']\"> Code should not be grater than 8</span>\r\n                                    <span *ngIf=\"personform.controls['zipCode'].errors['required']\">Postal code is required</span>\r\n                                </div>\r\n                            </div>\r\n                          </div>\r\n                    </div>\r\n\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-2\">\r\n                                Active :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-1\">\r\n                                <p-checkbox name=\"isActive\" formControlName=\"isActive\" value=\"isActive\" binary=\"true\" [(ngModel)]=\"personDetail.isActive\"></p-checkbox>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-3\">\r\n                                Having Primary Contact :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-1\">\r\n                                <p-checkbox name=\"isPrimaryContact\" formControlName=\"isPrimaryContact\" value=\"isPrimaryContact\" binary=\"true\" [(ngModel)]=\"personDetail.isPrimaryContact\">\r\n                                </p-checkbox>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-3\">\r\n                                Using Smart Phone :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-2\">\r\n                                <p-checkbox name=\"isHavingSmartPhone\" formControlName=\"isHavingSmartPhone\" value=\"isHavingSmartPhone\" binary=\"true\" [(ngModel)]=\"personDetail.isHavingSmartPhone\">\r\n                                </p-checkbox>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-2\">\r\n                                Image :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <input #personImage type=\"file\" class=\"form-control\" name=\"imgUrl\" />\r\n                            </div>\r\n                            <div class=\"ui-grid-col-6\">\r\n\r\n                                <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{personDetail.imgUrl}}\" height=\"60\" width=\"60\" class=\"rounded-circle\" />\r\n                            </div>\r\n                            \r\n                        </div>\r\n                    </div>\r\n                    <footer style=\"margin-left:129px;\">\r\n                        <div>                           \r\n                            <button type=\"button\" style=\"float:initial;width:110px;height:30px;\" label=\"Cancel\" pButton (click)=\"contactcancel(1)\"></button>\r\n                           \r\n                            <button pButton type=\"submit\" style=\"width:110px;height:30px;margin-left:5px\"label=\"Save\" [disabled]=\"!personform.valid\"></button>\r\n                        </div>\r\n                    </footer>\r\n                </form>\r\n            </p-tabPanel>\r\n        </p-tabView>\r\n    </div>\r\n</p-dialog>\r\n\r\n\r\n\r\n<p-dialog [(visible)]=\"patronAuthDialog\" header=\"Patron Authentication\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"700\" height=\"354\" [contentStyle]=\"{'overflow':'auto','max-height':'578px'}\">\r\n    <div style=\"padding:4px 10px;border-bottom: 0 none;width:630px;margin-top:-25px\">\r\n        <p-tabView (onChange)=\"handleChange1($event)\" [style]=\"{'width':'663px','margin-top':'17px','margin-left':'-13px'}\">\r\n            <p-tabPanel header=\"List\" [selected]=\"selectedTab===1\" *ngIf=\"tab1Authenticationvisible\">\r\n               \r\n                <p-toolbar [style]=\"{'width':'656px','margin-left':'-14px','margin-top':'-15px'}\">\r\n                    <div class=\"ui-toolbar-group-left\">\r\n                        <button type=\"button\" pButton styl e=\"float:left;width:80px\" icon=\"fa-plus\" (click)=\"activateTab1(0,'add')\" label=\"Add\" pTooltip=\"Add  Authentication\" tooltipPosition=\"top\"></button>\r\n                    </div>\r\n                    \r\n                </p-toolbar>\r\n                <p-dataTable [(value)]=\"authTypeDetails\" [(selection)]=\"selectAuthenticationTypeDetail\" [rows]=\"4\" [paginator]=\"true\" [pageLinks]=\"3\" [responsive]=\"true\" [style]=\"{'width':'656px','margin-left':'-14px','margin-top':'-1px'}\">\r\n                    <p-column header=\"Action\" [style]=\"{'width':'74px'}\">\r\n                        <ng-template let-authDetail=\"rowData\" pTemplate type=\"body\">\r\n                            <button type=\"button\" pButton style=\"float:left\" icon=\"fa-pencil-square-o\" (click)=\"updateAuthType(0,'edit',authDetail)\" pTooltip=\"Edit  Authentication\" tooltipPosition=\"top\"></button>\r\n                            <button type=\"button\" pButton style=\"float:left\" icon=\"fa-trash\" (click)=\"deleteAuthType(authDetail)\" pTooltip=\"Delete  Authentication\" tooltipPosition=\"top\"></button>\r\n                        </ng-template>\r\n                    </p-column>\r\n                    <p-column field=\"hashValue\" header=\"Hash Value\"></p-column>\r\n                    <p-column field=\"modeType\" header=\"Authentication Type\"></p-column>\r\n                    <p-column field=\"remark\" header=\"Remark\"></p-column>\r\n                </p-dataTable>\r\n            </p-tabPanel>\r\n\r\n            <p-tabPanel header=\"{{AutheticationHeader}}\" [selected]=\"selectedTab===0\" *ngIf=\"tab2Authenticationvisible\">\r\n                <form [formGroup]=\"authform\" (ngSubmit)=\"createAuthType(1)\">\r\n                     <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-3\">\r\n                                Hash Value :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <input pInputText type=\"text\" formControlName=\"hashvalue\" placeholder=\"Required\" [(ngModel)]=\"authenticationTypeDetail.hashValue\" />\r\n                                <div style=\"color:brown\" *ngIf=\"!authform.controls['hashvalue'].valid&&authform.controls['hashvalue'].dirty\">\r\n                                    Hash value is required\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-3\">\r\n                                Authetication Mode :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-6\">\r\n                                <p-dropdown [options]=\"authMode\" placeholder=\"Select Mode\" [style]=\"{'width':'120px'}\" formControlName=\"authmode\" [(ngModel)]=\"selectedAuthMode\"> </p-dropdown>\r\n                                <div style=\"color:brown\" *ngIf=\"!authform.controls['authmode'].valid&&authform.controls['authmode'].dirty\">\r\n                                    Authetication mode is required\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-3\">\r\n                                Remark :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <input pInputText type=\"text\" formControlName=\"remark\" [(ngModel)]=\"authenticationTypeDetail.remark\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <footer style=\"margin-left:157px;\">\r\n                        <div>\r\n                            <button type=\"button\" style=\"float:initial;width:90px;height:30px;\" label=\"Cancel\" pButton (click)=\"onCancel(1)\"></button>\r\n                            <button pButton type=\"submit\" style=\"width:90px;height:30px\" label=\"Save\" [disabled]=\"!authform.valid\"></button>\r\n                        </div>\r\n                    </footer>\r\n                </form>\r\n            </p-tabPanel>\r\n        </p-tabView>\r\n    </div>\r\n</p-dialog>\r\n\r\n<p-confirmDialog width=\"425\"></p-confirmDialog>\r\n<p-growl [value]=\"msgs\" life=\"3000\"></p-growl>";

/***/ }),
/* 215 */
/***/ (function(module, exports) {

module.exports = "\r\n<div class=\"ui-fluid\">\r\n    <div class=\"ui-g\">\r\n        <div class=\"ui-g-12\">\r\n            <div class=\"card card-w-title\">\r\n                <p-toolbar>\r\n                    <div class=\"ui-toolbar-group-left\">\r\n                        <p-calendar dateFormat=\"yy-mm-dd\" [(ngModel)]=\"selectedDate\" [style]=\"{'width':'100px'}\" (onSelect)=\"getSelectedDate($event)\"></p-calendar>\r\n                    </div>                    \r\n                    <div class=\"ui-toolbar-group-right\">\r\n                        <input #gb type=\"text\" pInputText size=\"30\" placeholder=\"search\" style=\"width:200px\">\r\n                        <i class=\"fa fa-search\" style=\"margin:4px 4px 0 0;width:10px\"></i>\r\n                        <button type=\"button\" style=\"width:100px;height:29px;\" pButton icon=\"fa-file-o\" iconPos=\"left\" label=\"Export\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Download\" (click)=\"download()\"></button>\r\n                    </div>\r\n                </p-toolbar>\r\n                <br>\r\n                <p-tabView (onChange)=\"handleChange($event)\">\r\n                    <p-tabPanel header=\"Chart\" [selected]=\"selectedTab===0\">\r\n\r\n                        <div class=\"ui-fluid\">\r\n                            <p-toolbar style=\"margin-top:1px\">\r\n                                <div (click)=\"activatedTab(1)\" class=\"ui-grid-col-3\" style=\"cursor:pointer;text-align:center;background-color:forestgreen;width:150px;height:50px;font-size:14px; color:#ffffff; font-weight:bold;padding:4px 10px;border-bottom: 0 none;margin-top:1px\">\r\n                                    Present  <br>   {{presentPersonCount}}\r\n                                </div>\r\n                                <div class=\"ui-grid-col-3\" style=\"text-align:center;width:3px;height:50px;padding:4px 10px;margin-top:2px\">\r\n                                    <i class=\"fa fa-plus-circle\" aria-hidden=\"true\" style=\"margin-top:11px;margin-left:-3px\"></i>\r\n                                </div>\r\n                                &nbsp;&nbsp;\r\n\r\n                                <div (click)=\"activatedTab(2)\" class=\"ui-grid-col-4\" style=\"text-align:center; cursor:pointer;background-color:orangered;width:150px;height:50px;font-size:14px; color:#ffffff; font-weight:bold;padding:4px 10px;border-bottom: 0 none;margin-top:1px\">\r\n                                    Absent  <br>   {{absentperson}}\r\n\r\n                                </div>\r\n                                <div class=\"ui-grid-col-3\" style=\"text-align:center;width:3px;height:50px;padding:4px 10px;margin-top:2px\">\r\n                                    <i class=\"fa fa-plus-circle\" aria-hidden=\"true\" style=\"margin-top:11px;margin-left:-3px\"></i>\r\n                                </div>\r\n                                &nbsp;&nbsp;\r\n                                <div (click)=\"activatedTab(3)\" class=\"ui-grid-col-6\" style=\"text-align:center; cursor:pointer;background-color:orange;width:150px;height:50px;font-size:14px; color:#ffffff; font-weight:bold;padding:4px 10px;border-bottom: 0 none;margin-top:1px\">\r\n                                    On Leave <br>     {{presentOnleave}}\r\n\r\n                                </div>\r\n                                <div class=\"ui-grid-col-3\" style=\"text-align:center;width:3px;height:50px;padding:4px 10px;margin-top:2px\">\r\n                                    <b style=\"margin-top:15px;margin-left:-3px;width:5px;font-size:larger\">= </b>\r\n                                </div>\r\n                                &nbsp;&nbsp;\r\n                                <div class=\"ui-grid-col-8\" style=\"text-align:center; cursor:pointer;background-color:deepskyblue;width:150px;height:50px;font-size:14px; color:#ffffff; font-weight:bold;padding:4px 10px;border-bottom: 0 none;margin-top:1px\">\r\n                                    Total  <br>    {{totalPerson}}\r\n                                </div>\r\n                            </p-toolbar>\r\n                        </div>\r\n\r\n                        <br>\r\n                        <div class=\"ui-fluid\">\r\n                            <p-chart #chart type=\"bar\" [data]=\"data1\" (onDataSelect)=\"selectData1($event)\"></p-chart>\r\n                        </div>\r\n\r\n\r\n                    </p-tabPanel>\r\n                    <p-tabPanel header=\"Present\" [selected]=\"selectedTab===1\">\r\n                        <div class=\"ui-fluid \">\r\n                            <p-dataTable [(value)]=\"presentPersonImageList\" selectionMode=\"single\" [(selection)]=\"selectedTrackingDetail\" [paginator]=\"true\" [rows]=\"8\" [responsive]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [globalFilter]=\"gb\">\r\n                                <p-column field=\"imagePath\" [style]=\"{'width':'70px'}\">\r\n                                    <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                                        <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                                    </ng-template>\r\n                                </p-column>\r\n                               <p-column field=\"personTracking.firstName\" header=\"FirstName\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"personTracking.lastName\" header=\"LastName\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"personTracking.role\" header=\"Role\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"personTracking.emailId\" header=\"Email\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"personTracking.primaryMobile\" header=\"Phone No\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"personTracking.trackingTime\" header=\"Time\" [filter]=\"true\"></p-column>\r\n                            </p-dataTable>\r\n                        </div>\r\n                    </p-tabPanel>\r\n\r\n                    <p-tabPanel header=\"Absent\" [selected]=\"selectedTab===2\">\r\n                        <div class=\"ui-fluid \">\r\n\r\n                            <p-dataTable [(value)]=\"absentPersonList\" selectionMode=\"single\" [(selection)]=\"selectedAbsentPerson\" [paginator]=\"true\" [rows]=\"8\" [responsive]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [globalFilter]=\"gb\">\r\n                                <p-column field=\"imgUrl\" header=\"Image\" [style]=\"{'width':'70px'}\">\r\n                                    <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                                        <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                                    </ng-template>\r\n                                </p-column>\r\n                                <p-column field=\"firstName\" header=\"First Name\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"lastName\" header=\"Last Name\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"role\" header=\"Role\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"primaryMobile\" header=\"Phone No\" [filter]=\"true\"></p-column>\r\n                            </p-dataTable>\r\n                            <p-toolbar>\r\n                                <button type=\"button\" style=\"float:initial;width:140px;\" label=\"Mark Present\" pButton (click)=\"updateAttendance(selectedAbsentPerson)\"></button>\r\n                            </p-toolbar>\r\n                        </div>\r\n                    </p-tabPanel>\r\n\r\n\r\n                    <p-tabPanel header=\"On Leave\" [selected]=\"selectedTab===3\">\r\n                        <div class=\"ui-fluid \">\r\n                            <p-dataTable [value]=\"personOnLeaveDescriptionList\" selectionMode=\"single\" [(selection)]=\"selectedOnLeavePerson\" [rows]=\"8\" [paginator]=\"true\" [pageLinks]=\"5\" [rowsPerPageOptions]=\"[5,10,20]\" [globalFilter]=\"gb\">\r\n                                <p-column field=\"imagePath\" header=\"Image\" [style]=\"{'width':'70px'}\">\r\n                                    <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                                        <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                                    </ng-template>\r\n                                </p-column>\r\n                                <p-column field=\"personInfo.firstName\" header=\"First Name\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"personInfo.lastName\" header=\"Last Name\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"personInfo.role\" header=\"Role\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"personInfo.primaryMobile\" header=\"Phone No\" [filter]=\"true\"></p-column>\r\n                                <p-column field=\"description\" header=\"Description\" [filter]=\"true\"></p-column>\r\n                            </p-dataTable>\r\n                        </div>\r\n                    </p-tabPanel>\r\n                    \r\n                </p-tabView>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>";

/***/ }),
/* 216 */
/***/ (function(module, exports) {

module.exports = "<p-dialog header=\"{{employeeHeader}}\" [(visible)]=\"staffPersonDialog\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"870\" height=\"610\" [contentStyle]=\"{'overflow':'auto','max-height':'550px'}\">\r\n    <form [formGroup]=\"personviewform\" (ngSubmit)=\"createEmployee(personviewform.value)\">\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-2\">\r\n                    First Name :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <input pInputText type=\"text\" formControlName=\"firstName\" placeholder=\"Required\" [(ngModel)]=\"pViewDetail.firstName\" />\r\n                    <div style=\"color:brown\" *ngIf=\"!personviewform.controls['firstName'].valid&&personviewform.controls['firstName'].dirty\">\r\n                        <span *ngIf=\"personviewform.controls['firstName'].errors['required']\">  First name is required</span>\r\n                        <span *ngIf=\"personviewform.controls['firstName'].errors['pattern']\">First name should be characters</span></div>\r\n                </div>\r\n                <div class=\"ui-grid-col-2\">\r\n                    Last Name :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <input pInputText type=\"text\" formControlName=\"lastName\" placeholder=\"Required\" [(ngModel)]=\"pViewDetail.lastName\" />\r\n                    <div style=\"color:brown\" *ngIf=\"!personviewform.controls['lastName'].valid&&personviewform.controls['lastName'].dirty\">\r\n                        <span *ngIf=\"personviewform.controls['lastName'].errors['required']\">Last name is required</span>\r\n                        <span *ngIf=\"personviewform.controls['lastName'].errors['pattern']\">Last name should be characters</span>  \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-2\">\r\n                    Role :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <p-dropdown [options]=\"role\" placeholder=\"Role\" formControlName=\"role\" [style]=\"{'width':'120px'}\" [(ngModel)]=\"selectedRole\"></p-dropdown>\r\n                    <div style=\"color:brown\" *ngIf=\"!personviewform.controls['role'].valid&&personviewform.controls['role'].dirty\">\r\n                        Role  is required\r\n                    </div>\r\n                </div>\r\n                <div class=\"ui-grid-col-2\">\r\n                    Email Id :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <input pInputText type=\"email\" formControlName=\"emailId\" placeholder=\"example@gmail.com\" [(ngModel)]=\"pViewDetail.emailId\" />\r\n                     <div style=\"color:brown\" *ngIf=\"!personviewform.controls['emailId'].valid&&personviewform.controls['emailId'].dirty\">\r\n                         <span *ngIf=\"personviewform.controls['emailId'].errors['required']\">Email id is required</span>\r\n                         <span *ngIf=\"personviewform.controls['emailId'].errors['email']\">Invalid email id</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-2\">\r\n                    Password :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <input pPassword type=\"password\" (click)=\"showPassword(input)\" #input (onclick)=\"toggleShow($event)\" showHideInput formControlName=\"password\" placeholder=\"Required\" [(ngModel)]=\"pViewDetail.password\" />\r\n                    <div style=\"color:brown\" *ngIf=\"!personviewform.controls['password'].valid&&personviewform.controls['password'].dirty\">\r\n                        <span *ngIf=\"personviewform.controls['password'].errors['required']\">Password is required</span>\r\n                        <span *ngIf=\"personviewform.controls['password'].errors['minlength']\">Must be longer than 4 characters</span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"ui-grid-col-2\">\r\n                    Retype-Password :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <input pPassword type=\"password\" formControlName=\"confirmPassword\" placeholder=\"Required\" [(ngModel)]=\"pViewDetail.confirmPassword\" />\r\n                    <div style=\"color:brown\" *ngIf=\"personviewform.controls.confirmPassword.touched&&personviewform.hasError('mismatchedPasswords')\">\r\n                        Passwords do not match.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-2\">\r\n                    Gender :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <p-radioButton name=\"gender\" formControlName=\"gender\" value=\"Male\" label=\"Male\" [(ngModel)]=\"pViewDetail.gender\"></p-radioButton>\r\n                    <p-radioButton name=\"gender\" formControlName=\"gender\" value=\"Female\" label=\"Female\" [(ngModel)]=\"pViewDetail.gender\"></p-radioButton>\r\n                </div>\r\n                <div class=\"ui-grid-col-2\">\r\n                    Date of Birth :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <p-calendar formControlName=\"dateOfBirth\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"1950:2030\" dateFormat=\"yy-mm-dd\" [showIcon]=\"true\" [(ngModel)]=\"pViewDetail.dateOfBirth\"></p-calendar>\r\n                    <div style=\"color:brown\" *ngIf=\"!personviewform.controls['dateOfBirth'].valid&&personviewform.controls['dateOfBirth'].dirty\">\r\n                        <span *ngIf=\"personviewform.controls['dateOfBirth'].errors['required']\">Date of Birth is Required</span>\r\n                        <!--<span *ngIf=\"patronform.controls.dateOfBirth.touched&&patronform.hasError('invalidDate')\">Date Should Not Be greater then Current Date</span>-->\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-2\">\r\n                    Mobile:\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <input pInputText type=\"text\" formControlName=\"primaryMobile\" placeholder=\"Required\" [(ngModel)]=\"pViewDetail.primaryMobile\" />\r\n                    <div style=\"color:brown\" *ngIf=\"!personviewform.controls['primaryMobile'].valid&&personviewform.controls['primaryMobile'].dirty\">\r\n                        <span *ngIf=\"personviewform.controls['primaryMobile'].errors['pattern']\">Mobile number should be number</span>\r\n                        <span *ngIf=\"!personviewform.controls['primaryMobile'].errors['pattern']&&personviewform.controls['primaryMobile'].errors['minlength']\">Number should not be less than 10</span>\r\n                        <span *ngIf=\"!personviewform.controls['primaryMobile'].errors['pattern']&&personviewform.controls['primaryMobile'].errors['maxlength']\">Number should not be grater than 10</span>\r\n                        <span *ngIf=\"personviewform.controls['primaryMobile'].errors['required']\">Mobile number required</span>\r\n\r\n                    </div>\r\n                </div>\r\n                <div class=\"ui-grid-col-2\">\r\n                    Phone :\r\n                </div>\r\n                <div class=\"ui-grid-col-3\">\r\n                    <input pInputText type=\"text\" formControlName=\"secondaryMobile\" [(ngModel)]=\"pViewDetail.secondaryMobile\" />\r\n                    <!--<div style=\"color:brown\" *ngIf=\"!personviewform.controls['secondaryMobile'].valid&&personform.controls['secondaryMobile'].dirty\">\r\n                        <span *ngIf=\"personviewform.controls['secondaryMobile'].errors['minlength']\">Number Should Not Be Less Than 10 </span>\r\n                        <span *ngIf=\"personviewform.controls['secondaryMobile'].errors['maxlength']\">Number Should Not Be Less Than 10</span>\r\n                    </div>-->\r\n                    <div style=\"color:brown\" *ngIf=\"!personviewform.controls['secondaryMobile'].valid&&personviewform.controls['secondaryMobile'].dirty\">\r\n                        <span *ngIf=\"personviewform.controls['secondaryMobile'].errors['pattern']\">Phone number should be number</span>\r\n                        <span *ngIf=\"!personviewform.controls['secondaryMobile'].errors['pattern']&&personviewform.controls['secondaryMobile'].errors['minlength']\">Number should not be less than 10 </span>\r\n                        <span *ngIf=\"!personviewform.controls['secondaryMobile'].errors['pattern']&&personviewform.controls['secondaryMobile'].errors['maxlength']\">Number should not be grater than 10</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-2\">\r\n                    Address :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <textarea pInputText type=\"text\" formControlName=\"address\" placeholder=\"Required\" autoResize=\"autoResize\" [(ngModel)]=\"pViewDetail.address\"></textarea>\r\n                    <div style=\"color:brown\" *ngIf=\"!personviewform.controls['address'].valid&&personviewform.controls['address'].dirty\">\r\n                        Address is required\r\n                    </div>\r\n                </div>\r\n                <div class=\"ui-grid-col-2\">\r\n                    Country :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <p-dropdown [options]=\"countries\" placeholder=\"Country\" formControlName=\"countries\" [style]=\"{'width':'100px'}\" [(ngModel)]=\"selectedCountry\"></p-dropdown>\r\n                    <div style=\"color:brown\" *ngIf=\"!personviewform.controls['countries'].valid&&personviewform.controls['countries'].dirty\">\r\n                        Country is required\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-2\">\r\n                    State :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <p-dropdown [options]=\"countryStates\" placeholder=\"State\" formControlName=\"state\" [style]=\"{'width':'180px'}\" [(ngModel)]=\"selectedState\"></p-dropdown>\r\n                    <div style=\"color:brown\" *ngIf=\"!personviewform.controls['state'].valid&&personviewform.controls['state'].dirty\">\r\n                        State is required\r\n                    </div>\r\n                </div>\r\n                <div class=\"ui-grid-col-2\">\r\n                    Postal Code :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <input pInputText type=\"text\" formControlName=\"zipCode\" placeholder=\"pincode\" [(ngModel)]=\"pViewDetail.zipCode\" />\r\n                    <div style=\"color:brown\" *ngIf=\"!personviewform.controls['zipCode'].valid&&personviewform.controls['zipCode'].dirty\">\r\n                        <span *ngIf=\"personviewform.controls['zipCode'].errors['pattern']\">Postal code should be number</span>\r\n                        <span *ngIf=\"!personviewform.controls['zipCode'].errors['pattern']&&personviewform.controls['zipCode'].errors['minlength']\">Code should not be less than 3 </span>\r\n                        <span *ngIf=\"!personviewform.controls['zipCode'].errors['pattern']&&personviewform.controls['zipCode'].errors['maxlength']\">Code should not be grater than 8</span>\r\n                        <span *ngIf=\"personviewform.controls['zipCode'].errors['required']\">Postal code required</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-2\">\r\n                    Is Active :\r\n                </div>\r\n                <div class=\"ui-grid-col-1\">\r\n                    <p-checkbox name=\"isActive\" formControlName=\"isActive\" value=\"isActive\" binary=\"true\" [(ngModel)]=\"pViewDetail.isActive\"></p-checkbox>\r\n                </div>\r\n                <div class=\"ui-grid-col-3\">\r\n                    Having Primary Contact:\r\n                </div>\r\n                <div class=\"ui-grid-col-1\">\r\n                    <p-checkbox name=\"isPrimaryContact\" formControlName=\"isPrimaryContact\" value=\"isPrimaryContact\" binary=\"true\" [(ngModel)]=\"pViewDetail.isPrimaryContact\">\r\n                    </p-checkbox>\r\n                </div>\r\n                <div class=\"ui-grid-col-3\">\r\n                    Using Smart Phone:\r\n                </div>\r\n                <div class=\"ui-grid-col-2\">\r\n                    <p-checkbox name=\"isHavingSmartPhone\" formControlName=\"isHavingSmartPhone\" value=\"isHavingSmartPhone\" binary=\"true\" [(ngModel)]=\"pViewDetail.isHavingSmartPhone\">\r\n                    </p-checkbox>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-2\">\r\n                    Image:\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <input #fileInput type=\"file\" class=\"form-control\" name=\"documents\" />\r\n                </div>\r\n                <div class=\"ui-grid-col-6\">\r\n                    <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{pViewDetail.imgUrl}}\" height=\"60\" width=\"60\" class=\"rounded-circle\" />\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n        <footer style=\"margin-left:144px;\">\r\n            <div>\r\n                <button type=\"button\" style=\"float:initial;width:110px;height:30px;\" label=\"Cancel\" pButton (click)=\"personCancel($event)\"></button>\r\n                <button pButton type=\"submit\" style=\"width:110px;height:30px;\" label=\"Save\" [disabled]=\"!personviewform.valid\"></button>\r\n            </div>\r\n        </footer>\r\n    </form>\r\n</p-dialog>\r\n\r\n<div class=\"card card-w-title\">\r\n     <p-toolbar>\r\n        <div class=\"ui-toolbar-group-left\">\r\n            <button type=\"button\" pButton icon=\"fa-plus\" style=\"float:left\" (click)=\"addPersonView()\" label=\"Add\" pTooltip=\"Add Person\" tooltipPosition=\"top\"></button>\r\n        </div>\r\n        <div class=\"ui-toolbar-group-right\">\r\n            <i class=\"fa fa-search\" style=\"margin:4px 4px 0 0\"></i>\r\n            <input #gb type=\"text\" pInputText size=\"30\"  placeholder=\"search\">\r\n            <button type=\"button\" pButton icon=\"fa-file-o\" iconPos=\"left\" label=\"Export\" pTooltip=\"Download\" tooltipPosition=\"top\"  (click)=\"download()\"></button>\r\n        </div>\r\n    </p-toolbar>\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;margin-top:-1px\">\r\n        <div class=\"ui-grid-row\">\r\n            <header style=\"text-align:left;font-size:120%\">Person</header>\r\n        </div>\r\n    </div>\r\n    <p-dataTable [(value)]=\"personDetails\" exportFilename=\"personDetails\" [(selection)]=\"selectedPersonDetail\" [paginator]=\"true\" [rows]=\"10\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15,20]\" [responsive]=\"true\" [globalFilter]=\"gb\" [loading]=\"loading\">\r\n        <p-column header=\"Action\" [style]=\"{'width':'90px'}\">\r\n            <ng-template let-personDetail=\"rowData\" pTemplate type=\"body\">\r\n                <button type=\"button\" pButton (click)=\"updatePerson(personDetail)\" icon=\"fa-pencil-square-o\" pTooltip=\"Edit Person\" tooltipPosition=\"top\" ></button>\r\n                <button type=\"button\" pButton (click)=\"deletePerson(personDetail)\" icon=\"fa-trash\" pTooltip=\"Delete Person\" tooltipPosition=\"top\"></button>\r\n                <button type=\"button\" pButton (click)=\"addContactperson(personDetail)\" icon=\"fa fa-phone\" pTooltip=\"Add Contact Person\" tooltipPosition=\"top\"></button>\r\n                <button type=\"button\" pButton (click)=\"addAuthType(personDetail)\" icon=\"fa fa-unlock-alt\" pTooltip=\"Add Authentication\" tooltipPosition=\"top\"></button>\r\n            </ng-template>\r\n        </p-column>\r\n        <p-column field=\"imgUrl\" [style]=\"{'width':'34px'}\">\r\n            <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n            </ng-template>\r\n        </p-column>\r\n        <p-column field=\"firstName\" header=\"First Name\" [sortable]=\"true\" [style]=\"{'width':'100px'}\"></p-column>\r\n        <p-column field=\"lastName\" header=\"Last Name\" [sortable]=\"true\" [style]=\"{'width':'100px'}\"></p-column>\r\n        <p-column field=\"emailId\" header=\"Email Id\" [sortable]=\"true\" [style]=\"{'width':'112px'}\"></p-column>\r\n        <p-column field=\"role\" header=\"Role\" [sortable]=\"true\" [style]=\"{'width':'82px'}\"></p-column>\r\n        <p-column field=\"primaryMobile\" header=\"Mobile\" [sortable]=\"true\" [style]=\"{'width':'100px'}\"></p-column>\r\n    </p-dataTable>\r\n</div>\r\n\r\n\r\n\r\n<p-dialog [(visible)]=\"personContactPersonDialog\" header=\"Contact Person\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"830\" height=\"638\" [contentStyle]=\"{'overflow':'auto','max-height':'578px'}\">\r\n    <div style=\"padding:4px 10px;border-bottom: 0 none;margin-top:-25px\">\r\n        <p-tabView (onChange)=\"handleChange($event)\" [style]=\"{'width':'791px','margin-top':'17px','margin-left':'-13px'}\">\r\n            <p-tabPanel header=\"List\" [selected]=\"selectedTab===1\" *ngIf=\"tab1visible\">\r\n                <p-toolbar [style]=\"{'width':'784px','margin-left':'-14px','margin-top':'-15px'}\">\r\n                    <div class=\"ui-toolbar-group-left\">\r\n                        <button type=\"button\" pButton style=\"float:left;width:80px\" icon=\"fa-plus\" (click)=\"activateTab(0,'add')\" label=\"Add\" pTooltip=\"Add Contact Person\" tooltipPosition=\"top\"></button>\r\n                    </div>\r\n                </p-toolbar>               \r\n                <p-dataTable [(value)]=\"personViewDetails\" [(selection)]=\"selectedPersonDetail\" [rows]=\"5\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [responsive]=\"true\" [style]=\"{'width':'784px','margin-left':'-14px','margin-top':'-1px'}\">\r\n                    <p-column header=\"Action\" [style]=\"{'width':'70px'}\">\r\n                        <ng-template let-personDetail=\"rowData\" pTemplate type=\"body\">\r\n                            <button type=\"button\" pButton style=\"float:left\" icon=\"fa-pencil-square-o\" (click)=\"updateContactPerson(0,'edit',personDetail)\"  pTooltip=\"Edit Contact Person\" tooltipPosition=\"top\" ></button>\r\n                            <button type=\"button\" pButton style=\"float:left\" icon=\"fa-trash\" (click)=\"deletePersonContact(personDetail)\"  pTooltip=\"Delete Contact Person\" tooltipPosition=\"top\"></button>\r\n                        </ng-template>\r\n                    </p-column>\r\n                    <p-column field=\"imgUrl\" [style]=\"{'width':'50px'}\">\r\n                        <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                            <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                        </ng-template>\r\n                    </p-column>\r\n                    <p-column field=\"firstName\" header=\"First Name\"[style]=\"{'width':'130px'}\"></p-column>\r\n                    <p-column field=\"lastName\" header=\"Last Name\"[style]=\"{'width':'130px'}\"></p-column>\r\n                    <p-column field=\"emailId\" header=\"Email Id\"[style]=\"{'width':'157px'}\"></p-column>\r\n                    <p-column field=\"primaryMobile\" header=\"Primary Mobile\"[style]=\"{'width':'100px'}\"></p-column>\r\n\r\n                </p-dataTable>\r\n            </p-tabPanel>\r\n\r\n            <p-tabPanel header=\"Add Contact Person\" [selected]=\"selectedTab===0\" *ngIf=\"tab2visible\">\r\n                <form [formGroup]=\"personform\" (ngSubmit)=\"createPerson(1)\" style=\"margin-left: 20px;margin-bottom: 20px;margin-left:-10px;\">\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-2\">\r\n                                First Name :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <input pInputText type=\"text\" formControlName=\"firstName\" placeholder=\"Required\" [(ngModel)]=\"personDetail.firstName\" />\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['firstName'].valid&&personform.controls['firstName'].dirty\">\r\n                                    <span *ngIf=\"personform.controls['firstName'].errors['required']\">First name is required</span>\r\n                                    <span *ngIf=\"personform.controls['firstName'].errors['pattern']\">First name should be characters</span>\r\n                                </div> \r\n                            </div>\r\n                            <div class=\"ui-grid-col-2\">\r\n                                Last Name :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <input pInputText type=\"text\" formControlName=\"lastName\" placeholder=\"Required\" [(ngModel)]=\"personDetail.lastName\" />\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['lastName'].valid&&personform.controls['lastName'].dirty\">\r\n                                    <span *ngIf=\"personform.controls['lastName'].errors['required']\">Last name is required</span>\r\n                                    <span *ngIf=\"personform.controls['lastName'].errors['pattern']\">Last name should be characters</span>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-2\">\r\n                                Email Id :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <input pInputText type=\"email\" formControlName=\"emailId\" placeholder=\"example@gmail.com\" [(ngModel)]=\"personDetail.emailId\" />\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['emailId'].valid&&personform.controls['emailId'].dirty\">\r\n                                    <span *ngIf=\"personform.controls['emailId'].errors['required']\">Email is required</span>\r\n                                    <span *ngIf=\"personform.controls['emailId'].errors['email']\">Invalid email id</span>\r\n                                </div>\r\n                            </div>\r\n                           \r\n                            <div class=\"ui-grid-col-2\">\r\n                                Relation :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <p-dropdown [options]=\"relations\" placeholder=\"Realtion\" formControlName=\"relation\" [style]=\"{'width':'120px'}\" [(ngModel)]=\"selectedRelation\"></p-dropdown>\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['relation'].valid&&personform.controls['relation'].dirty\">\r\n                                    Relation is required\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <!--<div class=\"ui-grid-col-2\">\r\n                                Gender :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <p-radioButton name=\"gender\" formControlName=\"gender\" value=\"Male\" label=\"Male\" [(ngModel)]=\"personDetail.gender\"></p-radioButton>\r\n                                <p-radioButton name=\"gender\" formControlName=\"gender\" value=\"Female\" label=\"Female\" [(ngModel)]=\"personDetail.gender\"></p-radioButton>\r\n                            </div>-->\r\n                            <div class=\"ui-grid-col-2\">\r\n                                Date of Birth :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <p-calendar formControlName=\"dateOfBirth\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"1950:2030-1\" dateFormat=\"dd/mm/yy\" [showIcon]=\"true\" [(ngModel)]=\"personDetail.dateOfBirth\"></p-calendar>\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['dateOfBirth'].valid&&personform.controls['dateOfBirth'].dirty\">\r\n                                    <span *ngIf=\"personform.controls['dateOfBirth'].errors['required']\">Date of birth is required</span>\r\n                                </div>\r\n                        </div>\r\n                    </div>\r\n                        </div>\r\n\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-2\">\r\n                                Mobile  :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <input pInputText type=\"text\" formControlName=\"primaryMobile\" placeholder=\"Required\" [(ngModel)]=\"personDetail.primaryMobile\" />\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['primaryMobile'].valid&&personform.controls['primaryMobile'].dirty\">\r\n                                    <span *ngIf=\"personform.controls['primaryMobile'].errors['pattern']\">Mobile number should be number</span>\r\n                                    <span *ngIf=\"!personform.controls['primaryMobile'].errors['pattern']&&personform.controls['primaryMobile'].errors['minlength']\">Number should not be less than 10</span>\r\n                                    <span *ngIf=\"!personform.controls['primaryMobile'].errors['pattern']&&personform.controls['primaryMobile'].errors['maxlength']\">Number should not be grater than 10</span>\r\n                                    <span *ngIf=\"personform.controls['primaryMobile'].errors['required']\">Mobile number required</span>\r\n\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-2\">\r\n                                Phone :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <input pInputText type=\"text\" formControlName=\"secondaryMobile\" placeholder=\"secondary mobile\" [(ngModel)]=\"personDetail.secondaryMobile\" />\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['secondaryMobile'].valid&&personform.controls['secondaryMobile'].dirty\">\r\n                                    <span *ngIf=\"personform.controls['secondaryMobile'].errors['pattern']\">Phone number should be number</span> <span *ngIf=\"!personform.controls['secondaryMobile'].errors['pattern']&&personform.controls['secondaryMobile'].errors['minlength']\">Number should not be less than 10 </span>\r\n                                    <span *ngIf=\"!personform.controls['secondaryMobile'].errors['pattern']&&personform.controls['secondaryMobile'].errors['maxlength']\">Number should not be grater than 10</span>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-2\">\r\n                                Address :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <textarea pInputText type=\"text\" formControlName=\"address\" placeholder=\"Required\" autoResize=\"autoResize\" [(ngModel)]=\"personDetail.address\"></textarea>\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['address'].valid&&personform.controls['address'].dirty\">\r\n                                    Address is required\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-2\">\r\n                                Country :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <p-dropdown [options]=\"countries\" placeholder=\"Country\" formControlName=\"countries\" [style]=\"{'width':'100px'}\" [(ngModel)]=\"selectedCountry\"></p-dropdown>\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['countries'].valid&&personform.controls['countries'].dirty\">\r\n                                    Country is required\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-2\">\r\n                                State :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <p-dropdown [options]=\"countryStates\" placeholder=\"State\" formControlName=\"state\" [style]=\"{'width':'180px'}\" [(ngModel)]=\"selectedState\"></p-dropdown>\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['state'].valid&&personform.controls['state'].dirty\">\r\n                                    State is required\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-2\">\r\n                                Postal Code :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-\">\r\n                                <input pInputText type=\"text\" formControlName=\"zipCode\" placeholder=\"pincode\" [(ngModel)]=\"personDetail.zipCode\" />\r\n                                <div style=\"color:brown\" *ngIf=\"!personform.controls['zipCode'].valid&&personform.controls['zipCode'].dirty\">\r\n                                    <span *ngIf=\"personform.controls['zipCode'].errors['pattern']\">Postal code should be number</span>\r\n                                    <span *ngIf=\"!personform.controls['zipCode'].errors['pattern']&&personform.controls['zipCode'].errors['minlength']\"> Code should not be less than 3 </span>\r\n                                    <span *ngIf=\"!personform.controls['zipCode'].errors['pattern']&&personform.controls['zipCode'].errors['maxlength']\"> Code should not be grater than 8</span>\r\n                                    <span *ngIf=\"personform.controls['zipCode'].errors['required']\">Postal code is required</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-2\">\r\n                                Active :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-1\">\r\n                                <p-checkbox name=\"isActive\" formControlName=\"isActive\" value=\"isActive\" binary=\"true\" [(ngModel)]=\"personDetail.isActive\"></p-checkbox>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-3\">\r\n                                Having Primary Contact:\r\n                            </div>\r\n                            <div class=\"ui-grid-col-1\">\r\n                                <p-checkbox name=\"isPrimaryContact\" formControlName=\"isPrimaryContact\" value=\"isPrimaryContact\" binary=\"true\" [(ngModel)]=\"personDetail.isPrimaryContact\">\r\n                                </p-checkbox>\r\n                            </div>\r\n                            <div class=\"ui-grid-col-3\">\r\n                                Using Smart Phone :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-2\">\r\n                                <p-checkbox name=\"isHavingSmartPhone\" formControlName=\"isHavingSmartPhone\" value=\"isHavingSmartPhone\" binary=\"true\" [(ngModel)]=\"personDetail.isHavingSmartPhone\">\r\n                                </p-checkbox>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-2\">\r\n                                Image :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <input #personImage type=\"file\" class=\"form-control\" name=\"imgUrl\" />\r\n                            </div>\r\n                            <div class=\"ui-grid-col-6\">\r\n\r\n                                <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{personDetail.imgUrl}}\" height=\"60\" width=\"60\" class=\"rounded-circle\" />\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <footer style=\"margin-left:145px;\">\r\n                        <div>\r\n                            <button type=\"button\" style=\"float:initial;width:110px;height:30px;\" label=\"Cancel\" pButton (click)=\"contactcancel(1)\"></button>\r\n                            <button pButton type=\"submit\" style=\"width:110px;height:30px;\" label=\"Save\" [disabled]=\"!personform.valid\"></button>\r\n                        </div>\r\n                    </footer>\r\n                </form>\r\n            </p-tabPanel>\r\n        </p-tabView>\r\n    </div>\r\n</p-dialog>\r\n\r\n\r\n<p-dialog [(visible)]=\"personAuthDialog\" header=\"Person Authentication\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"700\" height=\"380\">\r\n    <div style=\"padding:4px 10px;border-bottom: 0 none;width:663px;margin-top:-25px\">\r\n        <p-tabView (onChange)=\"handleChange1($event)\" [style]=\"{'width':'663px','margin-top':'17px','margin-left':'-13px'}\">\r\n            <p-tabPanel header=\"List\" [selected]=\"selectedTab===1\" *ngIf=\"tab1Authenticationvisible\">\r\n                <!--<div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;width:630px;border-bottom: 0 none;margin-top:20px;margin-right:-25px;margin-left:-25px\">\r\n                    <div class=\"ui-grid-row\">\r\n                        <div>\r\n                            <button type=\"button\" pButton style=\"float:left;width:80px\" icon=\"fa-plus\" (click)=\"activateTab1(0,'add')\" label=\"Add\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Add Authentication\"></button>\r\n                        </div>&nbsp;\r\n                    </div>\r\n                </div>-->\r\n\r\n                <p-toolbar [style]=\"{'width':'656px','margin-left':'-14px','margin-top':'-15px'}\">\r\n                    <div class=\"ui-toolbar-group-left\">\r\n                        <button type=\"button\" pButton style=\"float:left;width:80px\" icon=\"fa-plus\" (click)=\"activateTab1(0,'add')\" label=\"Add\" pTooltip=\"Add Authentication\" tooltipPosition=\"top\"></button>\r\n                    </div>\r\n\r\n                </p-toolbar>\r\n                <p-dataTable [(value)]=\"authTypeDetails\" [(selection)]=\"selectAuthenticationTypeDetail\" [rows]=\"4\" [paginator]=\"true\" [pageLinks]=\"3\" [responsive]=\"true\" [style]=\"{'width':'656px','margin-left':'-14px','margin-top':'-1px'}\">\r\n                    <p-column header=\"Action\" [style]=\"{'width':'100px'}\">\r\n                        <ng-template let-authDetail=\"rowData\" pTemplate type=\"body\">\r\n                            <button type=\"button\" pButton style=\"float:left\" icon=\"fa-pencil-square-o\" (click)=\"updateAuthType(0,'edit',authDetail)\" pTooltip=\"Edit Authentication\" tooltipPosition=\"top\"></button>\r\n                            <button type=\"button\" pButton style=\"float:left\" icon=\"fa-trash\" (click)=\"deleteAuthType(authDetail)\" pTooltip=\"Delete Authentication\" tooltipPosition=\"top\"></button>\r\n                        </ng-template>\r\n                    </p-column>\r\n                    <p-column field=\"hashValue\" header=\"Hash Value\"></p-column>\r\n                    <p-column field=\"modeType\" header=\"Authentication Type\"></p-column>\r\n                    <p-column field=\"remark\" header=\"Remark\"></p-column>\r\n                </p-dataTable>\r\n            </p-tabPanel>\r\n\r\n            <p-tabPanel header=\"Add Authentication\" [selected]=\"selectedTab===0\" *ngIf=\"tab2Authenticationvisible\">\r\n                <form [formGroup]=\"authform\" (ngSubmit)=\"createAuthType(1)\">\r\n                     <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-3\">\r\n                                Hash Value :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <input pInputText type=\"text\" formControlName=\"hashvalue\" placeholder=\"Required\" [(ngModel)]=\"authenticationTypeDetail.hashValue\" />\r\n                                <div style=\"color:brown\" *ngIf=\"!authform.controls['hashvalue'].valid&&authform.controls['hashvalue'].dirty\">\r\n                                    Hash Value Is required\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-3\">\r\n                                Authetication Mode :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-6\">\r\n                                <p-dropdown [options]=\"authMode\" placeholder=\"Select Mode\" [style]=\"{'width':'140px'}\" formControlName=\"authmode\" [(ngModel)]=\"selectedAuthMode\"> </p-dropdown>\r\n                                <div style=\"color:brown\" *ngIf=\"!authform.controls['authmode'].valid&&authform.controls['authmode'].dirty\">\r\n                                    Authetication Mode is required\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                        <div class=\"ui-grid-row\">\r\n                            <div class=\"ui-grid-col-3\">\r\n                                Remark :\r\n                            </div>\r\n                            <div class=\"ui-grid-col-4\">\r\n                                <input pInputText type=\"text\" formControlName=\"remark\" [(ngModel)]=\"authenticationTypeDetail.remark\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <footer style=\"margin-left:157px;\">\r\n                        <div>                            \r\n                            <button type=\"button\" style=\"float:initial;width:90px;height:30px;\" label=\"Cancel\" pButton (click)=\"onCancel(1)\"></button>\r\n                            <button pButton type=\"submit\" style=\"width:90px;height:30px\"  label=\"Save\" [disabled]=\"!authform.valid\"></button>\r\n                        </div>\r\n                    </footer>\r\n                </form>\r\n            </p-tabPanel>\r\n        </p-tabView>\r\n    </div>\r\n</p-dialog>\r\n\r\n\r\n<p-confirmDialog width=\"425\"></p-confirmDialog>\r\n<p-growl [value]=\"msgs\" life=\"3000\"></p-growl>\r\n\r\n";

/***/ }),
/* 217 */
/***/ (function(module, exports) {

module.exports = "<div class=\"card card-w-title\">\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;\">\r\n        <div class=\"ui-grid-row\">\r\n            <button type=\"button\" pButton icon=\"fa-plus\" style=\"float:left\" (click)=\"addSession()\" label=\"Add\"  pTooltip=\"Add Session\" tooltipPosition=\"top\" ></button>\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;\">\r\n        <div class=\"ui-grid-row\">\r\n            <header style=\"text-align:left;font-size:120%\">Session</header>\r\n        </div>\r\n    </div>\r\n    <p-dataList [value]=\"sessionDetails\" class=\"ui-grid\" Width=\"10px\" >\r\n        <ng-template let-sessionDetail pTemplate type=\"body\">\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"font-size:15px;padding:20px;border-bottom:1px solid #D5D5D5;\">\r\n                <div class=\"ui-grid-col-8\">\r\n                    <div class=\"ui-grid-col-4\">\r\n                        <b>{{sessionDetail.sessionName}}</b>\r\n                    </div>\r\n                    <div class=\"ui-grid-col-2\">\r\n                        {{sessionDetail.startDate | date: 'yyyy-MM-dd'}}\r\n                    </div>\r\n                    <div class=\"ui-grid-col-1\">\r\n                        <b>- to -</b>\r\n                    </div>\r\n                    <div class=\"ui-grid-col-3\">\r\n                        {{sessionDetail.endDate | date: 'yyyy-MM-dd'}}\r\n                    </div>\r\n                </div>\r\n                <div class=\"ui-grid-col-1\">\r\n                    <div style=\"margin:3%\">\r\n                    <button type=\"button\" pButton icon=\"fa-pencil-square-o\" style=\"width:83px;\" (click)=\"updateSession(sessionDetail)\" label=\"Edit\" pTooltip=\"Edit Session\" tooltipPosition=\"top\"></button></div>\r\n                </div>\r\n                <div class=\"ui-grid-col-1\">\r\n                    <div style=\"margin:3%\">\r\n                        <button type=\"button\" pButton icon=\"fa-trash\"  style=\" width:95px;margin-left:10px;\"(click)=\"deleteSession(sessionDetail)\" label=\"Delete\" pTooltip=\"Delete Session\" tooltipPosition=\"top\"  ></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </ng-template>\r\n    </p-dataList>\r\n\r\n    \r\n    <br>\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;\">\r\n        <div class=\"ui-grid-row\">\r\n            <button type=\"button\" pButton icon=\"fa-plus\" style=\"float:left\" (click)=\"addTerm()\" label=\"Add\" pTooltip=\"Add Term\" tooltipPosition=\"top\"></button>\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;\">\r\n        <div class=\"ui-grid-row\">\r\n            <header style=\"text-align:left;font-size:120%\">Term</header>\r\n        </div>\r\n    </div>\r\n    <p-dataList [value]=\"termDetails\" class=\"ui-grid\" Width=\"10px\">\r\n        <ng-template let-termDetail pTemplate type=\"body\">\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"font-size:15px;padding:20px;border-bottom:1px solid #D5D5D5;\">\r\n                <div class=\"ui-grid-col-8\">\r\n                    <div class=\"ui-grid-col-4\">\r\n                        <b>{{termDetail.termName}}</b>\r\n                    </div>\r\n                    <div class=\"ui-grid-col-2\">\r\n                        {{termDetail.startDate | date: 'yyyy-MM-dd'}}\r\n                    </div>\r\n                    <div class=\"ui-grid-col-1\">\r\n                        <b> - to -</b>\r\n                    </div>\r\n                    <div class=\"ui-grid-col-3\">\r\n                        {{termDetail.endDate | date: 'yyyy-MM-dd'}}\r\n                    </div>\r\n                </div>\r\n                <div class=\"ui-grid-col-1\">\r\n                    <div style=\"margin:3%\"><button type=\"button\" pButton icon=\"fa-pencil-square-o\" style=\"float:left;width:83px;\" (click)=\"updateTerm(termDetail)\" label=\"Edit\" pTooltip=\"Edit Term\" tooltipPosition=\"top\"></button></div>\r\n                </div>\r\n\r\n                <div class=\"ui-grid-col-1\">\r\n\r\n                    <div style=\"margin:3%\"><button type=\"button\" pButton icon=\"fa-trash\" style=\"float:left; width:95px;margin-left:10px;\" (click)=\"deleteTerm(termDetail)\" label=\"Delete\" pTooltip=\"Delete Term\" tooltipPosition=\"top\"></button></div>\r\n                </div>\r\n            </div>\r\n        </ng-template>\r\n    </p-dataList>\r\n    \r\n\r\n    <br>\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;\">\r\n        <div class=\"ui-grid-row\">\r\n            <button type=\"button\" pButton icon=\"fa-plus\" style=\"float:left\" (click)=\"addBreak()\" label=\"Add\" pTooltip=\"Add Break\" tooltipPosition=\"top\"></button>\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;\">\r\n        <div class=\"ui-grid-row\">\r\n            <header style=\"text-align:left;font-size:120%\">Break</header>\r\n        </div>\r\n    </div>\r\n    <p-dataList [value]=\"breakDetails\" class=\"ui-grid\" Width=\"10px\">\r\n        <ng-template let-breakDetail pTemplate type=\"body\">\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"font-size:15px;padding:20px;border-bottom:1px solid #D5D5D5;\">\r\n                <div class=\"ui-grid-col-8\">\r\n                    <div class=\"ui-grid-col-4\">\r\n                        <b>{{breakDetail.breakName}}</b>\r\n                    </div>\r\n                    <div class=\"ui-grid-col-2\">\r\n                        {{breakDetail.startDate| date: 'yyyy-MM-dd' }}\r\n                    </div>\r\n                    <div class=\"ui-grid-col-1\">\r\n                        <b> - to -</b>\r\n                    </div>\r\n                    <div class=\"ui-grid-col-3\">\r\n                        {{breakDetail.endDate| date: 'yyyy-MM-dd'}}\r\n                    </div>\r\n                </div>\r\n                <div class=\"ui-grid-col-1\">\r\n                    <div style=\"margin:3%\"><button type=\"button\" pButton icon=\"fa-pencil-square-o\" style=\"float:left;width:83px;\" (click)=\"updateBreak(breakDetail)\" label=\"Edit\" pTooltip=\"Edit Break\" tooltipPosition=\"top\"></button></div>\r\n                </div>\r\n                <div class=\"ui-grid-col-1\">\r\n\r\n                    <div style=\"margin:3%\">\r\n                        <button type=\"button\" pButton icon=\"fa-trash\" style=\"float:left; width:95px;margin-left:10px;\" (click)=\"deleteBreak(breakDetail)\" label=\"Delete\" pTooltip=\"Delete Break\" tooltipPosition=\"top\"></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </ng-template>\r\n\r\n    </p-dataList>\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;margin-top:20px\">\r\n        <div class=\"ui-grid-row\">\r\n            <header style=\"text-align:left;font-size:120%\">Days of Week</header>\r\n        </div>\r\n    </div>\r\n    <p-toolbar>\r\n        <div class=\"ui-g-12 ui-lg-10\">\r\n            <p-selectButton [options]=\"days\" [(ngModel)]=\"selectedDays\" multiple=\"multiple\"></p-selectButton> \r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <button type=\"button\" label=\"Save\" pTooltip=\"Save days\" tooltipPosition=\"top\"  pButton (click)=\"createWeek()\"></button>\r\n        </div>\r\n       \r\n    </p-toolbar>\r\n   \r\n    <br>\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;\">\r\n        <div class=\"ui-grid-row\">\r\n            <button type=\"button\" pButton icon=\"fa-plus\" style=\"float:left\" (click)=\"addGrade()\" label=\"Add\" pTooltip=\"Add Grade\" tooltipPosition=\"top\" ></button>\r\n        </div>\r\n    </div>\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;\">\r\n        <div class=\"ui-grid-row\">\r\n            <header style=\"text-align:left;font-size:120%\">List of Classes</header>\r\n        </div>\r\n    </div>\r\n    <p-dataGrid [value]=\"gradeDetails\" >\r\n        <ng-template let-gradeDetail pTemplate type=\"body\">\r\n            <div class=\"ui-g-24 ui-md-3\">\r\n                <div class=\"grade-detail\">\r\n                    <div class=\"ui-grid-row\">\r\n                        <div class=\"ui-grid-col-2\">\r\n                            {{gradeDetail.grade}} - {{gradeDetail.section}}\r\n                        </div>\r\n                        <div class=\"ui-grid-col\">\r\n                            <i class=\"fa fa-trash\" (click)=\"deleteGrade(gradeDetail)\" style=\"cursor:pointer\"></i>\r\n                        </div>\r\n                    </div>                 \r\n                  \r\n                </div>\r\n            </div>\r\n        </ng-template>\r\n        \r\n    </p-dataGrid>\r\n    \r\n    </div>\r\n    <!--session form-->\r\n\r\n    <p-dialog [(visible)]=\"sessionDialog\" header=\"Session\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"500\" height=\"320\">\r\n        <form [formGroup]=\"sessionform\" (ngSubmit)=\"createSession(sessionform.value)\"\tstyle=\"height:600px;\">\r\n          \r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Name :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-6\">\r\n                        <!--<p-inputMask mask=\"9999-9999\" formControlName=\"sessionname\"  [(ngModel)]=\"sessionDetail.sessionName\" placeholder=\"yyyy-yyyy\"></p-inputMask>-->\r\n                        <input pInputText type=\"text\" formControlName=\"sessionname\" placeholder=\"Required\" [(ngModel)]=\"sessionDetail.sessionName\" />\r\n                        <div style=\"color:brown\" *ngIf=\"!sessionform.controls['sessionname'].valid&&sessionform.controls['sessionname'].dirty\">\r\n                            <!--<i class=\"fa fa-close\"></i>-->\r\n                            <span *ngIf=\"sessionform.controls['sessionname'].errors['required']\"> Session is required</span>\r\n                            <span *ngIf=\"sessionform.controls['sessionname'].errors['pattern']\">Session name should be number.</span>\r\n                           \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Start Date :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-6\">\r\n                        <p-calendar formControlName=\"startdate\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"2000:2030\" navigator=\"true\"  dateFormat=\"yy-mm-dd\" [showIcon]=\"true\" [(ngModel)]=\"sessionDetail.startDate\"></p-calendar>\r\n                        <div style=\"color:brown\" *ngIf=\"!sessionform.controls['startdate'].valid&&sessionform.controls['startdate'].dirty\">\r\n                            Start date is required\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        End Date :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-6\">\r\n                        <p-calendar formControlName=\"enddate\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"2000:2030\" dateFormat=\"yy-mm-dd\" [showIcon]=\"true\" [(ngModel)]=\"sessionDetail.endDate\" \r\n                                   ></p-calendar>\r\n                        <div style=\"color:brown\" *ngIf=\"sessionform.controls.enddate.touched&&sessionform.hasError('invalidDate')\">\r\n                              End date is required and should not be less than start date .\r\n                        </div>                       \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <footer style=\"text-align: center; margin-top: 15px; margin-left: -70px;\">\r\n                <div>\r\n                    <button type=\"button\" style=\"float:initial;\" label=\"Cancel\" pButton (click)=\"cancelSession($event)\"></button>\r\n                    <button pButton type=\"submit\" label=\"Save\" [disabled]=\"!sessionform.valid\"></button>\r\n                </div>\r\n            </footer>\r\n        </form>\r\n    </p-dialog>\r\n    <!--End session form-->\r\n    <!--Start Term Form-->\r\n    <p-dialog [(visible)]=\"termDialog\" header=\"Term\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"500\" height=\"320\">\r\n        <form [formGroup]=\"termform\" (ngSubmit)=\"createTerm(termform.value)\"style=\"height:600px;\">\r\n           \r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Name :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-6\">\r\n                        <input pInputText type=\"text\" formControlName=\"termname\" placeholder=\"Required\" [(ngModel)]=\"termDetail.termName\" />\r\n                        <div style=\"color:brown\" *ngIf=\"!termform.controls['termname'].valid&&termform.controls['termname'].dirty\">\r\n                           Term name is required.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Start Date :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-6\">\r\n                        <p-calendar formControlName=\"startdate\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"2000:2030\" dateFormat=\"yy-mm-dd\" [showIcon]=\"true\" [(ngModel)]=\"termDetail.startDate\"></p-calendar>\r\n                        <div style=\"color:brown\" *ngIf=\"!termform.controls['startdate'].valid&&termform.controls['startdate'].dirty\">\r\n                            Start date is required\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        End Date :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-6\">\r\n                        <p-calendar formControlName=\"enddate\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"2000:2030\" dateFormat=\"yy-mm-dd\" [showIcon]=\"true\" [(ngModel)]=\"termDetail.endDate\"></p-calendar>\r\n                        <div style=\"color:brown\" *ngIf=\"termform.controls.enddate.touched&&termform.hasError('invalidDate')\">\r\n                            End date is required and should not be less than start date.\r\n                        </div>\r\n                        <!--<p-calendar formControlName=\"enddate\" dateFormat=\"yy-mm-dd\" [showIcon]=\"true\" [(ngModel)]=\"termDetail.endDate\"></p-calendar>\r\n                        <div style=\"color:brown\" *ngIf=\"!termform.controls['enddate'].valid&&termform.controls['enddate'].dirty\">\r\n                            end date date is required\r\n                        </div>-->\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <footer style=\"text-align: center; margin-top: 15px; margin-left: -70px;\">\r\n                <div>                   \r\n                    <button type=\"button\" style=\"float:initial;\" label=\"Cancel\" pButton (click)=\"cancelTerm($event)\"></button>\r\n                    <button pButton type=\"submit\" label=\"Save\" [disabled]=\"!termform.valid\"></button>\r\n                </div>\r\n            </footer>\r\n        </form>\r\n    </p-dialog>\r\n    <!--end term form-->\r\n    <!-- break form-->\r\n    <p-dialog [(visible)]=\"breakDialog\" header=\"Break\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"500\" height=\"320\">\r\n        <form [formGroup]=\"breakform\" (ngSubmit)=\"createBreak(breakform.value)\"style=\"height:600px;\">\r\n           \r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Name :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-6\">\r\n                        <input pInputText type=\"text\" formControlName=\"breakname\" placeholder=\"Required\" [(ngModel)]=\"breakDetail.breakName\" />\r\n                        <div style=\"color:brown\" *ngIf=\"!breakform.controls['breakname'].valid&&breakform.controls['breakname'].dirty\">\r\n                             Break name is required.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Start Date :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-6\">\r\n                        <p-calendar formControlName=\"startdate\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"2000:2030\" dateFormat=\"yy-mm-dd\" [showIcon]=\"true\" [(ngModel)]=\"breakDetail.startDate\"></p-calendar>\r\n                        <div style=\"color:brown\" *ngIf=\"!breakform.controls['startdate'].valid&&breakform.controls['startdate'].dirty\">\r\n                            Start date is required\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        End Date :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-6\">\r\n                        <p-calendar formControlName=\"enddate\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"2000:2030\" dateFormat=\"yy-mm-dd\" [showIcon]=\"true\" [(ngModel)]=\"breakDetail.endDate\"></p-calendar>\r\n                        <div style=\"color:brown\" *ngIf=\"breakform.controls.enddate.touched&&breakform.hasError('invalidDate')\">\r\n                            End date is required and should not be less than start date.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <footer style=\"text-align: center; margin-top: 15px; margin-left: -70px;\">\r\n                <div>                  \r\n                    <button type=\"button\" style=\"float:initial;\" label=\"Cancel\" pButton (click)=\"cancelBreak($event)\"></button>\r\n                    <button pButton type=\"submit\" label=\"Save\" [disabled]=\"!breakform.valid\"></button>\r\n                </div>\r\n            </footer>\r\n        </form>\r\n    </p-dialog>\r\n    <!--End Break Form-->\r\n\r\n    <!--Start Grade form-->\r\n    <p-dialog [(visible)]=\"gradeDialog\" header=\"Grade\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"260\" height=\"250\">\r\n        <form [formGroup]=\"gradeform\" (ngSubmit)=\"createGrade(gradeform.value)\" style=\"height:400px;\">\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-4\">\r\n                        Class :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-8\">\r\n                        <p-dropdown [options]=\"grade\" placeholder=\"Select Class\" [style]=\"{'width':'120px','float':'left'}\" formControlName=\"grade\" [(ngModel)]=\"selectedGrade\"> </p-dropdown>\r\n                        <div style=\"color:brown\" *ngIf=\"!gradeform.controls['grade'].valid&&gradeform.controls['grade'].dirty\">\r\n                            Class is required\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-4\">\r\n                        Section :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-8\">\r\n                        <p-dropdown [options]=\"section\" placeholder=\"Select Section\" [style]=\"{'width':'120px','float':'left'}\" formControlName=\"section\" [(ngModel)]=\"selectedSection\"> </p-dropdown>\r\n                        <div style=\"color:brown\" *ngIf=\"!gradeform.controls['section'].valid&&gradeform.controls['section'].dirty\">                       \r\n                            Section is required\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <footer style=\"margin-left: 35px; margin-top: 20px;\">\r\n                <div>\r\n                    <button type=\"button\" label=\"Cancel\" pButton (click)=\"cancelgrade($event)\"></button>\r\n                    <button pButton type=\"submit\" label=\"Save\" [disabled]=\"!gradeform.valid\"></button>\r\n                </div>\r\n            </footer>\r\n        </form>\r\n    </p-dialog>\r\n    <!--end grade form-->\r\n\r\n\r\n    <p-growl [value]=\"msgs\"></p-growl>\r\n    <p-confirmDialog width=\"425\"></p-confirmDialog>\r\n";

/***/ }),
/* 218 */
/***/ (function(module, exports) {

module.exports = "<div class=\"card card-w-title\">\r\n     <p-toolbar >\r\n        <div class=\"ui-toolbar-group-left\">\r\n            <button type=\"button\" pButton icon=\"fa-inbox\" style=\"float:left\" (click)=\"addMessage()\" label=\"Add\" pTooltip=\"Add Message\" tooltipPosition=\"top\"></button>\r\n        </div>\r\n    </p-toolbar>\r\n\r\n    <div class=\"ui-grid ui-grid-responsive ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;margin-top: -1px;\">\r\n        <div class=\"ui-grid-row\">\r\n            <header style=\"text-align:left;font-size:120%\">Outbox Message</header>\r\n        </div>\r\n    </div>\r\n    <p-dataTable #dt [(value)]=\"messageList\" expandableRows=\"true\" [(selection)]=\"selectedtransportMessage\" [rows]=\"15\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15]\" [responsive]=\"true\" [loading]=\"loading\">\r\n        <p-column [style]=\"{'width':'10px'}\" expander=\"true\" styleClass=\"col-icon\"></p-column>\r\n        <p-column field=\"subject\" header=\"Subject\" [style]=\"{'width':'110px'}\"></p-column>\r\n        <p-column field=\"broadcastTo\" header=\"Message To\" [style]=\"{'width':'50px'}\"></p-column>\r\n        <p-column field=\"messageTime\" header=\"Time\" [style]=\"{'width':'30px'}\"></p-column>\r\n        <p-column field=\"messageDate\" header=\"Message Date\" [style]=\"{'width':'35px'}\"></p-column>\r\n        <ng-template let-transportMessageDetail pTemplate=\"rowexpansion\">\r\n            <div class=\"ui-grid ui-grid-responsive ui-fluid\" style=\"font-size:16px;padding:20px\">\r\n                <div class=\"ui-grid-row\">\r\n                   <b>Message :- </b> {{transportMessageDetail.message}}\r\n                </div>\r\n                <div class=\"ui-grid-row\">\r\n                   <b> Route :- </b>{{transportMessageDetail.routeNumber}}\r\n                 </div>\r\n                <div class=\"ui-grid-row\">\r\n                    <b> {{transportMessageDetail.stoppageField}} </b>  {{transportMessageDetail.stoppageName}}\r\n               </div>\r\n           </div>\r\n        </ng-template>\r\n    </p-dataTable>\r\n</div>\r\n\r\n<p-dialog header=\"Outgoing Message\" [(visible)]=\"messageCenterDialog\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"700\" height=\"510\" [contentStyle]=\"{'overflow':'auto','max-height':'450px'}\" (onHide)=\"onCancel($event)\">\r\n    <!--<div style=\"overflow-y:auto;height:430px\">-->\r\n        <form [formGroup]=\"messageform\" (ngSubmit)=\"sendMessageToPatron(messageform.value)\" >\r\n\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Message To :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-8\">\r\n                        <p-radioButton name=\"broadcastTo\" value=\"Parents\" formControlName=\"broadcastTo\" label=\"Parents\" [(ngModel)]=\"transportMessage.broadcastTo\"></p-radioButton>\r\n                        <p-radioButton name=\"broadcastTo\" value=\"Driver\" formControlName=\"broadcastTo\" label=\"Driver\" [(ngModel)]=\"transportMessage.broadcastTo\"></p-radioButton>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Broadcast To :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-8\">\r\n                        <p-multiSelect [options]=\"routeList\" [style]=\"{'width':'150px'}\" maxSelectedLabels=\"8\" formControlName=\"routeList\" [(ngModel)]=\"selectedRoute\" (onChange)=\"displayStoppages()\"></p-multiSelect>\r\n                        <div style=\"color:brown\" *ngIf=\"!messageform.controls['routeList'].valid&&messageform.controls['routeList'].dirty\">\r\n                            Route is required\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div *ngIf=\"showStoppage\" class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Stoppage :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-4\">\r\n                        <p-multiSelect [options]=\"stoppageList\" [style]=\"{'width':'150px'}\" maxSelectedLabels=\"8\" formControlName=\"stoppageList\" [(ngModel)]=\"selectedStoppage\"></p-multiSelect>\r\n                        <!--<div style=\"color:brown\" *ngIf=\"!messageform.controls['routeList'].valid&&messageform.controls['routeList'].dirty\">\r\n                            Stoppage is required\r\n                        </div>-->\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Subject:\r\n                    </div>\r\n                    <div class=\"ui-grid-col-4\">\r\n                        <input pInputText type=\"text\" formControlName=\"subject\" placeholder=\"Required\" [(ngModel)]=\"transportMessage.subject\" />\r\n                        <div style=\"color:brown\" *ngIf=\"!messageform.controls['subject'].valid&&messageform.controls['subject'].dirty\">\r\n                            Subject is required\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-grid-fluid\" style=\"margin:10px 0px\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-3\">\r\n                        Message :\r\n                    </div>\r\n                    <div class=\"ui-grid-col-6\">\r\n                        <textarea rows=\"5\" cols=\"41\" placeholder=\"Required\" formControlName=\"message\" pInputTextarea [(ngModel)]=\"transportMessage.message\"></textarea>\r\n                        <div style=\"color:brown\" *ngIf=\"!messageform.controls['message'].valid&&messageform.controls['message'].dirty\">\r\n                            Message is required\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <footer style=\"margin-left:171px;\">\r\n                <div>\r\n                    <button type=\"button\" style=\"float:initial;width:110px;height:30px;\" label=\"Cancel\" pButton (click)=\"onCancel($event)\"></button>\r\n                    <button pButton type=\"submit\" style=\"float:initial;width:110px;height:30px;\" label=\"Send\" [disabled]=\"!messageform.valid\"></button>\r\n                </div>\r\n            </footer>\r\n        </form>\r\n   <!-- </div>-->\r\n</p-dialog>\r\n\r\n\r\n<p-confirmDialog width=\"425\"></p-confirmDialog>\r\n<p-growl [value]=\"msgs\" life=\"3000\"></p-growl>\r\n";

/***/ }),
/* 219 */
/***/ (function(module, exports) {

module.exports = "\r\n<div class=\"card card-w-title\">\r\n    <p-toolbar>\r\n        <div class=\"ui-toolbar-group-left\">\r\n            <button type=\"button\" pButton icon=\"fa-plus\" style=\"float:left\" (click)=\"addTransportRoute()\" label=\"Add\" pTooltip=\"Add Transport Route\" tooltipPosition=\"top\" ></button>\r\n        </div>\r\n        <div class=\"ui-toolbar-group-right\">\r\n            <input #gb type=\"text\" pInputText size=\"30\" style=\"float:right\" placeholder=\"search\">\r\n            <i class=\"fa fa-search\" style=\"float:right;margin:4px 4px 0 0\"></i>\r\n        </div>\r\n    </p-toolbar>\r\n    <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;margin-top:-1px\">\r\n        <div class=\"ui-grid-row\">\r\n            <header style=\"text-align:left;font-size:120%\">Transport Route</header>\r\n        </div>\r\n    </div>\r\n\r\n    <p-dataTable [value]=\"transportRouteDetails\" [(selection)]=\"selectedTranportRoute\" (onRowSelect)=\"onRowSelect($event)\" [rows]=\"20\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[10,15,20]\" [responsive]=\"true\" [globalFilter]=\"gb\" [loading]=\"loading\">\r\n        <p-column [style]=\"{'width':'60px'}\" header=\"Action\">\r\n            <ng-template let-transportRouteDetail=\"rowData\" pTemplate type=\"body\">\r\n                <button type=\"button\" pButton (click)=\"updateTransportRoute(transportRouteDetail)\" icon=\"fa-pencil-square-o\" pTooltip=\"Edit Transport Route\" tooltipPosition=\"top\"></button>\r\n                <button type=\"button\" pButton (click)=\"deleteTransportRoute(transportRouteDetail)\" icon=\"fa-trash\" pTooltip=\"Delete Transport Route\" tooltipPosition=\"top\"></button>\r\n                <button type=\"button\" pButton (click)=\"addStoppage(transportRouteDetail)\" icon=\"fa-flag-o\" pTooltip=\"Add Transport Stoppage\" tooltipPosition=\"top\"></button>\r\n            </ng-template>\r\n        </p-column>\r\n        <p-column field=\"routeNumber\" header=\"Route No\" [style]=\"{'width':'40px'}\"></p-column>\r\n        <p-column field=\"registrationNumber\" header=\"Registration\" [style]=\"{'width':'60px'}\"></p-column>\r\n        <p-column field=\"driverImage\" [style]=\"{'width':'28px'}\">\r\n            <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n            </ng-template>\r\n        </p-column>\r\n        <p-column field=\"driverName\" header=\"Driver\" [style]=\"{'width':'70px'}\"></p-column>\r\n        <p-column field=\"coordinatorImage\" [style]=\"{'width':'32px'}\">\r\n            <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n            </ng-template>\r\n        </p-column>\r\n        <p-column field=\"coordinatorName\" header=\"Coordinator\" [style]=\"{'width':'70px'}\"></p-column>\r\n        <p-column field=\"routeStaffImage\" [style]=\"{'width':'32px'}\">\r\n            <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n            </ng-template>\r\n        </p-column>\r\n        <p-column field=\"routeStaffName\" header=\"Route Staff\" [style]=\"{'width':'76px'}\"></p-column>\r\n        <p-column field=\"description\" header=\"Description\" [style]=\"{'width':'100px'}\"></p-column>\r\n    </p-dataTable>\r\n</div>\r\n<!--dialog for add transport route-->\r\n\r\n<p-dialog [(visible)]=\"transportRouteDialog\" header=\"Transport Route\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"800\" height=\"500\">   \r\n    <form [formGroup]=\"transportForm\" (ngSubmit)=\"createTransportRoute(transportForm.value)\" style=\"height:600px;\">\r\n        <div hidden=\"hidden\"><input id=\"id\" formControlName=\"transportid\" class=\"form-control\" type=\"text\" placeholder=\"id\" [(ngModel)]=\"transportRouteDetail.id\" /></div>\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-3\">\r\n                    Route Number :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <input pInputText type=\"text\" formControlName=\"routeNumber\" placeholder=\"Required\" [(ngModel)]=\"transportRouteDetail.routeNumber\" />\r\n                   \r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <div style=\"color:brown\" *ngIf=\"!transportForm.controls['routeNumber'].valid&&transportForm.controls['routeNumber'].dirty\">\r\n                        <span *ngIf=\"transportForm.controls['routeNumber'].errors['pattern']\">Route number should be number</span>\r\n                        <span *ngIf=\"transportForm.controls['routeNumber'].errors['required']\"> Route number is required</span>\r\n                       \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-3\">\r\n                    Registration Number :\r\n                </div>\r\n\r\n                <div class=\"ui-grid-col-4\">\r\n                    <input pInputText type=\"text\" formControlName=\"registrationNumber\" placeholder=\"Required\" [(ngModel)]=\"transportRouteDetail.registrationNumber\" />                   \r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <div style=\"color:brown\" *ngIf=\"!transportForm.controls['registrationNumber'].valid&&transportForm.controls['registrationNumber'].dirty\">\r\n                        Registration number is required\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-3\">\r\n                    Driver Name :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <p-dropdown [options]=\"driverList\" formControlName=\"driverList\" (onChange)=\"checkDriver($event)\" [style]=\"{'width':'180px'}\" [(ngModel)]=\"selectedDriver\" placeholder=\"Driver\">\r\n                        <ng-template let-driver pTemplate=\"body\">\r\n                            <div class=\"ui-helper-clearfix\" style=\"position: relative;height: 25px;\">\r\n                                <div style=\"font-size:14px;float:right;margin-top:4px\">{{driver.label}}</div>                                \r\n                             <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{driver.value.imgUrl}}\"  class=\"rounded-circle\" style=\"width:25px;height:25px;position:absolute;top:1px;left:5px;float:right\" />\r\n                            </div>\r\n                        </ng-template>\r\n                    </p-dropdown>\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <div style=\"color:brown\" *ngIf=\"!transportForm.controls['driverList'].valid&&transportForm.controls['driverList'].dirty\">\r\n                        Driver is required\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-3\">\r\n                    Coordinator :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <p-dropdown [options]=\"coordinatorList\" formControlName=\"coordinatorList\" (onChange)=\"checkDriver($event)\" [style]=\"{'width':'180px'}\"  [(ngModel)]=\"selectedCoordinator\" placeholder=\"Coordinator\">\r\n \r\n                        <ng-template let-coordinator pTemplate=\"body\">\r\n                            <div class=\"ui-helper-clearfix\" style=\"position: relative; height: 25px;\">\r\n                                <div style=\"font-size:14px;float:right;margin-top:4px\">{{coordinator.label}}</div>\r\n                                <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{coordinator.value.imgUrl}}\" class=\"rounded-circle\" style=\"width:25px;height:25px;position:absolute;top:1px;left:5px;float:right\" />\r\n                            </div>\r\n                        </ng-template>\r\n                    </p-dropdown>\r\n                                  \r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <div style=\"color:brown\" *ngIf=\"!transportForm.controls['coordinatorList'].valid&&transportForm.controls['coordinatorList'].dirty\">\r\n                        Coordinator is required\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-3\">\r\n                    Route Staff :\r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <p-dropdown [options]=\"routeStaffList\" formControlName=\"routeStaffList\" (onChange)=\"checkDriver($event)\" [style]=\"{'width':'180px'}\" [(ngModel)]=\"selectedRouteStaff\" placeholder=\"Teacher\">\r\n                        <ng-template let-routeStaff pTemplate=\"body\">\r\n                            <div class=\"ui-helper-clearfix\" style=\"position: relative;height: 25px;\">\r\n                                <div style=\"font-size:14px;float:right;margin-top:4px\">{{routeStaff.label}}</div>\r\n                                <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{routeStaff.value.imgUrl}}\" class=\"rounded-circle\" style=\"width:25px;height:25px;position:absolute;top:1px;left:5px;float:right\" />\r\n                            </div>\r\n                        </ng-template>\r\n                    </p-dropdown>\r\n                                 \r\n                </div>\r\n                <div class=\"ui-grid-col-4\">\r\n                    <div style=\"color:brown\" *ngIf=\"!transportForm.controls['routeStaffList'].valid&&transportForm.controls['routeStaffList'].dirty\">\r\n                        Route Staff is required\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-3\">\r\n                    Description :\r\n                </div>\r\n                <div class=\"ui-grid-col-6\">\r\n                    <textarea pInputText type=\"text\" formControlName=\"description\" placeholder=\"Required\" autoResize=\"autoResize\" [(ngModel)]=\"transportRouteDetail.description\"></textarea>\r\n                </div>\r\n                <div class=\"ui-grid-col-3\">\r\n                    <div style=\"color:brown\" *ngIf=\"!transportForm.controls['description'].valid&&transportForm.controls['description'].dirty\">\r\n                        Description is required\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n            <div class=\"ui-grid-row\">\r\n                <div class=\"ui-grid-col-3\">\r\n                    Remark :\r\n                </div>\r\n                <div class=\"ui-grid-col-6\">\r\n                    <input pInputText type=\"text\"  formControlName=\"remarks\" [(ngModel)]=\"transportRouteDetail.remarks\" />\r\n                   \r\n                </div>\r\n            </div>\r\n        </div>\r\n        <footer style=\"margin-left: 195px;\">\r\n                    <div>\r\n                        <button type=\"button\" label=\"Cancel\" style=\"float:initial;width:110px;height:30px;\"pButton (click)=\"onCancel($event)\"></button>\r\n                        <button pButton type=\"submit\" style=\"width:110px;height:30px\"label=\"Save\" [disabled]=\"!transportForm.valid\"></button>\r\n                    </div>\r\n        </footer>\r\n    </form>\r\n</p-dialog>\r\n\r\n<!--dialog for map patron with transport route-->\r\n\r\n<p-dialog header=\"Stoppage\" [(visible)]=\"stoppageDialog\" [resizable]=\"false\" [responsive]=\"true\" showEffect=\"fade\" [modal]=\"true\" width=\"1200\" height=\"620\">\r\n\r\n    <p-tabView (onChange)=\"handleChange($event)\">\r\n        <p-tabPanel header=\"List\" [selected]=\"selectedTab===1\" *ngIf=\"tab1stoppage\" [style]=\"{'margin-right':'12px'}\">\r\n            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px; margin-right:12px;margin-left:-20px;margin-top:-8px;\">\r\n                <div class=\"ui-grid-row\">\r\n                    <div class=\"ui-grid-col-6\">\r\n                        <p-toolbar>\r\n                            <div class=\"ui-toolbar-group-left\">\r\n                                <button type=\"button\" pButton style=\"float:left;width:80px\" icon=\"fa-plus\" (click)=\"activateTab(0,'add')\" label=\"Add\" pTooltip=\"Add Stoppage\" tooltipPosition=\"top\" ></button>\r\n                                <button type=\"button\" pButton style=\"float:left;width:80px\" icon=\"fa-pencil-square-o\" (click)=\"activateTab(0,'edit')\" label=\"Edit\" pTooltip=\"Edit Stoppage\" tooltipPosition=\"top\"></button>\r\n                                <button type=\"button\" pButton style=\"float:left;width:80px\" icon=\"fa-plus\" (click)=\"openSearchBox(selectedStoppage)\" label=\"Map\" pTooltip=\"Map Patron\" tooltipPosition=\"top\"></button>\r\n                            </div>\r\n\r\n                            <div class=\"ui-toolbar-group-right\">\r\n                                <button type=\"button\" pButton style=\"float:right;width:40px\" icon=\"fa fa-chevron-down\" (click)=\"moveDown()\" pTooltip=\"MoveDown\" tooltipPosition=\"top\"></button>\r\n                                <button type=\"button\" pButton style=\"float:left;width:85px;padding-left: 10px;\" icon=\"fa-trash\" (click)=\"deleteStoppage(selectedStoppage)\" label=\"Delete\" pTooltip=\"Delete Stoppage\" tooltipPosition=\"top\" ></button>\r\n                                <button type=\"button\" pButton style=\"float:right;width:40px\" icon=\"fa fa-chevron-up\" (click)=\"moveUp()\" pTooltip=\"MoveUP\" tooltipPosition=\"top\"></button>\r\n                            </div>\r\n                        </p-toolbar>\r\n\r\n                        <p-toolbar [style]=\"{'margin-top':'-1px'}\">\r\n                            <div class=\"ui-toolbar-group-left\">\r\n                            <span style=\"font-size:120%\"> Stop List</span>\r\n                            </div>\r\n\r\n                            <div class=\"ui-toolbar-group-right\">\r\n                                <button type=\"button\" style=\"float:right;width:90px;padding-left: 12px;\" pButton icon=\"fa-file-o\" iconPos=\"left\" label=\"Export\" pTooltip=\"Download\" tooltipPosition=\"top\" (click)=\"stoppageDownload()\"></button>\r\n                            </div>\r\n                        </p-toolbar>\r\n                        <!--<div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;width:500px;margin-top:-1px\">\r\n                            <div class=\"ui-grid-row\">\r\n                                <div class=\"ui-grid-col-10\">\r\n                                    <header style=\"text-align:left;font-size:120%\">\r\n                                        Stop List\r\n                                    </header>\r\n                                </div>\r\n                                <div class=\"ui-grid-col-2\">\r\n                                    <button type=\"button\" style=\"float:right;width:90px;padding-left: 12px;\" pButton icon=\"fa-file-o\" iconPos=\"left\" label=\"Export\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Download\" (click)=\"stoppageDownload()\"></button>\r\n                                </div>\r\n                            </div>\r\n                        </div>-->\r\n                   \r\n                        <p-dataTable #dt [(value)]=\"selectedRouteStoppage\" sortField=\"sequence\" sortOrder=\"1\" selectionMode=\"single\" (onRowSelect)=\"updateStoppage($event)\" [(selection)]=\"selectedStoppage\" [rows]=\"8\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15,20]\" [responsive]=\"true\"[style]=\"{'width':'514px','margin-top':'-1px'}\"> \r\n                            <p-column field=\"sequence\" [style]=\"{'width':'33px'}\" header=\"No.\"></p-column>\r\n                            <p-column field=\"name\" header=\"Name\" [style]=\"{'width':'100px'}\"></p-column>\r\n                            <p-column field=\"pickupTime\" header=\"Pick Time\" [style]=\"{'width':'80px'}\"></p-column>\r\n                            <p-column field=\"dropTime\" header=\"Drop Time\" [style]=\"{'width':'80px'}\"></p-column>\r\n\r\n                        </p-dataTable>\r\n                       \r\n                    </div>\r\n                    <div class=\"ui-grid-col-8\">\r\n                        <p-toolbar>\r\n                            <div class=\"ui-toolbar-group-left\">\r\n                                <button type=\"button\" pButton style=\"float:left;width:80px;padding-left:10px;\" icon=\"fa-trash\" (click)=\"removePatron(selectedRoutePatron,selectedStoppage)\" label=\"Remove\" pTooltip=\"Remove Patron\" tooltipPosition=\"top\"></button>\r\n                            </div>\r\n\r\n                            <div class=\"ui-toolbar-group-right\">\r\n                                <button type=\"button\" style=\"float:right;width: 90px;padding-left: 12px;\" pButton icon=\"fa-file-o\" iconPos=\"left\" label=\"Export\" pTooltip=\"Download\" tooltipPosition=\"top\"  (click)=\"studentDownload()\"></button>\r\n                            </div>\r\n                        </p-toolbar>\r\n                        <div class=\"ui-grid ui-grid-responsive   ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;width:620px;margin-top:-1px\">\r\n                            <div class=\"ui-grid-row\">\r\n                                <div class=\"ui-grid-col-10\">\r\n                                    <header style=\"text-align:left;font-size:120%\">\r\n                                        Student List\r\n                                    </header>\r\n                                </div>\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <p-dataTable [(value)]=\"patronWithStoppageList\" selectionMode=\"single\" [(selection)]=\"selectedRoutePatron\" [rows]=\"7\" [paginator]=\"true\" [pageLinks]=\"3\" [responsive]=\"true\">\r\n                            <p-column field=\"imgUrl\" [style]=\"{'width':'55px'}\">\r\n                                <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                                    <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                                </ng-template>\r\n                            </p-column>\r\n                            <p-column field=\"patron.firstName\" header=\"First Name\" [style]=\"{'width':'110px'}\"></p-column>\r\n                            <p-column field=\"patron.lastName\" header=\"Last Name\" [style]=\"{'width':'110px'}\"></p-column>\r\n                            <p-column field=\"patron.class\" header=\"Class\" [style]=\"{'width':'70px'}\"></p-column>\r\n                            <p-column field=\"patron.section\" header=\"Section\" [style]=\"{'width':'60px'}\"></p-column>\r\n                            <!--<p-column field=\"stoppageName\" header=\"Stop\" ></p-column>-->                            \r\n                        </p-dataTable>                       \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </p-tabPanel>\r\n\r\n        <p-tabPanel header=\"{{stoppageHeader}}\" [selected]=\"selectedTab===0\" *ngIf=\"tab2stoppage\">\r\n           \r\n                <form [formGroup]=\"stoppageForm\" (ngSubmit)=\"createTransportStoppage(1)\" style=\"margin-top:-20px\">\r\n               \r\n                <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                    <div class=\"ui-grid-row\">\r\n                        <div class=\"ui-grid-col-4\" style=\"margin-left:-16px;margin-bottom:-25px\" >\r\n                            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                                <div class=\"ui-grid-row\">\r\n                                    <div class=\"ui-grid-col-4\">\r\n                                        Name :\r\n                                    </div>\r\n                                    <div class=\"ui-grid-col-6\">\r\n                                        <input pInputText type=\"text\" formControlName=\"name\" style=\"width: 180px;\" placeholder=\"Required\" [(ngModel)]=\"transportStoppageDetail.name\" />\r\n                                        <div style=\"color:brown\" *ngIf=\"!stoppageForm.controls['name'].valid&&stoppageForm.controls['name'].dirty\">\r\n                                             Name is required\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                                <div class=\"ui-grid-row\">\r\n                                    <div class=\"ui-grid-col-4\">\r\n                                        Sequence :\r\n                                    </div>\r\n                                    <div class=\"ui-grid-col-6\">\r\n                                        <p-dropdown [options]=\"seqList\" formControlName=\"seqList\" [style]=\"{'width':'150px','float':'left'}\" [(ngModel)]=\"selectedSequence\" placeholder=\"Select\"> </p-dropdown> \r\n                                        <div style=\"color:brown\" *ngIf=\"!stoppageForm.controls['seqList'].valid&&stoppageForm.controls['seqList'].dirty\">\r\n                                            Sequence is required\r\n                                        </div>\r\n                                      </div>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                                <div class=\"ui-grid-row\">\r\n                                    <div class=\"ui-grid-col-4\">\r\n                                        Lattitude :\r\n                                    </div>\r\n                                    <div class=\"ui-grid-col-8\">\r\n                                        <input pInputText type=\"text\" readonly=\"readonly\"  formControlName=\"lattitude\" placeholder=\"Required\" [(ngModel)]=\"transportStoppageDetail.lattitude\" />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                                <div class=\"ui-grid-row\">\r\n                                    <div class=\"ui-grid-col-4\">\r\n                                        Longitude :\r\n                                    </div>\r\n                                    <div class=\"ui-grid-col-8\">\r\n                                        <input pInputText type=\"text\" formControlName=\"longitude\" readonly=\"readonly\" placeholder=\"Required\" [(ngModel)]=\"transportStoppageDetail.longitude\" />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                                <div class=\"ui-grid-row\">\r\n                                    <div class=\"ui-grid-col-4\">\r\n                                        Pick Time :\r\n                                    </div>\r\n                                    <div class=\"ui-grid-col-6\">\r\n                                        <p-calendar [timeOnly]=\"true\" formControlName=\"pickupTime\" placeholder=\"hh:mm\" hourFormat=\"24\" [(ngModel)]=\"transportStoppageDetail.pickupTime\"></p-calendar>\r\n                                        <div style=\"color:brown\" *ngIf=\"!stoppageForm.controls['pickupTime'].valid&&stoppageForm.controls['pickupTime'].dirty\">\r\n                                            Pick Time is required\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                                <div class=\"ui-grid-row\">\r\n                                    <div class=\"ui-grid-col-4\">\r\n                                        Drop Time :\r\n                                    </div>\r\n                                    <div class=\"ui-grid-col-6\">\r\n                                        <p-calendar [timeOnly]=\"true\" formControlName=\"dropTime\" placeholder=\"hh:mm\" hourFormat=\"24\" [(ngModel)]=\"transportStoppageDetail.dropTime\"></p-calendar>\r\n                                        <div style=\"color:brown\" *ngIf=\"!stoppageForm.controls['dropTime'].valid&&stoppageForm.controls['dropTime'].dirty\">\r\n                                            Pick Time is required\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                                <div class=\"ui-grid-row\">\r\n                                    <div class=\"ui-grid-col-4\">\r\n                                        Description:\r\n                                    </div>\r\n                                    <div class=\"ui-grid-col-8\">\r\n                                        <textarea pInputText type=\"text\" style=\"width: 240px;\" formControlName=\"description\" resizable=\"false\" [(ngModel)]=\"transportStoppageDetail.description\"></textarea>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div style=\"margin-left:123px;\">\r\n                                <button type=\"button\" style=\"float:left;width:90px;\" label=\"Cancel\" pButton (click)=\"cancelTransportStoppage(1)\"></button>\r\n                                <button pButton type=\"submit\" style=\"float:left;width:90px;margin-left:7px;\" label=\"Save\" [disabled]=\"!stoppageForm.valid\"></button>                                                          \r\n                            </div>\r\n                        </div>\r\n                        <div class=\"ui-grid-col-12\" style=\"margin-right:-25px;margin-bottom:-41px\">\r\n                            <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                                <div class=\"ui-grid-row\">\r\n                                    <div class=\"ui-grid-col-12\">\r\n                                        <div *ngIf=\"mapVisible\">Pick a Location from Map<br>\r\n                                            <sebm-google-map [latitude]=\"lat1\" [longitude]=\"lng2\" [zoom]=\"zoom\" [disableDefaultUI]=\"false\" \r\n                                                             [zoomControl]=\"false\" (mapClick)=\"handleMapClick($event)\">                                                \r\n                                            <sebm-google-map-marker *ngFor=\"let m of orgMarkers; let i = index\" \r\n                                                            (markerClick)=\"clickedMarker(m.label, i)\" [latitude]=\"m.lat\"[longitude]=\"m.lng\" [title]=\"m.title\" \r\n                                                            [markerDraggable]=\"m.draggable\" (dragEnd)=\"markerDragEnd(m, $event)\" [iconUrl]=\"m.icon\">\r\n                                                </sebm-google-map-marker>\r\n                                                <sebm-google-map-marker *ngFor=\"let m of selectLocation; let i = index\" (markerClick)=\"clickedMarker(m.label, i)\" [latitude]=\"m.lat\" [longitude]=\"m.lng\" [label]=\"m.label\" [title]=\"m.title\" [markerDraggable]=\"m.draggable\" (dragEnd)=\"markerDragEnd(m, $event)\" [iconUrl]=\"m.icon\">\r\n                                                </sebm-google-map-marker>\r\n                                            </sebm-google-map>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                    </form>\r\n           \r\n        </p-tabPanel>\r\n\r\n    </p-tabView>\r\n</p-dialog>\r\n\r\n<p-dialog header=\"Add Patron\" [(visible)]=\"patronMapDialog\" [resizable]=\"false\" [responsive]=\"true\" showEffect=\"fade\" [modal]=\"true\" width=\"800\" height=\"620\">\r\n <p-toolbar [style]=\"{'margin_left':'9px','margin_right':'10px'}\">\r\n        <div class=\"ui-toolbar-group-left\">\r\n            <button type=\"button\" pButton style=\"float:left;width:80px\" (click)=\"mapPatron(selectedPatronDetail,selectedStoppage)\" label=\"Add\" pTooltip=\"Map Patron\" tooltipPosition=\"top\"></button>\r\n            <button type=\"button\" label=\"Cancel\" style=\"float:left;width:80px\" pButton (click)=\"onSearchCancel($event)\"></button>\r\n        </div>\r\n        <div class=\"ui-toolbar-group-right\">\r\n            <i class=\"fa fa-search\" style=\"float:left;margin:4px 4px 0 0\"></i>\r\n            <input #gbb type=\"text\" pInputText size=\"30\" style=\"float:left;margin-right:4px;\" placeholder=\"search\">\r\n                <p-toggleButton [(ngModel)]=\"checked\" onLabel=\"Unmapped\" (onChange)=\"unmappedPatron($event)\" offLabel=\"All\" [style]=\"{'width':'90px','height':'27px'}\"></p-toggleButton>\r\n            <button type=\"button\" style=\"float:right;margin-left:1px\" pButton icon=\"fa-file-o\" iconPos=\"left\" label=\"Export\" pTooltip=\"Download\" tooltipPosition=\"top\" (click)=\"download()\"></button>\r\n        </div>\r\n  </p-toolbar>\r\n\r\n    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"padding:4px 10px;border-bottom: 0 none;margin-right: -10px;margin-left: -9px;margin-top:-1px;\">\r\n        <div class=\"ui-grid-row\" style=\"margin-top: -1px;\">\r\n            <p-dataTable #dt [(value)]=\"patronDetails\" [(selection)]=\"selectedPatronDetail\" [rows]=\"9\" [paginator]=\"true\" [pageLinks]=\"3\" [responsive]=\"true\" [globalFilter]=\"gbb\">\r\n                <p-column [style]=\"{'width':'20px'}\" selectionMode=\"single\"></p-column>\r\n                <p-column field=\"imgUrl\" [style]=\"{'width':'31px'}\">\r\n                    <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                        <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                    </ng-template>\r\n                </p-column>\r\n                <p-column field=\"firstName\" header=\"First Name\" [style]=\"{'width':'75px'}\" [sortable]=\"true\"></p-column>\r\n                <p-column field=\"lastName\" header=\"Last Name\" [style]=\"{'width':'75px'}\" [sortable]=\"true\"></p-column>\r\n                <!--<p-column field=\"rollNo\" header=\"Roll No\" [sortable]=\"true\" [style]=\"{'width':'75px'}\"></p-column>-->\r\n                <p-column field=\"class\" header=\"Class\" [sortable]=\"true\" [style]=\"{'width':'42px'}\"></p-column>routeNumber\r\n                <p-column field=\"section\" header=\"Section\" [sortable]=\"true\" [style]=\"{'width':'54px'}\"></p-column>\r\n                <!--<p-column field=\"routeNumber\" header=\"Route\" [sortable]=\"true\" [style]=\"{'width':'45px'}\"></p-column>\r\n                <p-column field=\"stoppagename\" header=\"Stoppage\" [sortable]=\"true\" [style]=\"{'width':'85px'}\"></p-column>-->\r\n            </p-dataTable>\r\n        </div>\r\n    </div>\r\n</p-dialog>\r\n\r\n<!--Confirm dialog delete-->\r\n\r\n<p-confirmDialog width=\"425\"></p-confirmDialog>\r\n<p-growl [value]=\"msgs\" life=\"3000\"></p-growl>\r\n";

/***/ }),
/* 220 */
/***/ (function(module, exports) {

module.exports = "\r\n<div class=\"card card-w-title\">\r\n   \r\n            <p-toolbar *ngIf=\"current\">\r\n                <div class=\"ui-toolbar-group-left\">\r\n                    <button type=\"button\" pButton icon=\"fa-user-plus\" style=\"float:left\" (click)=\"addRequest()\" label=\"Add\" pTooltip=\"Add Walking Request\" tooltipPosition=\"top\"></button>\r\n                    <button type=\"button\" pButton icon=\"fa-trash\" style=\"float:left\" (click)=\"deleteWalker(selectedWalkerDetail)\" label=\"Delete\" pTooltip=\"Delete Walker\" tooltipPosition=\"top\"></button>\r\n                    <button type=\"button\" pButton icon=\"fa fa-check\" style=\"float:left\" (click)=\"isAcknowledge(selectedWalkerDetail)\" label=\"Approved\" pTooltip=\"Approved Walker\" tooltipPosition=\"top\"></button>\r\n                    <button type=\"button\" pButton label=\"History\" pTooltip=\"History Walker\" tooltipPosition=\"top\" (click)=\"historyWalker()\"></button>\r\n                </div>\r\n                <div class=\"ui-toolbar-group-right\">\r\n                    <!--<i class=\"fa fa-search\"></i>\r\n                    <input #gf type=\"text\" pInputText size=\"30\" placeholder=\"search\">-->\r\n                    <button type=\"button\" style=\"float:right;margin-left:1px\" pButton icon=\"fa-file-o\" iconPos=\"left\" label=\"Export\" pTooltip=\"Download\" tooltipPosition=\"top\" (click)=\"download()\"></button>\r\n                </div>\r\n            </p-toolbar>\r\n       \r\n        <p-toolbar *ngIf=\"history\">\r\n            <div class=\"ui-toolbar-group-left\">\r\n                From : <p-calendar dateFormat=\"yy-mm-dd\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"2000:2030\" [(ngModel)]=\"startDate\"></p-calendar>\r\n                To :<p-calendar dateFormat=\"yy-mm-dd\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"2000:2030\" [(ngModel)]=\"endDate\"></p-calendar>\r\n                <button type=\"button\" pButton label=\"Go\" style=\"width:50px;height:27px\" (click)=\"getSelectedDateWalker($event)\" pTooltip=\"Click here\" tooltipPosition=\"top\"></button>\r\n                <button type=\"button\" pButton icon=\"fa-trash\" (click)=\"deleteWalker(selectedWalkerDetail)\" label=\"Delete\" pTooltip=\"Delete Walker\" tooltipPosition=\"top\"></button>\r\n                <button type=\"button\" pButton label=\"Current\" pTooltip=\"Current Walker\" tooltipPosition=\"top\" (click)=\"currentWalker()\"></button>\r\n            </div>\r\n            <div class=\"ui-toolbar-group-right\">\r\n                <!--<i class=\"fa fa-search\"></i>\r\n                <input #gf type=\"text\" pInputText size=\"30\" placeholder=\"search\">-->\r\n                <button type=\"button\" style=\"float:right;margin-left:1px\" pButton icon=\"fa-file-o\" iconPos=\"left\" label=\"Export\" pTooltip=\"Download\" tooltipPosition=\"top\" (click)=\"download()\"></button>\r\n            </div>\r\n\r\n        </p-toolbar>\r\n\r\n        <div class=\"ui-grid ui-grid-responsive ui-widget-header ui-helper-clearfix\" style=\"padding:4px 10px;border-bottom: 0 none;margin-top: -1px;\">\r\n            <div class=\"ui-grid-row\">\r\n                <header style=\"text-align:left;font-size:120%\">Transport Walker</header>\r\n            </div>\r\n        </div>\r\n        <p-dataTable [(value)]=\"transportWalkerList\" [(selection)]=\"selectedWalkerDetail\" [rows]=\"8\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[5,10,15,20]\" [responsive]=\"true\" [globalFilter]=\"gf\" [loading]=\"loading\">\r\n            <p-column [style]=\"{'width':'40px'}\" selectionMode=\"multiple\"></p-column>\r\n            <p-column field=\"imgUrl\" [style]=\"{'width':'70px'}\">\r\n                <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                    <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"50\" width=\"50\" />\r\n                </ng-template>\r\n            </p-column>\r\n            <p-column field=\"firstName\" header=\"First Name\" [sortable]=\"true\" [style]=\"{'width':'130px'}\"></p-column>\r\n            <p-column field=\"lastName\" header=\"Last Name\" [sortable]=\"true\" [style]=\"{'width':'120px'}\"></p-column>\r\n            <p-column field=\"requestBy\" header=\"Request By\" [style]=\"{'width':'100px'}\"></p-column>\r\n            <p-column field=\"requestMode\" header=\"Request Mode\" [style]=\"{'width':'130px'}\"></p-column>\r\n            <p-column field=\"pickImage\" header=\"Pick\" [style]=\"{'width':'40px'}\">\r\n                <ng-template let-col1 let-car=\"rowData\" pTemplate=\"body\">\r\n                    <img src=\"{{car[col1.field]}}\" height=\"25\" width=\"25\" />\r\n                </ng-template>\r\n            </p-column>\r\n            <p-column field=\"dropImage\" header=\"Drop\" [style]=\"{'width':'40px'}\">\r\n                <ng-template let-col2 let-car=\"rowData\" pTemplate=\"body\">\r\n                    <img src=\"{{car[col2.field]}}\" height=\"25\" width=\"25\" />\r\n                </ng-template>\r\n            </p-column>\r\n            <p-column field=\"requestDate\" header=\"Request Date\" [style]=\"{'width':'100px'}\"></p-column>\r\n            <p-column field=\"description\" header=\"Comment\"></p-column>\r\n            <p-column header=\"Approved\" [style]=\"{'width':'70px'}\">\r\n                <ng-template let-transportWalkingRequest=\"rowData\" pTemplate type=\"body\">\r\n                    <div>\r\n                        <p-checkbox name=\"isAcknowledged\" value=\"isActive\" disabled binary=\"true\" [(ngModel)]=\"transportWalkingRequest.isAcknowledged\"></p-checkbox>\r\n                    </div>\r\n\r\n                </ng-template>\r\n            </p-column>\r\n\r\n        </p-dataTable>\r\n    </div>\r\n                <p-dialog [(visible)]=\"transportWalkerDialog\" header=\"Add Transport Walker\" [resizable]=\"false\" [responsive]=\"true\" showeffect=\"fade\" [modal]=\"true\" width=\"750\" height=\"500\">\r\n                    <form [formGroup]=\"walkerform\" (ngSubmit)=\"createTransportWalker(walkerform.value)\" style=\"height:600px;\">\r\n                        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                            <div class=\"ui-grid-row\">\r\n                                <div class=\"ui-grid-col-3\">\r\n                                    Patron :\r\n                                </div>\r\n                                <div class=\"ui-grid-col-15\">\r\n                                    <button type=\"button\" pButton style=\"float:left;width:90px\" icon=\"fa-user-plus\" (click)=\"openSearchBox()\" label=\"Select\"></button>\r\n                                </div>\r\n                                <div class=\"ui-grid-col-6\">\r\n                                    <strong style=\"font-size:15px;\">{{transportWalkingRequest.patronId}}</strong>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                            <div class=\"ui-grid-row\">\r\n                                <div class=\"ui-grid-col-3\">\r\n                                    Pick  :\r\n                                </div>\r\n                                <div class=\"ui-grid-col-9\">\r\n                                    <p-checkbox name=\"pick\" value=\"pick\" formControlName=\"pick\" binary=\"true\" [(ngModel)]=\"transportWalkingRequest.pick\"></p-checkbox>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin:10px 0px\">\r\n                            <div class=\"ui-grid-row\">\r\n                                <div class=\"ui-grid-col-3\">\r\n                                    Drop :\r\n                                </div>\r\n                                <div class=\"ui-gri-col-9\">\r\n                                    <p-checkbox name=\"drop\" value=\"drop\" formControlName=\"drop\" binary=\"true\" [(ngModel)]=\"transportWalkingRequest.drop\"></p-checkbox>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                            <div class=\"ui-grid-row\">\r\n                                <div class=\"ui-grid-col-3\">\r\n                                    Request Date :\r\n                                </div>\r\n                                <div class=\"ui-grid-col-3\">\r\n                                    <p-calendar dateFormat=\"yy-mm-dd\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" formControlName=\"requestDate\" yearRange=\"{{selectedYear}}:2030\" [showIcon]=\"true\" [(ngModel)]=\"transportWalkingRequest.requestDate\"></p-calendar>\r\n                                    <div style=\"color:brown\" *ngIf=\"!walkerform.controls['requestDate'].valid&&walkerform.controls['requestDate'].dirty\">\r\n                                        Request date is required\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                            <div class=\"ui-grid-row\">\r\n                                <div class=\"ui-grid-col-3\">\r\n                                    Request Mode  :\r\n                                </div>\r\n                                <div class=\"ui-grid-col-9\">\r\n                                    <p-dropdown [options]=\"requestModeList\" placeholder=\"Select\" [style]=\"{'width':'150px','float':'left'}\" formControlName=\"requestModeList\" [(ngModel)]=\"selectedMode\"> </p-dropdown>\r\n                                    <div style=\"color:brown\" *ngIf=\"!walkerform.controls['requestModeList'].valid&&walkerform.controls['requestModeList'].dirty\">\r\n                                        Request mode is required\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                            <div class=\"ui-grid-row\">\r\n                                <div class=\"ui-grid-col-3\">\r\n                                    Request By  :\r\n                                </div>\r\n                                <div class=\"ui-grid-col-9\">\r\n                                    <p-dropdown [options]=\"requestByList\" formControlName=\"requestByList\" [style]=\"{'width':'150px'}\" [(ngModel)]=\"selectedRequestBy\"></p-dropdown>\r\n                                    <div style=\"color:brown\" *ngIf=\"!walkerform.controls['requestByList'].valid&&walkerform.controls['requestByList'].dirty\">\r\n                                        Request by is required\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"margin: 10px 0px\">\r\n                            <div class=\"ui-grid-row\">\r\n                                <div class=\"ui-grid-col-3\">\r\n                                    Comment :\r\n                                </div>\r\n                                <div class=\"ui-grid-col-6\">\r\n                                    <textarea pInputText type=\"text\" placeholder=\"Required\" formControlName=\"description\" autoResize=\"autoResize\" [(ngModel)]=\"transportWalkingRequest.description\"></textarea>\r\n                                    <div style=\"color:brown\" *ngIf=\"!walkerform.controls['description'].valid&&walkerform.controls['description'].dirty\">\r\n                                        <span *ngIf=\"walkerform.controls['description'].errors['required']\">Comment is required</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <footer style=\"margin-left:184px;\">\r\n                            <div>\r\n                                <button type=\"button\" style=\"float:initial;width:110px;height:30px;\" label=\"Cancel\" pButton (click)=\"onCancel($event)\"></button>\r\n                                <button pButton type=\"submit\" style=\"width:110px;height:30px;\" label=\"Save\" [disabled]=\"!walkerform.valid\"></button>\r\n                            </div>\r\n                        </footer>\r\n                    </form>\r\n                </p-dialog>\r\n\r\n                <p-dialog header=\"Patron List\" [(visible)]=\"patronMapDialog\" [resizable]=\"false\" [responsive]=\"true\" showEffect=\"fade\" [modal]=\"true\" width=\"750\" height=\"600\">\r\n                    <p-toolbar [style]=\"{'margin_left':'9px','margin_right':'10px'}\">                     \r\n                            <div class=\"ui-toolbar-group-left\">\r\n                                <div>\r\n                                    <button type=\"button\" pButton style=\"float:left;width:80px\" (click)=\"mapPatron(selectedPatronDetail)\" label=\"Add\" pTooltip=\"MapPatron\" tooltipPosition=\"top\"></button>\r\n                                    <button type=\"button\" label=\"Cancel\" style=\"float:left;width:80px\" pButton (click)=\"onSearchCancel($event)\"></button>\r\n                                </div>\r\n\r\n                                <div class=\"ui-toolbar-group-right\">\r\n                                    <i class=\"fa fa-search\" style=\"float:left;margin:4px 4px 0 0\"></i>\r\n                                    <input #gbb type=\"text\" pInputText size=\"30\" style=\"float:left;margin-right:4px;\" placeholder=\"search\">\r\n                                </div>\r\n                            </div>                       \r\n                    </p-toolbar>\r\n                    <div class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\" style=\"padding:4px 10px;border-bottom: 0 none;margin-right: -10px;margin-left: -9px;margin-top:-1px;\">\r\n                        <div class=\"ui-grid-row\" style=\"margin-top: -1px;\">\r\n                            <p-dataTable #dt [(value)]=\"patronDetails\" [(selection)]=\"selectedPatronDetail\" [rows]=\"8\" [paginator]=\"true\" [pageLinks]=\"3\" [responsive]=\"true\" [globalFilter]=\"gbb\">\r\n                                <p-column [style]=\"{'width':'38px'}\" selectionMode=\"single\"></p-column>\r\n                                <p-column field=\"imgUrl\" [style]=\"{'width':'77px'}\">\r\n                                    <ng-template let-col let-car=\"rowData\" pTemplate=\"body\">\r\n                                        <img src=\"https://devschoolwayzdatastorage.blob.core.windows.net/b077007f-6e64-4074-bd2b-c9500d89bef8/Photo/{{car[col.field]}}\" class=\"rounded-circle\" height=\"40\" width=\"40\" />\r\n                                    </ng-template>\r\n                                </p-column>\r\n                                <p-column field=\"firstName\" header=\"First Name\" [sortable]=\"true\"></p-column>\r\n                                <p-column field=\"lastName\" header=\"Last Name\" [sortable]=\"true\"></p-column>\r\n                                <p-column field=\"rollNo\" header=\"Roll No\" [sortable]=\"true\"></p-column>\r\n                                <p-column field=\"class\" header=\"Class\" [sortable]=\"true\"></p-column>\r\n                                <p-column field=\"section\" header=\"Section\" [sortable]=\"true\"></p-column>\r\n                            </p-dataTable>\r\n                        </div>\r\n                      </div>\r\n                </p-dialog>\r\n\r\n<p-confirmDialog width=\"425\"></p-confirmDialog>\r\n<p-growl [value]=\"msgs\" life=\"3000\"></p-growl>\r\n";

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": 44,
	"./af.js": 44,
	"./ar": 51,
	"./ar-dz": 45,
	"./ar-dz.js": 45,
	"./ar-kw": 46,
	"./ar-kw.js": 46,
	"./ar-ly": 47,
	"./ar-ly.js": 47,
	"./ar-ma": 48,
	"./ar-ma.js": 48,
	"./ar-sa": 49,
	"./ar-sa.js": 49,
	"./ar-tn": 50,
	"./ar-tn.js": 50,
	"./ar.js": 51,
	"./az": 52,
	"./az.js": 52,
	"./be": 53,
	"./be.js": 53,
	"./bg": 54,
	"./bg.js": 54,
	"./bn": 55,
	"./bn.js": 55,
	"./bo": 56,
	"./bo.js": 56,
	"./br": 57,
	"./br.js": 57,
	"./bs": 58,
	"./bs.js": 58,
	"./ca": 59,
	"./ca.js": 59,
	"./cs": 60,
	"./cs.js": 60,
	"./cv": 61,
	"./cv.js": 61,
	"./cy": 62,
	"./cy.js": 62,
	"./da": 63,
	"./da.js": 63,
	"./de": 66,
	"./de-at": 64,
	"./de-at.js": 64,
	"./de-ch": 65,
	"./de-ch.js": 65,
	"./de.js": 66,
	"./dv": 67,
	"./dv.js": 67,
	"./el": 68,
	"./el.js": 68,
	"./en-au": 69,
	"./en-au.js": 69,
	"./en-ca": 70,
	"./en-ca.js": 70,
	"./en-gb": 71,
	"./en-gb.js": 71,
	"./en-ie": 72,
	"./en-ie.js": 72,
	"./en-nz": 73,
	"./en-nz.js": 73,
	"./eo": 74,
	"./eo.js": 74,
	"./es": 76,
	"./es-do": 75,
	"./es-do.js": 75,
	"./es.js": 76,
	"./et": 77,
	"./et.js": 77,
	"./eu": 78,
	"./eu.js": 78,
	"./fa": 79,
	"./fa.js": 79,
	"./fi": 80,
	"./fi.js": 80,
	"./fo": 81,
	"./fo.js": 81,
	"./fr": 84,
	"./fr-ca": 82,
	"./fr-ca.js": 82,
	"./fr-ch": 83,
	"./fr-ch.js": 83,
	"./fr.js": 84,
	"./fy": 85,
	"./fy.js": 85,
	"./gd": 86,
	"./gd.js": 86,
	"./gl": 87,
	"./gl.js": 87,
	"./gom-latn": 88,
	"./gom-latn.js": 88,
	"./he": 89,
	"./he.js": 89,
	"./hi": 90,
	"./hi.js": 90,
	"./hr": 91,
	"./hr.js": 91,
	"./hu": 92,
	"./hu.js": 92,
	"./hy-am": 93,
	"./hy-am.js": 93,
	"./id": 94,
	"./id.js": 94,
	"./is": 95,
	"./is.js": 95,
	"./it": 96,
	"./it.js": 96,
	"./ja": 97,
	"./ja.js": 97,
	"./jv": 98,
	"./jv.js": 98,
	"./ka": 99,
	"./ka.js": 99,
	"./kk": 100,
	"./kk.js": 100,
	"./km": 101,
	"./km.js": 101,
	"./kn": 102,
	"./kn.js": 102,
	"./ko": 103,
	"./ko.js": 103,
	"./ky": 104,
	"./ky.js": 104,
	"./lb": 105,
	"./lb.js": 105,
	"./lo": 106,
	"./lo.js": 106,
	"./lt": 107,
	"./lt.js": 107,
	"./lv": 108,
	"./lv.js": 108,
	"./me": 109,
	"./me.js": 109,
	"./mi": 110,
	"./mi.js": 110,
	"./mk": 111,
	"./mk.js": 111,
	"./ml": 112,
	"./ml.js": 112,
	"./mr": 113,
	"./mr.js": 113,
	"./ms": 115,
	"./ms-my": 114,
	"./ms-my.js": 114,
	"./ms.js": 115,
	"./my": 116,
	"./my.js": 116,
	"./nb": 117,
	"./nb.js": 117,
	"./ne": 118,
	"./ne.js": 118,
	"./nl": 120,
	"./nl-be": 119,
	"./nl-be.js": 119,
	"./nl.js": 120,
	"./nn": 121,
	"./nn.js": 121,
	"./pa-in": 122,
	"./pa-in.js": 122,
	"./pl": 123,
	"./pl.js": 123,
	"./pt": 125,
	"./pt-br": 124,
	"./pt-br.js": 124,
	"./pt.js": 125,
	"./ro": 126,
	"./ro.js": 126,
	"./ru": 127,
	"./ru.js": 127,
	"./sd": 128,
	"./sd.js": 128,
	"./se": 129,
	"./se.js": 129,
	"./si": 130,
	"./si.js": 130,
	"./sk": 131,
	"./sk.js": 131,
	"./sl": 132,
	"./sl.js": 132,
	"./sq": 133,
	"./sq.js": 133,
	"./sr": 135,
	"./sr-cyrl": 134,
	"./sr-cyrl.js": 134,
	"./sr.js": 135,
	"./ss": 136,
	"./ss.js": 136,
	"./sv": 137,
	"./sv.js": 137,
	"./sw": 138,
	"./sw.js": 138,
	"./ta": 139,
	"./ta.js": 139,
	"./te": 140,
	"./te.js": 140,
	"./tet": 141,
	"./tet.js": 141,
	"./th": 142,
	"./th.js": 142,
	"./tl-ph": 143,
	"./tl-ph.js": 143,
	"./tlh": 144,
	"./tlh.js": 144,
	"./tr": 145,
	"./tr.js": 145,
	"./tzl": 146,
	"./tzl.js": 146,
	"./tzm": 148,
	"./tzm-latn": 147,
	"./tzm-latn.js": 147,
	"./tzm.js": 148,
	"./uk": 149,
	"./uk.js": 149,
	"./ur": 150,
	"./ur.js": 150,
	"./uz": 152,
	"./uz-latn": 151,
	"./uz-latn.js": 151,
	"./uz.js": 152,
	"./vi": 153,
	"./vi.js": 153,
	"./x-pseudo": 154,
	"./x-pseudo.js": 154,
	"./yo": 155,
	"./yo.js": 155,
	"./zh-cn": 156,
	"./zh-cn.js": 156,
	"./zh-hk": 157,
	"./zh-hk.js": 157,
	"./zh-tw": 158,
	"./zh-tw.js": 158
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 221;

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var setup_service_1 = __webpack_require__(11);
var router_1 = __webpack_require__(5);
var AppComponent = (function () {
    function AppComponent(renderer, _router) {
        this.renderer = renderer;
        this._router = _router;
        this.userId = "admin";
        var firstName;
        var lastName;
        firstName = localStorage.getItem("GivenName");
        lastName = localStorage.getItem("SurName");
        this.userName = firstName + " " + lastName;
        this.image = localStorage.getItem("ImgUrl");
        this.logoImage = localStorage.getItem("LogoUrl");
        this.lastLogin = localStorage.getItem("LastLogin");
    }
    AppComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.scroller = this.scrollerViewChild.nativeElement;
        //hides the overlay menu and top menu if outside is clicked
        this.documentClickListener = this.renderer.listenGlobal('body', 'click', function (event) {
            if (!_this.isDesktop()) {
                if (!_this.menuClick) {
                    _this.menuActiveMobile = false;
                }
                if (!_this.topMenuButtonClick) {
                    _this.hideTopMenu();
                }
                _this.menuClick = false;
                _this.topMenuButtonClick = false;
            }
        });
    };
    AppComponent.prototype.toggleMenu = function (event) {
        this.menuClick = true;
        if (this.isDesktop()) {
            this.menuInactiveDesktop = !this.menuInactiveDesktop;
            if (this.menuInactiveDesktop) {
                this.menuActiveMobile = false;
            }
        }
        else {
            this.menuActiveMobile = !this.menuActiveMobile;
            if (this.menuActiveMobile) {
                this.menuInactiveDesktop = false;
            }
        }
        if (this.topMenuActive) {
            this.hideTopMenu();
        }
        event.preventDefault();
    };
    AppComponent.prototype.toggleProfile = function (event) {
        this.profileActive = !this.profileActive;
        event.preventDefault();
    };
    AppComponent.prototype.toggleTopMenu = function (event) {
        this.topMenuButtonClick = true;
        this.menuActiveMobile = false;
        if (this.topMenuActive) {
            this.hideTopMenu();
        }
        else {
            this.topMenuActive = true;
        }
        event.preventDefault();
    };
    AppComponent.prototype.hideTopMenu = function () {
        var _this = this;
        this.topMenuLeaving = true;
        setTimeout(function () {
            _this.topMenuActive = false;
            _this.topMenuLeaving = false;
        }, 500);
    };
    AppComponent.prototype.onMenuClick = function () {
        var _this = this;
        this.menuClick = true;
        setTimeout(function () {
            jQuery(_this.scroller).nanoScroller();
        }, 600);
    };
    AppComponent.prototype.isDesktop = function () {
        return window.innerWidth > 1024;
    };
    AppComponent.prototype.onSearchClick = function () {
        this.topMenuButtonClick = true;
    };
    AppComponent.prototype.ngOnDestroy = function () {
        if (this.documentClickListener) {
            this.documentClickListener();
        }
    };
    AppComponent.prototype.password = function () {
        this._router.navigate(['/changepassword']);
    };
    return AppComponent;
}());
tslib_1.__decorate([
    core_1.ViewChild('scroller'),
    tslib_1.__metadata("design:type", core_1.ElementRef)
], AppComponent.prototype, "scrollerViewChild", void 0);
AppComponent = tslib_1.__decorate([
    core_1.Component({
        selector: 'app-root',
        template: __webpack_require__(202),
        providers: [setup_service_1.SetupService],
        animations: [
            core_1.trigger('submenu', [
                core_1.state('hidden', core_1.style({
                    height: '0px'
                })),
                core_1.state('visible', core_1.style({
                    height: '*'
                })),
                core_1.transition('visible => hidden', core_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                core_1.transition('hidden => visible', core_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
            ])
        ]
    }),
    tslib_1.__metadata("design:paramtypes", [core_1.Renderer, router_1.Router])
], AppComponent);
exports.AppComponent = AppComponent;


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var animations_1 = __webpack_require__(35);
var platform_browser_1 = __webpack_require__(25);
var store_devtools_1 = __webpack_require__(303);
var http_1 = __webpack_require__(12);
//import { CommonAppModule } from './commonapp/commonapp.module';
//import { CoreModule } from './core/core.module';
//import { HomeModule } from './home/home.module';
var primeng_1 = __webpack_require__(2);
//import { ApiTranslationLoader } from './shared/services/api-translation-loader.service';
var app_routes_1 = __webpack_require__(224);
var app_service_1 = __webpack_require__(225);
//import { appReducer } from './app-store';
var app_component_1 = __webpack_require__(222);
var auth_guard_1 = __webpack_require__(177);
// Components
var components_module_1 = __webpack_require__(161);
var filter_pipe_1 = __webpack_require__(228);
var AppModule = (function () {
    function AppModule() {
    }
    return AppModule;
}());
AppModule = tslib_1.__decorate([
    core_1.NgModule({
        declarations: [
            app_component_1.AppComponent,
            filter_pipe_1.FilterPipe
        ],
        imports: [
            animations_1.BrowserAnimationsModule,
            platform_browser_1.BrowserModule,
            app_routes_1.routing,
            primeng_1.OrderListModule,
            // FormsModule,
            http_1.HttpModule,
            // Only module that app module loads
            //CoreModule.forRoot(),
            //CommonAppModule.forRoot(),
            //HomeModule,
            components_module_1.ComponentsModule.forRoot(),
            //StoreModule.provideStore(appReducer),
            store_devtools_1.StoreDevtoolsModule.instrumentOnlyWithExtension()
            //TranslateModule.forRoot({ loader: { provide: TranslateLoader } })
        ],
        providers: [
            app_service_1.AppService, auth_guard_1.AuthGuard
        ],
        bootstrap: [app_component_1.AppComponent]
    })
], AppModule);
exports.AppModule = AppModule;


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/// <reference path="util/auth.guard.ts" />

Object.defineProperty(exports, "__esModule", { value: true });
var router_1 = __webpack_require__(5);
var auth_guard_1 = __webpack_require__(177);
var home_component_1 = __webpack_require__(34);
var routes = [
    //{ path: '', redirectTo: 'home', pathMatch: 'full' },
    //{ path: 'Home', redirectTo: 'home' },
    { path: 'Home/SignIn', component: home_component_1.HomeComponent, canActivate: [auth_guard_1.AuthGuard] },
    // Lazy async modules
    //{
    //  path: 'login', loadChildren: './components/login.module#LoginModule'
    //},
    //{
    //  path: 'register', loadChildren: './+register/register.module#RegisterModule'
    //},
    //{
    //  path: 'profile', loadChildren: './+profile/profile.module#ProfileModule'
    //},
    //{
    //  path: 'admin', loadChildren: './+admin/admin.module#AdminModule'
    //},
    //{
    //  path: 'examples', loadChildren: './+examples/examples.module#ExamplesModule'
    //},
    {
        path: 'components', loadChildren: function() { return Promise.resolve().then(__webpack_require__.bind(null, 161))  .then( function(module) { return module['ComponentsModule']; } ); }
    }
];
exports.routing = router_1.RouterModule.forRoot(routes, { preloadingStrategy: router_1.PreloadAllModules });


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var AppService = (function () {
    function AppService() {
    }
    return AppService;
}());
AppService = tslib_1.__decorate([
    core_1.Injectable()
], AppService);
exports.AppService = AppService;


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var router_1 = __webpack_require__(5);
var home_component_1 = __webpack_require__(34);
var organization_component_1 = __webpack_require__(168);
var schedule_component_1 = __webpack_require__(173);
var patronlist_component_1 = __webpack_require__(170);
var personlist_component_1 = __webpack_require__(172);
var transportroutelist_component_1 = __webpack_require__(175);
var chart_component_1 = __webpack_require__(160);
var personchart_component_1 = __webpack_require__(171);
var eventtracking_component_1 = __webpack_require__(164);
var eventlist_component_1 = __webpack_require__(163);
var transportwalker_component_1 = __webpack_require__(176);
var mapview_component_1 = __webpack_require__(167);
var inhousemessage_component_1 = __webpack_require__(166);
var incomingmessage_component_1 = __webpack_require__(165);
var outgoingmessage_component_1 = __webpack_require__(169);
var draftmessage_component_1 = __webpack_require__(162);
var transportmessage_component_1 = __webpack_require__(174);
var changepassword_component_1 = __webpack_require__(159);
var routes = [
    { path: 'home', component: home_component_1.HomeComponent },
    { path: 'organization', component: organization_component_1.OrganizationComponent },
    { path: 'schedule', component: schedule_component_1.ScheduleComponent },
    { path: 'patronlist', component: patronlist_component_1.PatronListComponent },
    { path: 'personlist', component: personlist_component_1.PersonListComponent },
    { path: 'transportroutelist', component: transportroutelist_component_1.TransportRouteListComponent },
    { path: 'chart', component: chart_component_1.ChartComponent },
    { path: 'personchart', component: personchart_component_1.PersonChartComponent },
    { path: 'eventtracking', component: eventtracking_component_1.EventTrackingComponent },
    { path: 'mapview', component: mapview_component_1.MapViewComponent },
    { path: 'eventlist', component: eventlist_component_1.EventListComponent },
    { path: 'inhousemessage', component: inhousemessage_component_1.InhouseMessageComponent },
    { path: 'transportwalker', component: transportwalker_component_1.TransportWalkerComponent },
    { path: 'incomingmessage', component: incomingmessage_component_1.IncomingMessageComponent },
    { path: 'outgoingmessage', component: outgoingmessage_component_1.OutgoingMessageComponent },
    { path: 'draftmessage', component: draftmessage_component_1.DraftMessageComponent },
    { path: 'transportmessage', component: transportmessage_component_1.TransportMessageComponent },
    { path: 'changepassword', component: changepassword_component_1.ChangePasswordComponent },
];
exports.routing = router_1.RouterModule.forChild(routes);


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var router_1 = __webpack_require__(5);
var AppMenuComponent = (function () {
    function AppMenuComponent() {
    }
    AppMenuComponent.prototype.ngOnInit = function () {
        this.model = [
            { label: 'Dashboard', icon: 'fa-home', routerLink: ['/home'] },
            {
                label: 'Setup', icon: 'fa fa-cog',
                items: [
                    { label: 'Organization', icon: 'fa fa-university', routerLink: ['/organization'] },
                    { label: 'Schedule', icon: 'fa fa-calendar-plus-o', routerLink: ['/schedule'] },
                    { label: 'Patron', icon: 'fa fa-users', routerLink: ['/patronlist'] },
                    { label: 'Employee', icon: 'fa-user-circle-o', routerLink: ['/personlist'] },
                    { label: 'Transport', icon: 'fa-bus', routerLink: ['/transportroutelist'] }
                ]
            },
            //{
            //    label: 'Analytics', icon: 'fa fa-bar-chart', 
            //    items: [
            //        { label: 'Patron', icon: 'fa fa-users', routerLink: ['/chart']},
            //        { label: 'Employee', icon: 'fa fa-users', routerLink: ['/personchart']},
            //        { label: 'Events', icon: 'fa-table', routerLink: ['/eventtracking']},
            //    ]
            //},            
            //{
            //    label: 'Message Center', icon: 'fa fa-envelope',
            //    items: [
            //        { label: 'Internal Message', icon: 'fa fa-paper-plane', routerLink: ['/inhousemessage']},
            //        {
            //            label: 'External Message', icon: 'fa-sign-in',
            //            items: [
            //                { label: 'Inbox', icon: 'fa fa-inbox', routerLink: ['/incomingmessage'] }, 
            //                { label: 'Outbox', icon: 'fa fa-paper-plane', routerLink: ['/outgoingmessage'] }, 
            //                { label: 'Drafts', icon: 'fa fa-floppy-o', routerLink: ['/draftmessage'] },
            //            ]
            //        }
            //    ]
            //},
            //{ label: 'Event', icon: 'fa fa-calendar', routerLink: ['/eventlist'] },
            { label: 'Message Center', icon: 'fa fa-envelope', routerLink: ['/transportmessage'] },
            { label: 'Walking Request', icon: 'fa fa-car', routerLink: ['/transportwalker'] },
            //{
            //    label: 'Walking Request', icon: 'fa fa-car',
            //    items: [
            //        { label: 'Current Walker', icon: 'fa fa-calendar', routerLink: ['/transportwalker',{'id':"current"}] },
            //        { label: 'History Walker', icon: 'fa fa-calendar', routerLink: ['/transportwalker', { 'id':"History" }] },
            //    ]
            //},
            { label: 'Map', icon: 'fa fa-map', routerLink: ['/mapview'] },
        ];
    };
    return AppMenuComponent;
}());
AppMenuComponent = tslib_1.__decorate([
    core_1.Component({
        selector: 'app-menu',
        template: "\n        <div class=\"menu\">\n            <ul app-submenu [item]=\"model\" root=\"true\"></ul>\n        </div>\n    "
    })
], AppMenuComponent);
exports.AppMenuComponent = AppMenuComponent;
var AppSubMenu = (function () {
    function AppSubMenu(router, location) {
        this.router = router;
        this.location = location;
    }
    AppSubMenu.prototype.itemClick = function (event, item, index) {
        if (item.disabled) {
            event.preventDefault();
            return true;
        }
        this.activeIndex = (this.activeIndex === index) ? null : index;
        if (!item.url || item.routerLink) {
            event.preventDefault();
        }
        if (item.command) {
            if (!item.eventEmitter) {
                item.eventEmitter = new core_1.EventEmitter();
                item.eventEmitter.subscribe(item.command);
            }
            item.eventEmitter.emit({
                originalEvent: event,
                item: item
            });
        }
        if (item.routerLink) {
            this.router.navigate(item.routerLink);
        }
    };
    AppSubMenu.prototype.isActive = function (index) {
        return this.activeIndex === index;
    };
    return AppSubMenu;
}());
tslib_1.__decorate([
    core_1.Input(),
    tslib_1.__metadata("design:type", Object)
], AppSubMenu.prototype, "item", void 0);
tslib_1.__decorate([
    core_1.Input(),
    tslib_1.__metadata("design:type", Boolean)
], AppSubMenu.prototype, "root", void 0);
AppSubMenu = tslib_1.__decorate([
    core_1.Component({
        selector: '[app-submenu]',
        template: "\n        <ul>\n            <ng-template ngFor let-child let-i=\"index\" [ngForOf]=\"(root ? item : item.items)\">\n                <li [ngClass]=\"{'active-menuitem': isActive(i)}\">\n                    <a [href]=\"child.url||'#'\" (click)=\"itemClick($event,child,i)\">\n                        <i class=\"fa fa-fw\" [ngClass]=\"child.icon\"></i>\n                        <span>{{child.label}}</span>\n                        <i class=\"fa fa-fw fa-angle-down\" *ngIf=\"child.items\"></i>\n                    </a>\n                    <ul app-submenu [item]=\"child\" *ngIf=\"child.items\" [@children]=\"isActive(i) ? 'visible' : 'hidden'\" ></ul>\n                </li>\n            </ng-template>\n        </ul>\n    ",
        animations: [
            core_1.trigger('children', [
                core_1.state('hidden', core_1.style({
                    height: '0px'
                })),
                core_1.state('visible', core_1.style({
                    height: '*'
                })),
                core_1.transition('visible => hidden', core_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                core_1.transition('hidden => visible', core_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
            ])
        ]
    }),
    tslib_1.__metadata("design:paramtypes", [router_1.Router, common_1.Location])
], AppSubMenu);
exports.AppSubMenu = AppSubMenu;


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
var FilterPipe = (function () {
    function FilterPipe() {
    }
    FilterPipe.prototype.transform = function (value, search) {
        //alert("value = " + value);
        //alert("input = " + search);
        if (search === undefined)
            return value;
        if (search) {
            search = search.toLowerCase();
            return value.filter(function (el) {
                return el.toLowerCase().indexOf(search) > -1;
            });
        }
        return value;
    };
    return FilterPipe;
}());
FilterPipe = tslib_1.__decorate([
    core_1.Pipe({
        name: 'filterPipe'
    }),
    core_1.Injectable()
], FilterPipe);
exports.FilterPipe = FilterPipe;


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file includes polyfills needed by Angular and is loaded before the app.
 * You can add your own extra polyfills to this file.
 *
 * This file is divided into 2 sections:
 *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.
 *   2. Application imports. Files imported after ZoneJS that should be loaded before your main
 *      file.
 *
 * The current setup is for so-called "evergreen" browsers; the last versions of browsers that
 * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),
 * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.
 *
 * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html
 */

Object.defineProperty(exports, "__esModule", { value: true });
/***************************************************************************************************
 * BROWSER POLYFILLS
 */
/** IE9, IE10 and IE11 requires all of the following polyfills. **/
// import 'core-js/es6/symbol';
// import 'core-js/es6/object';
// import 'core-js/es6/function';
// import 'core-js/es6/parse-int';
// import 'core-js/es6/parse-float';
// import 'core-js/es6/number';
// import 'core-js/es6/math';
// import 'core-js/es6/string';
// import 'core-js/es6/date';
// import 'core-js/es6/array';
// import 'core-js/es6/regexp';
// import 'core-js/es6/map';
// import 'core-js/es6/set';
/** IE10 and IE11 requires the following for NgClass support on SVG elements */
// import 'classlist.js';  // Run `npm install --save classlist.js`.
/** IE10 and IE11 requires the following to support `@angular/animation`. */
// import 'web-animations-js';  // Run `npm install --save web-animations-js`.
/** Evergreen browsers require these. **/
__webpack_require__(196);
__webpack_require__(197);
/** ALL Firefox browsers require the following to support `@angular/animation`. **/
// import 'web-animations-js';  // Run `npm install --save web-animations-js`.
/***************************************************************************************************
 * Zone JS is required by Angular itself.
 */
__webpack_require__(305);
/***************************************************************************************************
 * APPLICATION IMPORTS
 */
/**
 * Date, currency, decimal and percent pipes.
 * Needed for: All but Chrome, Firefox, Edge, IE11 and Safari 10
 */
// import 'intl';  // Run `npm install --save intl`.
if (false) {
    // Production
}
else {
    // Development
    Error.stackTraceLimit = Infinity;
    // require('zone.js/dist/long-stack-trace-zone');
}


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var animations_1 = __webpack_require__(13);
var common_1 = __webpack_require__(3);
var shared_1 = __webpack_require__(7);
var Accordion = (function () {
    function Accordion(el) {
        this.el = el;
        this.onClose = new core_1.EventEmitter();
        this.onOpen = new core_1.EventEmitter();
        this.tabs = [];
    }
    Accordion.prototype.addTab = function (tab) {
        this.tabs.push(tab);
    };
    Accordion.prototype.getBlockableElement = function () {
        return this.el.nativeElement.children[0];
    };
    Object.defineProperty(Accordion.prototype, "activeIndex", {
        get: function () {
            return this._activeIndex;
        },
        set: function (val) {
            this._activeIndex = val;
            if (this.tabs && this.tabs.length && this._activeIndex != null) {
                for (var i = 0; i < this.tabs.length; i++) {
                    var selected = this.multiple ? this._activeIndex.includes(i) : (i === this._activeIndex);
                    var changed = selected !== this.tabs[i].selected;
                    if (changed) {
                        this.tabs[i].animating = true;
                    }
                    this.tabs[i].selected = selected;
                    this.tabs[i].selectedChange.emit(selected);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    return Accordion;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Accordion.prototype, "multiple", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Accordion.prototype, "onClose", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Accordion.prototype, "onOpen", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Accordion.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Accordion.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Accordion.prototype, "lazy", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], Accordion.prototype, "activeIndex", null);
Accordion = __decorate([
    core_1.Component({
        selector: 'p-accordion',
        template: "\n        <div [ngClass]=\"'ui-accordion ui-widget ui-helper-reset'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <ng-content></ng-content>\n        </div>\n    ",
    }),
    __metadata("design:paramtypes", [core_1.ElementRef])
], Accordion);
exports.Accordion = Accordion;
var AccordionTab = (function () {
    function AccordionTab(accordion) {
        this.accordion = accordion;
        this.selectedChange = new core_1.EventEmitter();
        this.accordion.addTab(this);
    }
    AccordionTab.prototype.toggle = function (event) {
        if (this.disabled || this.animating) {
            return false;
        }
        this.animating = true;
        var index = this.findTabIndex();
        if (this.selected) {
            this.selected = false;
            this.accordion.onClose.emit({ originalEvent: event, index: index });
        }
        else {
            if (!this.accordion.multiple) {
                for (var i = 0; i < this.accordion.tabs.length; i++) {
                    this.accordion.tabs[i].selected = false;
                    this.accordion.tabs[i].selectedChange.emit(false);
                }
            }
            this.selected = true;
            this.accordion.onOpen.emit({ originalEvent: event, index: index });
        }
        this.selectedChange.emit(this.selected);
        event.preventDefault();
    };
    AccordionTab.prototype.findTabIndex = function () {
        var index = -1;
        for (var i = 0; i < this.accordion.tabs.length; i++) {
            if (this.accordion.tabs[i] == this) {
                index = i;
                break;
            }
        }
        return index;
    };
    Object.defineProperty(AccordionTab.prototype, "lazy", {
        get: function () {
            return this.accordion.lazy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccordionTab.prototype, "hasHeaderFacet", {
        get: function () {
            return this.headerFacet && this.headerFacet.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    AccordionTab.prototype.onToggleDone = function (event) {
        this.animating = false;
    };
    AccordionTab.prototype.ngOnDestroy = function () {
        this.accordion.tabs.splice(this.findTabIndex(), 1);
    };
    return AccordionTab;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AccordionTab.prototype, "header", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], AccordionTab.prototype, "selected", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], AccordionTab.prototype, "disabled", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], AccordionTab.prototype, "selectedChange", void 0);
__decorate([
    core_1.ContentChildren(shared_1.Header),
    __metadata("design:type", core_1.QueryList)
], AccordionTab.prototype, "headerFacet", void 0);
AccordionTab = __decorate([
    core_1.Component({
        selector: 'p-accordionTab',
        template: "\n        <div class=\"ui-accordion-header ui-state-default ui-corner-all\" [ngClass]=\"{'ui-state-active': selected,'ui-state-disabled':disabled}\"\n            (click)=\"toggle($event)\">\n            <span class=\"fa fa-fw\" [ngClass]=\"{'fa-caret-down': selected, 'fa-caret-right': !selected}\"></span>\n            <a href=\"#\" *ngIf=\"!hasHeaderFacet\" role=\"tab\" [attr.aria-expanded]=\"selected\" [attr.aria-selected]=\"selected\">{{header}}</a>\n            <a href=\"#\" *ngIf=\"hasHeaderFacet\" role=\"tab\" [attr.aria-expanded]=\"selected\" [attr.aria-selected]=\"selected\">\n                <ng-content select=\"p-header\"></ng-content>\n            </a>\n        </div>\n        <div class=\"ui-accordion-content-wrapper\" [@tabContent]=\"selected ? 'visible' : 'hidden'\" (@tabContent.done)=\"onToggleDone($event)\"\n            [ngClass]=\"{'ui-accordion-content-wrapper-overflown': !selected||animating}\" role=\"tabpanel\" [attr.aria-hidden]=\"!selected\">\n            <div class=\"ui-accordion-content ui-widget-content\" *ngIf=\"lazy ? selected : true\">\n                <ng-content></ng-content>\n            </div>\n        </div>\n    ",
        animations: [
            animations_1.trigger('tabContent', [
                animations_1.state('hidden', animations_1.style({
                    height: '0'
                })),
                animations_1.state('visible', animations_1.style({
                    height: '*'
                })),
                animations_1.transition('visible <=> hidden', animations_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
            ])
        ]
    }),
    __metadata("design:paramtypes", [Accordion])
], AccordionTab);
exports.AccordionTab = AccordionTab;
var AccordionModule = (function () {
    function AccordionModule() {
    }
    return AccordionModule;
}());
AccordionModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Accordion, AccordionTab],
        declarations: [Accordion, AccordionTab]
    })
], AccordionModule);
exports.AccordionModule = AccordionModule;
//# sourceMappingURL=accordion.js.map

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var inputtext_1 = __webpack_require__(20);
var button_1 = __webpack_require__(16);
var shared_1 = __webpack_require__(7);
var domhandler_1 = __webpack_require__(4);
var objectutils_1 = __webpack_require__(18);
var forms_1 = __webpack_require__(6);
exports.AUTOCOMPLETE_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return AutoComplete; }),
    multi: true
};
var AutoComplete = (function () {
    function AutoComplete(el, domHandler, renderer, objectUtils, cd, differs) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
        this.objectUtils = objectUtils;
        this.cd = cd;
        this.differs = differs;
        this.minLength = 1;
        this.delay = 300;
        this.type = 'text';
        this.completeMethod = new core_1.EventEmitter();
        this.onSelect = new core_1.EventEmitter();
        this.onUnselect = new core_1.EventEmitter();
        this.onFocus = new core_1.EventEmitter();
        this.onBlur = new core_1.EventEmitter();
        this.onDropdownClick = new core_1.EventEmitter();
        this.onClear = new core_1.EventEmitter();
        this.scrollHeight = '200px';
        this.immutable = true;
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
        this.panelVisible = false;
        this.focus = false;
        this.differ = differs.find([]).create(null);
    }
    Object.defineProperty(AutoComplete.prototype, "suggestions", {
        get: function () {
            return this._suggestions;
        },
        set: function (val) {
            this._suggestions = val;
            if (this.immutable) {
                this.handleSuggestionsChange();
            }
        },
        enumerable: true,
        configurable: true
    });
    AutoComplete.prototype.ngDoCheck = function () {
        if (!this.immutable) {
            var changes = this.differ.diff(this.suggestions);
            if (changes) {
                this.handleSuggestionsChange();
            }
        }
    };
    AutoComplete.prototype.handleSuggestionsChange = function () {
        if (this.panelEL && this.panelEL.nativeElement) {
            if (this._suggestions && this._suggestions.length) {
                this.noResults = false;
                this.show();
                this.suggestionsUpdated = true;
                if (this.autoHighlight) {
                    this.highlightOption = this._suggestions[0];
                }
            }
            else {
                this.noResults = true;
                if (this.emptyMessage) {
                    this.show();
                    this.suggestionsUpdated = true;
                }
                else {
                    this.hide();
                }
            }
        }
    };
    AutoComplete.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.templates.forEach(function (item) {
            switch (item.getType()) {
                case 'item':
                    _this.itemTemplate = item.template;
                    break;
                case 'selectedItem':
                    _this.selectedItemTemplate = item.template;
                    break;
                default:
                    _this.itemTemplate = item.template;
                    break;
            }
        });
    };
    AutoComplete.prototype.ngAfterViewInit = function () {
        if (this.appendTo) {
            if (this.appendTo === 'body')
                document.body.appendChild(this.panelEL.nativeElement);
            else
                this.domHandler.appendChild(this.panelEL.nativeElement, this.appendTo);
        }
    };
    AutoComplete.prototype.ngAfterViewChecked = function () {
        var _this = this;
        //Use timeouts as since Angular 4.2, AfterViewChecked is broken and not called after panel is updated
        if (this.suggestionsUpdated && this.panelEL.nativeElement && this.panelEL.nativeElement.offsetParent) {
            setTimeout(function () { return _this.align(); }, 1);
            this.suggestionsUpdated = false;
        }
        if (this.highlightOptionChanged) {
            setTimeout(function () {
                var listItem = _this.domHandler.findSingle(_this.panelEL.nativeElement, 'li.ui-state-highlight');
                if (listItem) {
                    _this.domHandler.scrollInView(_this.panelEL.nativeElement, listItem);
                }
            }, 1);
            this.highlightOptionChanged = false;
        }
    };
    AutoComplete.prototype.writeValue = function (value) {
        this.value = value;
        this.filled = this.value && this.value != '';
    };
    AutoComplete.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    AutoComplete.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    AutoComplete.prototype.setDisabledState = function (val) {
        this.disabled = val;
    };
    AutoComplete.prototype.onInput = function (event) {
        var _this = this;
        if (!this.inputKeyDown) {
            return;
        }
        var value = event.target.value;
        if (!this.multiple) {
            this.onModelChange(value);
        }
        if (value.length === 0) {
            this.hide();
            this.onClear.emit(event);
        }
        if (value.length >= this.minLength) {
            //Cancel the search request if user types within the timeout
            if (this.timeout) {
                clearTimeout(this.timeout);
            }
            this.timeout = setTimeout(function () {
                _this.search(event, value);
            }, this.delay);
        }
        else {
            this.suggestions = null;
        }
        this.updateFilledState();
        this.inputKeyDown = false;
    };
    AutoComplete.prototype.onInputClick = function (event) {
        if (this.documentClickListener) {
            this.inputClick = true;
        }
    };
    AutoComplete.prototype.search = function (event, query) {
        //allow empty string but not undefined or null
        if (query === undefined || query === null) {
            return;
        }
        this.completeMethod.emit({
            originalEvent: event,
            query: query
        });
    };
    AutoComplete.prototype.selectItem = function (option) {
        if (this.multiple) {
            this.multiInputEL.nativeElement.value = '';
            this.value = this.value || [];
            if (!this.isSelected(option)) {
                this.value = this.value.concat([option]);
                this.onModelChange(this.value);
            }
        }
        else {
            this.inputEL.nativeElement.value = this.field ? this.objectUtils.resolveFieldData(option, this.field) || '' : option;
            this.value = option;
            this.onModelChange(this.value);
        }
        this.onSelect.emit(option);
        this.focusInput();
    };
    AutoComplete.prototype.show = function () {
        if (this.multiInputEL || this.inputEL) {
            var hasFocus = this.multiple ? document.activeElement == this.multiInputEL.nativeElement : document.activeElement == this.inputEL.nativeElement;
            if (!this.panelVisible && hasFocus) {
                this.panelVisible = true;
                this.panelEL.nativeElement.style.zIndex = ++domhandler_1.DomHandler.zindex;
                this.domHandler.fadeIn(this.panelEL.nativeElement, 200);
                this.bindDocumentClickListener();
            }
        }
    };
    AutoComplete.prototype.align = function () {
        if (this.appendTo)
            this.domHandler.absolutePosition(this.panelEL.nativeElement, (this.multiple ? this.multiContainerEL.nativeElement : this.inputEL.nativeElement));
        else
            this.domHandler.relativePosition(this.panelEL.nativeElement, (this.multiple ? this.multiContainerEL.nativeElement : this.inputEL.nativeElement));
    };
    AutoComplete.prototype.hide = function () {
        this.panelVisible = false;
        this.unbindDocumentClickListener();
    };
    AutoComplete.prototype.handleDropdownClick = function (event) {
        this.focusInput();
        var queryValue = this.multiple ? this.multiInputEL.nativeElement.value : this.inputEL.nativeElement.value;
        this.onDropdownClick.emit({
            originalEvent: event,
            query: queryValue
        });
    };
    AutoComplete.prototype.focusInput = function () {
        if (this.multiple)
            this.multiInputEL.nativeElement.focus();
        else
            this.inputEL.nativeElement.focus();
    };
    AutoComplete.prototype.removeItem = function (item) {
        var itemIndex = this.domHandler.index(item);
        var removedValue = this.value[itemIndex];
        this.value = this.value.filter(function (val, i) { return i != itemIndex; });
        this.onUnselect.emit(removedValue);
        this.onModelChange(this.value);
    };
    AutoComplete.prototype.onKeydown = function (event) {
        if (this.panelVisible) {
            var highlightItemIndex = this.findOptionIndex(this.highlightOption);
            switch (event.which) {
                //down
                case 40:
                    if (highlightItemIndex != -1) {
                        var nextItemIndex = highlightItemIndex + 1;
                        if (nextItemIndex != (this.suggestions.length)) {
                            this.highlightOption = this.suggestions[nextItemIndex];
                            this.highlightOptionChanged = true;
                        }
                    }
                    else {
                        this.highlightOption = this.suggestions[0];
                    }
                    event.preventDefault();
                    break;
                //up
                case 38:
                    if (highlightItemIndex > 0) {
                        var prevItemIndex = highlightItemIndex - 1;
                        this.highlightOption = this.suggestions[prevItemIndex];
                        this.highlightOptionChanged = true;
                    }
                    event.preventDefault();
                    break;
                //enter
                case 13:
                    if (this.highlightOption) {
                        this.selectItem(this.highlightOption);
                        this.hide();
                    }
                    event.preventDefault();
                    break;
                //escape
                case 27:
                    this.hide();
                    event.preventDefault();
                    break;
                //tab
                case 9:
                    if (this.highlightOption) {
                        this.selectItem(this.highlightOption);
                    }
                    this.hide();
                    break;
            }
        }
        else {
            if (event.which === 40 && this.suggestions) {
                this.search(event, event.target.value);
            }
        }
        if (this.multiple) {
            switch (event.which) {
                //backspace
                case 8:
                    if (this.value && this.value.length && !this.multiInputEL.nativeElement.value) {
                        this.value = this.value.slice();
                        var removedValue = this.value.pop();
                        this.onUnselect.emit(removedValue);
                        this.onModelChange(this.value);
                    }
                    break;
            }
        }
        this.inputKeyDown = true;
    };
    AutoComplete.prototype.onInputFocus = function (event) {
        this.focus = true;
        this.onFocus.emit(event);
    };
    AutoComplete.prototype.onInputBlur = function (event) {
        this.focus = false;
        this.onModelTouched();
        this.onBlur.emit(event);
    };
    AutoComplete.prototype.isSelected = function (val) {
        var selected = false;
        if (this.value && this.value.length) {
            for (var i = 0; i < this.value.length; i++) {
                if (this.objectUtils.equals(this.value[i], val, this.dataKey)) {
                    selected = true;
                    break;
                }
            }
        }
        return selected;
    };
    AutoComplete.prototype.findOptionIndex = function (option) {
        var index = -1;
        if (this.suggestions) {
            for (var i = 0; i < this.suggestions.length; i++) {
                if (this.objectUtils.equals(option, this.suggestions[i])) {
                    index = i;
                    break;
                }
            }
        }
        return index;
    };
    AutoComplete.prototype.updateFilledState = function () {
        if (this.multiple)
            this.filled = (this.value && this.value.length) || (this.multiInputEL && this.multiInputEL.nativeElement && this.multiInputEL.nativeElement.value != '');
        else
            this.filled = this.inputEL && this.inputEL.nativeElement && this.inputEL.nativeElement.value != '';
    };
    AutoComplete.prototype.bindDocumentClickListener = function () {
        var _this = this;
        if (!this.documentClickListener) {
            this.documentClickListener = this.renderer.listen('document', 'click', function (event) {
                if (event.which === 3) {
                    return;
                }
                if (_this.inputClick)
                    _this.inputClick = false;
                else
                    _this.hide();
                _this.cd.markForCheck();
            });
        }
    };
    AutoComplete.prototype.unbindDocumentClickListener = function () {
        if (this.documentClickListener) {
            this.documentClickListener();
            this.documentClickListener = null;
        }
    };
    AutoComplete.prototype.ngOnDestroy = function () {
        this.unbindDocumentClickListener();
        if (this.appendTo) {
            this.el.nativeElement.appendChild(this.panelEL.nativeElement);
        }
    };
    return AutoComplete;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], AutoComplete.prototype, "minLength", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], AutoComplete.prototype, "delay", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], AutoComplete.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AutoComplete.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], AutoComplete.prototype, "inputStyle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AutoComplete.prototype, "inputId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AutoComplete.prototype, "inputStyleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AutoComplete.prototype, "placeholder", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], AutoComplete.prototype, "readonly", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], AutoComplete.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], AutoComplete.prototype, "maxlength", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], AutoComplete.prototype, "size", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], AutoComplete.prototype, "appendTo", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], AutoComplete.prototype, "autoHighlight", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AutoComplete.prototype, "type", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], AutoComplete.prototype, "completeMethod", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], AutoComplete.prototype, "onSelect", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], AutoComplete.prototype, "onUnselect", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], AutoComplete.prototype, "onFocus", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], AutoComplete.prototype, "onBlur", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], AutoComplete.prototype, "onDropdownClick", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], AutoComplete.prototype, "onClear", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AutoComplete.prototype, "field", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AutoComplete.prototype, "scrollHeight", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], AutoComplete.prototype, "dropdown", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], AutoComplete.prototype, "multiple", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], AutoComplete.prototype, "tabindex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AutoComplete.prototype, "dataKey", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AutoComplete.prototype, "emptyMessage", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], AutoComplete.prototype, "immutable", void 0);
__decorate([
    core_1.ViewChild('in'),
    __metadata("design:type", core_1.ElementRef)
], AutoComplete.prototype, "inputEL", void 0);
__decorate([
    core_1.ViewChild('multiIn'),
    __metadata("design:type", core_1.ElementRef)
], AutoComplete.prototype, "multiInputEL", void 0);
__decorate([
    core_1.ViewChild('panel'),
    __metadata("design:type", core_1.ElementRef)
], AutoComplete.prototype, "panelEL", void 0);
__decorate([
    core_1.ViewChild('multiContainer'),
    __metadata("design:type", core_1.ElementRef)
], AutoComplete.prototype, "multiContainerEL", void 0);
__decorate([
    core_1.ContentChildren(shared_1.PrimeTemplate),
    __metadata("design:type", core_1.QueryList)
], AutoComplete.prototype, "templates", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], AutoComplete.prototype, "suggestions", null);
AutoComplete = __decorate([
    core_1.Component({
        selector: 'p-autoComplete',
        template: "\n        <span [ngClass]=\"{'ui-autocomplete ui-widget':true,'ui-autocomplete-dd':dropdown,'ui-autocomplete-multiple':multiple}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <input *ngIf=\"!multiple\" #in [attr.type]=\"type\" [attr.id]=\"inputId\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" autocomplete=\"off\" \n            [ngClass]=\"'ui-inputtext ui-widget ui-state-default ui-corner-all ui-autocomplete-input'\" [value]=\"value ? (field ? objectUtils.resolveFieldData(value,field)||'' : value) : null\" \n            (click)=\"onInputClick($event)\" (input)=\"onInput($event)\" (keydown)=\"onKeydown($event)\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\"\n            [attr.placeholder]=\"placeholder\" [attr.size]=\"size\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [readonly]=\"readonly\" [disabled]=\"disabled\"\n            ><ul *ngIf=\"multiple\" #multiContainer class=\"ui-autocomplete-multiple-container ui-widget ui-inputtext ui-state-default ui-corner-all\" [ngClass]=\"{'ui-state-disabled':disabled,'ui-state-focus':focus}\" (click)=\"multiIn.focus()\">\n                <li #token *ngFor=\"let val of value\" class=\"ui-autocomplete-token ui-state-highlight ui-corner-all\">\n                    <span class=\"ui-autocomplete-token-icon fa fa-fw fa-close\" (click)=\"removeItem(token)\" *ngIf=\"!disabled\"></span>\n                    <span *ngIf=\"!selectedItemTemplate\" class=\"ui-autocomplete-token-label\">{{field ? val[field] : val}}</span>\n                    <ng-template *ngIf=\"selectedItemTemplate\" [pTemplateWrapper]=\"selectedItemTemplate\" [item]=\"val\"></ng-template>\n                </li>\n                <li class=\"ui-autocomplete-input-token\">\n                    <input #multiIn [attr.type]=\"type\" [attr.id]=\"inputId\" [disabled]=\"disabled\" [attr.placeholder]=\"(value&&value.length ? null : placeholder)\" [attr.tabindex]=\"tabindex\" (input)=\"onInput($event)\"  (click)=\"onInputClick($event)\"\n                            (keydown)=\"onKeydown($event)\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" autocomplete=\"off\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\">\n                </li>\n            </ul\n            ><button type=\"button\" pButton icon=\"fa-fw fa-caret-down\" class=\"ui-autocomplete-dropdown\" [disabled]=\"disabled\"\n                (click)=\"handleDropdownClick($event)\" *ngIf=\"dropdown\"></button>\n            <div #panel class=\"ui-autocomplete-panel ui-widget-content ui-corner-all ui-shadow\" [style.display]=\"panelVisible ? 'block' : 'none'\" [style.width]=\"appendTo ? 'auto' : '100%'\" [style.max-height]=\"scrollHeight\">\n                <ul class=\"ui-autocomplete-items ui-autocomplete-list ui-widget-content ui-widget ui-corner-all ui-helper-reset\" *ngIf=\"panelVisible\">\n                    <li *ngFor=\"let option of suggestions; let idx = index\" [ngClass]=\"{'ui-autocomplete-list-item ui-corner-all':true,'ui-state-highlight':(highlightOption==option)}\"\n                        (mouseenter)=\"highlightOption=option\" (mouseleave)=\"highlightOption=null\" (click)=\"selectItem(option)\">\n                        <span *ngIf=\"!itemTemplate\">{{field ? option[field] : option}}</span>\n                        <ng-template *ngIf=\"itemTemplate\" [pTemplateWrapper]=\"itemTemplate\" [item]=\"option\" [index]=\"idx\"></ng-template>\n                    </li>\n                    <li *ngIf=\"noResults && emptyMessage\" class=\"ui-autocomplete-list-item ui-corner-all\">{{emptyMessage}}</li>\n                </ul>\n            </div>\n        </span>\n    ",
        host: {
            '[class.ui-inputwrapper-filled]': 'filled',
            '[class.ui-inputwrapper-focus]': 'focus'
        },
        providers: [domhandler_1.DomHandler, objectutils_1.ObjectUtils, exports.AUTOCOMPLETE_VALUE_ACCESSOR]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2, objectutils_1.ObjectUtils, core_1.ChangeDetectorRef, core_1.IterableDiffers])
], AutoComplete);
exports.AutoComplete = AutoComplete;
var AutoCompleteModule = (function () {
    function AutoCompleteModule() {
    }
    return AutoCompleteModule;
}());
AutoCompleteModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, inputtext_1.InputTextModule, button_1.ButtonModule, shared_1.SharedModule],
        exports: [AutoComplete, shared_1.SharedModule],
        declarations: [AutoComplete]
    })
], AutoCompleteModule);
exports.AutoCompleteModule = AutoCompleteModule;
//# sourceMappingURL=autocomplete.js.map

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var BlockUI = (function () {
    function BlockUI(el, domHandler) {
        this.el = el;
        this.domHandler = domHandler;
    }
    Object.defineProperty(BlockUI.prototype, "blocked", {
        get: function () {
            return this._blocked;
        },
        set: function (val) {
            this._blocked = val;
            if (this.mask.nativeElement) {
                if (this._blocked)
                    this.block();
                else
                    this.unblock();
            }
        },
        enumerable: true,
        configurable: true
    });
    BlockUI.prototype.ngAfterViewInit = function () {
        if (this.target && !this.target.getBlockableElement) {
            throw 'Target of BlockUI must implement BlockableUI interface';
        }
    };
    BlockUI.prototype.block = function () {
        if (this.target) {
            this.target.getBlockableElement().appendChild(this.mask.nativeElement);
            var style = this.target.style || {};
            style.position = 'relative';
            this.target.style = style;
        }
        else {
            document.body.appendChild(this.mask.nativeElement);
        }
        this.mask.nativeElement.style.zIndex = String(++domhandler_1.DomHandler.zindex);
    };
    BlockUI.prototype.unblock = function () {
        this.el.nativeElement.appendChild(this.mask.nativeElement);
    };
    BlockUI.prototype.ngOnDestroy = function () {
    };
    return BlockUI;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], BlockUI.prototype, "target", void 0);
__decorate([
    core_1.ViewChild('mask'),
    __metadata("design:type", core_1.ElementRef)
], BlockUI.prototype, "mask", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], BlockUI.prototype, "blocked", null);
BlockUI = __decorate([
    core_1.Component({
        selector: 'p-blockUI',
        template: "\n        <div #mask class=\"ui-blockui ui-widget-overlay\" [ngClass]=\"{'ui-blockui-document':!target}\" [ngStyle]=\"{display: blocked ? 'block' : 'none'}\">\n            <ng-content></ng-content>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler])
], BlockUI);
exports.BlockUI = BlockUI;
var BlockUIModule = (function () {
    function BlockUIModule() {
    }
    return BlockUIModule;
}());
BlockUIModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [BlockUI],
        declarations: [BlockUI]
    })
], BlockUIModule);
exports.BlockUIModule = BlockUIModule;
//# sourceMappingURL=blockui.js.map

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var router_1 = __webpack_require__(5);
var Breadcrumb = (function () {
    function Breadcrumb() {
    }
    Breadcrumb.prototype.itemClick = function (event, item) {
        if (item.disabled) {
            event.preventDefault();
            return;
        }
        if (!item.url) {
            event.preventDefault();
        }
        if (item.command) {
            item.command({
                originalEvent: event,
                item: item
            });
        }
    };
    Breadcrumb.prototype.onHomeClick = function (event) {
        if (this.home) {
            this.itemClick(event, this.home);
        }
    };
    return Breadcrumb;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], Breadcrumb.prototype, "model", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Breadcrumb.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Breadcrumb.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Breadcrumb.prototype, "home", void 0);
Breadcrumb = __decorate([
    core_1.Component({
        selector: 'p-breadcrumb',
        template: "\n        <div [class]=\"styleClass\" [ngStyle]=\"style\" [ngClass]=\"'ui-breadcrumb ui-widget ui-widget-header ui-helper-clearfix ui-corner-all'\">\n            <ul>\n                <li class=\"ui-breadcrumb-home fa fa-home\" *ngIf=\"!home\"></li>\n                <li class=\"ui-breadcrumb-home\" *ngIf=\"home\">\n                    <a *ngIf=\"!home.routerLink\" [href]=\"home.url||'#'\" class=\"ui-menuitem-link\" (click)=\"itemClick($event, home)\" \n                        [ngClass]=\"{'ui-state-disabled':home.disabled}\" [attr.target]=\"home.target\">\n                        <span class=\"fa fa-home\"></span>\n                    </a>\n                    <a *ngIf=\"home.routerLink\" [routerLink]=\"home.routerLink\" [routerLinkActive]=\"'ui-state-active'\" [routerLinkActiveOptions]=\"home.routerLinkActiveOptions||{exact:false}\" class=\"ui-menuitem-link\" (click)=\"itemClick($event, home)\" \n                        [ngClass]=\"{'ui-state-disabled':home.disabled}\" [attr.target]=\"home.target\">\n                        <span class=\"fa fa-home\"></span>\n                    </a>\n                </li>\n                <li class=\"ui-breadcrumb-chevron fa fa-chevron-right\" *ngIf=\"model\"></li>\n                <ng-template ngFor let-item let-end=\"last\" [ngForOf]=\"model\">\n                    <li role=\"menuitem\">\n                        <a *ngIf=\"!item.routerLink\" [href]=\"item.url||'#'\" class=\"ui-menuitem-link\" (click)=\"itemClick($event, item)\" \n                            [ngClass]=\"{'ui-state-disabled':item.disabled}\" [attr.target]=\"item.target\">\n                            <span class=\"ui-menuitem-text\">{{item.label}}</span>\n                        </a>\n                        <a *ngIf=\"item.routerLink\" [routerLink]=\"item.routerLink\" [routerLinkActive]=\"'ui-state-active'\" [routerLinkActiveOptions]=\"item.routerLinkActiveOptions||{exact:false}\" class=\"ui-menuitem-link\" (click)=\"itemClick($event, item)\" \n                            [ngClass]=\"{'ui-state-disabled':item.disabled}\" [attr.target]=\"item.target\">\n                            <span class=\"ui-menuitem-text\">{{item.label}}</span>\n                        </a>\n                    </li>\n                    <li class=\"ui-breadcrumb-chevron fa fa-chevron-right\" *ngIf=\"!end\"></li>\n                </ng-template>\n            </ul>\n        </div>\n    "
    })
], Breadcrumb);
exports.Breadcrumb = Breadcrumb;
var BreadcrumbModule = (function () {
    function BreadcrumbModule() {
    }
    return BreadcrumbModule;
}());
BreadcrumbModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, router_1.RouterModule],
        exports: [Breadcrumb, router_1.RouterModule],
        declarations: [Breadcrumb]
    })
], BreadcrumbModule);
exports.BreadcrumbModule = BreadcrumbModule;
//# sourceMappingURL=breadcrumb.js.map

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var animations_1 = __webpack_require__(13);
var common_1 = __webpack_require__(3);
var button_1 = __webpack_require__(16);
var domhandler_1 = __webpack_require__(4);
var forms_1 = __webpack_require__(6);
exports.CALENDAR_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return Calendar; }),
    multi: true
};
exports.CALENDAR_VALIDATOR = {
    provide: forms_1.NG_VALIDATORS,
    useExisting: core_1.forwardRef(function () { return Calendar; }),
    multi: true
};
var Calendar = (function () {
    function Calendar(el, domHandler, renderer, cd) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
        this.cd = cd;
        this.dateFormat = 'mm/dd/yy';
        this.inline = false;
        this.showOtherMonths = true;
        this.icon = 'fa-calendar';
        this.shortYearCutoff = '+10';
        this.hourFormat = '24';
        this.stepHour = 1;
        this.stepMinute = 1;
        this.stepSecond = 1;
        this.showSeconds = false;
        this.showOnFocus = true;
        this.dataType = 'date';
        this.onFocus = new core_1.EventEmitter();
        this.onBlur = new core_1.EventEmitter();
        this.onClose = new core_1.EventEmitter();
        this.onSelect = new core_1.EventEmitter();
        this.onInput = new core_1.EventEmitter();
        this._locale = {
            firstDayOfWeek: 0,
            dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
        };
        this.closeOverlay = true;
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
        this.inputFieldValue = null;
        this._isValid = true;
    }
    Object.defineProperty(Calendar.prototype, "minDate", {
        get: function () {
            return this._minDate;
        },
        set: function (date) {
            this._minDate = date;
            this.createMonth(this.currentMonth, this.currentYear);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Calendar.prototype, "maxDate", {
        get: function () {
            return this._maxDate;
        },
        set: function (date) {
            this._maxDate = date;
            this.createMonth(this.currentMonth, this.currentYear);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Calendar.prototype, "locale", {
        get: function () {
            return this._locale;
        },
        set: function (newLocale) {
            this._locale = newLocale;
            this.createWeekDays();
            this.createMonth(this.currentMonth, this.currentYear);
        },
        enumerable: true,
        configurable: true
    });
    Calendar.prototype.ngOnInit = function () {
        var date = this.defaultDate || new Date();
        this.createWeekDays();
        this.currentMonth = date.getMonth();
        this.currentYear = date.getFullYear();
        this.pm = date.getHours() > 11;
        if (this.showTime) {
            this.currentMinute = date.getMinutes();
            this.currentSecond = date.getSeconds();
            if (this.hourFormat == '12')
                this.currentHour = date.getHours() == 0 ? 12 : date.getHours() % 12;
            else
                this.currentHour = date.getHours();
        }
        else if (this.timeOnly) {
            this.currentMinute = 0;
            this.currentHour = 0;
            this.currentSecond = 0;
        }
        this.createMonth(this.currentMonth, this.currentYear);
        this.ticksTo1970 = (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
            Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000);
        if (this.yearNavigator && this.yearRange) {
            this.yearOptions = [];
            var years = this.yearRange.split(':'), yearStart = parseInt(years[0]), yearEnd = parseInt(years[1]);
            for (var i = yearStart; i <= yearEnd; i++) {
                this.yearOptions.push(i);
            }
        }
    };
    Calendar.prototype.ngAfterViewInit = function () {
        if (!this.inline && this.appendTo) {
            if (this.appendTo === 'body')
                document.body.appendChild(this.overlayViewChild.nativeElement);
            else
                this.domHandler.appendChild(this.overlayViewChild.nativeElement, this.appendTo);
        }
    };
    Calendar.prototype.ngAfterViewChecked = function () {
        if (this.overlayShown) {
            this.alignOverlay();
            this.overlayShown = false;
        }
    };
    Calendar.prototype.createWeekDays = function () {
        this.weekDays = [];
        var dayIndex = this.locale.firstDayOfWeek;
        for (var i = 0; i < 7; i++) {
            this.weekDays.push(this.locale.dayNamesMin[dayIndex]);
            dayIndex = (dayIndex == 6) ? 0 : ++dayIndex;
        }
    };
    Calendar.prototype.createMonth = function (month, year) {
        this.dates = [];
        this.currentMonth = month;
        this.currentYear = year;
        this.currentMonthText = this.locale.monthNames[month];
        var firstDay = this.getFirstDayOfMonthIndex(month, year);
        var daysLength = this.getDaysCountInMonth(month, year);
        var prevMonthDaysLength = this.getDaysCountInPrevMonth(month, year);
        var sundayIndex = this.getSundayIndex();
        var dayNo = 1;
        var today = new Date();
        for (var i = 0; i < 6; i++) {
            var week = [];
            if (i == 0) {
                for (var j = (prevMonthDaysLength - firstDay + 1); j <= prevMonthDaysLength; j++) {
                    var prev = this.getPreviousMonthAndYear(month, year);
                    week.push({ day: j, month: prev.month, year: prev.year, otherMonth: true,
                        today: this.isToday(today, j, prev.month, prev.year), selectable: this.isSelectable(j, prev.month, prev.year) });
                }
                var remainingDaysLength = 7 - week.length;
                for (var j = 0; j < remainingDaysLength; j++) {
                    week.push({ day: dayNo, month: month, year: year, today: this.isToday(today, dayNo, month, year),
                        selectable: this.isSelectable(dayNo, month, year) });
                    dayNo++;
                }
            }
            else {
                for (var j = 0; j < 7; j++) {
                    if (dayNo > daysLength) {
                        var next = this.getNextMonthAndYear(month, year);
                        week.push({ day: dayNo - daysLength, month: next.month, year: next.year, otherMonth: true,
                            today: this.isToday(today, dayNo - daysLength, next.month, next.year),
                            selectable: this.isSelectable((dayNo - daysLength), next.month, next.year) });
                    }
                    else {
                        week.push({ day: dayNo, month: month, year: year, today: this.isToday(today, dayNo, month, year),
                            selectable: this.isSelectable(dayNo, month, year) });
                    }
                    dayNo++;
                }
            }
            this.dates.push(week);
        }
    };
    Calendar.prototype.prevMonth = function (event) {
        if (this.disabled) {
            event.preventDefault();
            return;
        }
        if (this.currentMonth === 0) {
            this.currentMonth = 11;
            this.currentYear--;
        }
        else {
            this.currentMonth--;
        }
        this.createMonth(this.currentMonth, this.currentYear);
        event.preventDefault();
    };
    Calendar.prototype.nextMonth = function (event) {
        if (this.disabled) {
            event.preventDefault();
            return;
        }
        if (this.currentMonth === 11) {
            this.currentMonth = 0;
            this.currentYear++;
        }
        else {
            this.currentMonth++;
        }
        this.createMonth(this.currentMonth, this.currentYear);
        event.preventDefault();
    };
    Calendar.prototype.onDateSelect = function (event, dateMeta) {
        if (this.disabled || !dateMeta.selectable) {
            event.preventDefault();
            return;
        }
        if (dateMeta.otherMonth) {
            if (this.selectOtherMonths) {
                this.currentMonth = dateMeta.month;
                this.currentYear = dateMeta.year;
                this.createMonth(this.currentMonth, this.currentYear);
                this.selectDate(dateMeta);
            }
        }
        else {
            this.selectDate(dateMeta);
        }
        this.dateClick = true;
        this.updateInputfield();
        event.preventDefault();
    };
    Calendar.prototype.updateInputfield = function () {
        if (this.value) {
            var formattedValue = void 0;
            if (this.timeOnly) {
                formattedValue = this.formatTime(this.value);
            }
            else {
                formattedValue = this.formatDate(this.value, this.dateFormat);
                if (this.showTime) {
                    formattedValue += ' ' + this.formatTime(this.value);
                }
            }
            this.inputFieldValue = formattedValue;
        }
        else {
            this.inputFieldValue = '';
        }
        this.updateFilledState();
        if (this.inputfieldViewChild && this.inputfieldViewChild.nativeElement) {
            this.inputfieldViewChild.nativeElement.value = this.inputFieldValue;
        }
    };
    Calendar.prototype.selectDate = function (dateMeta) {
        if (this.utc)
            this.value = new Date(Date.UTC(dateMeta.year, dateMeta.month, dateMeta.day));
        else
            this.value = new Date(dateMeta.year, dateMeta.month, dateMeta.day);
        if (this.showTime) {
            if (this.hourFormat === '12' && this.pm && this.currentHour != 12)
                this.value.setHours(this.currentHour + 12);
            else
                this.value.setHours(this.currentHour);
            this.value.setMinutes(this.currentMinute);
            this.value.setSeconds(this.currentSecond);
        }
        this._isValid = true;
        this.updateModel();
        this.onSelect.emit(this.value);
    };
    Calendar.prototype.updateModel = function () {
        if (this.dataType == 'date') {
            this.onModelChange(this.value);
        }
        else if (this.dataType == 'string') {
            if (this.timeOnly)
                this.onModelChange(this.formatTime(this.value));
            else
                this.onModelChange(this.formatDate(this.value, this.dateFormat));
        }
    };
    Calendar.prototype.getFirstDayOfMonthIndex = function (month, year) {
        var day = new Date();
        day.setDate(1);
        day.setMonth(month);
        day.setFullYear(year);
        var dayIndex = day.getDay() + this.getSundayIndex();
        return dayIndex >= 7 ? dayIndex - 7 : dayIndex;
    };
    Calendar.prototype.getDaysCountInMonth = function (month, year) {
        return 32 - this.daylightSavingAdjust(new Date(year, month, 32)).getDate();
    };
    Calendar.prototype.getDaysCountInPrevMonth = function (month, year) {
        var prev = this.getPreviousMonthAndYear(month, year);
        return this.getDaysCountInMonth(prev.month, prev.year);
    };
    Calendar.prototype.getPreviousMonthAndYear = function (month, year) {
        var m, y;
        if (month === 0) {
            m = 11;
            y = year - 1;
        }
        else {
            m = month - 1;
            y = year;
        }
        return { 'month': m, 'year': y };
    };
    Calendar.prototype.getNextMonthAndYear = function (month, year) {
        var m, y;
        if (month === 11) {
            m = 0;
            y = year + 1;
        }
        else {
            m = month + 1;
            y = year;
        }
        return { 'month': m, 'year': y };
    };
    Calendar.prototype.getSundayIndex = function () {
        return this.locale.firstDayOfWeek > 0 ? 7 - this.locale.firstDayOfWeek : 0;
    };
    Calendar.prototype.isSelected = function (dateMeta) {
        if (this.value)
            return this.value.getDate() === dateMeta.day && this.value.getMonth() === dateMeta.month && this.value.getFullYear() === dateMeta.year;
        else
            return false;
    };
    Calendar.prototype.isToday = function (today, day, month, year) {
        return today.getDate() === day && today.getMonth() === month && today.getFullYear() === year;
    };
    Calendar.prototype.isSelectable = function (day, month, year) {
        var validMin = true;
        var validMax = true;
        var validDate = true;
        var validDay = true;
        if (this.minDate) {
            if (this.minDate.getFullYear() > year) {
                validMin = false;
            }
            else if (this.minDate.getFullYear() === year) {
                if (this.minDate.getMonth() > month) {
                    validMin = false;
                }
                else if (this.minDate.getMonth() === month) {
                    if (this.minDate.getDate() > day) {
                        validMin = false;
                    }
                }
            }
        }
        if (this.maxDate) {
            if (this.maxDate.getFullYear() < year) {
                validMax = false;
            }
            else if (this.maxDate.getFullYear() === year) {
                if (this.maxDate.getMonth() < month) {
                    validMax = false;
                }
                else if (this.maxDate.getMonth() === month) {
                    if (this.maxDate.getDate() < day) {
                        validMax = false;
                    }
                }
            }
        }
        if (this.disabledDates) {
            validDate = !this.isDateDisabled(day, month, year);
        }
        if (this.disabledDays) {
            validDay = !this.isDayDisabled(day, month, year);
        }
        return validMin && validMax && validDate && validDay;
    };
    Calendar.prototype.isDateDisabled = function (day, month, year) {
        if (this.disabledDates) {
            for (var _i = 0, _a = this.disabledDates; _i < _a.length; _i++) {
                var disabledDate = _a[_i];
                if (disabledDate.getFullYear() === year && disabledDate.getMonth() === month && disabledDate.getDate() === day) {
                    return true;
                }
            }
        }
        return false;
    };
    Calendar.prototype.isDayDisabled = function (day, month, year) {
        if (this.disabledDays) {
            var weekday = new Date(year, month, day);
            var weekdayNumber = weekday.getDay();
            return this.disabledDays.indexOf(weekdayNumber) !== -1;
        }
        return false;
    };
    Calendar.prototype.onInputFocus = function (event) {
        this.focus = true;
        if (this.showOnFocus) {
            this.showOverlay();
        }
        this.onFocus.emit(event);
    };
    Calendar.prototype.onInputBlur = function (event) {
        this.focus = false;
        this.onBlur.emit(event);
        this.updateInputfield();
        this.onModelTouched();
    };
    Calendar.prototype.onButtonClick = function (event, inputfield) {
        this.closeOverlay = false;
        if (!this.overlayViewChild.nativeElement.offsetParent || this.overlayViewChild.nativeElement.style.display === 'none') {
            inputfield.focus();
            this.showOverlay();
        }
        else
            this.closeOverlay = true;
    };
    Calendar.prototype.onInputKeydown = function (event) {
        this.isKeydown = true;
        if (event.keyCode === 9) {
            this.overlayVisible = false;
        }
    };
    Calendar.prototype.onMonthDropdownChange = function (m) {
        this.currentMonth = parseInt(m);
        this.createMonth(this.currentMonth, this.currentYear);
    };
    Calendar.prototype.onYearDropdownChange = function (y) {
        this.currentYear = parseInt(y);
        this.createMonth(this.currentMonth, this.currentYear);
    };
    Calendar.prototype.incrementHour = function (event) {
        var newHour = this.currentHour + this.stepHour;
        if (this.hourFormat == '24')
            this.currentHour = (newHour >= 24) ? (newHour - 24) : newHour;
        else if (this.hourFormat == '12')
            this.currentHour = (newHour >= 13) ? (newHour - 12) : newHour;
        this.updateTime();
        event.preventDefault();
    };
    Calendar.prototype.decrementHour = function (event) {
        var newHour = this.currentHour - this.stepHour;
        if (this.hourFormat == '24')
            this.currentHour = (newHour < 0) ? (24 + newHour) : newHour;
        else if (this.hourFormat == '12')
            this.currentHour = (newHour <= 0) ? (12 + newHour) : newHour;
        this.updateTime();
        event.preventDefault();
    };
    Calendar.prototype.incrementMinute = function (event) {
        var newMinute = this.currentMinute + this.stepMinute;
        this.currentMinute = (newMinute > 59) ? newMinute - 60 : newMinute;
        this.updateTime();
        event.preventDefault();
    };
    Calendar.prototype.decrementMinute = function (event) {
        var newMinute = this.currentMinute - this.stepMinute;
        this.currentMinute = (newMinute < 0) ? 60 + newMinute : newMinute;
        this.updateTime();
        event.preventDefault();
    };
    Calendar.prototype.incrementSecond = function (event) {
        var newSecond = this.currentSecond + this.stepSecond;
        this.currentSecond = (newSecond > 59) ? newSecond - 60 : newSecond;
        this.updateTime();
        event.preventDefault();
    };
    Calendar.prototype.decrementSecond = function (event) {
        var newSecond = this.currentSecond - this.stepSecond;
        this.currentSecond = (newSecond < 0) ? 60 + newSecond : newSecond;
        this.updateTime();
        event.preventDefault();
    };
    Calendar.prototype.updateTime = function () {
        this.value = this.value || new Date();
        if (this.hourFormat === '12' && this.pm && this.currentHour != 12)
            this.value.setHours(this.currentHour + 12);
        else
            this.value.setHours(this.currentHour);
        this.value.setMinutes(this.currentMinute);
        this.value.setSeconds(this.currentSecond);
        this.updateModel();
        this.onSelect.emit(this.value);
        this.updateInputfield();
    };
    Calendar.prototype.toggleAMPM = function (event) {
        this.pm = !this.pm;
        this.updateTime();
        event.preventDefault();
    };
    Calendar.prototype.onUserInput = function (event) {
        // IE 11 Workaround for input placeholder : https://github.com/primefaces/primeng/issues/2026
        if (!this.isKeydown) {
            return;
        }
        this.isKeydown = false;
        var val = event.target.value;
        try {
            this.value = this.parseValueFromString(val);
            this.updateUI();
            this._isValid = true;
        }
        catch (err) {
            //invalid date
            this.value = null;
            this._isValid = false;
        }
        this.filled = val != null && val.length;
        this.updateModel();
        this.onInput.emit(event);
    };
    Calendar.prototype.parseValueFromString = function (text) {
        if (!text || text.trim().length === 0) {
            return null;
        }
        var dateValue;
        var parts = text.split(' ');
        if (this.timeOnly) {
            dateValue = new Date();
            this.populateTime(dateValue, parts[0], parts[1]);
        }
        else {
            if (this.showTime) {
                dateValue = this.parseDate(parts[0], this.dateFormat);
                this.populateTime(dateValue, parts[1], parts[2]);
            }
            else {
                dateValue = this.parseDate(text, this.dateFormat);
            }
        }
        return dateValue;
    };
    Calendar.prototype.populateTime = function (value, timeString, ampm) {
        if (this.hourFormat == '12' && !ampm) {
            throw 'Invalid Time';
        }
        this.pm = (ampm === 'PM' || ampm === 'pm');
        var time = this.parseTime(timeString);
        value.setHours(time.hour);
        value.setMinutes(time.minute);
        value.setSeconds(time.second);
    };
    Calendar.prototype.updateUI = function () {
        var val = this.value || this.defaultDate || new Date();
        this.createMonth(val.getMonth(), val.getFullYear());
        if (this.showTime || this.timeOnly) {
            var hours = val.getHours();
            if (this.hourFormat == '12') {
                if (hours >= 12) {
                    this.currentHour = (hours == 12) ? 12 : hours - 12;
                }
                else {
                    this.currentHour = (hours == 0) ? 12 : hours;
                }
            }
            else {
                this.currentHour = val.getHours();
            }
            this.currentMinute = val.getMinutes();
            this.currentSecond = val.getSeconds();
        }
    };
    Calendar.prototype.onDatePickerClick = function (event) {
        this.closeOverlay = this.dateClick;
    };
    Calendar.prototype.showOverlay = function () {
        this.overlayVisible = true;
        this.overlayShown = true;
        this.overlayViewChild.nativeElement.style.zIndex = String(++domhandler_1.DomHandler.zindex);
        this.bindDocumentClickListener();
    };
    Calendar.prototype.alignOverlay = function () {
        if (this.appendTo)
            this.domHandler.absolutePosition(this.overlayViewChild.nativeElement, this.inputfieldViewChild.nativeElement);
        else
            this.domHandler.relativePosition(this.overlayViewChild.nativeElement, this.inputfieldViewChild.nativeElement);
    };
    Calendar.prototype.writeValue = function (value) {
        this.value = value;
        if (this.value && typeof this.value === 'string') {
            this.value = this.parseValueFromString(this.value);
        }
        this.updateInputfield();
        this.updateUI();
    };
    Calendar.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    Calendar.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    Calendar.prototype.setDisabledState = function (val) {
        this.disabled = val;
    };
    // Ported from jquery-ui datepicker formatDate    
    Calendar.prototype.formatDate = function (date, format) {
        if (!date) {
            return "";
        }
        var iFormat, lookAhead = function (match) {
            var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
            if (matches) {
                iFormat++;
            }
            return matches;
        }, formatNumber = function (match, value, len) {
            var num = "" + value;
            if (lookAhead(match)) {
                while (num.length < len) {
                    num = "0" + num;
                }
            }
            return num;
        }, formatName = function (match, value, shortNames, longNames) {
            return (lookAhead(match) ? longNames[value] : shortNames[value]);
        }, output = "", literal = false;
        if (date) {
            for (iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) === "'" && !lookAhead("'"))
                        literal = false;
                    else
                        output += format.charAt(iFormat);
                }
                else {
                    switch (format.charAt(iFormat)) {
                        case "d":
                            output += formatNumber("d", date.getDate(), 2);
                            break;
                        case "D":
                            output += formatName("D", date.getDay(), this.locale.dayNamesShort, this.locale.dayNames);
                            break;
                        case "o":
                            output += formatNumber("o", Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
                            break;
                        case "m":
                            output += formatNumber("m", date.getMonth() + 1, 2);
                            break;
                        case "M":
                            output += formatName("M", date.getMonth(), this.locale.monthNamesShort, this.locale.monthNames);
                            break;
                        case "y":
                            output += (lookAhead("y") ? date.getFullYear() :
                                (date.getFullYear() % 100 < 10 ? "0" : "") + date.getFullYear() % 100);
                            break;
                        case "@":
                            output += date.getTime();
                            break;
                        case "!":
                            output += date.getTime() * 10000 + this.ticksTo1970;
                            break;
                        case "'":
                            if (lookAhead("'"))
                                output += "'";
                            else
                                literal = true;
                            break;
                        default:
                            output += format.charAt(iFormat);
                    }
                }
            }
        }
        return output;
    };
    Calendar.prototype.formatTime = function (date) {
        if (!date) {
            return '';
        }
        var output = '';
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var seconds = date.getSeconds();
        if (this.hourFormat == '12' && hours > 11 && hours != 12) {
            hours -= 12;
        }
        output += (hours < 10) ? '0' + hours : hours;
        output += ':';
        output += (minutes < 10) ? '0' + minutes : minutes;
        if (this.showSeconds) {
            output += ':';
            output += (seconds < 10) ? '0' + seconds : seconds;
        }
        if (this.hourFormat == '12') {
            output += date.getHours() > 11 ? ' PM' : ' AM';
        }
        return output;
    };
    Calendar.prototype.parseTime = function (value) {
        var tokens = value.split(':');
        var validTokenLength = this.showSeconds ? 3 : 2;
        if (tokens.length !== validTokenLength) {
            throw "Invalid time";
        }
        var h = parseInt(tokens[0]);
        var m = parseInt(tokens[1]);
        var s = this.showSeconds ? parseInt(tokens[2]) : null;
        if (isNaN(h) || isNaN(m) || h > 23 || m > 59 || (this.hourFormat == '12' && h > 12) || (this.showSeconds && (isNaN(s) || s > 59))) {
            throw "Invalid time";
        }
        else {
            if (this.hourFormat == '12' && h !== 12 && this.pm) {
                h += 12;
            }
            return { hour: h, minute: m, second: s };
        }
    };
    // Ported from jquery-ui datepicker parseDate 
    Calendar.prototype.parseDate = function (value, format) {
        if (format == null || value == null) {
            throw "Invalid arguments";
        }
        value = (typeof value === "object" ? value.toString() : value + "");
        if (value === "") {
            return null;
        }
        var iFormat, dim, extra, iValue = 0, shortYearCutoff = (typeof this.shortYearCutoff !== "string" ? this.shortYearCutoff : new Date().getFullYear() % 100 + parseInt(this.shortYearCutoff, 10)), year = -1, month = -1, day = -1, doy = -1, literal = false, date, lookAhead = function (match) {
            var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
            if (matches) {
                iFormat++;
            }
            return matches;
        }, getNumber = function (match) {
            var isDoubled = lookAhead(match), size = (match === "@" ? 14 : (match === "!" ? 20 :
                (match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))), minSize = (match === "y" ? size : 1), digits = new RegExp("^\\d{" + minSize + "," + size + "}"), num = value.substring(iValue).match(digits);
            if (!num) {
                throw "Missing number at position " + iValue;
            }
            iValue += num[0].length;
            return parseInt(num[0], 10);
        }, getName = function (match, shortNames, longNames) {
            var index = -1;
            var arr = lookAhead(match) ? longNames : shortNames;
            var names = [];
            for (var i = 0; i < arr.length; i++) {
                names.push([i, arr[i]]);
            }
            names.sort(function (a, b) {
                return -(a[1].length - b[1].length);
            });
            for (var i = 0; i < names.length; i++) {
                var name_1 = names[i][1];
                if (value.substr(iValue, name_1.length).toLowerCase() === name_1.toLowerCase()) {
                    index = names[i][0];
                    iValue += name_1.length;
                    break;
                }
            }
            if (index !== -1) {
                return index + 1;
            }
            else {
                throw "Unknown name at position " + iValue;
            }
        }, checkLiteral = function () {
            if (value.charAt(iValue) !== format.charAt(iFormat)) {
                throw "Unexpected literal at position " + iValue;
            }
            iValue++;
        };
        for (iFormat = 0; iFormat < format.length; iFormat++) {
            if (literal) {
                if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                    literal = false;
                }
                else {
                    checkLiteral();
                }
            }
            else {
                switch (format.charAt(iFormat)) {
                    case "d":
                        day = getNumber("d");
                        break;
                    case "D":
                        getName("D", this.locale.dayNamesShort, this.locale.dayNames);
                        break;
                    case "o":
                        doy = getNumber("o");
                        break;
                    case "m":
                        month = getNumber("m");
                        break;
                    case "M":
                        month = getName("M", this.locale.monthNamesShort, this.locale.monthNames);
                        break;
                    case "y":
                        year = getNumber("y");
                        break;
                    case "@":
                        date = new Date(getNumber("@"));
                        year = date.getFullYear();
                        month = date.getMonth() + 1;
                        day = date.getDate();
                        break;
                    case "!":
                        date = new Date((getNumber("!") - this.ticksTo1970) / 10000);
                        year = date.getFullYear();
                        month = date.getMonth() + 1;
                        day = date.getDate();
                        break;
                    case "'":
                        if (lookAhead("'")) {
                            checkLiteral();
                        }
                        else {
                            literal = true;
                        }
                        break;
                    default:
                        checkLiteral();
                }
            }
        }
        if (iValue < value.length) {
            extra = value.substr(iValue);
            if (!/^\s+/.test(extra)) {
                throw "Extra/unparsed characters found in date: " + extra;
            }
        }
        if (year === -1) {
            year = new Date().getFullYear();
        }
        else if (year < 100) {
            year += new Date().getFullYear() - new Date().getFullYear() % 100 +
                (year <= shortYearCutoff ? 0 : -100);
        }
        if (doy > -1) {
            month = 1;
            day = doy;
            do {
                dim = this.getDaysCountInMonth(year, month - 1);
                if (day <= dim) {
                    break;
                }
                month++;
                day -= dim;
            } while (true);
        }
        date = this.daylightSavingAdjust(new Date(year, month - 1, day));
        if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
            throw "Invalid date"; // E.g. 31/02/00
        }
        return date;
    };
    Calendar.prototype.daylightSavingAdjust = function (date) {
        if (!date) {
            return null;
        }
        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
        return date;
    };
    Calendar.prototype.updateFilledState = function () {
        this.filled = this.inputFieldValue && this.inputFieldValue != '';
    };
    Calendar.prototype.bindDocumentClickListener = function () {
        var _this = this;
        if (!this.documentClickListener) {
            this.documentClickListener = this.renderer.listen('document', 'click', function (event) {
                if (_this.closeOverlay) {
                    _this.overlayVisible = false;
                    _this.onClose.emit(event);
                }
                _this.closeOverlay = true;
                _this.dateClick = false;
                _this.cd.detectChanges();
            });
        }
    };
    Calendar.prototype.unbindDocumentClickListener = function () {
        if (this.documentClickListener) {
            this.documentClickListener();
            this.documentClickListener = null;
        }
    };
    Calendar.prototype.ngOnDestroy = function () {
        this.unbindDocumentClickListener();
        if (!this.inline && this.appendTo) {
            this.el.nativeElement.appendChild(this.overlayViewChild.nativeElement);
        }
    };
    Calendar.prototype.validate = function (c) {
        if (!this._isValid) {
            return { invalidDate: true };
        }
        return null;
    };
    return Calendar;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Date)
], Calendar.prototype, "defaultDate", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Calendar.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Calendar.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Calendar.prototype, "inputStyle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Calendar.prototype, "inputId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Calendar.prototype, "inputStyleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Calendar.prototype, "placeholder", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Calendar.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Calendar.prototype, "dateFormat", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Calendar.prototype, "inline", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Calendar.prototype, "showOtherMonths", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Calendar.prototype, "selectOtherMonths", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Calendar.prototype, "showIcon", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Calendar.prototype, "icon", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Calendar.prototype, "appendTo", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Calendar.prototype, "readonlyInput", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Calendar.prototype, "shortYearCutoff", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Calendar.prototype, "monthNavigator", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Calendar.prototype, "yearNavigator", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Calendar.prototype, "yearRange", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Calendar.prototype, "showTime", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Calendar.prototype, "hourFormat", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Calendar.prototype, "timeOnly", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Calendar.prototype, "stepHour", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Calendar.prototype, "stepMinute", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Calendar.prototype, "stepSecond", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Calendar.prototype, "showSeconds", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Calendar.prototype, "required", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Calendar.prototype, "showOnFocus", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Calendar.prototype, "dataType", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], Calendar.prototype, "disabledDates", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], Calendar.prototype, "disabledDays", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Calendar.prototype, "utc", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Calendar.prototype, "onFocus", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Calendar.prototype, "onBlur", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Calendar.prototype, "onClose", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Calendar.prototype, "onSelect", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Calendar.prototype, "onInput", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Calendar.prototype, "tabindex", void 0);
__decorate([
    core_1.ViewChild('datepicker'),
    __metadata("design:type", core_1.ElementRef)
], Calendar.prototype, "overlayViewChild", void 0);
__decorate([
    core_1.ViewChild('inputfield'),
    __metadata("design:type", core_1.ElementRef)
], Calendar.prototype, "inputfieldViewChild", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Date),
    __metadata("design:paramtypes", [Date])
], Calendar.prototype, "minDate", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Date),
    __metadata("design:paramtypes", [Date])
], Calendar.prototype, "maxDate", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], Calendar.prototype, "locale", null);
Calendar = __decorate([
    core_1.Component({
        selector: 'p-calendar',
        template: "\n        <span [ngClass]=\"{'ui-calendar':true,'ui-calendar-w-btn':showIcon}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <ng-template [ngIf]=\"!inline\">\n                <input #inputfield type=\"text\" [attr.id]=\"inputId\" [attr.required]=\"required\" [value]=\"inputFieldValue\" (focus)=\"onInputFocus($event)\" (keydown)=\"onInputKeydown($event)\" (click)=\"closeOverlay=false\" (blur)=\"onInputBlur($event)\"\n                    [readonly]=\"readonlyInput\" (input)=\"onUserInput($event)\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" [placeholder]=\"placeholder||''\" [disabled]=\"disabled\" [attr.tabindex]=\"tabindex\"\n                    [ngClass]=\"'ui-inputtext ui-widget ui-state-default ui-corner-all'\"\n                    ><button type=\"button\" [icon]=\"icon\" pButton *ngIf=\"showIcon\" (click)=\"onButtonClick($event,inputfield)\"\n                    [ngClass]=\"{'ui-datepicker-trigger':true,'ui-state-disabled':disabled}\" [disabled]=\"disabled\" tabindex=\"-1\"></button>\n            </ng-template>\n            <div #datepicker class=\"ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all\" [ngClass]=\"{'ui-datepicker-inline':inline,'ui-shadow':!inline,'ui-state-disabled':disabled,'ui-datepicker-timeonly':timeOnly}\" \n                [ngStyle]=\"{'display': inline ? 'inline-block' : (overlayVisible ? 'block' : 'none')}\" (click)=\"onDatePickerClick($event)\" [@overlayState]=\"inline ? 'visible' : (overlayVisible ? 'visible' : 'hidden')\">\n\n                <div class=\"ui-datepicker-header ui-widget-header ui-helper-clearfix ui-corner-all\" *ngIf=\"!timeOnly && (overlayVisible || inline)\">\n                    <ng-content select=\"p-header\"></ng-content>\n                    <a class=\"ui-datepicker-prev ui-corner-all\" href=\"#\" (click)=\"prevMonth($event)\">\n                        <span class=\"fa fa-angle-left\"></span>\n                    </a>\n                    <a class=\"ui-datepicker-next ui-corner-all\" href=\"#\" (click)=\"nextMonth($event)\">\n                        <span class=\"fa fa-angle-right\"></span>\n                    </a>\n                    <div class=\"ui-datepicker-title\">\n                        <span class=\"ui-datepicker-month\" *ngIf=\"!monthNavigator\">{{locale.monthNames[currentMonth]}}</span>\n                        <select class=\"ui-datepicker-month\" *ngIf=\"monthNavigator\" (change)=\"onMonthDropdownChange($event.target.value)\">\n                            <option [value]=\"i\" *ngFor=\"let month of locale.monthNames;let i = index\" [selected]=\"i == currentMonth\">{{month}}</option>\n                        </select>\n                        <select class=\"ui-datepicker-year\" *ngIf=\"yearNavigator\" (change)=\"onYearDropdownChange($event.target.value)\">\n                            <option [value]=\"year\" *ngFor=\"let year of yearOptions\" [selected]=\"year == currentYear\">{{year}}</option>\n                        </select>\n                        <span class=\"ui-datepicker-year\" *ngIf=\"!yearNavigator\">{{currentYear}}</span>\n                    </div>\n                </div>\n                <table class=\"ui-datepicker-calendar\" *ngIf=\"!timeOnly && (overlayVisible || inline)\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\" *ngFor=\"let weekDay of weekDays;let begin = first; let end = last\">\n                                <span>{{weekDay}}</span>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let week of dates\">\n                            <td *ngFor=\"let date of week\" [ngClass]=\"{'ui-datepicker-other-month ui-state-disabled':date.otherMonth,\n                                'ui-datepicker-current-day':isSelected(date),'ui-datepicker-today':date.today}\">\n                                <a class=\"ui-state-default\" href=\"#\" *ngIf=\"date.otherMonth ? showOtherMonths : true\" \n                                    [ngClass]=\"{'ui-state-active':isSelected(date), 'ui-state-highlight':date.today, 'ui-state-disabled':!date.selectable}\"\n                                    (click)=\"onDateSelect($event,date)\">{{date.day}}</a>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <div class=\"ui-timepicker ui-widget-header ui-corner-all\" *ngIf=\"showTime||timeOnly\">\n                    <div class=\"ui-hour-picker\">\n                        <a href=\"#\" (click)=\"incrementHour($event)\">\n                            <span class=\"fa fa-angle-up\"></span>\n                        </a>\n                        <span [ngStyle]=\"{'display': currentHour < 10 ? 'inline': 'none'}\">0</span><span>{{currentHour}}</span>\n                        <a href=\"#\" (click)=\"decrementHour($event)\">\n                            <span class=\"fa fa-angle-down\"></span>\n                        </a>\n                    </div>\n                    <div class=\"ui-separator\">\n                        <a href=\"#\">\n                            <span class=\"fa fa-angle-up\"></span>\n                        </a>\n                        <span>:</span>\n                        <a href=\"#\">\n                            <span class=\"fa fa-angle-down\"></span>\n                        </a>\n                    </div>\n                    <div class=\"ui-minute-picker\">\n                        <a href=\"#\" (click)=\"incrementMinute($event)\">\n                            <span class=\"fa fa-angle-up\"></span>\n                        </a>\n                        <span [ngStyle]=\"{'display': currentMinute < 10 ? 'inline': 'none'}\">0</span><span>{{currentMinute}}</span>\n                        <a href=\"#\" (click)=\"decrementMinute($event)\">\n                            <span class=\"fa fa-angle-down\"></span>\n                        </a>\n                    </div>\n                    <div class=\"ui-separator\" *ngIf=\"showSeconds\">\n                        <a href=\"#\">\n                            <span class=\"fa fa-angle-up\"></span>\n                        </a>\n                        <span>:</span>\n                        <a href=\"#\">\n                            <span class=\"fa fa-angle-down\"></span>\n                        </a>\n                    </div>\n                    <div class=\"ui-second-picker\" *ngIf=\"showSeconds\">\n                        <a href=\"#\" (click)=\"incrementSecond($event)\">\n                            <span class=\"fa fa-angle-up\"></span>\n                        </a>\n                        <span [ngStyle]=\"{'display': currentSecond < 10 ? 'inline': 'none'}\">0</span><span>{{currentSecond}}</span>\n                        <a href=\"#\" (click)=\"decrementSecond($event)\">\n                            <span class=\"fa fa-angle-down\"></span>\n                        </a>\n                    </div>\n                    <div class=\"ui-ampm-picker\" *ngIf=\"hourFormat=='12'\">\n                        <a href=\"#\" (click)=\"toggleAMPM($event)\">\n                            <span class=\"fa fa-angle-up\"></span>\n                        </a>\n                        <span>{{pm ? 'PM' : 'AM'}}</span>\n                        <a href=\"#\" (click)=\"toggleAMPM($event)\">\n                            <span class=\"fa fa-angle-down\"></span>\n                        </a>\n                    </div>\n                </div>\n                <ng-content select=\"p-footer\"></ng-content>\n            </div>\n        </span>\n    ",
        animations: [
            animations_1.trigger('overlayState', [
                animations_1.state('hidden', animations_1.style({
                    opacity: 0
                })),
                animations_1.state('visible', animations_1.style({
                    opacity: 1
                })),
                animations_1.transition('visible => hidden', animations_1.animate('400ms ease-in')),
                animations_1.transition('hidden => visible', animations_1.animate('400ms ease-out'))
            ])
        ],
        host: {
            '[class.ui-inputwrapper-filled]': 'filled',
            '[class.ui-inputwrapper-focus]': 'focus'
        },
        providers: [domhandler_1.DomHandler, exports.CALENDAR_VALUE_ACCESSOR, exports.CALENDAR_VALIDATOR]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2, core_1.ChangeDetectorRef])
], Calendar);
exports.Calendar = Calendar;
var CalendarModule = (function () {
    function CalendarModule() {
    }
    return CalendarModule;
}());
CalendarModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, button_1.ButtonModule],
        exports: [Calendar, button_1.ButtonModule],
        declarations: [Calendar]
    })
], CalendarModule);
exports.CalendarModule = CalendarModule;
//# sourceMappingURL=calendar.js.map

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var Captcha = (function () {
    function Captcha(el, _zone) {
        this.el = el;
        this._zone = _zone;
        this.siteKey = null;
        this.theme = 'light';
        this.type = 'image';
        this.size = 'normal';
        this.tabindex = 0;
        this.language = null;
        this.initCallback = "initRecaptcha";
        this.onResponse = new core_1.EventEmitter();
        this.onExpire = new core_1.EventEmitter();
        this._instance = null;
    }
    Captcha.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (window.grecaptcha) {
            this.init();
        }
        else {
            window[this.initCallback] = function () {
                _this.init();
            };
        }
    };
    Captcha.prototype.init = function () {
        var _this = this;
        this._instance = window.grecaptcha.render(this.el.nativeElement.children[0], {
            'sitekey': this.siteKey,
            'theme': this.theme,
            'type': this.type,
            'size': this.size,
            'tabindex': this.tabindex,
            'hl': this.language,
            'callback': function (response) { _this._zone.run(function () { return _this.recaptchaCallback(response); }); },
            'expired-callback': function () { _this._zone.run(function () { return _this.recaptchaExpiredCallback(); }); }
        });
    };
    Captcha.prototype.reset = function () {
        if (this._instance === null)
            return;
        window.grecaptcha.reset(this._instance);
    };
    Captcha.prototype.getResponse = function () {
        if (this._instance === null)
            return null;
        return window.grecaptcha.getResponse(this._instance);
    };
    Captcha.prototype.recaptchaCallback = function (response) {
        this.onResponse.emit({
            response: response
        });
    };
    Captcha.prototype.recaptchaExpiredCallback = function () {
        this.onExpire.emit();
    };
    Captcha.prototype.ngOnDestroy = function () {
        if (this._instance != null) {
            window.grecaptcha.reset(this._instance);
        }
    };
    return Captcha;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Captcha.prototype, "siteKey", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Captcha.prototype, "theme", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Captcha.prototype, "type", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Captcha.prototype, "size", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Captcha.prototype, "tabindex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Captcha.prototype, "language", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Captcha.prototype, "initCallback", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Captcha.prototype, "onResponse", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Captcha.prototype, "onExpire", void 0);
Captcha = __decorate([
    core_1.Component({
        selector: 'p-captcha',
        template: "<div></div>"
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, core_1.NgZone])
], Captcha);
exports.Captcha = Captcha;
var CaptchaModule = (function () {
    function CaptchaModule() {
    }
    return CaptchaModule;
}());
CaptchaModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Captcha],
        declarations: [Captcha]
    })
], CaptchaModule);
exports.CaptchaModule = CaptchaModule;
//# sourceMappingURL=captcha.js.map

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var domhandler_1 = __webpack_require__(4);
var shared_1 = __webpack_require__(7);
var common_1 = __webpack_require__(3);
var Carousel = (function () {
    function Carousel(el, domHandler, renderer, cd) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
        this.cd = cd;
        this.numVisible = 3;
        this.firstVisible = 0;
        this.circular = false;
        this.breakpoint = 560;
        this.responsive = true;
        this.autoplayInterval = 0;
        this.effectDuration = '1s';
        this.easing = 'ease-out';
        this.pageLinks = 3;
        this.onPage = new core_1.EventEmitter();
        this.left = 0;
    }
    Carousel.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.templates.forEach(function (item) {
            switch (item.getType()) {
                case 'item':
                    _this.itemTemplate = item.template;
                    break;
                default:
                    _this.itemTemplate = item.template;
                    break;
            }
        });
    };
    Object.defineProperty(Carousel.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (val) {
            this._value = val;
            this.handleDataChange();
        },
        enumerable: true,
        configurable: true
    });
    Carousel.prototype.handleDataChange = function () {
        if (this.value && this.value.length) {
            if (this.value.length && this.firstVisible >= this.value.length) {
                this.setPage(this.totalPages - 1);
            }
        }
        else {
            this.setPage(0);
        }
        this.valuesChanged = true;
    };
    Carousel.prototype.ngAfterViewChecked = function () {
        if (this.valuesChanged && this.containerViewChild.nativeElement.offsetParent) {
            this.render();
            this.valuesChanged = false;
        }
    };
    Carousel.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.responsive) {
            this.documentResponsiveListener = this.renderer.listen('window', 'resize', function (event) {
                _this.updateState();
            });
        }
    };
    Carousel.prototype.updateLinks = function () {
        this.anchorPageLinks = [];
        for (var i = 0; i < this.totalPages; i++) {
            this.anchorPageLinks.push(i);
        }
    };
    Carousel.prototype.updateDropdown = function () {
        this.selectDropdownOptions = [];
        for (var i = 0; i < this.totalPages; i++) {
            this.selectDropdownOptions.push(i);
        }
    };
    Carousel.prototype.updateMobileDropdown = function () {
        this.mobileDropdownOptions = [];
        for (var i = 0; i < this.value.length; i++) {
            this.mobileDropdownOptions.push(i);
        }
    };
    Carousel.prototype.render = function () {
        if (this.autoplayInterval) {
            this.stopAutoplay();
        }
        this.items = this.domHandler.find(this.itemsViewChild.nativeElement, 'li');
        this.calculateColumns();
        this.calculateItemWidths();
        if (!this.responsive) {
            this.containerViewChild.nativeElement.style.width = (this.domHandler.width(this.containerViewChild.nativeElement)) + 'px';
        }
        if (this.autoplayInterval) {
            this.circular = true;
            this.startAutoplay();
        }
        this.updateMobileDropdown();
        this.updateLinks();
        this.updateDropdown();
        this.cd.detectChanges();
    };
    Carousel.prototype.calculateItemWidths = function () {
        var firstItem = (this.items && this.items.length) ? this.items[0] : null;
        if (firstItem) {
            for (var i = 0; i < this.items.length; i++) {
                this.items[i].style.width = ((this.domHandler.innerWidth(this.viewportViewChild.nativeElement) - (this.domHandler.getHorizontalMargin(firstItem) * this.columns)) / this.columns) + 'px';
            }
        }
    };
    Carousel.prototype.calculateColumns = function () {
        if (window.innerWidth <= this.breakpoint) {
            this.shrinked = true;
            this.columns = 1;
        }
        else {
            this.shrinked = false;
            this.columns = this.numVisible;
        }
        this.page = Math.floor(this.firstVisible / this.columns);
    };
    Carousel.prototype.onNextNav = function () {
        var lastPage = (this.page === (this.totalPages - 1));
        if (!lastPage)
            this.setPage(this.page + 1);
        else if (this.circular)
            this.setPage(0);
    };
    Carousel.prototype.onPrevNav = function () {
        if (this.page !== 0)
            this.setPage(this.page - 1);
        else if (this.circular)
            this.setPage(this.totalPages - 1);
    };
    Carousel.prototype.setPageWithLink = function (event, p) {
        this.setPage(p);
        event.preventDefault();
    };
    Carousel.prototype.setPage = function (p, enforce) {
        if (p !== this.page || enforce) {
            this.page = p;
            this.left = (-1 * (this.domHandler.innerWidth(this.viewportViewChild.nativeElement) * this.page));
            this.firstVisible = this.page * this.columns;
            this.onPage.emit({
                page: this.page
            });
        }
    };
    Carousel.prototype.onDropdownChange = function (val) {
        this.setPage(parseInt(val));
    };
    Object.defineProperty(Carousel.prototype, "displayPageLinks", {
        get: function () {
            return (this.totalPages <= this.pageLinks && !this.shrinked);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "displayPageDropdown", {
        get: function () {
            return (this.totalPages > this.pageLinks && !this.shrinked);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "totalPages", {
        get: function () {
            return (this.value && this.value.length) ? Math.ceil(this.value.length / this.columns) : 0;
        },
        enumerable: true,
        configurable: true
    });
    Carousel.prototype.routerDisplay = function () {
        var win = window;
        if (win.innerWidth <= this.breakpoint)
            return true;
        else
            return false;
    };
    Carousel.prototype.updateState = function () {
        var win = window;
        if (win.innerWidth <= this.breakpoint) {
            this.shrinked = true;
            this.columns = 1;
        }
        else if (this.shrinked) {
            this.shrinked = false;
            this.columns = this.numVisible;
            this.updateLinks();
            this.updateDropdown();
        }
        this.calculateItemWidths();
        this.setPage(Math.floor(this.firstVisible / this.columns), true);
    };
    Carousel.prototype.startAutoplay = function () {
        var _this = this;
        this.interval = setInterval(function () {
            if (_this.page === (_this.totalPages - 1))
                _this.setPage(0);
            else
                _this.setPage(_this.page + 1);
        }, this.autoplayInterval);
    };
    Carousel.prototype.stopAutoplay = function () {
        clearInterval(this.interval);
    };
    Carousel.prototype.ngOnDestroy = function () {
        if (this.documentResponsiveListener) {
            this.documentResponsiveListener();
        }
        if (this.autoplayInterval) {
            this.stopAutoplay();
        }
    };
    return Carousel;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Carousel.prototype, "numVisible", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Carousel.prototype, "firstVisible", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Carousel.prototype, "headerText", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Carousel.prototype, "circular", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Carousel.prototype, "breakpoint", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Carousel.prototype, "responsive", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Carousel.prototype, "autoplayInterval", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Carousel.prototype, "effectDuration", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Carousel.prototype, "easing", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Carousel.prototype, "pageLinks", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Carousel.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Carousel.prototype, "styleClass", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Carousel.prototype, "onPage", void 0);
__decorate([
    core_1.ContentChildren(shared_1.PrimeTemplate),
    __metadata("design:type", core_1.QueryList)
], Carousel.prototype, "templates", void 0);
__decorate([
    core_1.ViewChild('container'),
    __metadata("design:type", core_1.ElementRef)
], Carousel.prototype, "containerViewChild", void 0);
__decorate([
    core_1.ViewChild('viewport'),
    __metadata("design:type", core_1.ElementRef)
], Carousel.prototype, "viewportViewChild", void 0);
__decorate([
    core_1.ViewChild('items'),
    __metadata("design:type", core_1.ElementRef)
], Carousel.prototype, "itemsViewChild", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], Carousel.prototype, "value", null);
Carousel = __decorate([
    core_1.Component({
        selector: 'p-carousel',
        template: "\n        <div #container [ngClass]=\"{'ui-carousel ui-widget ui-widget-content ui-corner-all':true}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-carousel-header ui-widget-header ui-corner-all\">\n                <span class=\"ui-carousel-header-title\">{{headerText}}</span>\n                <span class=\"ui-carousel-button ui-carousel-next-button fa fa-arrow-circle-right\" (click)=\"onNextNav()\" \n                        [ngClass]=\"{'ui-state-disabled':(page === (totalPages-1)) && !circular}\" *ngIf=\"value&&value.length\"></span>\n                <span class=\"ui-carousel-button ui-carousel-prev-button fa fa-arrow-circle-left\" (click)=\"onPrevNav()\" \n                        [ngClass]=\"{'ui-state-disabled':(page === 0 && !circular)}\" *ngIf=\"value&&value.length\"></span>\n                <div *ngIf=\"displayPageLinks\" class=\"ui-carousel-page-links\">\n                    <a href=\"#\" (click)=\"setPageWithLink($event,i)\" class=\"ui-carousel-page-link fa fa-circle-o\" *ngFor=\"let links of anchorPageLinks;let i=index\" [ngClass]=\"{'fa-dot-circle-o':page===i}\"></a>\n                </div>\n                <select *ngIf=\"displayPageDropdown\" class=\"ui-carousel-dropdown ui-widget ui-state-default ui-corner-left\" [value]=\"page\" (change)=\"onDropdownChange($event.target.value)\">\n                    <option *ngFor=\"let option of selectDropdownOptions\" [value]=\"option\" [selected]=\"value == option\">{{option+1}}</option>\n                </select>\n                <select *ngIf=\"responsive&&value&&value.length\" class=\"ui-carousel-mobiledropdown ui-widget ui-state-default ui-corner-left\" [value]=\"page\" (change)=\"onDropdownChange($event.target.value)\"\n                    [style.display]=\"shrinked ? 'block' : 'none'\">\n                    <option *ngFor=\"let option of mobileDropdownOptions\" [value]=\"option\" [selected]=\"value == option\">{{option+1}}</option>\n                </select>\n            </div>\n            <div #viewport class=\"ui-carousel-viewport\">\n                <ul #items class=\"ui-carousel-items\" [style.left.px]=\"left\" [style.transitionProperty]=\"'left'\" \n                            [style.transitionDuration]=\"effectDuration\" [style.transitionTimingFunction]=\"easing\">\n                    <li *ngFor=\"let item of value\" class=\"ui-carousel-item ui-widget-content ui-corner-all\">\n                        <ng-template [pTemplateWrapper]=\"itemTemplate\" [item]=\"item\"></ng-template>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2, core_1.ChangeDetectorRef])
], Carousel);
exports.Carousel = Carousel;
var CarouselModule = (function () {
    function CarouselModule() {
    }
    return CarouselModule;
}());
CarouselModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, shared_1.SharedModule],
        exports: [Carousel, shared_1.SharedModule],
        declarations: [Carousel]
    })
], CarouselModule);
exports.CarouselModule = CarouselModule;
//# sourceMappingURL=carousel.js.map

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var UIChart = (function () {
    function UIChart(el) {
        this.el = el;
        this.onDataSelect = new core_1.EventEmitter();
    }
    Object.defineProperty(UIChart.prototype, "data", {
        get: function () {
            return this._data;
        },
        set: function (val) {
            this._data = val;
            this.reinit();
        },
        enumerable: true,
        configurable: true
    });
    UIChart.prototype.ngAfterViewInit = function () {
        this.initChart();
        this.initialized = true;
    };
    UIChart.prototype.onCanvasClick = function (event) {
        if (this.chart) {
            var element = this.chart.getElementAtEvent(event);
            var dataset = this.chart.getDatasetAtEvent(event);
            if (element && element[0] && dataset) {
                this.onDataSelect.emit({ originalEvent: event, element: element[0], dataset: dataset });
            }
        }
    };
    UIChart.prototype.initChart = function () {
        this.chart = new Chart(this.el.nativeElement.children[0].children[0], {
            type: this.type,
            data: this.data,
            options: this.options
        });
    };
    UIChart.prototype.getCanvas = function () {
        return this.el.nativeElement.children[0].children[0];
    };
    UIChart.prototype.getBase64Image = function () {
        return this.chart.toBase64Image();
    };
    UIChart.prototype.generateLegend = function () {
        if (this.chart) {
            this.chart.generateLegend();
        }
    };
    UIChart.prototype.refresh = function () {
        if (this.chart) {
            this.chart.update();
        }
    };
    UIChart.prototype.reinit = function () {
        if (this.chart) {
            this.chart.destroy();
            this.initChart();
        }
    };
    UIChart.prototype.ngOnDestroy = function () {
        if (this.chart) {
            this.chart.destroy();
            this.initialized = false;
            this.chart = null;
        }
    };
    return UIChart;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], UIChart.prototype, "type", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], UIChart.prototype, "options", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], UIChart.prototype, "width", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], UIChart.prototype, "height", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], UIChart.prototype, "onDataSelect", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], UIChart.prototype, "data", null);
UIChart = __decorate([
    core_1.Component({
        selector: 'p-chart',
        template: "\n        <div>\n            <canvas [attr.width]=\"width\" [attr.height]=\"height\" (click)=\"onCanvasClick($event)\"></canvas>\n        </div>\n    "
    }),
    __metadata("design:paramtypes", [core_1.ElementRef])
], UIChart);
exports.UIChart = UIChart;
var ChartModule = (function () {
    function ChartModule() {
    }
    return ChartModule;
}());
ChartModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [UIChart],
        declarations: [UIChart]
    })
], ChartModule);
exports.ChartModule = ChartModule;
//# sourceMappingURL=chart.js.map

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var forms_1 = __webpack_require__(6);
exports.CHECKBOX_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return Checkbox; }),
    multi: true
};
var Checkbox = (function () {
    function Checkbox(cd) {
        this.cd = cd;
        this.onChange = new core_1.EventEmitter();
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
        this.focused = false;
        this.checked = false;
    }
    Checkbox.prototype.onClick = function (event, checkbox, focus) {
        event.preventDefault();
        if (this.disabled) {
            return;
        }
        this.checked = !this.checked;
        this.updateModel();
        if (focus) {
            checkbox.focus();
        }
    };
    Checkbox.prototype.updateModel = function () {
        if (!this.binary) {
            if (this.checked)
                this.addValue();
            else
                this.removeValue();
            this.onModelChange(this.model);
        }
        else {
            this.onModelChange(this.checked);
        }
        this.onChange.emit(this.checked);
    };
    Checkbox.prototype.handleChange = function (event) {
        this.checked = event.target.checked;
        this.updateModel();
    };
    Checkbox.prototype.isChecked = function () {
        if (this.binary)
            return this.model;
        else
            return this.model && this.model.indexOf(this.value) > -1;
    };
    Checkbox.prototype.removeValue = function () {
        var _this = this;
        this.model = this.model.filter(function (val) { return val !== _this.value; });
    };
    Checkbox.prototype.addValue = function () {
        if (this.model)
            this.model = this.model.concat([this.value]);
        else
            this.model = [this.value];
    };
    Checkbox.prototype.onFocus = function (event) {
        this.focused = true;
    };
    Checkbox.prototype.onBlur = function (event) {
        this.focused = false;
        this.onModelTouched();
    };
    Checkbox.prototype.writeValue = function (model) {
        this.model = model;
        this.checked = this.isChecked();
        this.cd.markForCheck();
    };
    Checkbox.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    Checkbox.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    Checkbox.prototype.setDisabledState = function (val) {
        this.disabled = val;
    };
    return Checkbox;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Checkbox.prototype, "value", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Checkbox.prototype, "name", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Checkbox.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Checkbox.prototype, "binary", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Checkbox.prototype, "label", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Checkbox.prototype, "tabindex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Checkbox.prototype, "inputId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Checkbox.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Checkbox.prototype, "styleClass", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Checkbox.prototype, "onChange", void 0);
Checkbox = __decorate([
    core_1.Component({
        selector: 'p-checkbox',
        template: "\n        <div [ngStyle]=\"style\" [ngClass]=\"'ui-chkbox ui-widget'\" [class]=\"styleClass\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #cb type=\"checkbox\" [attr.id]=\"inputId\" [name]=\"name\" [value]=\"value\" [checked]=\"checked\" (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\"\n                [ngClass]=\"{'ui-state-focus':focused}\" (change)=\"handleChange($event)\" [disabled]=\"disabled\" [attr.tabindex]=\"tabindex\">\n            </div>\n            <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" (click)=\"onClick($event,cb,true)\"\n                        [ngClass]=\"{'ui-state-active':checked,'ui-state-disabled':disabled,'ui-state-focus':focused}\">\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'fa fa-check':checked}\"></span>\n            </div>\n        </div>\n        <label class=\"ui-chkbox-label\" (click)=\"onClick($event,cb,true)\" *ngIf=\"label\">{{label}}</label>\n    ",
        providers: [exports.CHECKBOX_VALUE_ACCESSOR]
    }),
    __metadata("design:paramtypes", [core_1.ChangeDetectorRef])
], Checkbox);
exports.Checkbox = Checkbox;
var CheckboxModule = (function () {
    function CheckboxModule() {
    }
    return CheckboxModule;
}());
CheckboxModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Checkbox],
        declarations: [Checkbox]
    })
], CheckboxModule);
exports.CheckboxModule = CheckboxModule;
//# sourceMappingURL=checkbox.js.map

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var shared_1 = __webpack_require__(7);
var inputtext_1 = __webpack_require__(20);
var domhandler_1 = __webpack_require__(4);
var forms_1 = __webpack_require__(6);
exports.CHIPS_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return Chips; }),
    multi: true
};
var Chips = (function () {
    function Chips(el, domHandler) {
        this.el = el;
        this.domHandler = domHandler;
        this.onAdd = new core_1.EventEmitter();
        this.onRemove = new core_1.EventEmitter();
        this.allowDuplicate = true;
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    Chips.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.templates.forEach(function (item) {
            switch (item.getType()) {
                case 'item':
                    _this.itemTemplate = item.template;
                    break;
                default:
                    _this.itemTemplate = item.template;
                    break;
            }
        });
    };
    Chips.prototype.writeValue = function (value) {
        this.value = value;
    };
    Chips.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    Chips.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    Chips.prototype.setDisabledState = function (val) {
        this.disabled = val;
    };
    Chips.prototype.resolveFieldData = function (data, field) {
        if (data && field) {
            if (field.indexOf('.') == -1) {
                return data[field];
            }
            else {
                var fields = field.split('.');
                var value = data;
                for (var i = 0, len = fields.length; i < len; ++i) {
                    value = value[fields[i]];
                }
                return value;
            }
        }
        else {
            return null;
        }
    };
    Chips.prototype.onFocus = function () {
        this.focus = true;
    };
    Chips.prototype.onBlur = function () {
        this.focus = false;
        this.onModelTouched();
    };
    Chips.prototype.removeItem = function (event, index) {
        if (this.disabled) {
            return;
        }
        var removedItem = this.value[index];
        this.value = this.value.filter(function (val, i) { return i != index; });
        this.onModelChange(this.value);
        this.onRemove.emit({
            originalEvent: event,
            value: removedItem
        });
    };
    Chips.prototype.onKeydown = function (event, inputEL) {
        switch (event.which) {
            //backspace
            case 8:
                if (inputEL.value.length === 0 && this.value && this.value.length > 0) {
                    this.value = this.value.slice();
                    var removedItem = this.value.pop();
                    this.onModelChange(this.value);
                    this.onRemove.emit({
                        originalEvent: event,
                        value: removedItem
                    });
                }
                break;
            //enter
            case 13:
                this.value = this.value || [];
                if (inputEL.value && inputEL.value.trim().length && (!this.max || this.max > this.value.length)) {
                    if (this.allowDuplicate || !this.value.includes(inputEL.value)) {
                        this.value = this.value.concat([inputEL.value]);
                        this.onModelChange(this.value);
                        this.onAdd.emit({
                            originalEvent: event,
                            value: inputEL.value
                        });
                    }
                }
                inputEL.value = '';
                event.preventDefault();
                break;
            default:
                if (this.max && this.value && this.max === this.value.length) {
                    event.preventDefault();
                }
                break;
        }
    };
    Object.defineProperty(Chips.prototype, "maxedOut", {
        get: function () {
            return this.max && this.value && this.max === this.value.length;
        },
        enumerable: true,
        configurable: true
    });
    return Chips;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Chips.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Chips.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Chips.prototype, "disabled", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Chips.prototype, "onAdd", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Chips.prototype, "onRemove", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Chips.prototype, "field", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Chips.prototype, "placeholder", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Chips.prototype, "max", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Chips.prototype, "tabindex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Chips.prototype, "inputId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Chips.prototype, "allowDuplicate", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Chips.prototype, "inputStyle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Chips.prototype, "inputStyleClass", void 0);
__decorate([
    core_1.ContentChildren(shared_1.PrimeTemplate),
    __metadata("design:type", core_1.QueryList)
], Chips.prototype, "templates", void 0);
Chips = __decorate([
    core_1.Component({
        selector: 'p-chips',
        template: "\n        <div [ngClass]=\"'ui-chips ui-widget'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <ul [ngClass]=\"{'ui-inputtext ui-state-default ui-corner-all':true,'ui-state-focus':focus,'ui-state-disabled':disabled}\" (click)=\"inputtext.focus()\">\n                <li #token *ngFor=\"let item of value; let i = index;\" class=\"ui-chips-token ui-state-highlight ui-corner-all\">\n                    <span *ngIf=\"!disabled\" class=\"ui-chips-token-icon fa fa-fw fa-close\" (click)=\"removeItem($event,i)\"></span>\n                    <span *ngIf=\"!itemTemplate\" class=\"ui-chips-token-label\">{{field ? resolveFieldData(item,field) : item}}</span>\n                    <ng-template *ngIf=\"itemTemplate\" [pTemplateWrapper]=\"itemTemplate\" [item]=\"item\"></ng-template>\n                </li>\n                <li class=\"ui-chips-input-token\">\n                    <input #inputtext type=\"text\" [attr.id]=\"inputId\" [attr.placeholder]=\"placeholder\" [attr.tabindex]=\"tabindex\" (keydown)=\"onKeydown($event,inputtext)\" \n                        (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"maxedOut||disabled\" [disabled]=\"disabled\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\">\n                </li>\n            </ul>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler, exports.CHIPS_VALUE_ACCESSOR]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler])
], Chips);
exports.Chips = Chips;
var ChipsModule = (function () {
    function ChipsModule() {
    }
    return ChipsModule;
}());
ChipsModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, inputtext_1.InputTextModule, shared_1.SharedModule],
        exports: [Chips, inputtext_1.InputTextModule, shared_1.SharedModule],
        declarations: [Chips]
    })
], ChipsModule);
exports.ChipsModule = ChipsModule;
//# sourceMappingURL=chips.js.map

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var CodeHighlighter = (function () {
    function CodeHighlighter(el) {
        this.el = el;
    }
    CodeHighlighter.prototype.ngOnInit = function () {
        Prism.highlightElement(this.el.nativeElement);
    };
    return CodeHighlighter;
}());
CodeHighlighter = __decorate([
    core_1.Directive({
        selector: '[pCode]'
    }),
    __metadata("design:paramtypes", [core_1.ElementRef])
], CodeHighlighter);
exports.CodeHighlighter = CodeHighlighter;
var CodeHighlighterModule = (function () {
    function CodeHighlighterModule() {
    }
    return CodeHighlighterModule;
}());
CodeHighlighterModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [CodeHighlighter],
        declarations: [CodeHighlighter]
    })
], CodeHighlighterModule);
exports.CodeHighlighterModule = CodeHighlighterModule;
//# sourceMappingURL=codehighlighter.js.map

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var animations_1 = __webpack_require__(13);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var forms_1 = __webpack_require__(6);
exports.COLORPICKER_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return ColorPicker; }),
    multi: true
};
var ColorPicker = (function () {
    function ColorPicker(el, domHandler, renderer, cd) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
        this.cd = cd;
        this.format = 'hex';
        this.onChange = new core_1.EventEmitter();
        this.defaultColor = 'ff0000';
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    ColorPicker.prototype.ngAfterViewChecked = function () {
        if (this.shown) {
            this.onShow();
            this.shown = false;
        }
    };
    ColorPicker.prototype.onHueMousedown = function (event) {
        if (this.disabled) {
            return;
        }
        this.bindDocumentMousemoveListener();
        this.bindDocumentMouseupListener();
        this.hueDragging = true;
        this.pickHue(event);
    };
    ColorPicker.prototype.pickHue = function (event) {
        var top = this.hueViewChild.nativeElement.getBoundingClientRect().top + document.body.scrollTop;
        this.value = this.validateHSB({
            h: Math.floor(360 * (150 - Math.max(0, Math.min(150, (event.pageY - top)))) / 150),
            s: 100,
            b: 100
        });
        this.updateColorSelector();
        this.updateUI();
        this.updateModel();
        this.onChange.emit({ originalEvent: event, value: this.value });
    };
    ColorPicker.prototype.onColorMousedown = function (event) {
        if (this.disabled) {
            return;
        }
        this.bindDocumentMousemoveListener();
        this.bindDocumentMouseupListener();
        this.colorDragging = true;
        this.pickColor(event);
    };
    ColorPicker.prototype.pickColor = function (event) {
        var rect = this.colorSelectorViewChild.nativeElement.getBoundingClientRect();
        var top = rect.top + document.body.scrollTop;
        var left = rect.left + document.body.scrollLeft;
        var saturation = Math.floor(100 * (Math.max(0, Math.min(150, (event.pageX - left)))) / 150);
        var brightness = Math.floor(100 * (150 - Math.max(0, Math.min(150, (event.pageY - top)))) / 150);
        this.value = this.validateHSB({
            h: this.value.h,
            s: saturation,
            b: brightness
        });
        this.updateUI();
        this.updateModel();
        this.onChange.emit({ originalEvent: event, value: this.getValueToUpdate() });
    };
    ColorPicker.prototype.getValueToUpdate = function () {
        var val;
        switch (this.format) {
            case 'hex':
                val = '#' + this.HSBtoHEX(this.value);
                break;
            case 'rgb':
                val = this.HSBtoRGB(this.value);
                break;
            case 'hsb':
                val = this.value;
                break;
        }
        return val;
    };
    ColorPicker.prototype.updateModel = function () {
        this.onModelChange(this.getValueToUpdate());
    };
    ColorPicker.prototype.writeValue = function (value) {
        if (value) {
            switch (this.format) {
                case 'hex':
                    this.value = this.HEXtoHSB(value);
                    break;
                case 'rgb':
                    this.value = this.RGBtoHSB(value);
                    break;
                case 'hsb':
                    this.value = value;
                    break;
            }
        }
        else {
            this.value = this.HEXtoHSB(this.defaultColor);
        }
        this.updateColorSelector();
        this.updateUI();
    };
    ColorPicker.prototype.updateColorSelector = function () {
        this.colorSelectorViewChild.nativeElement.style.backgroundColor = '#' + this.HSBtoHEX(this.value);
    };
    ColorPicker.prototype.updateUI = function () {
        this.colorHandleViewChild.nativeElement.style.left = Math.floor(150 * this.value.s / 100) + 'px';
        this.colorHandleViewChild.nativeElement.style.top = Math.floor(150 * (100 - this.value.b) / 100) + 'px';
        this.hueHandleViewChild.nativeElement.style.top = Math.floor(150 - (150 * this.value.h / 360)) + 'px';
        this.inputBgColor = '#' + this.HSBtoHEX(this.value);
    };
    ColorPicker.prototype.onInputFocus = function () {
        this.onModelTouched();
    };
    ColorPicker.prototype.show = function () {
        this.panelViewChild.nativeElement.style.zIndex = String(++domhandler_1.DomHandler.zindex);
        this.panelVisible = true;
        this.shown = true;
    };
    ColorPicker.prototype.hide = function () {
        this.panelVisible = false;
        this.unbindDocumentClickListener();
    };
    ColorPicker.prototype.onShow = function () {
        this.alignPanel();
        this.bindDocumentClickListener();
    };
    ColorPicker.prototype.alignPanel = function () {
        if (this.appendTo)
            this.domHandler.absolutePosition(this.panelViewChild.nativeElement, this.inputViewChild.nativeElement);
        else
            this.domHandler.relativePosition(this.panelViewChild.nativeElement, this.inputViewChild.nativeElement);
    };
    ColorPicker.prototype.onInputClick = function () {
        this.selfClick = true;
        this.togglePanel();
    };
    ColorPicker.prototype.togglePanel = function () {
        if (!this.panelVisible)
            this.show();
        else
            this.hide();
    };
    ColorPicker.prototype.onInputKeydown = function (event) {
        switch (event.which) {
            //space
            case 32:
                this.togglePanel();
                event.preventDefault();
                break;
            //escape and tab
            case 27:
            case 9:
                this.hide();
                break;
        }
    };
    ColorPicker.prototype.onPanelClick = function () {
        this.selfClick = true;
    };
    ColorPicker.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    ColorPicker.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    ColorPicker.prototype.setDisabledState = function (val) {
        this.disabled = val;
    };
    ColorPicker.prototype.bindDocumentClickListener = function () {
        var _this = this;
        if (!this.documentClickListener) {
            this.documentClickListener = this.renderer.listen('document', 'click', function () {
                if (!_this.selfClick) {
                    _this.panelVisible = false;
                    _this.unbindDocumentClickListener();
                }
                _this.selfClick = false;
                _this.cd.markForCheck();
            });
        }
    };
    ColorPicker.prototype.unbindDocumentClickListener = function () {
        if (this.documentClickListener) {
            this.documentClickListener();
            this.documentClickListener = null;
        }
    };
    ColorPicker.prototype.bindDocumentMousemoveListener = function () {
        var _this = this;
        if (!this.documentMousemoveListener) {
            this.documentMousemoveListener = this.renderer.listen('document', 'mousemove', function (event) {
                if (_this.colorDragging) {
                    _this.pickColor(event);
                }
                if (_this.hueDragging) {
                    _this.pickHue(event);
                }
            });
        }
    };
    ColorPicker.prototype.unbindDocumentMousemoveListener = function () {
        if (this.documentMousemoveListener) {
            this.documentMousemoveListener();
            this.documentMousemoveListener = null;
        }
    };
    ColorPicker.prototype.bindDocumentMouseupListener = function () {
        var _this = this;
        if (!this.documentMouseupListener) {
            this.documentMouseupListener = this.renderer.listen('document', 'mouseup', function () {
                _this.colorDragging = false;
                _this.hueDragging = false;
                _this.unbindDocumentMousemoveListener();
                _this.unbindDocumentMouseupListener();
            });
        }
    };
    ColorPicker.prototype.unbindDocumentMouseupListener = function () {
        if (this.documentMouseupListener) {
            this.documentMouseupListener();
            this.documentMouseupListener = null;
        }
    };
    ColorPicker.prototype.validateHSB = function (hsb) {
        return {
            h: Math.min(360, Math.max(0, hsb.h)),
            s: Math.min(100, Math.max(0, hsb.s)),
            b: Math.min(100, Math.max(0, hsb.b))
        };
    };
    ColorPicker.prototype.validateRGB = function (rgb) {
        return {
            r: Math.min(255, Math.max(0, rgb.r)),
            g: Math.min(255, Math.max(0, rgb.g)),
            b: Math.min(255, Math.max(0, rgb.b))
        };
    };
    ColorPicker.prototype.validateHEX = function (hex) {
        var len = 6 - hex.length;
        if (len > 0) {
            var o = [];
            for (var i = 0; i < len; i++) {
                o.push('0');
            }
            o.push(hex);
            hex = o.join('');
        }
        return hex;
    };
    ColorPicker.prototype.HEXtoRGB = function (hex) {
        var hexValue = parseInt(((hex.indexOf('#') > -1) ? hex.substring(1) : hex), 16);
        return { r: hexValue >> 16, g: (hexValue & 0x00FF00) >> 8, b: (hexValue & 0x0000FF) };
    };
    ColorPicker.prototype.HEXtoHSB = function (hex) {
        return this.RGBtoHSB(this.HEXtoRGB(hex));
    };
    ColorPicker.prototype.RGBtoHSB = function (rgb) {
        var hsb = {
            h: 0,
            s: 0,
            b: 0
        };
        var min = Math.min(rgb.r, rgb.g, rgb.b);
        var max = Math.max(rgb.r, rgb.g, rgb.b);
        var delta = max - min;
        hsb.b = max;
        if (max != 0) {
        }
        hsb.s = max != 0 ? 255 * delta / max : 0;
        if (hsb.s != 0) {
            if (rgb.r == max) {
                hsb.h = (rgb.g - rgb.b) / delta;
            }
            else if (rgb.g == max) {
                hsb.h = 2 + (rgb.b - rgb.r) / delta;
            }
            else {
                hsb.h = 4 + (rgb.r - rgb.g) / delta;
            }
        }
        else {
            hsb.h = -1;
        }
        hsb.h *= 60;
        if (hsb.h < 0) {
            hsb.h += 360;
        }
        hsb.s *= 100 / 255;
        hsb.b *= 100 / 255;
        return hsb;
    };
    ColorPicker.prototype.HSBtoRGB = function (hsb) {
        var rgb = {
            r: null, g: null, b: null
        };
        var h = Math.round(hsb.h);
        var s = Math.round(hsb.s * 255 / 100);
        var v = Math.round(hsb.b * 255 / 100);
        if (s == 0) {
            rgb = {
                r: v,
                g: v,
                b: v
            };
        }
        else {
            var t1 = v;
            var t2 = (255 - s) * v / 255;
            var t3 = (t1 - t2) * (h % 60) / 60;
            if (h == 360)
                h = 0;
            if (h < 60) {
                rgb.r = t1;
                rgb.b = t2;
                rgb.g = t2 + t3;
            }
            else if (h < 120) {
                rgb.g = t1;
                rgb.b = t2;
                rgb.r = t1 - t3;
            }
            else if (h < 180) {
                rgb.g = t1;
                rgb.r = t2;
                rgb.b = t2 + t3;
            }
            else if (h < 240) {
                rgb.b = t1;
                rgb.r = t2;
                rgb.g = t1 - t3;
            }
            else if (h < 300) {
                rgb.b = t1;
                rgb.g = t2;
                rgb.r = t2 + t3;
            }
            else if (h < 360) {
                rgb.r = t1;
                rgb.g = t2;
                rgb.b = t1 - t3;
            }
            else {
                rgb.r = 0;
                rgb.g = 0;
                rgb.b = 0;
            }
        }
        return { r: Math.round(rgb.r), g: Math.round(rgb.g), b: Math.round(rgb.b) };
    };
    ColorPicker.prototype.RGBtoHEX = function (rgb) {
        var hex = [
            rgb.r.toString(16),
            rgb.g.toString(16),
            rgb.b.toString(16)
        ];
        for (var key in hex) {
            if (hex[key].length == 1) {
                hex[key] = '0' + hex[key];
            }
        }
        return hex.join('');
    };
    ColorPicker.prototype.HSBtoHEX = function (hsb) {
        return this.RGBtoHEX(this.HSBtoRGB(hsb));
    };
    ColorPicker.prototype.ngOnDestroy = function () {
        this.unbindDocumentClickListener();
    };
    return ColorPicker;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ColorPicker.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ColorPicker.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ColorPicker.prototype, "inline", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ColorPicker.prototype, "format", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ColorPicker.prototype, "appendTo", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ColorPicker.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ColorPicker.prototype, "tabindex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ColorPicker.prototype, "inputId", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ColorPicker.prototype, "onChange", void 0);
__decorate([
    core_1.ViewChild('panel'),
    __metadata("design:type", core_1.ElementRef)
], ColorPicker.prototype, "panelViewChild", void 0);
__decorate([
    core_1.ViewChild('colorSelector'),
    __metadata("design:type", core_1.ElementRef)
], ColorPicker.prototype, "colorSelectorViewChild", void 0);
__decorate([
    core_1.ViewChild('colorHandle'),
    __metadata("design:type", core_1.ElementRef)
], ColorPicker.prototype, "colorHandleViewChild", void 0);
__decorate([
    core_1.ViewChild('hue'),
    __metadata("design:type", core_1.ElementRef)
], ColorPicker.prototype, "hueViewChild", void 0);
__decorate([
    core_1.ViewChild('hueHandle'),
    __metadata("design:type", core_1.ElementRef)
], ColorPicker.prototype, "hueHandleViewChild", void 0);
__decorate([
    core_1.ViewChild('input'),
    __metadata("design:type", core_1.ElementRef)
], ColorPicker.prototype, "inputViewChild", void 0);
ColorPicker = __decorate([
    core_1.Component({
        selector: 'p-colorPicker',
        template: "\n        <div [ngStyle]=\"style\" [class]=\"styleClass\" [ngClass]=\"{'ui-colorpicker ui-widget':true,'ui-colorpicker-overlay':!inline,'ui-colorpicker-dragging':colorDragging||hueDragging}\">\n            <input #input type=\"text\" *ngIf=\"!inline\" class=\"ui-colorpicker-preview ui-inputtext ui-state-default ui-corner-all\" readonly=\"readonly\" [ngClass]=\"{'ui-state-disabled': disabled}\"\n                (focus)=\"onInputFocus()\" (click)=\"onInputClick()\" (keydown)=\"onInputKeydown($event)\" [attr.id]=\"inputId\" [attr.tabindex]=\"tabindex\" [disabled]=\"disabled\"\n                [style.backgroundColor]=\"inputBgColor\">\n            <div #panel [ngClass]=\"{'ui-colorpicker-panel ui-corner-all': true, 'ui-colorpicker-overlay-panel ui-shadow':!inline, 'ui-state-disabled': disabled}\" (click)=\"onPanelClick()\"\n                [@panelState]=\"inline ? 'visible' : (panelVisible ? 'visible' : 'hidden')\" [style.display]=\"inline ? 'block' : (panelVisible ? 'block' : 'none')\">\n                <div class=\"ui-colorpicker-content\">\n                    <div #colorSelector class=\"ui-colorpicker-color-selector\" (mousedown)=\"onColorMousedown($event)\">\n                        <div class=\"ui-colorpicker-color\">\n                            <div #colorHandle class=\"ui-colorpicker-color-handle\"></div>\n                        </div>\n                    </div>\n                    <div #hue class=\"ui-colorpicker-hue\" (mousedown)=\"onHueMousedown($event)\">\n                        <div #hueHandle class=\"ui-colorpicker-hue-handle\"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    ",
        animations: [
            animations_1.trigger('panelState', [
                animations_1.state('hidden', animations_1.style({
                    opacity: 0
                })),
                animations_1.state('visible', animations_1.style({
                    opacity: 1
                })),
                animations_1.transition('visible => hidden', animations_1.animate('400ms ease-in')),
                animations_1.transition('hidden => visible', animations_1.animate('400ms ease-out'))
            ])
        ],
        providers: [domhandler_1.DomHandler, exports.COLORPICKER_VALUE_ACCESSOR]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2, core_1.ChangeDetectorRef])
], ColorPicker);
exports.ColorPicker = ColorPicker;
var ColorPickerModule = (function () {
    function ColorPickerModule() {
    }
    return ColorPickerModule;
}());
ColorPickerModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [ColorPicker],
        declarations: [ColorPicker]
    })
], ColorPickerModule);
exports.ColorPickerModule = ColorPickerModule;
//# sourceMappingURL=colorpicker.js.map

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var domhandler_1 = __webpack_require__(4);
exports.DomHandler = domhandler_1.DomHandler;
var treedragdropservice_1 = __webpack_require__(179);
exports.TreeDragDropService = treedragdropservice_1.TreeDragDropService;
var confirmationservice_1 = __webpack_require__(178);
exports.ConfirmationService = confirmationservice_1.ConfirmationService;
//# sourceMappingURL=api.js.map

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var animations_1 = __webpack_require__(13);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var shared_1 = __webpack_require__(7);
var button_1 = __webpack_require__(16);
var confirmationservice_1 = __webpack_require__(178);
var ConfirmDialog = (function () {
    function ConfirmDialog(el, domHandler, renderer, confirmationService) {
        var _this = this;
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
        this.confirmationService = confirmationService;
        this.acceptIcon = 'fa-check';
        this.acceptLabel = 'Yes';
        this.acceptVisible = true;
        this.rejectIcon = 'fa-close';
        this.rejectLabel = 'No';
        this.rejectVisible = true;
        this.closeOnEscape = true;
        this.closable = true;
        this.responsive = true;
        this.subscription = confirmationService.requireConfirmation$.subscribe(function (confirmation) {
            if (confirmation.key === _this.key) {
                _this.confirmation = confirmation;
                _this.message = _this.confirmation.message || _this.message;
                _this.icon = _this.confirmation.icon || _this.icon;
                _this.header = _this.confirmation.header || _this.header;
                _this.rejectVisible = _this.confirmation.rejectVisible == null ? _this.rejectVisible : _this.confirmation.rejectVisible;
                _this.acceptVisible = _this.confirmation.acceptVisible == null ? _this.acceptVisible : _this.confirmation.acceptVisible;
                if (_this.confirmation.accept) {
                    _this.confirmation.acceptEvent = new core_1.EventEmitter();
                    _this.confirmation.acceptEvent.subscribe(_this.confirmation.accept);
                }
                if (_this.confirmation.reject) {
                    _this.confirmation.rejectEvent = new core_1.EventEmitter();
                    _this.confirmation.rejectEvent.subscribe(_this.confirmation.reject);
                }
                _this.visible = true;
            }
        });
    }
    Object.defineProperty(ConfirmDialog.prototype, "visible", {
        get: function () {
            return this._visible;
        },
        set: function (val) {
            this._visible = val;
            if (this._visible) {
                if (!this.positionInitialized) {
                    this.center();
                    this.positionInitialized = true;
                }
                this.el.nativeElement.children[0].style.zIndex = ++domhandler_1.DomHandler.zindex;
                this.executePostShowActions = true;
            }
            if (this._visible)
                this.enableModality();
            else
                this.disableModality();
        },
        enumerable: true,
        configurable: true
    });
    ConfirmDialog.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.contentContainer = this.domHandler.findSingle(this.el.nativeElement, '.ui-dialog-content');
        if (this.responsive) {
            this.documentResponsiveListener = this.renderer.listen('window', 'resize', function (event) {
                _this.center();
            });
        }
        if (this.closeOnEscape && this.closable) {
            this.documentEscapeListener = this.renderer.listen('document', 'keydown', function (event) {
                if (event.which == 27) {
                    if (_this.el.nativeElement.children[0].style.zIndex == domhandler_1.DomHandler.zindex) {
                        _this.close(event);
                    }
                }
            });
        }
        if (this.appendTo) {
            if (this.appendTo === 'body')
                document.body.appendChild(this.el.nativeElement);
            else
                this.domHandler.appendChild(this.el.nativeElement, this.appendTo);
        }
    };
    ConfirmDialog.prototype.ngAfterViewChecked = function () {
        if (this.executePostShowActions) {
            this.domHandler.findSingle(this.el.nativeElement.children[0], 'button').focus();
            this.executePostShowActions = false;
        }
    };
    ConfirmDialog.prototype.center = function () {
        var container = this.el.nativeElement.children[0];
        var elementWidth = this.domHandler.getOuterWidth(container);
        var elementHeight = this.domHandler.getOuterHeight(container);
        if (elementWidth == 0 && elementHeight == 0) {
            container.style.visibility = 'hidden';
            container.style.display = 'block';
            elementWidth = this.domHandler.getOuterWidth(container);
            elementHeight = this.domHandler.getOuterHeight(container);
            container.style.display = 'none';
            container.style.visibility = 'visible';
        }
        var viewport = this.domHandler.getViewport();
        var x = (viewport.width - elementWidth) / 2;
        var y = (viewport.height - elementHeight) / 2;
        container.style.left = x + 'px';
        container.style.top = y + 'px';
    };
    ConfirmDialog.prototype.enableModality = function () {
        if (!this.mask) {
            this.mask = document.createElement('div');
            this.mask.style.zIndex = this.el.nativeElement.children[0].style.zIndex - 1;
            this.domHandler.addMultipleClasses(this.mask, 'ui-widget-overlay ui-dialog-mask');
            document.body.appendChild(this.mask);
            this.domHandler.addClass(document.body, 'ui-overflow-hidden');
        }
    };
    ConfirmDialog.prototype.disableModality = function () {
        if (this.mask) {
            document.body.removeChild(this.mask);
            this.domHandler.removeClass(document.body, 'ui-overflow-hidden');
            this.mask = null;
        }
    };
    ConfirmDialog.prototype.close = function (event) {
        if (this.confirmation.rejectEvent) {
            this.confirmation.rejectEvent.emit();
        }
        this.hide();
        event.preventDefault();
    };
    ConfirmDialog.prototype.hide = function () {
        this.visible = false;
    };
    ConfirmDialog.prototype.moveOnTop = function () {
        this.el.nativeElement.children[0].style.zIndex = ++domhandler_1.DomHandler.zindex;
    };
    ConfirmDialog.prototype.ngOnDestroy = function () {
        this.disableModality();
        if (this.documentResponsiveListener) {
            this.documentResponsiveListener();
        }
        if (this.documentEscapeListener) {
            this.documentEscapeListener();
        }
        if (this.appendTo && this.appendTo === 'body') {
            document.body.removeChild(this.el.nativeElement);
        }
        this.subscription.unsubscribe();
    };
    ConfirmDialog.prototype.accept = function () {
        if (this.confirmation.acceptEvent) {
            this.confirmation.acceptEvent.emit();
        }
        this.hide();
        this.confirmation = null;
    };
    ConfirmDialog.prototype.reject = function () {
        if (this.confirmation.rejectEvent) {
            this.confirmation.rejectEvent.emit();
        }
        this.hide();
        this.confirmation = null;
    };
    return ConfirmDialog;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ConfirmDialog.prototype, "header", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ConfirmDialog.prototype, "icon", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ConfirmDialog.prototype, "message", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ConfirmDialog.prototype, "acceptIcon", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ConfirmDialog.prototype, "acceptLabel", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ConfirmDialog.prototype, "acceptVisible", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ConfirmDialog.prototype, "rejectIcon", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ConfirmDialog.prototype, "rejectLabel", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ConfirmDialog.prototype, "rejectVisible", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ConfirmDialog.prototype, "width", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ConfirmDialog.prototype, "height", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ConfirmDialog.prototype, "closeOnEscape", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ConfirmDialog.prototype, "rtl", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ConfirmDialog.prototype, "closable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ConfirmDialog.prototype, "responsive", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ConfirmDialog.prototype, "appendTo", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ConfirmDialog.prototype, "key", void 0);
__decorate([
    core_1.ContentChild(shared_1.Footer),
    __metadata("design:type", Object)
], ConfirmDialog.prototype, "footer", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], ConfirmDialog.prototype, "visible", null);
ConfirmDialog = __decorate([
    core_1.Component({
        selector: 'p-confirmDialog',
        template: "\n        <div [ngClass]=\"{'ui-dialog ui-confirmdialog ui-widget ui-widget-content ui-corner-all ui-shadow':true,'ui-dialog-rtl':rtl}\" \n            [style.display]=\"visible ? 'block' : 'none'\" [style.width.px]=\"width\" [style.height.px]=\"height\" (mousedown)=\"moveOnTop()\" [@dialogState]=\"visible ? 'visible' : 'hidden'\">\n            <div class=\"ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top\">\n                <span class=\"ui-dialog-title\" *ngIf=\"header\">{{header}}</span>\n                <a *ngIf=\"closable\" [ngClass]=\"{'ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all':true}\" href=\"#\" role=\"button\" (click)=\"close($event)\">\n                    <span class=\"fa fa-fw fa-close\"></span>\n                </a>\n            </div>\n            <div class=\"ui-dialog-content ui-widget-content\">\n                <i [ngClass]=\"'fa'\" [class]=\"icon\"></i>\n                <span class=\"ui-confirmdialog-message\" [innerHTML]=\"message\"></span>\n            </div>\n            <div class=\"ui-dialog-footer ui-widget-content\" *ngIf=\"footer\">\n                <ng-content select=\"p-footer\"></ng-content>\n            </div>\n            <div class=\"ui-dialog-footer ui-widget-content\" *ngIf=\"!footer\">\n                <button type=\"button\" pButton [icon]=\"acceptIcon\" [label]=\"acceptLabel\" (click)=\"accept()\" *ngIf=\"acceptVisible\"></button>\n                <button type=\"button\" pButton [icon]=\"rejectIcon\" [label]=\"rejectLabel\" (click)=\"reject()\" *ngIf=\"rejectVisible\"></button>\n            </div>\n        </div>\n    ",
        animations: [
            animations_1.trigger('dialogState', [
                animations_1.state('hidden', animations_1.style({
                    opacity: 0
                })),
                animations_1.state('visible', animations_1.style({
                    opacity: 1
                })),
                animations_1.transition('visible => hidden', animations_1.animate('400ms ease-in')),
                animations_1.transition('hidden => visible', animations_1.animate('400ms ease-out'))
            ])
        ],
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler,
        core_1.Renderer2, confirmationservice_1.ConfirmationService])
], ConfirmDialog);
exports.ConfirmDialog = ConfirmDialog;
var ConfirmDialogModule = (function () {
    function ConfirmDialogModule() {
    }
    return ConfirmDialogModule;
}());
ConfirmDialogModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, button_1.ButtonModule],
        exports: [ConfirmDialog, button_1.ButtonModule, shared_1.SharedModule],
        declarations: [ConfirmDialog]
    })
], ConfirmDialogModule);
exports.ConfirmDialogModule = ConfirmDialogModule;
//# sourceMappingURL=confirmdialog.js.map

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var router_1 = __webpack_require__(5);
var ContextMenuSub = (function () {
    function ContextMenuSub(domHandler, contextMenu) {
        this.domHandler = domHandler;
        this.contextMenu = contextMenu;
    }
    ContextMenuSub.prototype.onItemMouseEnter = function (event, item, menuitem) {
        if (menuitem.disabled) {
            return;
        }
        this.activeItem = item;
        var nextElement = item.children[0].nextElementSibling;
        if (nextElement) {
            var sublist = nextElement.children[0];
            sublist.style.zIndex = ++domhandler_1.DomHandler.zindex;
            this.position(sublist, item);
        }
    };
    ContextMenuSub.prototype.onItemMouseLeave = function (event, link) {
        this.activeItem = null;
    };
    ContextMenuSub.prototype.itemClick = function (event, item) {
        if (item.disabled) {
            event.preventDefault();
            return;
        }
        if (!item.url) {
            event.preventDefault();
        }
        if (item.command) {
            item.command({
                originalEvent: event,
                item: item
            });
        }
    };
    ContextMenuSub.prototype.listClick = function (event) {
        this.activeItem = null;
    };
    ContextMenuSub.prototype.position = function (sublist, item) {
        this.containerLeft = this.domHandler.getOffset(item.parentElement);
        var viewport = this.domHandler.getViewport();
        var sublistWidth = sublist.offsetParent ? sublist.offsetWidth : this.domHandler.getHiddenElementOuterWidth(sublist);
        var itemOuterWidth = this.domHandler.getOuterWidth(item.children[0]);
        sublist.style.top = '0px';
        if ((parseInt(this.containerLeft.left) + itemOuterWidth + sublistWidth) > (viewport.width - this.calculateScrollbarWidth())) {
            sublist.style.left = -sublistWidth + 'px';
        }
        else {
            sublist.style.left = itemOuterWidth + 'px';
        }
    };
    ContextMenuSub.prototype.calculateScrollbarWidth = function () {
        var scrollDiv = document.createElement("div");
        scrollDiv.className = "ui-scrollbar-measure";
        document.body.appendChild(scrollDiv);
        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
        return scrollbarWidth;
    };
    return ContextMenuSub;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ContextMenuSub.prototype, "item", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ContextMenuSub.prototype, "root", void 0);
ContextMenuSub = __decorate([
    core_1.Component({
        selector: 'p-contextMenuSub',
        template: "\n        <ul [ngClass]=\"{'ui-helper-reset':root, 'ui-widget-content ui-corner-all ui-helper-clearfix ui-menu-child ui-shadow':!root}\" class=\"ui-menu-list\"\n            (click)=\"listClick($event)\">\n            <ng-template ngFor let-child [ngForOf]=\"(root ? item : item.items)\">\n                <li *ngIf=\"child.separator\" class=\"ui-menu-separator ui-widget-content\">\n                <li *ngIf=\"!child.separator\" #item [ngClass]=\"{'ui-menuitem ui-widget ui-corner-all':true,'ui-menu-parent':child.items,'ui-menuitem-active':item==activeItem}\"\n                    (mouseenter)=\"onItemMouseEnter($event,item,child)\" (mouseleave)=\"onItemMouseLeave($event,item)\" [style.display]=\"child.visible === false ? 'none' : 'block'\">\n                    <a *ngIf=\"!child.routerLink\" [href]=\"child.url||'#'\" [attr.target]=\"child.target\" (click)=\"itemClick($event, child)\"\n                        [ngClass]=\"{'ui-menuitem-link ui-corner-all':true,'ui-state-disabled':child.disabled}\" [ngStyle]=\"child.style\" [class]=\"child.styleClass\">\n                        <span class=\"ui-submenu-icon fa fa-fw fa-caret-right\" *ngIf=\"child.items\"></span>\n                        <span class=\"ui-menuitem-icon fa fa-fw\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                    </a>\n                    <a *ngIf=\"child.routerLink\" [routerLink]=\"child.routerLink\" [routerLinkActive]=\"'ui-state-active'\" [routerLinkActiveOptions]=\"child.routerLinkActiveOptions||{exact:false}\" [attr.target]=\"child.target\"\n                        (click)=\"itemClick($event, child)\" [ngClass]=\"{'ui-menuitem-link ui-corner-all':true,'ui-state-disabled':child.disabled}\" [ngStyle]=\"child.style\" [class]=\"child.styleClass\">\n                        <span class=\"ui-submenu-icon fa fa-fw fa-caret-right\" *ngIf=\"child.items\"></span>\n                        <span class=\"ui-menuitem-icon fa fa-fw\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                    </a>\n                    <p-contextMenuSub class=\"ui-submenu\" [item]=\"child\" *ngIf=\"child.items\"></p-contextMenuSub>\n                </li>\n            </ng-template>\n        </ul>\n    ",
        providers: [domhandler_1.DomHandler]
    }),
    __param(1, core_1.Inject(core_1.forwardRef(function () { return ContextMenu; }))),
    __metadata("design:paramtypes", [domhandler_1.DomHandler, ContextMenu])
], ContextMenuSub);
exports.ContextMenuSub = ContextMenuSub;
var ContextMenu = (function () {
    function ContextMenu(el, domHandler, renderer) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
    }
    ContextMenu.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.container = this.containerViewChild.nativeElement;
        this.documentClickListener = this.renderer.listen('document', 'click', function () {
            _this.hide();
        });
        if (this.global) {
            this.rightClickListener = this.renderer.listen('document', 'contextmenu', function (event) {
                _this.show(event);
                event.preventDefault();
            });
        }
        else if (this.target) {
            this.rightClickListener = this.renderer.listen(this.target, 'contextmenu', function (event) {
                _this.show(event);
                event.preventDefault();
                event.stopPropagation();
            });
        }
        if (this.appendTo) {
            if (this.appendTo === 'body')
                document.body.appendChild(this.container);
            else
                this.domHandler.appendChild(this.container, this.appendTo);
        }
    };
    ContextMenu.prototype.show = function (event) {
        this.position(event);
        this.visible = true;
        this.domHandler.fadeIn(this.container, 250);
        if (event) {
            event.preventDefault();
        }
    };
    ContextMenu.prototype.hide = function () {
        this.visible = false;
    };
    ContextMenu.prototype.toggle = function (event) {
        if (this.visible)
            this.hide();
        else
            this.show(event);
    };
    ContextMenu.prototype.position = function (event) {
        if (event) {
            var left = event.pageX + 1;
            var top_1 = event.pageY + 1;
            var width = this.container.offsetParent ? this.container.offsetWidth : this.domHandler.getHiddenElementOuterWidth(this.container);
            var height = this.container.offsetParent ? this.container.offsetHeight : this.domHandler.getHiddenElementOuterHeight(this.container);
            var viewport = this.domHandler.getViewport();
            //flip
            if (left + width - document.body.scrollLeft > viewport.width) {
                left -= width;
            }
            //flip
            if (top_1 + height - document.body.scrollTop > viewport.height) {
                top_1 -= height;
            }
            //fit
            if (left < document.body.scrollLeft) {
                left = document.body.scrollLeft;
            }
            //fit
            if (top_1 < document.body.scrollTop) {
                top_1 = document.body.scrollTop;
            }
            this.container.style.left = left + 'px';
            this.container.style.top = top_1 + 'px';
        }
    };
    ContextMenu.prototype.ngOnDestroy = function () {
        if (this.documentClickListener) {
            this.documentClickListener();
        }
        if (this.rightClickListener) {
            this.rightClickListener();
        }
        if (this.appendTo) {
            this.el.nativeElement.appendChild(this.container);
        }
    };
    return ContextMenu;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], ContextMenu.prototype, "model", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ContextMenu.prototype, "global", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ContextMenu.prototype, "target", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ContextMenu.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ContextMenu.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ContextMenu.prototype, "appendTo", void 0);
__decorate([
    core_1.ViewChild('container'),
    __metadata("design:type", core_1.ElementRef)
], ContextMenu.prototype, "containerViewChild", void 0);
ContextMenu = __decorate([
    core_1.Component({
        selector: 'p-contextMenu',
        template: "\n        <div #container [ngClass]=\"'ui-contextmenu ui-menu ui-widget ui-widget-content ui-corner-all ui-helper-clearfix ui-menu-dynamic ui-shadow'\" \n            [class]=\"styleClass\" [ngStyle]=\"style\" [style.display]=\"visible ? 'block' : 'none'\">\n            <p-contextMenuSub [item]=\"model\" root=\"root\"></p-contextMenuSub>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2])
], ContextMenu);
exports.ContextMenu = ContextMenu;
var ContextMenuModule = (function () {
    function ContextMenuModule() {
    }
    return ContextMenuModule;
}());
ContextMenuModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, router_1.RouterModule],
        exports: [ContextMenu, router_1.RouterModule],
        declarations: [ContextMenu, ContextMenuSub]
    })
], ContextMenuModule);
exports.ContextMenuModule = ContextMenuModule;
//# sourceMappingURL=contextmenu.js.map

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var shared_1 = __webpack_require__(7);
var paginator_1 = __webpack_require__(24);
var DataGrid = (function () {
    function DataGrid(el, differs) {
        this.el = el;
        this.differs = differs;
        this.pageLinks = 5;
        this.emptyMessage = 'No records found';
        this.onLazyLoad = new core_1.EventEmitter();
        this.paginatorPosition = 'bottom';
        this.alwaysShowPaginator = true;
        this.trackBy = function (index, item) { return item; };
        this.immutable = true;
        this.onPage = new core_1.EventEmitter();
        this.first = 0;
        this.page = 0;
        this.differ = differs.find([]).create(null);
    }
    DataGrid.prototype.ngAfterViewInit = function () {
        if (this.lazy) {
            this.onLazyLoad.emit({
                first: this.first,
                rows: this.rows
            });
        }
    };
    DataGrid.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.templates.forEach(function (item) {
            switch (item.getType()) {
                case 'item':
                    _this.itemTemplate = item.template;
                    break;
                default:
                    _this.itemTemplate = item.template;
                    break;
            }
        });
    };
    Object.defineProperty(DataGrid.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (val) {
            this._value = val;
            if (this.immutable) {
                this.handleDataChange();
            }
        },
        enumerable: true,
        configurable: true
    });
    DataGrid.prototype.handleDataChange = function () {
        if (this.paginator) {
            this.updatePaginator();
        }
        this.updateDataToRender(this.value);
    };
    DataGrid.prototype.ngDoCheck = function () {
        if (!this.immutable) {
            var changes = this.differ.diff(this.value);
            if (changes) {
                this.handleDataChange();
            }
        }
    };
    DataGrid.prototype.updatePaginator = function () {
        //total records
        this.totalRecords = this.lazy ? this.totalRecords : (this.value ? this.value.length : 0);
        //first
        if (this.totalRecords && this.first >= this.totalRecords) {
            var numberOfPages = Math.ceil(this.totalRecords / this.rows);
            this.first = Math.max((numberOfPages - 1) * this.rows, 0);
        }
    };
    DataGrid.prototype.paginate = function (event) {
        this.first = event.first;
        this.rows = event.rows;
        if (this.lazy) {
            this.onLazyLoad.emit(this.createLazyLoadMetadata());
        }
        else {
            this.updateDataToRender(this.value);
        }
        this.onPage.emit({
            first: this.first,
            rows: this.rows
        });
    };
    DataGrid.prototype.updateDataToRender = function (datasource) {
        if (this.paginator && datasource) {
            this.dataToRender = [];
            var startIndex = this.lazy ? 0 : this.first;
            for (var i = startIndex; i < (startIndex + this.rows); i++) {
                if (i >= datasource.length) {
                    break;
                }
                this.dataToRender.push(datasource[i]);
            }
        }
        else {
            this.dataToRender = datasource;
        }
    };
    DataGrid.prototype.isEmpty = function () {
        return !this.dataToRender || (this.dataToRender.length == 0);
    };
    DataGrid.prototype.createLazyLoadMetadata = function () {
        return {
            first: this.first,
            rows: this.rows
        };
    };
    DataGrid.prototype.getBlockableElement = function () {
        return this.el.nativeElement.children[0];
    };
    return DataGrid;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataGrid.prototype, "paginator", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], DataGrid.prototype, "rows", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], DataGrid.prototype, "totalRecords", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], DataGrid.prototype, "pageLinks", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], DataGrid.prototype, "rowsPerPageOptions", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataGrid.prototype, "lazy", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataGrid.prototype, "emptyMessage", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataGrid.prototype, "onLazyLoad", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DataGrid.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataGrid.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataGrid.prototype, "paginatorPosition", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataGrid.prototype, "alwaysShowPaginator", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Function)
], DataGrid.prototype, "trackBy", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataGrid.prototype, "immutable", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataGrid.prototype, "onPage", void 0);
__decorate([
    core_1.ContentChild(shared_1.Header),
    __metadata("design:type", Object)
], DataGrid.prototype, "header", void 0);
__decorate([
    core_1.ContentChild(shared_1.Footer),
    __metadata("design:type", Object)
], DataGrid.prototype, "footer", void 0);
__decorate([
    core_1.ContentChildren(shared_1.PrimeTemplate),
    __metadata("design:type", core_1.QueryList)
], DataGrid.prototype, "templates", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DataGrid.prototype, "value", null);
DataGrid = __decorate([
    core_1.Component({
        selector: 'p-dataGrid',
        template: "\n        <div [ngClass]=\"'ui-datagrid ui-widget'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-datagrid-header ui-widget-header ui-corner-top\" *ngIf=\"header\">\n                <ng-content select=\"p-header\"></ng-content>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"paginate($event)\" styleClass=\"ui-paginator-bottom\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && paginatorPosition!='bottom' || paginatorPosition =='both'\"></p-paginator>\n            <div class=\"ui-datagrid-content ui-widget-content\">\n                <div class=\"ui-g\">\n                    <ng-template ngFor [ngForOf]=\"dataToRender\" [ngForTemplate]=\"itemTemplate\" [ngForTrackBy]=\"trackBy\"></ng-template>\n                    <div *ngIf=\"isEmpty()\" class=\"ui-widget-content ui-g-12\">{{emptyMessage}}</div>\n                </div>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"paginate($event)\" styleClass=\"ui-paginator-bottom\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && paginatorPosition!='top' || paginatorPosition =='both'\"></p-paginator>\n            <div class=\"ui-datagrid-footer ui-widget-header ui-corner-top\" *ngIf=\"footer\">\n                <ng-content select=\"p-footer\"></ng-content>\n            </div>\n        </div>\n    "
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, core_1.IterableDiffers])
], DataGrid);
exports.DataGrid = DataGrid;
var DataGridModule = (function () {
    function DataGridModule() {
    }
    return DataGridModule;
}());
DataGridModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, shared_1.SharedModule, paginator_1.PaginatorModule],
        exports: [DataGrid, shared_1.SharedModule],
        declarations: [DataGrid]
    })
], DataGridModule);
exports.DataGridModule = DataGridModule;
//# sourceMappingURL=datagrid.js.map

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var shared_1 = __webpack_require__(7);
var paginator_1 = __webpack_require__(24);
var DataList = (function () {
    function DataList(el, differs) {
        this.el = el;
        this.differs = differs;
        this.pageLinks = 5;
        this.onLazyLoad = new core_1.EventEmitter();
        this.paginatorPosition = 'bottom';
        this.emptyMessage = 'No records found';
        this.alwaysShowPaginator = true;
        this.trackBy = function (index, item) { return item; };
        this.immutable = true;
        this.onPage = new core_1.EventEmitter();
        this.first = 0;
        this.page = 0;
        this.differ = differs.find([]).create(null);
    }
    DataList.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.templates.forEach(function (item) {
            switch (item.getType()) {
                case 'item':
                    _this.itemTemplate = item.template;
                    break;
                default:
                    _this.itemTemplate = item.template;
                    break;
            }
        });
    };
    DataList.prototype.ngAfterViewInit = function () {
        if (this.lazy) {
            this.onLazyLoad.emit({
                first: this.first,
                rows: this.rows
            });
        }
    };
    Object.defineProperty(DataList.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (val) {
            this._value = val;
            if (this.immutable) {
                this.handleDataChange();
            }
        },
        enumerable: true,
        configurable: true
    });
    DataList.prototype.handleDataChange = function () {
        if (this.paginator) {
            this.updatePaginator();
        }
        this.updateDataToRender(this.value);
    };
    DataList.prototype.ngDoCheck = function () {
        if (!this.immutable) {
            var changes = this.differ.diff(this.value);
            if (changes) {
                this.handleDataChange();
            }
        }
    };
    DataList.prototype.updatePaginator = function () {
        //total records
        this.totalRecords = this.lazy ? this.totalRecords : (this.value ? this.value.length : 0);
        //first
        if (this.totalRecords && this.first >= this.totalRecords) {
            var numberOfPages = Math.ceil(this.totalRecords / this.rows);
            this.first = Math.max((numberOfPages - 1) * this.rows, 0);
        }
    };
    DataList.prototype.paginate = function (event) {
        this.first = event.first;
        this.rows = event.rows;
        if (this.lazy) {
            this.onLazyLoad.emit(this.createLazyLoadMetadata());
        }
        else {
            this.updateDataToRender(this.value);
        }
        this.onPage.emit({
            first: this.first,
            rows: this.rows
        });
    };
    DataList.prototype.updateDataToRender = function (datasource) {
        if (this.paginator && datasource) {
            this.dataToRender = [];
            var startIndex = this.lazy ? 0 : this.first;
            for (var i = startIndex; i < (startIndex + this.rows); i++) {
                if (i >= datasource.length) {
                    break;
                }
                this.dataToRender.push(datasource[i]);
            }
        }
        else {
            this.dataToRender = datasource;
        }
    };
    DataList.prototype.isEmpty = function () {
        return !this.dataToRender || (this.dataToRender.length == 0);
    };
    DataList.prototype.createLazyLoadMetadata = function () {
        return {
            first: this.first,
            rows: this.rows
        };
    };
    DataList.prototype.getBlockableElement = function () {
        return this.el.nativeElement.children[0];
    };
    return DataList;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataList.prototype, "paginator", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], DataList.prototype, "rows", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], DataList.prototype, "totalRecords", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], DataList.prototype, "pageLinks", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], DataList.prototype, "rowsPerPageOptions", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataList.prototype, "lazy", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataList.prototype, "onLazyLoad", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DataList.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataList.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataList.prototype, "paginatorPosition", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataList.prototype, "emptyMessage", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataList.prototype, "alwaysShowPaginator", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Function)
], DataList.prototype, "trackBy", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataList.prototype, "immutable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataList.prototype, "scrollable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataList.prototype, "scrollHeight", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataList.prototype, "onPage", void 0);
__decorate([
    core_1.ContentChild(shared_1.Header),
    __metadata("design:type", Object)
], DataList.prototype, "header", void 0);
__decorate([
    core_1.ContentChild(shared_1.Footer),
    __metadata("design:type", Object)
], DataList.prototype, "footer", void 0);
__decorate([
    core_1.ContentChildren(shared_1.PrimeTemplate),
    __metadata("design:type", core_1.QueryList)
], DataList.prototype, "templates", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DataList.prototype, "value", null);
DataList = __decorate([
    core_1.Component({
        selector: 'p-dataList',
        template: "\n        <div [ngClass]=\"{'ui-datalist ui-widget': true, 'ui-datalist-scrollable': scrollable}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-datalist-header ui-widget-header ui-corner-top\" *ngIf=\"header\">\n                <ng-content select=\"p-header\"></ng-content>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" [alwaysShow]=\"alwaysShowPaginator\"\n            (onPageChange)=\"paginate($event)\" styleClass=\"ui-paginator-bottom\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator  && paginatorPosition!='bottom' || paginatorPosition =='both'\"></p-paginator>\n            <div class=\"ui-datalist-content ui-widget-content\" [ngStyle]=\"{'max-height': scrollHeight}\">\n                <div *ngIf=\"isEmpty()\" class=\"ui-datalist-emptymessage\">{{emptyMessage}}</div>\n                <ul class=\"ui-datalist-data\">\n                    <li *ngFor=\"let item of dataToRender;let i = index;trackBy: trackBy\">\n                        <ng-template [pTemplateWrapper]=\"itemTemplate\" [item]=\"item\" [index]=\"i\"></ng-template>\n                    </li>\n                </ul>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" [alwaysShow]=\"alwaysShowPaginator\"\n            (onPageChange)=\"paginate($event)\" styleClass=\"ui-paginator-bottom\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator  && paginatorPosition!='top' || paginatorPosition =='both'\"></p-paginator>\n            <div class=\"ui-datalist-footer ui-widget-header ui-corner-bottom\" *ngIf=\"footer\">\n                <ng-content select=\"p-footer\"></ng-content>\n            </div>\n        </div>\n    "
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, core_1.IterableDiffers])
], DataList);
exports.DataList = DataList;
var DataListModule = (function () {
    function DataListModule() {
    }
    return DataListModule;
}());
DataListModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, shared_1.SharedModule, paginator_1.PaginatorModule],
        exports: [DataList, shared_1.SharedModule],
        declarations: [DataList]
    })
], DataListModule);
exports.DataListModule = DataListModule;
//# sourceMappingURL=datalist.js.map

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var shared_1 = __webpack_require__(7);
var domhandler_1 = __webpack_require__(4);
var DataScroller = (function () {
    function DataScroller(el, renderer, domHandler) {
        this.el = el;
        this.renderer = renderer;
        this.domHandler = domHandler;
        this.onLazyLoad = new core_1.EventEmitter();
        this.buffer = 0.9;
        this.dataToRender = [];
        this.first = 0;
    }
    DataScroller.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.lazy) {
            this.load();
        }
        if (this.loader) {
            this.scrollFunction = this.renderer.listen(this.loader, 'click', function () {
                _this.load();
            });
        }
        else {
            this.bindScrollListener();
        }
    };
    DataScroller.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.templates.forEach(function (item) {
            switch (item.getType()) {
                case 'item':
                    _this.itemTemplate = item.template;
                    break;
                default:
                    _this.itemTemplate = item.template;
                    break;
            }
        });
    };
    Object.defineProperty(DataScroller.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (val) {
            this._value = val;
            this.handleDataChange();
        },
        enumerable: true,
        configurable: true
    });
    DataScroller.prototype.handleDataChange = function () {
        if (this.lazy)
            this.dataToRender = this.value;
        else
            this.load();
    };
    DataScroller.prototype.load = function () {
        if (this.lazy) {
            this.onLazyLoad.emit({
                first: this.first,
                rows: this.rows
            });
            this.first = this.first + this.rows;
        }
        else {
            if (this.value) {
                for (var i = this.first; i < (this.first + this.rows); i++) {
                    if (i >= this.value.length) {
                        break;
                    }
                    this.dataToRender.push(this.value[i]);
                }
                this.first = this.first + this.rows;
            }
        }
    };
    DataScroller.prototype.reset = function () {
        this.first = 0;
        this.dataToRender = [];
        this.load();
    };
    DataScroller.prototype.isEmpty = function () {
        return !this.dataToRender || (this.dataToRender.length == 0);
    };
    DataScroller.prototype.createLazyLoadMetadata = function () {
        return {
            first: this.first,
            rows: this.rows
        };
    };
    DataScroller.prototype.bindScrollListener = function () {
        var _this = this;
        if (this.inline) {
            this.contentElement = this.contentViewChild.nativeElement;
            this.scrollFunction = this.renderer.listen(this.contentElement, 'scroll', function () {
                var scrollTop = _this.contentElement.scrollTop;
                var scrollHeight = _this.contentElement.scrollHeight;
                var viewportHeight = _this.contentElement.clientHeight;
                if ((scrollTop >= ((scrollHeight * _this.buffer) - (viewportHeight)))) {
                    _this.load();
                }
            });
        }
        else {
            this.scrollFunction = this.renderer.listen('window', 'scroll', function () {
                var docBody = document.body;
                var docElement = document.documentElement;
                var scrollTop = (window.pageYOffset || document.documentElement.scrollTop);
                var winHeight = docElement.clientHeight;
                var docHeight = Math.max(docBody.scrollHeight, docBody.offsetHeight, winHeight, docElement.scrollHeight, docElement.offsetHeight);
                if (scrollTop >= ((docHeight * _this.buffer) - winHeight)) {
                    _this.load();
                }
            });
        }
    };
    DataScroller.prototype.ngOnDestroy = function () {
        //unbind
        if (this.scrollFunction) {
            this.scrollFunction();
            this.contentElement = null;
        }
    };
    return DataScroller;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], DataScroller.prototype, "rows", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataScroller.prototype, "lazy", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataScroller.prototype, "onLazyLoad", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DataScroller.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataScroller.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], DataScroller.prototype, "buffer", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataScroller.prototype, "inline", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DataScroller.prototype, "scrollHeight", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DataScroller.prototype, "loader", void 0);
__decorate([
    core_1.ViewChild('content'),
    __metadata("design:type", core_1.ElementRef)
], DataScroller.prototype, "contentViewChild", void 0);
__decorate([
    core_1.ContentChild(shared_1.Header),
    __metadata("design:type", Object)
], DataScroller.prototype, "header", void 0);
__decorate([
    core_1.ContentChild(shared_1.Footer),
    __metadata("design:type", Object)
], DataScroller.prototype, "footer", void 0);
__decorate([
    core_1.ContentChildren(shared_1.PrimeTemplate),
    __metadata("design:type", core_1.QueryList)
], DataScroller.prototype, "templates", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DataScroller.prototype, "value", null);
DataScroller = __decorate([
    core_1.Component({
        selector: 'p-dataScroller',
        template: "\n    <div [ngClass]=\"{'ui-datascroller ui-widget': true, 'ui-datascroller-inline': inline}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n        <div class=\"ui-datascroller-header ui-widget-header ui-corner-top\" *ngIf=\"header\">\n            <ng-content select=\"p-header\"></ng-content>\n        </div>\n        <div #content class=\"ui-datascroller-content ui-widget-content\" [ngStyle]=\"{'max-height': scrollHeight}\">\n            <ul class=\"ui-datascroller-list\">\n                <li *ngFor=\"let item of dataToRender\">\n                    <ng-template [pTemplateWrapper]=\"itemTemplate\" [item]=\"item\"></ng-template>\n                </li>\n            </ul>\n        </div>\n        <div class=\"ui-datascroller-footer ui-widget-header ui-corner-bottom\" *ngIf=\"footer\">\n            <ng-content select=\"p-footer\"></ng-content>\n        </div>\n    </div>\n    ",
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, core_1.Renderer2, domhandler_1.DomHandler])
], DataScroller);
exports.DataScroller = DataScroller;
var DataScrollerModule = (function () {
    function DataScrollerModule() {
    }
    return DataScrollerModule;
}());
DataScrollerModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, shared_1.SharedModule],
        exports: [DataScroller, shared_1.SharedModule],
        declarations: [DataScroller]
    })
], DataScrollerModule);
exports.DataScrollerModule = DataScrollerModule;
//# sourceMappingURL=datascroller.js.map

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var forms_1 = __webpack_require__(6);
var shared_1 = __webpack_require__(7);
var paginator_1 = __webpack_require__(24);
var shared_2 = __webpack_require__(7);
var domhandler_1 = __webpack_require__(4);
var objectutils_1 = __webpack_require__(18);
var DTRadioButton = (function () {
    function DTRadioButton() {
        this.onClick = new core_1.EventEmitter();
    }
    DTRadioButton.prototype.handleClick = function (event) {
        this.onClick.emit(event);
    };
    return DTRadioButton;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DTRadioButton.prototype, "checked", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DTRadioButton.prototype, "onClick", void 0);
DTRadioButton = __decorate([
    core_1.Component({
        selector: 'p-dtRadioButton',
        template: "\n        <div class=\"ui-radiobutton ui-widget\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input type=\"radio\" [checked]=\"checked\">\n            </div>\n            <div class=\"ui-radiobutton-box ui-widget ui-radiobutton-relative ui-state-default\" (click)=\"handleClick($event)\"\n                        (mouseenter)=\"hover=true\" (mouseleave)=\"hover=false\"\n                        [ngClass]=\"{'ui-state-hover':hover,'ui-state-active':checked}\">\n                <span class=\"ui-radiobutton-icon ui-clickable\" [ngClass]=\"{'fa fa-circle':checked}\"></span>\n            </div>\n        </div>\n    "
    })
], DTRadioButton);
exports.DTRadioButton = DTRadioButton;
var DTCheckbox = (function () {
    function DTCheckbox() {
        this.onChange = new core_1.EventEmitter();
    }
    DTCheckbox.prototype.handleClick = function (event) {
        if (!this.disabled) {
            this.onChange.emit({ originalEvent: event, checked: !this.checked });
        }
    };
    return DTCheckbox;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DTCheckbox.prototype, "checked", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DTCheckbox.prototype, "disabled", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DTCheckbox.prototype, "onChange", void 0);
DTCheckbox = __decorate([
    core_1.Component({
        selector: 'p-dtCheckbox',
        template: "\n        <div class=\"ui-chkbox ui-widget\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\">\n            </div>\n            <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" (click)=\"handleClick($event)\"\n                        (mouseover)=\"hover=true\" (mouseout)=\"hover=false\" \n                        [ngClass]=\"{'ui-state-hover':hover&&!disabled,'ui-state-active':checked&&!disabled,'ui-state-disabled':disabled}\">\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'fa fa-check':checked}\"></span>\n            </div>\n        </div>\n    "
    })
], DTCheckbox);
exports.DTCheckbox = DTCheckbox;
var RowExpansionLoader = (function () {
    function RowExpansionLoader(viewContainer) {
        this.viewContainer = viewContainer;
    }
    RowExpansionLoader.prototype.ngOnInit = function () {
        this.view = this.viewContainer.createEmbeddedView(this.template, {
            '\$implicit': this.rowData,
            'rowIndex': this.rowIndex
        });
    };
    RowExpansionLoader.prototype.ngOnDestroy = function () {
        this.view.destroy();
    };
    return RowExpansionLoader;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", core_1.TemplateRef)
], RowExpansionLoader.prototype, "template", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], RowExpansionLoader.prototype, "rowData", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], RowExpansionLoader.prototype, "rowIndex", void 0);
RowExpansionLoader = __decorate([
    core_1.Component({
        selector: 'p-rowExpansionLoader',
        template: ""
    }),
    __metadata("design:paramtypes", [core_1.ViewContainerRef])
], RowExpansionLoader);
exports.RowExpansionLoader = RowExpansionLoader;
var ColumnHeaders = (function () {
    function ColumnHeaders(dt) {
        this.dt = dt;
    }
    return ColumnHeaders;
}());
__decorate([
    core_1.Input("pColumnHeaders"),
    __metadata("design:type", Array)
], ColumnHeaders.prototype, "columns", void 0);
ColumnHeaders = __decorate([
    core_1.Component({
        selector: '[pColumnHeaders]',
        template: "\n        <ng-template ngFor let-col [ngForOf]=\"columns\" let-lastCol=\"last\">\n            <th #headerCell [attr.id]=\"col.colId\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\" [style.display]=\"col.hidden ? 'none' : 'table-cell'\" (click)=\"dt.sort($event,col)\" [attr.colspan]=\"col.colspan\" [attr.rowspan]=\"col.rowspan\"\n                [ngClass]=\"{'ui-state-default ui-unselectable-text':true, 'ui-sortable-column': col.sortable, 'ui-state-active': dt.isSorted(col), 'ui-resizable-column': dt.resizableColumns, 'ui-selection-column':col.selectionMode}\" \n                (dragstart)=\"dt.onColumnDragStart($event)\" (dragleave)=\"dt.onColumnDragleave($event)\" (drop)=\"dt.onColumnDrop($event)\" (mousedown)=\"dt.onHeaderMousedown($event,headerCell)\"\n                [attr.tabindex]=\"col.sortable ? tabindex : null\" (keydown)=\"dt.onHeaderKeydown($event,col)\">\n                <span class=\"ui-column-resizer ui-clickable\" *ngIf=\"dt.resizableColumns && ((dt.columnResizeMode == 'fit' && !lastCol) || dt.columnResizeMode == 'expand')\" (mousedown)=\"dt.initColumnResize($event)\"></span>\n                <span class=\"ui-column-title\" *ngIf=\"!col.selectionMode&&!col.headerTemplate\">{{col.header}}</span>\n                <span class=\"ui-column-title\" *ngIf=\"col.headerTemplate\">\n                    <p-columnHeaderTemplateLoader [column]=\"col\"></p-columnHeaderTemplateLoader>\n                </span>\n                <span class=\"ui-sortable-column-icon fa fa-fw fa-sort\" *ngIf=\"col.sortable\"\n                     [ngClass]=\"{'fa-sort-desc': (dt.getSortOrder(col) == -1),'fa-sort-asc': (dt.getSortOrder(col) == 1)}\"></span>\n                <input [attr.type]=\"col.filterType\" class=\"ui-column-filter ui-inputtext ui-widget ui-state-default ui-corner-all\" [attr.maxlength]=\"col.filterMaxlength\" [attr.placeholder]=\"col.filterPlaceholder\" *ngIf=\"col.filter&&!col.filterTemplate\" [value]=\"dt.filters[col.field] ? dt.filters[col.field].value : ''\" \n                    (click)=\"dt.onFilterInputClick($event)\" (input)=\"dt.onFilterKeyup($event.target.value, col.field, col.filterMatchMode)\"/>\n                <p-columnFilterTemplateLoader [column]=\"col\" *ngIf=\"col.filterTemplate\"></p-columnFilterTemplateLoader>\n                <p-dtCheckbox *ngIf=\"col.selectionMode=='multiple'\" (onChange)=\"dt.toggleRowsWithCheckbox($event)\" [checked]=\"dt.allSelected\" [disabled]=\"dt.isEmpty()\"></p-dtCheckbox>\n            </th>\n        </ng-template>\n    "
    }),
    __param(0, core_1.Inject(core_1.forwardRef(function () { return DataTable; }))),
    __metadata("design:paramtypes", [DataTable])
], ColumnHeaders);
exports.ColumnHeaders = ColumnHeaders;
var ColumnFooters = (function () {
    function ColumnFooters(dt) {
        this.dt = dt;
    }
    return ColumnFooters;
}());
__decorate([
    core_1.Input("pColumnFooters"),
    __metadata("design:type", Array)
], ColumnFooters.prototype, "columns", void 0);
ColumnFooters = __decorate([
    core_1.Component({
        selector: '[pColumnFooters]',
        template: "\n        <td *ngFor=\"let col of columns\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\"\n            [attr.colspan]=\"col.colspan\" [attr.rowspan]=\"col.rowspan\"\n            [ngClass]=\"{'ui-state-default':true}\" [style.display]=\"col.hidden ? 'none' : 'table-cell'\">\n            <span class=\"ui-column-footer\" *ngIf=\"!col.footerTemplate\">{{col.footer}}</span>\n            <span class=\"ui-column-footer\" *ngIf=\"col.footerTemplate\">\n                <p-columnFooterTemplateLoader [column]=\"col\"></p-columnFooterTemplateLoader>\n            </span>\n        </td>\n    "
    }),
    __param(0, core_1.Inject(core_1.forwardRef(function () { return DataTable; }))),
    __metadata("design:paramtypes", [DataTable])
], ColumnFooters);
exports.ColumnFooters = ColumnFooters;
var TableBody = (function () {
    function TableBody(dt) {
        this.dt = dt;
    }
    TableBody.prototype.visibleColumns = function () {
        return this.columns ? this.columns.filter(function (c) { return !c.hidden; }) : [];
    };
    return TableBody;
}());
__decorate([
    core_1.Input("pTableBody"),
    __metadata("design:type", Array)
], TableBody.prototype, "columns", void 0);
TableBody = __decorate([
    core_1.Component({
        selector: '[pTableBody]',
        template: "\n        <ng-template ngFor let-rowData [ngForOf]=\"dt.dataToRender\" let-even=\"even\" let-odd=\"odd\" let-rowIndex=\"index\" [ngForTrackBy]=\"dt.rowTrackBy\">\n            <tr #rowGroupElement class=\"ui-widget-header ui-rowgroup-header\" \n                *ngIf=\"dt.rowGroupMode=='subheader' && (rowIndex === 0||(dt.resolveFieldData(rowData,dt.groupField) !== dt.resolveFieldData(dt.dataToRender[rowIndex - 1], dt.groupField)))\"\n                (click)=\"dt.onRowGroupClick($event)\" [ngStyle]=\"{'cursor': dt.sortableRowGroup ? 'pointer' : 'auto'}\">\n                <td [attr.colspan]=\"dt.visibleColumns().length\">\n                    <a href=\"#\" *ngIf=\"dt.expandableRowGroups\" (click)=\"dt.toggleRowGroup($event,rowData)\">\n                        <span class=\"fa fa-fw\" [ngClass]=\"{'fa-chevron-circle-down':dt.isRowGroupExpanded(rowData), 'fa-chevron-circle-right': !dt.isRowGroupExpanded(rowData)}\"></span>\n                    </a>\n                    <span class=\"ui-rowgroup-header-name\">\n                        <p-templateLoader [template]=\"dt.rowGroupHeaderTemplate\" [data]=\"rowData\"></p-templateLoader>\n                    </span>\n                </td>\n            </tr>\n            <tr #rowElement *ngIf=\"!dt.expandableRowGroups||dt.isRowGroupExpanded(rowData)\" [class]=\"dt.getRowStyleClass(rowData,rowIndex)\"\n                    (click)=\"dt.handleRowClick($event, rowData, rowIndex)\" (dblclick)=\"dt.rowDblclick($event,rowData)\" (contextmenu)=\"dt.onRowRightClick($event,rowData)\" (touchend)=\"dt.handleRowTouchEnd($event)\"\n                    [ngClass]=\"{'ui-datatable-even':even&&dt.rowGroupMode!='rowspan','ui-datatable-odd':odd&&dt.rowGroupMode!='rowspan','ui-state-highlight': dt.isSelected(rowData)}\">\n                <ng-template ngFor let-col [ngForOf]=\"columns\" let-colIndex=\"index\">\n                    <td #cell *ngIf=\"!dt.rowGroupMode || (dt.rowGroupMode == 'subheader') ||\n                        (dt.rowGroupMode=='rowspan' && ((dt.sortField==col.field && dt.rowGroupMetadata[dt.resolveFieldData(rowData,dt.sortField)].index == rowIndex) || (dt.sortField!=col.field)))\"\n                        [ngStyle]=\"col.style\" [class]=\"col.styleClass\" [style.display]=\"col.hidden ? 'none' : 'table-cell'\"\n                        [ngClass]=\"{'ui-editable-column':col.editable,'ui-selection-column':col.selectionMode}\"\n                        [attr.rowspan]=\"(dt.rowGroupMode=='rowspan' && dt.sortField == col.field && dt.rowGroupMetadata[dt.resolveFieldData(rowData,dt.sortField)].index == rowIndex) ? dt.rowGroupMetadata[dt.resolveFieldData(rowData,dt.sortField)].size : null\">\n                        <span class=\"ui-column-title\" *ngIf=\"dt.responsive\">{{col.header}}</span>\n                        <span class=\"ui-cell-data\" *ngIf=\"!col.bodyTemplate && !col.expander && !col.selectionMode\">{{dt.resolveFieldData(rowData,col.field)}}</span>\n                        <span class=\"ui-cell-data\" *ngIf=\"col.bodyTemplate\">\n                            <p-columnBodyTemplateLoader [column]=\"col\" [rowData]=\"rowData\" [rowIndex]=\"rowIndex + dt.first\"></p-columnBodyTemplateLoader>\n                        </span>\n                        <div class=\"ui-cell-editor\" *ngIf=\"col.editable\">\n                            <input *ngIf=\"!col.editorTemplate\" type=\"text\" [(ngModel)]=\"rowData[col.field]\" required=\"true\"\n                                (keydown)=\"dt.onCellEditorKeydown($event, col, rowData, rowIndex)\" class=\"ui-inputtext ui-widget ui-state-default ui-corner-all\"/>\n                            <a *ngIf=\"col.editorTemplate\" class=\"ui-cell-editor-proxy-focus\" href=\"#\" (focus)=\"dt.onCustomEditorFocusPrev($event, colIndex)\"></a>\n                            <p-columnEditorTemplateLoader *ngIf=\"col.editorTemplate\" [column]=\"col\" [rowData]=\"rowData\" [rowIndex]=\"rowIndex\"></p-columnEditorTemplateLoader>\n                            <a *ngIf=\"col.editorTemplate\" class=\"ui-cell-editor-proxy-focus\" href=\"#\" (focus)=\"dt.onCustomEditorFocusNext($event, colIndex)\"></a>\n                        </div>\n                        <a href=\"#\" *ngIf=\"col.expander\" (click)=\"dt.toggleRow(rowData,$event)\">\n                            <span class=\"ui-row-toggler fa fa-fw ui-clickable\" [ngClass]=\"{'fa-chevron-circle-down':dt.isRowExpanded(rowData), 'fa-chevron-circle-right': !dt.isRowExpanded(rowData)}\"></span>\n                        </a>\n                        <p-dtRadioButton *ngIf=\"col.selectionMode=='single'\" (onClick)=\"dt.selectRowWithRadio($event, rowData)\" [checked]=\"dt.isSelected(rowData)\"></p-dtRadioButton>\n                        <p-dtCheckbox *ngIf=\"col.selectionMode=='multiple'\" (onChange)=\"dt.toggleRowWithCheckbox($event,rowData)\" [checked]=\"dt.isSelected(rowData)\"></p-dtCheckbox>\n                    </td>\n                </ng-template>\n            </tr>\n            <tr class=\"ui-widget-header\" *ngIf=\"dt.rowGroupFooterTemplate && dt.rowGroupMode=='subheader' && ((rowIndex === dt.dataToRender.length - 1)||(dt.resolveFieldData(rowData,dt.groupField) !== dt.resolveFieldData(dt.dataToRender[rowIndex + 1],dt.groupField))) && (!dt.expandableRowGroups || dt.isRowGroupExpanded(rowData))\">\n                <p-templateLoader class=\"ui-helper-hidden\" [data]=\"rowData\" [template]=\"dt.rowGroupFooterTemplate\"></p-templateLoader>\n            </tr>\n            <tr *ngIf=\"dt.expandableRows && dt.isRowExpanded(rowData)\">\n                <td [attr.colspan]=\"dt.visibleColumns().length\">\n                    <p-rowExpansionLoader [rowData]=\"rowData\" [rowIndex]=\"rowIndex\" [template]=\"dt.rowExpansionTemplate\"></p-rowExpansionLoader>\n                </td>\n            </tr>\n        </ng-template>\n\n        <tr *ngIf=\"dt.isEmpty()\" class=\"ui-widget-content\">\n            <td [attr.colspan]=\"dt.visibleColumns().length\" class=\"ui-datatable-emptymessage\">{{dt.emptyMessage}}</td>\n        </tr>\n    "
    }),
    __param(0, core_1.Inject(core_1.forwardRef(function () { return DataTable; }))),
    __metadata("design:paramtypes", [DataTable])
], TableBody);
exports.TableBody = TableBody;
var ScrollableView = (function () {
    function ScrollableView(dt, domHandler, el, renderer) {
        this.dt = dt;
        this.domHandler = domHandler;
        this.el = el;
        this.renderer = renderer;
        this.onVirtualScroll = new core_1.EventEmitter();
        this.loadingIcon = 'fa-circle-o-notch';
    }
    ScrollableView.prototype.ngAfterViewInit = function () {
        this.initScrolling();
    };
    ScrollableView.prototype.ngAfterViewChecked = function () {
        if (this.virtualScroll && !this.rowHeight) {
            var row = this.domHandler.findSingle(this.scrollTable, 'tr.ui-widget-content');
            if (row) {
                this.rowHeight = this.domHandler.getOuterHeight(row);
            }
        }
        if (!this.frozen) {
            this.alignScrollBar();
        }
    };
    ScrollableView.prototype.initScrolling = function () {
        var _this = this;
        this.scrollHeader = this.scrollHeaderViewChild.nativeElement;
        this.scrollHeaderBox = this.scrollHeaderBoxViewChild.nativeElement;
        this.scrollBody = this.scrollBodyViewChild.nativeElement;
        this.scrollTable = this.scrollTableViewChild.nativeElement;
        this.scrollTableWrapper = this.scrollTableWrapperViewChild.nativeElement;
        this.scrollFooter = this.scrollFooterViewChild ? this.scrollFooterViewChild.nativeElement : null;
        this.scrollFooterBox = this.scrollFooterBoxViewChild ? this.scrollFooterBoxViewChild.nativeElement : null;
        if (!this.frozen) {
            var frozenView = this.el.nativeElement.previousElementSibling;
            if (frozenView) {
                var frozenScrollBody = this.domHandler.findSingle(frozenView, '.ui-datatable-scrollable-body');
            }
            this.bodyScrollListener = this.renderer.listen(this.scrollBody, 'scroll', function (event) {
                _this.scrollHeaderBox.style.marginLeft = -1 * _this.scrollBody.scrollLeft + 'px';
                if (_this.scrollFooterBox) {
                    _this.scrollFooterBox.style.marginLeft = -1 * _this.scrollBody.scrollLeft + 'px';
                }
                if (frozenScrollBody) {
                    frozenScrollBody.scrollTop = _this.scrollBody.scrollTop;
                }
                if (_this.virtualScroll) {
                    clearTimeout(_this.scrollTimeout);
                    _this.scrollTimeout = setTimeout(function () {
                        var viewport = _this.domHandler.getOuterHeight(_this.scrollBody);
                        var tableHeight = _this.domHandler.getOuterHeight(_this.scrollTable);
                        var pageHeight = _this.rowHeight * _this.dt.rows;
                        var virtualTableHeight = _this.domHandler.getOuterHeight(_this.scrollTableWrapper);
                        var pageCount = (virtualTableHeight / pageHeight) || 1;
                        if (_this.scrollBody.scrollTop + viewport > parseFloat(_this.scrollTable.style.top) + tableHeight || _this.scrollBody.scrollTop < parseFloat(_this.scrollTable.style.top)) {
                            var page = Math.floor((_this.scrollBody.scrollTop * pageCount) / (_this.scrollBody.scrollHeight)) + 1;
                            _this.onVirtualScroll.emit({
                                page: page
                            });
                            _this.scrollTable.style.top = ((page - 1) * pageHeight) + 'px';
                        }
                    }, 200);
                }
            });
            //to trigger change detection
            this.scrollBodyMouseWheelListener = this.renderer.listen(this.scrollBody, 'mousewheel', function (event) { });
            this.headerScrollListener = this.renderer.listen(this.scrollHeader, 'scroll', function () {
                _this.scrollHeader.scrollLeft = 0;
            });
        }
        if (!this.frozen)
            this.alignScrollBar();
        else
            this.scrollBody.style.paddingBottom = this.domHandler.calculateScrollbarWidth() + 'px';
    };
    ScrollableView.prototype.hasVerticalOverflow = function () {
        return this.domHandler.getOuterHeight(this.scrollTable) > this.domHandler.getOuterHeight(this.scrollBody);
    };
    ScrollableView.prototype.alignScrollBar = function () {
        var scrollBarWidth = this.hasVerticalOverflow() ? this.domHandler.calculateScrollbarWidth() : 0;
        this.scrollHeaderBox.style.marginRight = scrollBarWidth + 'px';
        if (this.scrollFooterBox) {
            this.scrollFooterBox.style.marginRight = scrollBarWidth + 'px';
        }
    };
    ScrollableView.prototype.ngOnDestroy = function () {
        if (this.bodyScrollListener) {
            this.bodyScrollListener();
        }
        if (this.scrollBodyMouseWheelListener) {
            this.scrollBodyMouseWheelListener();
        }
        if (this.headerScrollListener) {
            this.headerScrollListener();
        }
    };
    return ScrollableView;
}());
__decorate([
    core_1.Input("pScrollableView"),
    __metadata("design:type", Array)
], ScrollableView.prototype, "columns", void 0);
__decorate([
    core_1.ViewChild('scrollHeader'),
    __metadata("design:type", core_1.ElementRef)
], ScrollableView.prototype, "scrollHeaderViewChild", void 0);
__decorate([
    core_1.ViewChild('scrollHeaderBox'),
    __metadata("design:type", core_1.ElementRef)
], ScrollableView.prototype, "scrollHeaderBoxViewChild", void 0);
__decorate([
    core_1.ViewChild('scrollBody'),
    __metadata("design:type", core_1.ElementRef)
], ScrollableView.prototype, "scrollBodyViewChild", void 0);
__decorate([
    core_1.ViewChild('scrollTable'),
    __metadata("design:type", core_1.ElementRef)
], ScrollableView.prototype, "scrollTableViewChild", void 0);
__decorate([
    core_1.ViewChild('scrollTableWrapper'),
    __metadata("design:type", core_1.ElementRef)
], ScrollableView.prototype, "scrollTableWrapperViewChild", void 0);
__decorate([
    core_1.ViewChild('scrollFooter'),
    __metadata("design:type", core_1.ElementRef)
], ScrollableView.prototype, "scrollFooterViewChild", void 0);
__decorate([
    core_1.ViewChild('scrollFooterBox'),
    __metadata("design:type", core_1.ElementRef)
], ScrollableView.prototype, "scrollFooterBoxViewChild", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ScrollableView.prototype, "frozen", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ScrollableView.prototype, "width", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ScrollableView.prototype, "virtualScroll", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ScrollableView.prototype, "onVirtualScroll", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ScrollableView.prototype, "loading", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ScrollableView.prototype, "loadingIcon", void 0);
ScrollableView = __decorate([
    core_1.Component({
        selector: '[pScrollableView]',
        template: "\n        <div #scrollHeader class=\"ui-widget-header ui-datatable-scrollable-header\" [ngStyle]=\"{'width': width}\">\n            <div #scrollHeaderBox  class=\"ui-datatable-scrollable-header-box\">\n                <table [class]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <thead class=\"ui-datatable-thead\">\n                        <tr *ngIf=\"!dt.headerColumnGroup\" class=\"ui-state-default\" [pColumnHeaders]=\"columns\"></tr>\n                        <ng-template [ngIf]=\"dt.headerColumnGroup\">\n                            <tr *ngFor=\"let headerRow of dt.headerColumnGroup.rows\" class=\"ui-state-default\" [pColumnHeaders]=\"headerRow.columns\"></tr>\n                        </ng-template>\n                    </thead>\n                </table>\n            </div>\n        </div>\n        <div #scrollBody class=\"ui-datatable-scrollable-body\" [ngStyle]=\"{'width': width,'max-height':dt.scrollHeight}\">\n            <div #scrollTableWrapper class=\"ui-datatable-scrollable-table-wrapper\" style=\"position:relative\">\n                <table #scrollTable [class]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\" [ngClass]=\"{'ui-datatable-virtual-table':virtualScroll}\" style=\"top:0px\">\n                    <colgroup class=\"ui-datatable-scrollable-colgroup\">\n                        <col *ngFor=\"let col of columns\" [ngStyle]=\"col.style\"/>\n                    </colgroup>\n                    <tbody [ngClass]=\"{'ui-datatable-data ui-widget-content': true, 'ui-datatable-hoverable-rows': (dt.rowHover||dt.selectionMode)}\" [pTableBody]=\"columns\"></tbody>\n                </table>\n            </div>\n        </div>\n        <div #scrollFooter class=\"ui-widget-header ui-datatable-scrollable-footer\" [ngStyle]=\"{'width': width}\" *ngIf=\"dt.hasFooter()\">\n            <div #scrollFooterBox  class=\"ui-datatable-scrollable-footer-box\">\n                <table [class]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <tfoot class=\"ui-datatable-tfoot\">\n                        <tr *ngIf=\"!dt.footerColumnGroup\" [pColumnFooters]=\"columns\" class=\"ui-state-default\"></tr>\n                        <ng-template [ngIf]=\"dt.footerColumnGroup\">\n                            <tr *ngFor=\"let footerRow of dt.footerColumnGroup.rows\" class=\"ui-state-default\" [pColumnFooters]=\"footerRow.columns\"></tr>\n                        </ng-template>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    "
    }),
    __param(0, core_1.Inject(core_1.forwardRef(function () { return DataTable; }))),
    __metadata("design:paramtypes", [DataTable, domhandler_1.DomHandler, core_1.ElementRef, core_1.Renderer2])
], ScrollableView);
exports.ScrollableView = ScrollableView;
var DataTable = (function () {
    function DataTable(el, domHandler, differs, renderer, changeDetector, objectUtils, zone) {
        this.el = el;
        this.domHandler = domHandler;
        this.differs = differs;
        this.renderer = renderer;
        this.changeDetector = changeDetector;
        this.objectUtils = objectUtils;
        this.zone = zone;
        this.pageLinks = 5;
        this.selectionChange = new core_1.EventEmitter();
        this.onRowClick = new core_1.EventEmitter();
        this.onRowSelect = new core_1.EventEmitter();
        this.onRowUnselect = new core_1.EventEmitter();
        this.onRowDblclick = new core_1.EventEmitter();
        this.onHeaderCheckboxToggle = new core_1.EventEmitter();
        this.onContextMenuSelect = new core_1.EventEmitter();
        this.filterDelay = 300;
        this.onLazyLoad = new core_1.EventEmitter();
        this.columnResizeMode = 'fit';
        this.onColResize = new core_1.EventEmitter();
        this.onColReorder = new core_1.EventEmitter();
        this.sortMode = 'single';
        this.sortOrder = 1;
        this.csvSeparator = ',';
        this.exportFilename = 'download';
        this.emptyMessage = 'No records found';
        this.paginatorPosition = 'bottom';
        this.alwaysShowPaginator = true;
        this.metaKeySelection = true;
        this.rowTrackBy = function (index, item) { return item; };
        this.immutable = true;
        this.compareSelectionBy = 'deepEquals';
        this.onEditInit = new core_1.EventEmitter();
        this.onEditComplete = new core_1.EventEmitter();
        this.onEdit = new core_1.EventEmitter();
        this.onEditCancel = new core_1.EventEmitter();
        this.onPage = new core_1.EventEmitter();
        this.onSort = new core_1.EventEmitter();
        this.onFilter = new core_1.EventEmitter();
        this.rowExpandMode = 'multiple';
        this.tabindex = 1;
        this.sortableRowGroup = true;
        this.filters = {};
        this.firstChange = new core_1.EventEmitter();
        this.onRowExpand = new core_1.EventEmitter();
        this.onRowCollapse = new core_1.EventEmitter();
        this.onRowGroupExpand = new core_1.EventEmitter();
        this.onRowGroupCollapse = new core_1.EventEmitter();
        this.page = 0;
        this.columnsChanged = false;
        this._first = 0;
        this.filterConstraints = {
            startsWith: function (value, filter) {
                if (filter === undefined || filter === null || filter.trim() === '') {
                    return true;
                }
                if (value === undefined || value === null) {
                    return false;
                }
                var filterValue = filter.toLowerCase();
                return value.toString().toLowerCase().slice(0, filterValue.length) === filterValue;
            },
            contains: function (value, filter) {
                if (filter === undefined || filter === null || (typeof filter === 'string' && filter.trim() === '')) {
                    return true;
                }
                if (value === undefined || value === null) {
                    return false;
                }
                return value.toString().toLowerCase().indexOf(filter.toLowerCase()) !== -1;
            },
            endsWith: function (value, filter) {
                if (filter === undefined || filter === null || filter.trim() === '') {
                    return true;
                }
                if (value === undefined || value === null) {
                    return false;
                }
                var filterValue = filter.toString().toLowerCase();
                return value.toString().toLowerCase().indexOf(filterValue, value.toString().length - filterValue.length) !== -1;
            },
            equals: function (value, filter) {
                if (filter === undefined || filter === null || (typeof filter === 'string' && filter.trim() === '')) {
                    return true;
                }
                if (value === undefined || value === null) {
                    return false;
                }
                return value.toString().toLowerCase() == filter.toString().toLowerCase();
            },
            notEquals: function (value, filter) {
                if (filter === undefined || filter === null || (typeof filter === 'string' && filter.trim() === '')) {
                    return false;
                }
                if (value === undefined || value === null) {
                    return true;
                }
                return value.toString().toLowerCase() != filter.toString().toLowerCase();
            },
            in: function (value, filter) {
                if (filter === undefined || filter === null || filter.length === 0) {
                    return true;
                }
                if (value === undefined || value === null) {
                    return false;
                }
                for (var i = 0; i < filter.length; i++) {
                    if (filter[i] === value)
                        return true;
                }
                return false;
            }
        };
        this.differ = differs.find([]).create(null);
    }
    DataTable.prototype.ngOnInit = function () {
        if (this.lazy) {
            this.onLazyLoad.emit(this.createLazyLoadMetadata());
        }
    };
    DataTable.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.initColumns();
        this.columnsSubscription = this.cols.changes.subscribe(function (_) {
            _this.initColumns();
            _this.changeDetector.markForCheck();
        });
        this.templates.forEach(function (item) {
            switch (item.getType()) {
                case 'rowexpansion':
                    _this.rowExpansionTemplate = item.template;
                    break;
                case 'rowgroupheader':
                    _this.rowGroupHeaderTemplate = item.template;
                    break;
                case 'rowgroupfooter':
                    _this.rowGroupFooterTemplate = item.template;
                    break;
            }
        });
    };
    DataTable.prototype.ngAfterViewChecked = function () {
        if (this.columnsChanged && this.el.nativeElement.offsetParent) {
            if (this.resizableColumns) {
                this.initResizableColumns();
            }
            if (this.reorderableColumns) {
                this.initColumnReordering();
            }
            this.columnsChanged = false;
        }
        if (this.totalRecordsChanged && this.virtualScroll) {
            var scrollableTable = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-datatable-scrollable-table-wrapper');
            var row = this.domHandler.findSingle(scrollableTable, 'tr.ui-widget-content');
            var rowHeight = this.domHandler.getOuterHeight(row);
            this.virtualTableHeight = this._totalRecords * rowHeight;
            scrollableTable.style.height = this.virtualTableHeight + 'px';
            this.totalRecordsChanged = true;
        }
    };
    DataTable.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.globalFilter) {
            this.globalFilterFunction = this.renderer.listen(this.globalFilter, 'keyup', function () {
                _this.filterTimeout = setTimeout(function () {
                    _this._filter();
                    _this.filterTimeout = null;
                }, _this.filterDelay);
            });
        }
        if (this.editable) {
            this.documentClickListener = this.renderer.listen('document', 'click', function (event) {
                if (!_this.editorClick) {
                    _this.closeCell();
                }
                _this.editorClick = false;
            });
        }
    };
    Object.defineProperty(DataTable.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (val) {
            if (this.immutable) {
                this._value = val ? val.slice() : null;
                this.handleDataChange();
            }
            else {
                this._value = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "first", {
        get: function () {
            return this._first;
        },
        set: function (val) {
            var shouldPaginate = this._first !== val;
            this._first = val;
            if (shouldPaginate) {
                this.paginate();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "totalRecords", {
        get: function () {
            return this._totalRecords;
        },
        set: function (val) {
            this._totalRecords = val;
            this.totalRecordsChanged = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "selection", {
        get: function () {
            return this._selection;
        },
        set: function (val) {
            this._selection = val;
            if (this.dataKey && !this.preventSelectionKeysPropagation) {
                this.selectionKeys = {};
                if (this._selection) {
                    for (var _i = 0, _a = this._selection; _i < _a.length; _i++) {
                        var data = _a[_i];
                        this.selectionKeys[String(this.objectUtils.resolveFieldData(data, this.dataKey))] = 1;
                    }
                }
            }
            this.preventSelectionKeysPropagation = false;
        },
        enumerable: true,
        configurable: true
    });
    DataTable.prototype.ngDoCheck = function () {
        if (!this.immutable) {
            var changes = this.differ.diff(this.value);
            if (changes) {
                this.handleDataChange();
            }
        }
    };
    DataTable.prototype.handleDataChange = function () {
        var _this = this;
        if (this.paginator) {
            this.updatePaginator();
        }
        if (!this.lazy) {
            if (this.hasFilter()) {
                this._filter();
            }
            if (this.preventSortPropagation) {
                this.preventSortPropagation = false;
            }
            else if (this.sortField || this.multiSortMeta) {
                if (!this.sortColumn && this.columns) {
                    this.sortColumn = this.columns.find(function (col) { return col.field === _this.sortField && col.sortable === 'custom'; });
                }
                if (this.sortMode == 'single')
                    this.sortSingle();
                else if (this.sortMode == 'multiple')
                    this.sortMultiple();
            }
        }
        this.updateDataToRender(this.filteredValue || this.value);
    };
    DataTable.prototype.initColumns = function () {
        var _this = this;
        this.columns = this.cols.toArray();
        if (this.scrollable) {
            this.scrollableColumns = [];
            this.cols.forEach(function (col) {
                if (col.frozen) {
                    _this.frozenColumns = _this.frozenColumns || [];
                    _this.frozenColumns.push(col);
                }
                else {
                    _this.scrollableColumns.push(col);
                }
            });
        }
        this.columnsChanged = true;
    };
    DataTable.prototype.resolveFieldData = function (data, field) {
        if (data && field) {
            if (field.indexOf('.') == -1) {
                return data[field];
            }
            else {
                var fields = field.split('.');
                var value = data;
                for (var i = 0, len = fields.length; i < len; ++i) {
                    if (value == null) {
                        return null;
                    }
                    value = value[fields[i]];
                }
                return value;
            }
        }
        else {
            return null;
        }
    };
    DataTable.prototype.updateRowGroupMetadata = function () {
        this.rowGroupMetadata = {};
        if (this.dataToRender) {
            for (var i = 0; i < this.dataToRender.length; i++) {
                var rowData = this.dataToRender[i];
                var group = this.resolveFieldData(rowData, this.sortField);
                if (i == 0) {
                    this.rowGroupMetadata[group] = { index: 0, size: 1 };
                }
                else {
                    var previousRowData = this.dataToRender[i - 1];
                    var previousRowGroup = this.resolveFieldData(previousRowData, this.sortField);
                    if (group === previousRowGroup) {
                        this.rowGroupMetadata[group].size++;
                    }
                    else {
                        this.rowGroupMetadata[group] = { index: i, size: 1 };
                    }
                }
            }
        }
    };
    DataTable.prototype.updatePaginator = function () {
        //total records
        this.updateTotalRecords();
        //first
        if (this.totalRecords && this.first >= this.totalRecords) {
            var numberOfPages = Math.ceil(this.totalRecords / this.rows);
            this._first = Math.max((numberOfPages - 1) * this.rows, 0);
        }
    };
    DataTable.prototype.updateTotalRecords = function () {
        this.totalRecords = this.lazy ? this.totalRecords : (this.value ? this.value.length : 0);
    };
    DataTable.prototype.onPageChange = function (event) {
        this._first = event.first;
        this.firstChange.emit(this.first);
        this.rows = event.rows;
        this.paginate();
    };
    DataTable.prototype.paginate = function () {
        if (this.lazy)
            this.onLazyLoad.emit(this.createLazyLoadMetadata());
        else
            this.updateDataToRender(this.filteredValue || this.value);
        this.onPage.emit({
            first: this.first,
            rows: this.rows
        });
    };
    DataTable.prototype.updateDataToRender = function (datasource) {
        if ((this.paginator || this.virtualScroll) && datasource) {
            this.dataToRender = [];
            var startIndex = this.lazy ? 0 : this.first;
            var endIndex = this.virtualScroll ? this.first + this.rows * 2 : startIndex + this.rows;
            for (var i = startIndex; i < endIndex; i++) {
                if (i >= datasource.length) {
                    break;
                }
                this.dataToRender.push(datasource[i]);
            }
        }
        else {
            this.dataToRender = datasource;
        }
        if (this.rowGroupMode) {
            this.updateRowGroupMetadata();
        }
    };
    DataTable.prototype.onVirtualScroll = function (event) {
        this._first = (event.page - 1) * this.rows;
        if (this.lazy)
            this.onLazyLoad.emit(this.createLazyLoadMetadata());
        else
            this.updateDataToRender(this.filteredValue || this.value);
    };
    DataTable.prototype.onHeaderKeydown = function (event, column) {
        if (event.keyCode == 13) {
            this.sort(event, column);
            event.preventDefault();
        }
    };
    DataTable.prototype.onHeaderMousedown = function (event, header) {
        if (this.reorderableColumns) {
            if (event.target.nodeName !== 'INPUT') {
                header.draggable = true;
            }
            else if (event.target.nodeName === 'INPUT') {
                header.draggable = false;
            }
        }
    };
    DataTable.prototype.sort = function (event, column) {
        if (!column.sortable) {
            return;
        }
        var targetNode = event.target.nodeName;
        if ((targetNode == 'TH' && this.domHandler.hasClass(event.target, 'ui-sortable-column')) || ((targetNode == 'SPAN' || targetNode == 'DIV') && !this.domHandler.hasClass(event.target, 'ui-clickable'))) {
            if (!this.immutable) {
                this.preventSortPropagation = true;
            }
            var columnSortField = column.sortField || column.field;
            this.sortOrder = (this.sortField === columnSortField) ? this.sortOrder * -1 : 1;
            this.sortField = columnSortField;
            this.sortColumn = column;
            var metaKey = event.metaKey || event.ctrlKey;
            if (this.sortMode == 'multiple') {
                if (!this.multiSortMeta || !metaKey) {
                    this.multiSortMeta = [];
                }
                this.addSortMeta({ field: this.sortField, order: this.sortOrder });
            }
            if (this.lazy) {
                this._first = 0;
                this.onLazyLoad.emit(this.createLazyLoadMetadata());
            }
            else {
                if (this.sortMode == 'multiple')
                    this.sortMultiple();
                else
                    this.sortSingle();
            }
            this.onSort.emit({
                field: this.sortField,
                order: this.sortOrder,
                multisortmeta: this.multiSortMeta
            });
        }
        this.updateDataToRender(this.filteredValue || this.value);
    };
    DataTable.prototype.sortSingle = function () {
        var _this = this;
        if (this.value) {
            if (this.sortColumn && this.sortColumn.sortable === 'custom') {
                this.preventSortPropagation = true;
                this.sortColumn.sortFunction.emit({
                    field: this.sortField,
                    order: this.sortOrder
                });
            }
            else {
                this.value.sort(function (data1, data2) {
                    var value1 = _this.resolveFieldData(data1, _this.sortField);
                    var value2 = _this.resolveFieldData(data2, _this.sortField);
                    var result = null;
                    if (value1 == null && value2 != null)
                        result = -1;
                    else if (value1 != null && value2 == null)
                        result = 1;
                    else if (value1 == null && value2 == null)
                        result = 0;
                    else if (typeof value1 === 'string' && typeof value2 === 'string')
                        result = value1.localeCompare(value2);
                    else
                        result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;
                    return (_this.sortOrder * result);
                });
            }
            this.first = 0;
            if (this.hasFilter()) {
                this._filter();
            }
        }
    };
    DataTable.prototype.sortMultiple = function () {
        var _this = this;
        if (this.value) {
            this.value.sort(function (data1, data2) {
                return _this.multisortField(data1, data2, _this.multiSortMeta, 0);
            });
            if (this.hasFilter()) {
                this._filter();
            }
        }
    };
    DataTable.prototype.multisortField = function (data1, data2, multiSortMeta, index) {
        var value1 = this.resolveFieldData(data1, multiSortMeta[index].field);
        var value2 = this.resolveFieldData(data2, multiSortMeta[index].field);
        var result = null;
        if (typeof value1 == 'string' || value1 instanceof String) {
            if (value1.localeCompare && (value1 != value2)) {
                return (multiSortMeta[index].order * value1.localeCompare(value2));
            }
        }
        else {
            result = (value1 < value2) ? -1 : 1;
        }
        if (value1 == value2) {
            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(data1, data2, multiSortMeta, index + 1)) : 0;
        }
        return (multiSortMeta[index].order * result);
    };
    DataTable.prototype.addSortMeta = function (meta) {
        var index = -1;
        for (var i = 0; i < this.multiSortMeta.length; i++) {
            if (this.multiSortMeta[i].field === meta.field) {
                index = i;
                break;
            }
        }
        if (index >= 0)
            this.multiSortMeta[index] = meta;
        else
            this.multiSortMeta.push(meta);
    };
    DataTable.prototype.isSorted = function (column) {
        if (!column.sortable) {
            return false;
        }
        var columnSortField = column.sortField || column.field;
        if (this.sortMode === 'single') {
            return (this.sortField && columnSortField === this.sortField);
        }
        else if (this.sortMode === 'multiple') {
            var sorted = false;
            if (this.multiSortMeta) {
                for (var i = 0; i < this.multiSortMeta.length; i++) {
                    if (this.multiSortMeta[i].field == columnSortField) {
                        sorted = true;
                        break;
                    }
                }
            }
            return sorted;
        }
    };
    DataTable.prototype.getSortOrder = function (column) {
        var order = 0;
        var columnSortField = column.sortField || column.field;
        if (this.sortMode === 'single') {
            if (this.sortField && columnSortField === this.sortField) {
                order = this.sortOrder;
            }
        }
        else if (this.sortMode === 'multiple') {
            if (this.multiSortMeta) {
                for (var i = 0; i < this.multiSortMeta.length; i++) {
                    if (this.multiSortMeta[i].field == columnSortField) {
                        order = this.multiSortMeta[i].order;
                        break;
                    }
                }
            }
        }
        return order;
    };
    DataTable.prototype.onRowGroupClick = function (event) {
        if (this.rowGroupToggleClick) {
            this.rowGroupToggleClick = false;
            return;
        }
        if (this.sortableRowGroup) {
            var targetNode = event.target.nodeName;
            if ((targetNode == 'TD' || (targetNode == 'SPAN' && !this.domHandler.hasClass(event.target, 'ui-clickable')))) {
                if (this.sortField != this.groupField) {
                    this.sortField = this.groupField;
                    this.sortSingle();
                }
                else {
                    this.sortOrder = -1 * this.sortOrder;
                    this.sortSingle();
                }
            }
        }
    };
    DataTable.prototype.clearSelectionRange = function () {
        var rangeStart, rangeEnd;
        if (this.rangeRowIndex > this.anchorRowIndex) {
            rangeStart = this.anchorRowIndex;
            rangeEnd = this.rangeRowIndex;
        }
        else if (this.rangeRowIndex < this.anchorRowIndex) {
            rangeStart = this.rangeRowIndex;
            rangeEnd = this.anchorRowIndex;
        }
        else {
            rangeStart = this.rangeRowIndex;
            rangeEnd = this.rangeRowIndex;
        }
        var _loop_1 = function (i) {
            var rangeRowData = this_1.dataToRender[i];
            var selectionIndex = this_1.findIndexInSelection(rangeRowData);
            this_1._selection = this_1.selection.filter(function (val, i) { return i != selectionIndex; });
            var dataKeyValue = this_1.dataKey ? String(this_1.resolveFieldData(rangeRowData, this_1.dataKey)) : null;
            if (dataKeyValue) {
                delete this_1.selectionKeys[dataKeyValue];
            }
            this_1.onRowUnselect.emit({ originalEvent: event, data: rangeRowData, type: 'row' });
        };
        var this_1 = this;
        for (var i = rangeStart; i <= rangeEnd; i++) {
            _loop_1(i);
        }
    };
    DataTable.prototype.selectRange = function (rowIndex) {
        var rangeStart, rangeEnd;
        if (this.anchorRowIndex > rowIndex) {
            rangeStart = rowIndex;
            rangeEnd = this.anchorRowIndex;
        }
        else if (this.anchorRowIndex < rowIndex) {
            rangeStart = this.anchorRowIndex;
            rangeEnd = rowIndex;
        }
        else {
            rangeStart = rowIndex;
            rangeEnd = rowIndex;
        }
        for (var i = rangeStart; i <= rangeEnd; i++) {
            var rangeRowData = this.dataToRender[i];
            this._selection = this.selection.concat([rangeRowData]);
            this.selectionChange.emit(this.selection);
            var dataKeyValue = this.dataKey ? String(this.resolveFieldData(rangeRowData, this.dataKey)) : null;
            if (dataKeyValue) {
                this.selectionKeys[dataKeyValue] = 1;
            }
            this.onRowSelect.emit({ originalEvent: event, data: rangeRowData, type: 'row' });
        }
    };
    DataTable.prototype.handleRowClick = function (event, rowData, index) {
        if (this.preventRowClickPropagation) {
            this.preventRowClickPropagation = false;
            return;
        }
        var targetNode = event.target.nodeName;
        if (this.editable) {
            var cell = this.findCell(event.target);
            var column = this.columns[this.domHandler.index(cell)];
            if (column.editable) {
                this.switchCellToEditMode(cell, column, rowData);
                return;
            }
        }
        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || (this.domHandler.hasClass(event.target, 'ui-clickable'))) {
            return;
        }
        this.onRowClick.next({ originalEvent: event, data: rowData });
        if (this.selectionMode) {
            if (this.isMultipleSelectionMode() && event.shiftKey && this.anchorRowIndex != null) {
                this.domHandler.clearSelection();
                if (this.rangeRowIndex != null) {
                    this.clearSelectionRange();
                }
                this.rangeRowIndex = index;
                this.selectRange(index);
            }
            else {
                var selected = this.isSelected(rowData);
                var metaSelection = this.rowTouched ? false : this.metaKeySelection;
                var dataKeyValue = this.dataKey ? String(this.resolveFieldData(rowData, this.dataKey)) : null;
                this.anchorRowIndex = index;
                this.rangeRowIndex = index;
                if (metaSelection) {
                    var metaKey = event.metaKey || event.ctrlKey;
                    if (selected && metaKey) {
                        if (this.isSingleSelectionMode()) {
                            this._selection = null;
                            this.selectionKeys = {};
                            this.selectionChange.emit(null);
                        }
                        else {
                            var selectionIndex_1 = this.findIndexInSelection(rowData);
                            this._selection = this.selection.filter(function (val, i) { return i != selectionIndex_1; });
                            this.selectionChange.emit(this.selection);
                            if (dataKeyValue) {
                                delete this.selectionKeys[dataKeyValue];
                            }
                        }
                        this.onRowUnselect.emit({ originalEvent: event, data: rowData, type: 'row' });
                    }
                    else {
                        if (this.isSingleSelectionMode()) {
                            this._selection = rowData;
                            this.selectionChange.emit(rowData);
                            if (dataKeyValue) {
                                this.selectionKeys = {};
                                this.selectionKeys[dataKeyValue] = 1;
                            }
                        }
                        else if (this.isMultipleSelectionMode()) {
                            if (metaKey) {
                                this._selection = this.selection || [];
                            }
                            else {
                                this._selection = [];
                                this.selectionKeys = {};
                            }
                            this._selection = this.selection.concat([rowData]);
                            this.selectionChange.emit(this.selection);
                            if (dataKeyValue) {
                                this.selectionKeys[dataKeyValue] = 1;
                            }
                        }
                        this.onRowSelect.emit({ originalEvent: event, data: rowData, type: 'row' });
                    }
                }
                else {
                    if (this.isSingleSelectionMode()) {
                        if (selected) {
                            this._selection = null;
                            this.selectionKeys = {};
                            this.onRowUnselect.emit({ originalEvent: event, data: rowData, type: 'row' });
                        }
                        else {
                            this._selection = rowData;
                            this.onRowSelect.emit({ originalEvent: event, data: rowData, type: 'row' });
                            if (dataKeyValue) {
                                this.selectionKeys = {};
                                this.selectionKeys[dataKeyValue] = 1;
                            }
                        }
                    }
                    else {
                        if (selected) {
                            var selectionIndex_2 = this.findIndexInSelection(rowData);
                            this._selection = this.selection.filter(function (val, i) { return i != selectionIndex_2; });
                            this.onRowUnselect.emit({ originalEvent: event, data: rowData, type: 'row' });
                            if (dataKeyValue) {
                                delete this.selectionKeys[dataKeyValue];
                            }
                        }
                        else {
                            this._selection = (this.selection || []).concat([rowData]);
                            this.onRowSelect.emit({ originalEvent: event, data: rowData, type: 'row' });
                            if (dataKeyValue) {
                                this.selectionKeys[dataKeyValue] = 1;
                            }
                        }
                    }
                    this.selectionChange.emit(this.selection);
                }
            }
            this.preventSelectionKeysPropagation = true;
        }
        this.rowTouched = false;
    };
    DataTable.prototype.handleRowTouchEnd = function (event) {
        this.rowTouched = true;
    };
    DataTable.prototype.selectRowWithRadio = function (event, rowData) {
        if (this.selection != rowData) {
            this._selection = rowData;
            this.selectionChange.emit(this.selection);
            this.onRowSelect.emit({ originalEvent: event, data: rowData, type: 'radiobutton' });
            if (this.dataKey) {
                this.selectionKeys = {};
                this.selectionKeys[String(this.resolveFieldData(rowData, this.dataKey))] = 1;
            }
        }
        else {
            this._selection = null;
            this.selectionChange.emit(this.selection);
            this.onRowUnselect.emit({ originalEvent: event, data: rowData, type: 'radiobutton' });
        }
        this.preventSelectionKeysPropagation = true;
        this.preventRowClickPropagation = true;
    };
    DataTable.prototype.toggleRowWithCheckbox = function (event, rowData) {
        var selectionIndex = this.findIndexInSelection(rowData);
        this.selection = this.selection || [];
        var dataKeyValue = this.dataKey ? String(this.resolveFieldData(rowData, this.dataKey)) : null;
        if (selectionIndex != -1) {
            this._selection = this.selection.filter(function (val, i) { return i != selectionIndex; });
            this.onRowUnselect.emit({ originalEvent: event, data: rowData, type: 'checkbox' });
            if (dataKeyValue) {
                delete this.selectionKeys[dataKeyValue];
            }
        }
        else {
            this._selection = this.selection.concat([rowData]);
            this.onRowSelect.emit({ originalEvent: event, data: rowData, type: 'checkbox' });
            if (dataKeyValue) {
                this.selectionKeys[dataKeyValue] = 1;
            }
        }
        this.selectionChange.emit(this.selection);
        this.preventSelectionKeysPropagation = true;
        this.preventRowClickPropagation = true;
    };
    DataTable.prototype.toggleRowsWithCheckbox = function (event) {
        if (event.checked)
            this.selection = this.headerCheckboxToggleAllPages ? this.value.slice() : this.dataToRender.slice();
        else
            this.selection = [];
        this.selectionChange.emit(this.selection);
        this.onHeaderCheckboxToggle.emit({ originalEvent: event, checked: event.checked });
    };
    DataTable.prototype.onRowRightClick = function (event, rowData) {
        if (this.contextMenu) {
            var selectionIndex = this.findIndexInSelection(rowData);
            var selected = selectionIndex != -1;
            var dataKeyValue = this.dataKey ? String(this.resolveFieldData(rowData, this.dataKey)) : null;
            if (!selected) {
                if (this.isSingleSelectionMode()) {
                    this.selection = rowData;
                    this.selectionChange.emit(rowData);
                }
                else if (this.isMultipleSelectionMode()) {
                    this.selection = [rowData];
                    this.selectionChange.emit(this.selection);
                }
                if (this.dataKey) {
                    this.selectionKeys[String(this.resolveFieldData(rowData, this.dataKey))] = 1;
                }
            }
            this.contextMenu.show(event);
            this.onContextMenuSelect.emit({ originalEvent: event, data: rowData });
        }
        this.preventSelectionKeysPropagation = true;
    };
    DataTable.prototype.rowDblclick = function (event, rowData) {
        this.onRowDblclick.emit({ originalEvent: event, data: rowData });
    };
    DataTable.prototype.isSingleSelectionMode = function () {
        return this.selectionMode === 'single';
    };
    DataTable.prototype.isMultipleSelectionMode = function () {
        return this.selectionMode === 'multiple';
    };
    DataTable.prototype.findIndexInSelection = function (rowData) {
        var index = -1;
        if (this.selection) {
            for (var i = 0; i < this.selection.length; i++) {
                if (this.equals(rowData, this.selection[i])) {
                    index = i;
                    break;
                }
            }
        }
        return index;
    };
    DataTable.prototype.isSelected = function (rowData) {
        if (rowData && this.selection) {
            if (this.dataKey) {
                return this.selectionKeys[this.objectUtils.resolveFieldData(rowData, this.dataKey)] !== undefined;
            }
            else {
                if (this.selection instanceof Array)
                    return this.findIndexInSelection(rowData) > -1;
                else
                    return this.equals(rowData, this.selection);
            }
        }
        return false;
    };
    DataTable.prototype.equals = function (data1, data2) {
        return this.compareSelectionBy === 'equals' ? (data1 === data2) : this.objectUtils.equals(data1, data2, this.dataKey);
    };
    Object.defineProperty(DataTable.prototype, "allSelected", {
        get: function () {
            if (this.headerCheckboxToggleAllPages) {
                return this.selection && this.value && this.selection.length === this.value.length;
            }
            else {
                var val = true;
                if (this.dataToRender && this.selection && (this.dataToRender.length <= this.selection.length)) {
                    for (var _i = 0, _a = this.dataToRender; _i < _a.length; _i++) {
                        var data = _a[_i];
                        if (!this.isSelected(data)) {
                            val = false;
                            break;
                        }
                    }
                }
                else {
                    val = false;
                }
                return val;
            }
        },
        enumerable: true,
        configurable: true
    });
    DataTable.prototype.onFilterKeyup = function (value, field, matchMode) {
        var _this = this;
        if (this.filterTimeout) {
            clearTimeout(this.filterTimeout);
        }
        this.filterTimeout = setTimeout(function () {
            _this.filter(value, field, matchMode);
            _this.filterTimeout = null;
        }, this.filterDelay);
    };
    DataTable.prototype.filter = function (value, field, matchMode) {
        if (!this.isFilterBlank(value))
            this.filters[field] = { value: value, matchMode: matchMode };
        else if (this.filters[field])
            delete this.filters[field];
        this._filter();
    };
    DataTable.prototype.isFilterBlank = function (filter) {
        if (filter !== null && filter !== undefined) {
            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))
                return true;
            else
                return false;
        }
        return true;
    };
    DataTable.prototype._filter = function () {
        this._first = 0;
        if (this.lazy) {
            this.onLazyLoad.emit(this.createLazyLoadMetadata());
        }
        else {
            this.filteredValue = [];
            for (var i = 0; i < this.value.length; i++) {
                var localMatch = true;
                var globalMatch = false;
                for (var j = 0; j < this.columns.length; j++) {
                    var col = this.columns[j], filterMeta = this.filters[col.field];
                    //local
                    if (filterMeta) {
                        var filterValue = filterMeta.value, filterField = col.field, filterMatchMode = filterMeta.matchMode || 'startsWith', dataFieldValue = this.resolveFieldData(this.value[i], filterField);
                        var filterConstraint = this.filterConstraints[filterMatchMode];
                        if (!filterConstraint(dataFieldValue, filterValue)) {
                            localMatch = false;
                        }
                        if (!localMatch) {
                            break;
                        }
                    }
                    //global
                    if (this.globalFilter && !globalMatch) {
                        globalMatch = this.filterConstraints['contains'](this.resolveFieldData(this.value[i], col.field), this.globalFilter.value);
                    }
                }
                var matches = localMatch;
                if (this.globalFilter) {
                    matches = localMatch && globalMatch;
                }
                if (matches) {
                    this.filteredValue.push(this.value[i]);
                }
            }
            if (this.filteredValue.length === this.value.length) {
                this.filteredValue = null;
            }
            if (this.paginator) {
                this.totalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;
            }
            this.updateDataToRender(this.filteredValue || this.value);
        }
        this.onFilter.emit({
            filters: this.filters,
            filteredValue: this.filteredValue || this.value
        });
    };
    DataTable.prototype.hasFilter = function () {
        var empty = true;
        for (var prop in this.filters) {
            if (this.filters.hasOwnProperty(prop)) {
                empty = false;
                break;
            }
        }
        return !empty || (this.globalFilter && this.globalFilter.value && this.globalFilter.value.trim().length);
    };
    DataTable.prototype.onFilterInputClick = function (event) {
        event.stopPropagation();
    };
    DataTable.prototype.switchCellToEditMode = function (cell, column, rowData) {
        var _this = this;
        if (!this.selectionMode && this.editable && column.editable) {
            this.editorClick = true;
            if (cell != this.editingCell) {
                if (this.editingCell && this.domHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length == 0) {
                    this.domHandler.removeClass(this.editingCell, 'ui-cell-editing');
                }
                this.editingCell = cell;
                this.onEditInit.emit({ column: column, data: rowData });
                this.domHandler.addClass(cell, 'ui-cell-editing');
                var focusable_1 = this.domHandler.findSingle(cell, '.ui-cell-editor input');
                if (focusable_1) {
                    setTimeout(function () { return _this.domHandler.invokeElementMethod(focusable_1, 'focus'); }, 50);
                }
            }
        }
    };
    DataTable.prototype.switchCellToViewMode = function (element) {
        this.editingCell = null;
        var cell = this.findCell(element);
        this.domHandler.removeClass(cell, 'ui-cell-editing');
    };
    DataTable.prototype.closeCell = function () {
        if (this.editingCell) {
            this.domHandler.removeClass(this.editingCell, 'ui-cell-editing');
            this.editingCell = null;
        }
    };
    DataTable.prototype.onCellEditorKeydown = function (event, column, rowData, rowIndex) {
        if (this.editable) {
            this.onEdit.emit({ originalEvent: event, column: column, data: rowData, index: rowIndex });
            //enter
            if (event.keyCode == 13) {
                this.onEditComplete.emit({ column: column, data: rowData, index: rowIndex });
                this.domHandler.invokeElementMethod(event.target, 'blur');
                this.switchCellToViewMode(event.target);
                event.preventDefault();
            }
            else if (event.keyCode == 27) {
                this.onEditCancel.emit({ column: column, data: rowData, index: rowIndex });
                this.domHandler.invokeElementMethod(event.target, 'blur');
                this.switchCellToViewMode(event.target);
                event.preventDefault();
            }
            else if (event.keyCode == 9) {
                this.onEditComplete.emit({ column: column, data: rowData, index: rowIndex });
                if (event.shiftKey)
                    this.moveToPreviousCell(event);
                else
                    this.moveToNextCell(event);
            }
        }
    };
    DataTable.prototype.moveToPreviousCell = function (event) {
        var currentCell = this.findCell(event.target);
        var row = currentCell.parentElement;
        var targetCell = this.findPreviousEditableColumn(currentCell);
        if (targetCell) {
            this.domHandler.invokeElementMethod(targetCell, 'click');
            event.preventDefault();
        }
    };
    DataTable.prototype.moveToNextCell = function (event) {
        var currentCell = this.findCell(event.target);
        var row = currentCell.parentElement;
        var targetCell = this.findNextEditableColumn(currentCell);
        if (targetCell) {
            this.domHandler.invokeElementMethod(targetCell, 'click');
            event.preventDefault();
        }
    };
    DataTable.prototype.findPreviousEditableColumn = function (cell) {
        var prevCell = cell.previousElementSibling;
        if (!prevCell) {
            var previousRow = cell.parentElement.previousElementSibling;
            if (previousRow) {
                prevCell = previousRow.lastElementChild;
            }
        }
        if (prevCell) {
            if (this.domHandler.hasClass(prevCell, 'ui-editable-column'))
                return prevCell;
            else
                return this.findPreviousEditableColumn(prevCell);
        }
        else {
            return null;
        }
    };
    DataTable.prototype.findNextEditableColumn = function (cell) {
        var nextCell = cell.nextElementSibling;
        if (!nextCell) {
            var nextRow = cell.parentElement.nextElementSibling;
            if (nextRow) {
                nextCell = nextRow.firstElementChild;
            }
        }
        if (nextCell) {
            if (this.domHandler.hasClass(nextCell, 'ui-editable-column'))
                return nextCell;
            else
                return this.findNextEditableColumn(nextCell);
        }
        else {
            return null;
        }
    };
    DataTable.prototype.onCustomEditorFocusPrev = function (event) {
        this.moveToPreviousCell(event);
    };
    DataTable.prototype.onCustomEditorFocusNext = function (event) {
        this.moveToNextCell(event);
    };
    DataTable.prototype.findCell = function (element) {
        var cell = element;
        while (cell.tagName != 'TD') {
            cell = cell.parentElement;
        }
        return cell;
    };
    DataTable.prototype.initResizableColumns = function () {
        var _this = this;
        this.tbody = this.domHandler.findSingle(this.el.nativeElement, 'tbody.ui-datatable-data');
        this.resizerHelper = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-column-resizer-helper');
        this.fixColumnWidths();
        this.documentColumnResizeListener = this.renderer.listen('document', 'mousemove', function (event) {
            if (_this.columnResizing) {
                _this.onColumnResize(event);
            }
        });
        this.documentColumnResizeEndListener = this.renderer.listen('document', 'mouseup', function (event) {
            if (_this.columnResizing) {
                _this.columnResizing = false;
                _this.onColumnResizeEnd(event);
            }
        });
    };
    DataTable.prototype.initColumnResize = function (event) {
        var container = this.el.nativeElement.children[0];
        var containerLeft = this.domHandler.getOffset(container).left;
        this.resizeColumn = event.target.parentElement;
        this.columnResizing = true;
        this.lastResizerHelperX = (event.pageX - containerLeft + container.scrollLeft);
    };
    DataTable.prototype.onColumnResize = function (event) {
        var container = this.el.nativeElement.children[0];
        var containerLeft = this.domHandler.getOffset(container).left;
        this.domHandler.addClass(container, 'ui-unselectable-text');
        this.resizerHelper.style.height = container.offsetHeight + 'px';
        this.resizerHelper.style.top = 0 + 'px';
        this.resizerHelper.style.left = (event.pageX - containerLeft + container.scrollLeft) + 'px';
        this.resizerHelper.style.display = 'block';
    };
    DataTable.prototype.onColumnResizeEnd = function (event) {
        var delta = this.resizerHelper.offsetLeft - this.lastResizerHelperX;
        var columnWidth = this.resizeColumn.offsetWidth;
        var newColumnWidth = columnWidth + delta;
        var minWidth = this.resizeColumn.style.minWidth || 15;
        if (columnWidth + delta > parseInt(minWidth)) {
            if (this.columnResizeMode === 'fit') {
                var nextColumn = this.resizeColumn.nextElementSibling;
                var nextColumnWidth = nextColumn.offsetWidth - delta;
                if (newColumnWidth > 15 && nextColumnWidth > 15) {
                    this.resizeColumn.style.width = newColumnWidth + 'px';
                    if (nextColumn) {
                        nextColumn.style.width = nextColumnWidth + 'px';
                    }
                    if (this.scrollable) {
                        var colGroup = this.domHandler.findSingle(this.el.nativeElement, 'colgroup.ui-datatable-scrollable-colgroup');
                        var resizeColumnIndex = this.domHandler.index(this.resizeColumn);
                        colGroup.children[resizeColumnIndex].style.width = newColumnWidth + 'px';
                        if (nextColumn) {
                            colGroup.children[resizeColumnIndex + 1].style.width = nextColumnWidth + 'px';
                        }
                    }
                }
            }
            else if (this.columnResizeMode === 'expand') {
                this.tbody.parentElement.style.width = this.tbody.parentElement.offsetWidth + delta + 'px';
                this.resizeColumn.style.width = newColumnWidth + 'px';
                var containerWidth = this.tbody.parentElement.style.width;
                if (this.scrollable) {
                    this.domHandler.findSingle(this.el.nativeElement, '.ui-datatable-scrollable-header-box').children[0].style.width = containerWidth;
                    var colGroup = this.domHandler.findSingle(this.el.nativeElement, 'colgroup.ui-datatable-scrollable-colgroup');
                    var resizeColumnIndex = this.domHandler.index(this.resizeColumn);
                    colGroup.children[resizeColumnIndex].style.width = newColumnWidth + 'px';
                }
                else {
                    this.el.nativeElement.children[0].style.width = containerWidth;
                }
            }
            this.onColResize.emit({
                element: this.resizeColumn,
                delta: delta
            });
        }
        this.resizerHelper.style.display = 'none';
        this.resizeColumn = null;
        this.domHandler.removeClass(this.el.nativeElement.children[0], 'ui-unselectable-text');
    };
    DataTable.prototype.fixColumnWidths = function () {
        var columns = this.domHandler.find(this.el.nativeElement, 'th.ui-resizable-column');
        var bodyCols;
        for (var i = 0; i < columns.length; i++) {
            columns[i].style.width = columns[i].offsetWidth + 'px';
        }
        if (this.scrollable) {
            var colGroup = this.domHandler.findSingle(this.el.nativeElement, 'colgroup.ui-datatable-scrollable-colgroup');
            bodyCols = colGroup.children;
            if (bodyCols) {
                for (var i = 0; i < columns.length; i++) {
                    bodyCols[i].style.width = columns[i].offsetWidth + 'px';
                }
            }
        }
    };
    DataTable.prototype.onColumnDragStart = function (event) {
        var _this = this;
        if (this.columnResizing) {
            event.preventDefault();
            return;
        }
        this.draggedColumn = this.findParentHeader(event.target);
        event.dataTransfer.setData('text', 'b'); // Firefox requires this to make dragging possible
        this.zone.runOutsideAngular(function () {
            window.document.addEventListener('dragover', _this.onColumnDragover.bind(_this));
        });
    };
    DataTable.prototype.onColumnDragover = function (event) {
        var dropHeader = this.findParentHeader(event.target);
        if (this.reorderableColumns && this.draggedColumn && dropHeader) {
            event.preventDefault();
            var container = this.el.nativeElement.children[0];
            var containerOffset = this.domHandler.getOffset(container);
            var dropHeaderOffset = this.domHandler.getOffset(dropHeader);
            if (this.draggedColumn != dropHeader) {
                var targetLeft = dropHeaderOffset.left - containerOffset.left;
                var targetTop = containerOffset.top - dropHeaderOffset.top;
                var columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;
                this.reorderIndicatorUp.style.top = dropHeaderOffset.top - containerOffset.top - (this.iconHeight - 1) + 'px';
                this.reorderIndicatorDown.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';
                if (event.pageX > columnCenter) {
                    this.reorderIndicatorUp.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.iconWidth / 2)) + 'px';
                    this.reorderIndicatorDown.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.iconWidth / 2)) + 'px';
                    this.dropPosition = 1;
                }
                else {
                    this.reorderIndicatorUp.style.left = (targetLeft - Math.ceil(this.iconWidth / 2)) + 'px';
                    this.reorderIndicatorDown.style.left = (targetLeft - Math.ceil(this.iconWidth / 2)) + 'px';
                    this.dropPosition = -1;
                }
                this.reorderIndicatorUp.style.display = 'block';
                this.reorderIndicatorDown.style.display = 'block';
            }
            else {
                event.dataTransfer.dropEffect = 'none';
            }
        }
    };
    DataTable.prototype.onColumnDragleave = function (event) {
        if (this.reorderableColumns && this.draggedColumn) {
            event.preventDefault();
            this.reorderIndicatorUp.style.display = 'none';
            this.reorderIndicatorDown.style.display = 'none';
            window.document.removeEventListener('dragover', this.onColumnDragover);
        }
    };
    DataTable.prototype.onColumnDrop = function (event) {
        event.preventDefault();
        if (this.draggedColumn) {
            var dragIndex = this.domHandler.index(this.draggedColumn);
            var dropIndex = this.domHandler.index(this.findParentHeader(event.target));
            var allowDrop = (dragIndex != dropIndex);
            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {
                allowDrop = false;
            }
            if (allowDrop) {
                this.columns.splice(dropIndex, 0, this.columns.splice(dragIndex, 1)[0]);
                this.onColReorder.emit({
                    dragIndex: dragIndex,
                    dropIndex: dropIndex,
                    columns: this.columns
                });
            }
            this.reorderIndicatorUp.style.display = 'none';
            this.reorderIndicatorDown.style.display = 'none';
            this.draggedColumn.draggable = false;
            this.draggedColumn = null;
            this.dropPosition = null;
        }
    };
    DataTable.prototype.initColumnReordering = function () {
        this.reorderIndicatorUp = this.domHandler.findSingle(this.el.nativeElement.children[0], 'span.ui-datatable-reorder-indicator-up');
        this.reorderIndicatorDown = this.domHandler.findSingle(this.el.nativeElement.children[0], 'span.ui-datatable-reorder-indicator-down');
        this.iconWidth = this.domHandler.getHiddenElementOuterWidth(this.reorderIndicatorUp);
        this.iconHeight = this.domHandler.getHiddenElementOuterHeight(this.reorderIndicatorUp);
    };
    DataTable.prototype.findParentHeader = function (element) {
        if (element.nodeName == 'TH') {
            return element;
        }
        else {
            var parent_1 = element.parentElement;
            while (parent_1.nodeName != 'TH') {
                parent_1 = parent_1.parentElement;
                if (!parent_1)
                    break;
            }
            return parent_1;
        }
    };
    DataTable.prototype.hasFooter = function () {
        if (this.footerColumnGroup) {
            return true;
        }
        else {
            if (this.columns) {
                for (var i = 0; i < this.columns.length; i++) {
                    if (this.columns[i].footer) {
                        return true;
                    }
                }
            }
        }
        return false;
    };
    DataTable.prototype.isEmpty = function () {
        return !this.dataToRender || (this.dataToRender.length == 0);
    };
    DataTable.prototype.createLazyLoadMetadata = function () {
        return {
            first: this.first,
            rows: this.virtualScroll ? this.rows * 2 : this.rows,
            sortField: this.sortField,
            sortOrder: this.sortOrder,
            filters: this.filters,
            globalFilter: this.globalFilter ? this.globalFilter.value : null,
            multiSortMeta: this.multiSortMeta
        };
    };
    DataTable.prototype.toggleRow = function (row, event) {
        if (!this.expandedRows) {
            this.expandedRows = [];
        }
        var expandedRowIndex = this.findExpandedRowIndex(row);
        if (expandedRowIndex != -1) {
            this.expandedRows.splice(expandedRowIndex, 1);
            this.onRowCollapse.emit({
                originalEvent: event,
                data: row
            });
        }
        else {
            if (this.rowExpandMode === 'single') {
                this.expandedRows = [];
            }
            this.expandedRows.push(row);
            this.onRowExpand.emit({
                originalEvent: event,
                data: row
            });
        }
        if (event) {
            event.preventDefault();
        }
    };
    DataTable.prototype.findExpandedRowIndex = function (row) {
        var index = -1;
        if (this.expandedRows) {
            for (var i = 0; i < this.expandedRows.length; i++) {
                if (this.expandedRows[i] == row) {
                    index = i;
                    break;
                }
            }
        }
        return index;
    };
    DataTable.prototype.isRowExpanded = function (row) {
        return this.findExpandedRowIndex(row) != -1;
    };
    DataTable.prototype.findExpandedRowGroupIndex = function (row) {
        var index = -1;
        if (this.expandedRowsGroups && this.expandedRowsGroups.length) {
            for (var i = 0; i < this.expandedRowsGroups.length; i++) {
                var group = this.expandedRowsGroups[i];
                var rowGroupField = this.resolveFieldData(row, this.groupField);
                if (rowGroupField === group) {
                    index = i;
                    break;
                }
            }
        }
        return index;
    };
    DataTable.prototype.isRowGroupExpanded = function (row) {
        return this.findExpandedRowGroupIndex(row) != -1;
    };
    DataTable.prototype.toggleRowGroup = function (event, row) {
        this.rowGroupToggleClick = true;
        var index = this.findExpandedRowGroupIndex(row);
        var rowGroupField = this.resolveFieldData(row, this.groupField);
        if (index >= 0) {
            this.expandedRowsGroups.splice(index, 1);
            this.onRowGroupCollapse.emit({
                originalEvent: event,
                group: rowGroupField
            });
        }
        else {
            this.expandedRowsGroups = this.expandedRowsGroups || [];
            this.expandedRowsGroups.push(rowGroupField);
            this.onRowGroupExpand.emit({
                originalEvent: event,
                group: rowGroupField
            });
        }
        event.preventDefault();
    };
    DataTable.prototype.reset = function () {
        this.sortField = null;
        this.sortOrder = 1;
        this.filteredValue = null;
        this.filters = {};
        this._first = 0;
        this.firstChange.emit(this._first);
        this.updateTotalRecords();
        if (this.lazy)
            this.onLazyLoad.emit(this.createLazyLoadMetadata());
        else
            this.updateDataToRender(this.value);
    };
    DataTable.prototype.exportCSV = function () {
        var _this = this;
        var data = this.filteredValue || this.value;
        var csv = '\ufeff';
        //headers
        for (var i = 0; i < this.columns.length; i++) {
            if (this.columns[i].field) {
                csv += '"' + (this.columns[i].header || this.columns[i].field) + '"';
                if (i < (this.columns.length - 1)) {
                    csv += this.csvSeparator;
                }
            }
        }
        //body        
        data.forEach(function (record, i) {
            csv += '\n';
            for (var i_1 = 0; i_1 < _this.columns.length; i_1++) {
                if (_this.columns[i_1].field) {
                    csv += '"' + _this.resolveFieldData(record, _this.columns[i_1].field) + '"';
                    if (i_1 < (_this.columns.length - 1)) {
                        csv += _this.csvSeparator;
                    }
                }
            }
        });
        var blob = new Blob([csv], {
            type: 'text/csv;charset=utf-8;'
        });
        if (window.navigator.msSaveOrOpenBlob) {
            navigator.msSaveOrOpenBlob(blob, this.exportFilename + '.csv');
        }
        else {
            var link = document.createElement("a");
            link.style.display = 'none';
            document.body.appendChild(link);
            if (link.download !== undefined) {
                link.setAttribute('href', URL.createObjectURL(blob));
                link.setAttribute('download', this.exportFilename + '.csv');
                link.click();
            }
            else {
                csv = 'data:text/csv;charset=utf-8,' + csv;
                window.open(encodeURI(csv));
            }
            document.body.removeChild(link);
        }
    };
    DataTable.prototype.getBlockableElement = function () {
        return this.el.nativeElement.children[0];
    };
    DataTable.prototype.getRowStyleClass = function (rowData, rowIndex) {
        var styleClass = 'ui-widget-content';
        if (this.rowStyleClass) {
            var rowClass = this.rowStyleClass.call(this, rowData, rowIndex);
            if (rowClass) {
                styleClass += ' ' + rowClass;
            }
        }
        return styleClass;
    };
    DataTable.prototype.visibleColumns = function () {
        return this.columns ? this.columns.filter(function (c) { return !c.hidden; }) : [];
    };
    Object.defineProperty(DataTable.prototype, "containerWidth", {
        get: function () {
            if (this.scrollable) {
                if (this.scrollWidth) {
                    return this.scrollWidth;
                }
                else if (this.frozenWidth && this.unfrozenWidth) {
                    return parseFloat(this.frozenWidth) + parseFloat(this.unfrozenWidth) + 'px';
                }
            }
            else {
                return this.style ? this.style.width : null;
            }
        },
        enumerable: true,
        configurable: true
    });
    DataTable.prototype.ngOnDestroy = function () {
        //remove event listener
        if (this.globalFilterFunction) {
            this.globalFilterFunction();
        }
        if (this.resizableColumns && this.documentColumnResizeListener && this.documentColumnResizeEndListener) {
            this.documentColumnResizeListener();
            this.documentColumnResizeEndListener();
        }
        if (this.documentClickListener) {
            this.documentClickListener();
        }
        if (this.columnsSubscription) {
            this.columnsSubscription.unsubscribe();
        }
    };
    return DataTable;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTable.prototype, "paginator", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], DataTable.prototype, "rows", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], DataTable.prototype, "pageLinks", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], DataTable.prototype, "rowsPerPageOptions", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTable.prototype, "responsive", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTable.prototype, "stacked", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataTable.prototype, "selectionMode", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "selectionChange", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTable.prototype, "editable", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onRowClick", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onRowSelect", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onRowUnselect", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onRowDblclick", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onHeaderCheckboxToggle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTable.prototype, "headerCheckboxToggleAllPages", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onContextMenuSelect", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], DataTable.prototype, "filterDelay", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTable.prototype, "lazy", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onLazyLoad", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTable.prototype, "resizableColumns", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataTable.prototype, "columnResizeMode", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onColResize", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTable.prototype, "reorderableColumns", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onColReorder", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTable.prototype, "scrollable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTable.prototype, "virtualScroll", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "scrollHeight", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "scrollWidth", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "frozenWidth", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "unfrozenWidth", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataTable.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "tableStyle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataTable.prototype, "tableStyleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "globalFilter", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataTable.prototype, "sortMode", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataTable.prototype, "sortField", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], DataTable.prototype, "sortOrder", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataTable.prototype, "groupField", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], DataTable.prototype, "multiSortMeta", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "contextMenu", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataTable.prototype, "csvSeparator", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataTable.prototype, "exportFilename", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataTable.prototype, "emptyMessage", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataTable.prototype, "paginatorPosition", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTable.prototype, "alwaysShowPaginator", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTable.prototype, "metaKeySelection", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Function)
], DataTable.prototype, "rowTrackBy", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTable.prototype, "immutable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataTable.prototype, "compareSelectionBy", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onEditInit", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onEditComplete", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onEdit", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onEditCancel", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onPage", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onSort", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onFilter", void 0);
__decorate([
    core_1.ContentChild(shared_2.Header),
    __metadata("design:type", Object)
], DataTable.prototype, "header", void 0);
__decorate([
    core_1.ContentChild(shared_2.Footer),
    __metadata("design:type", Object)
], DataTable.prototype, "footer", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTable.prototype, "expandableRows", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], DataTable.prototype, "expandedRows", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTable.prototype, "expandableRowGroups", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataTable.prototype, "rowExpandMode", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], DataTable.prototype, "expandedRowsGroups", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], DataTable.prototype, "tabindex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Function)
], DataTable.prototype, "rowStyleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataTable.prototype, "rowGroupMode", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTable.prototype, "sortableRowGroup", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataTable.prototype, "sortFile", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTable.prototype, "rowHover", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "filters", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataTable.prototype, "dataKey", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTable.prototype, "loading", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "firstChange", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onRowExpand", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onRowCollapse", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onRowGroupExpand", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTable.prototype, "onRowGroupCollapse", void 0);
__decorate([
    core_1.ContentChildren(shared_2.PrimeTemplate),
    __metadata("design:type", core_1.QueryList)
], DataTable.prototype, "templates", void 0);
__decorate([
    core_1.ContentChildren(shared_2.Column),
    __metadata("design:type", core_1.QueryList)
], DataTable.prototype, "cols", void 0);
__decorate([
    core_1.ContentChild(shared_2.HeaderColumnGroup),
    __metadata("design:type", shared_2.HeaderColumnGroup)
], DataTable.prototype, "headerColumnGroup", void 0);
__decorate([
    core_1.ContentChild(shared_2.FooterColumnGroup),
    __metadata("design:type", shared_2.FooterColumnGroup)
], DataTable.prototype, "footerColumnGroup", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DataTable.prototype, "value", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DataTable.prototype, "first", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DataTable.prototype, "totalRecords", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DataTable.prototype, "selection", null);
DataTable = __decorate([
    core_1.Component({
        selector: 'p-dataTable',
        template: "\n        <div [ngStyle]=\"style\" [class]=\"styleClass\" [style.width]=\"containerWidth\"\n            [ngClass]=\"{'ui-datatable ui-widget':true,'ui-datatable-reflow':responsive,'ui-datatable-stacked':stacked,'ui-datatable-resizable':resizableColumns,'ui-datatable-scrollable':scrollable}\">\n            <div class=\"ui-datatable-loading ui-widget-overlay\" *ngIf=\"loading\"></div>\n            <div class=\"ui-datatable-loading-content\" *ngIf=\"loading\">\n                <i [class]=\"'fa fa-spin fa-2x ' + loadingIcon\"></i>\n            </div>\n            <div class=\"ui-datatable-header ui-widget-header\" *ngIf=\"header\">\n                <ng-content select=\"p-header\"></ng-content>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && paginatorPosition =='top' || paginatorPosition =='both'\"></p-paginator>\n            <div class=\"ui-datatable-tablewrapper\" *ngIf=\"!scrollable\">\n                <table [class]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <thead class=\"ui-datatable-thead\">\n                        <tr *ngIf=\"!headerColumnGroup\" class=\"ui-state-default\" [pColumnHeaders]=\"columns\"></tr>\n                        <ng-template [ngIf]=\"headerColumnGroup\">\n                            <tr *ngFor=\"let headerRow of headerColumnGroup.rows\" class=\"ui-state-default\" [pColumnHeaders]=\"headerRow.columns\"></tr>\n                        </ng-template>\n                    </thead>\n                    <tfoot *ngIf=\"hasFooter()\" class=\"ui-datatable-tfoot\">\n                        <tr *ngIf=\"!footerColumnGroup\" class=\"ui-state-default\" [pColumnFooters]=\"columns\"></tr>\n                        <ng-template [ngIf]=\"footerColumnGroup\">\n                            <tr *ngFor=\"let footerRow of footerColumnGroup.rows\" class=\"ui-state-default\" [pColumnFooters]=\"footerRow.columns\"></tr>\n                        </ng-template>\n                    </tfoot>\n                    <tbody [ngClass]=\"{'ui-datatable-data ui-widget-content': true, 'ui-datatable-hoverable-rows': (rowHover||selectionMode)}\" [pTableBody]=\"columns\"></tbody>\n                </table>\n            </div>\n            \n            <ng-template [ngIf]=\"scrollable\">\n                <div class=\"ui-datatable-scrollable-wrapper ui-helper-clearfix\" [ngClass]=\"{'max-height':scrollHeight}\">\n                    <div *ngIf=\"frozenColumns\" [pScrollableView]=\"frozenColumns\" frozen=\"true\" \n                        [ngStyle]=\"{'width':this.frozenWidth}\" class=\"ui-datatable-scrollable-view ui-datatable-frozen-view\"></div>\n                    <div [pScrollableView]=\"scrollableColumns\" [ngStyle]=\"{'width':this.unfrozenWidth, 'left': this.frozenWidth}\"\n                        class=\"ui-datatable-scrollable-view\" [virtualScroll]=\"virtualScroll\" (onVirtualScroll)=\"onVirtualScroll($event)\"\n                        [ngClass]=\"{'ui-datatable-unfrozen-view': frozenColumns}\"></div>\n                </div>\n            </ng-template>\n            \n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && paginatorPosition =='bottom' || paginatorPosition =='both'\"></p-paginator>\n            <div class=\"ui-datatable-footer ui-widget-header\" *ngIf=\"footer\">\n                <ng-content select=\"p-footer\"></ng-content>\n            </div>\n            \n            <div class=\"ui-column-resizer-helper ui-state-highlight\" style=\"display:none\"></div>\n            <span class=\"fa fa-arrow-down ui-datatable-reorder-indicator-up\" style=\"position: absolute; display: none;\"></span>\n            <span class=\"fa fa-arrow-up ui-datatable-reorder-indicator-down\" style=\"position: absolute; display: none;\"></span>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler, objectutils_1.ObjectUtils]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.IterableDiffers,
        core_1.Renderer2, core_1.ChangeDetectorRef, objectutils_1.ObjectUtils,
        core_1.NgZone])
], DataTable);
exports.DataTable = DataTable;
var DataTableModule = (function () {
    function DataTableModule() {
    }
    return DataTableModule;
}());
DataTableModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, shared_1.SharedModule, paginator_1.PaginatorModule, forms_1.FormsModule],
        exports: [DataTable, shared_1.SharedModule],
        declarations: [DataTable, DTRadioButton, DTCheckbox, ColumnHeaders, ColumnFooters, TableBody, ScrollableView, RowExpansionLoader]
    })
], DataTableModule);
exports.DataTableModule = DataTableModule;
//# sourceMappingURL=datatable.js.map

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var DeferredLoader = (function () {
    function DeferredLoader(el, domHandler, renderer, viewContainer) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
        this.viewContainer = viewContainer;
        this.onLoad = new core_1.EventEmitter();
    }
    DeferredLoader.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.shouldLoad()) {
            this.load();
        }
        this.documentScrollListener = this.renderer.listen('window', 'scroll', function () {
            if (_this.shouldLoad()) {
                _this.load();
                _this.documentScrollListener();
                _this.documentScrollListener = null;
            }
        });
    };
    DeferredLoader.prototype.shouldLoad = function () {
        var rect = this.el.nativeElement.getBoundingClientRect();
        var docElement = document.documentElement;
        var scrollTop = (window.pageYOffset || document.documentElement.scrollTop);
        var winHeight = docElement.clientHeight;
        return (winHeight >= rect.top);
    };
    DeferredLoader.prototype.load = function () {
        this.view = this.viewContainer.createEmbeddedView(this.template);
        this.onLoad.emit();
    };
    DeferredLoader.prototype.ngOnDestroy = function () {
        this.view = null;
        if (this.documentScrollListener) {
            this.documentScrollListener();
        }
    };
    return DeferredLoader;
}());
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DeferredLoader.prototype, "onLoad", void 0);
__decorate([
    core_1.ContentChild(core_1.TemplateRef),
    __metadata("design:type", core_1.TemplateRef)
], DeferredLoader.prototype, "template", void 0);
DeferredLoader = __decorate([
    core_1.Directive({
        selector: '[pDefer]',
        host: {},
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2, core_1.ViewContainerRef])
], DeferredLoader);
exports.DeferredLoader = DeferredLoader;
var DeferModule = (function () {
    function DeferModule() {
    }
    return DeferModule;
}());
DeferModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [DeferredLoader],
        declarations: [DeferredLoader]
    })
], DeferModule);
exports.DeferModule = DeferModule;
//# sourceMappingURL=defer.js.map

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var animations_1 = __webpack_require__(13);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var shared_1 = __webpack_require__(7);
var Dialog = (function () {
    function Dialog(el, domHandler, renderer) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
        this.draggable = true;
        this.resizable = true;
        this.minWidth = 150;
        this.minHeight = 150;
        this.closeOnEscape = true;
        this.closable = true;
        this.responsive = true;
        this.showHeader = true;
        this.breakpoint = 640;
        this.blockScroll = false;
        this.onShow = new core_1.EventEmitter();
        this.onHide = new core_1.EventEmitter();
        this.visibleChange = new core_1.EventEmitter();
    }
    Object.defineProperty(Dialog.prototype, "visible", {
        get: function () {
            return this._visible;
        },
        set: function (val) {
            this._visible = val;
            if (this.initialized && this.containerViewChild && this.containerViewChild.nativeElement) {
                if (this._visible)
                    this.show();
                else {
                    if (this.preventVisibleChangePropagation)
                        this.preventVisibleChangePropagation = false;
                    else
                        this.hide();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Dialog.prototype.ngAfterViewChecked = function () {
        if (this.executePostDisplayActions) {
            this.onShow.emit({});
            this.positionOverlay();
            this.executePostDisplayActions = false;
        }
    };
    Dialog.prototype.show = function () {
        this.executePostDisplayActions = true;
        this.containerViewChild.nativeElement.style.zIndex = String(++domhandler_1.DomHandler.zindex);
        this.bindGlobalListeners();
        if (this.modal) {
            this.enableModality();
        }
    };
    Dialog.prototype.positionOverlay = function () {
        var viewport = this.domHandler.getViewport();
        if (this.domHandler.getOuterHeight(this.containerViewChild.nativeElement) > viewport.height) {
            this.contentViewChild.nativeElement.style.height = (viewport.height * .75) + 'px';
        }
        if (this.positionLeft >= 0 && this.positionTop >= 0) {
            this.containerViewChild.nativeElement.style.left = this.positionLeft + 'px';
            this.containerViewChild.nativeElement.style.top = this.positionTop + 'px';
        }
        else if (this.positionTop >= 0) {
            this.center();
            this.containerViewChild.nativeElement.style.top = this.positionTop + 'px';
        }
        else {
            this.center();
        }
    };
    Dialog.prototype.hide = function () {
        this.onHide.emit({});
        this.unbindMaskClickListener();
        this.unbindGlobalListeners();
        if (this.modal) {
            this.disableModality();
        }
    };
    Dialog.prototype.close = function (event) {
        this.preventVisibleChangePropagation = true;
        this.hide();
        this.visibleChange.emit(false);
        event.preventDefault();
    };
    Dialog.prototype.ngAfterViewInit = function () {
        this.initialized = true;
        if (this.appendTo) {
            if (this.appendTo === 'body')
                document.body.appendChild(this.containerViewChild.nativeElement);
            else
                this.domHandler.appendChild(this.containerViewChild.nativeElement, this.appendTo);
        }
        if (this.visible) {
            this.show();
        }
    };
    Dialog.prototype.center = function () {
        var elementWidth = this.domHandler.getOuterWidth(this.containerViewChild.nativeElement);
        var elementHeight = this.domHandler.getOuterHeight(this.containerViewChild.nativeElement);
        if (elementWidth == 0 && elementHeight == 0) {
            this.containerViewChild.nativeElement.style.visibility = 'hidden';
            this.containerViewChild.nativeElement.style.display = 'block';
            elementWidth = this.domHandler.getOuterWidth(this.containerViewChild.nativeElement);
            elementHeight = this.domHandler.getOuterHeight(this.containerViewChild.nativeElement);
            this.containerViewChild.nativeElement.style.display = 'none';
            this.containerViewChild.nativeElement.style.visibility = 'visible';
        }
        var viewport = this.domHandler.getViewport();
        var x = Math.max((viewport.width - elementWidth) / 2, 0);
        var y = Math.max((viewport.height - elementHeight) / 2, 0);
        this.containerViewChild.nativeElement.style.left = x + 'px';
        this.containerViewChild.nativeElement.style.top = y + 'px';
    };
    Dialog.prototype.enableModality = function () {
        var _this = this;
        if (!this.mask) {
            this.mask = document.createElement('div');
            this.mask.style.zIndex = String(parseInt(this.containerViewChild.nativeElement.style.zIndex) - 1);
            this.domHandler.addMultipleClasses(this.mask, 'ui-widget-overlay ui-dialog-mask');
            if (this.closable && this.dismissableMask) {
                this.maskClickListener = this.renderer.listen(this.mask, 'click', function (event) {
                    _this.close(event);
                });
            }
            document.body.appendChild(this.mask);
            if (this.blockScroll) {
                this.domHandler.addClass(document.body, 'ui-overflow-hidden');
            }
        }
    };
    Dialog.prototype.disableModality = function () {
        if (this.mask) {
            document.body.removeChild(this.mask);
            if (this.blockScroll) {
                this.domHandler.removeClass(document.body, 'ui-overflow-hidden');
            }
            this.mask = null;
        }
    };
    Dialog.prototype.unbindMaskClickListener = function () {
        if (this.maskClickListener) {
            this.maskClickListener();
            this.maskClickListener = null;
        }
    };
    Dialog.prototype.moveOnTop = function () {
        this.containerViewChild.nativeElement.style.zIndex = String(++domhandler_1.DomHandler.zindex);
    };
    Dialog.prototype.onCloseMouseDown = function (event) {
        this.closeIconMouseDown = true;
    };
    Dialog.prototype.initDrag = function (event) {
        if (this.closeIconMouseDown) {
            this.closeIconMouseDown = false;
            return;
        }
        if (this.draggable) {
            this.dragging = true;
            this.lastPageX = event.pageX;
            this.lastPageY = event.pageY;
        }
    };
    Dialog.prototype.onDrag = function (event) {
        if (this.dragging) {
            var deltaX = event.pageX - this.lastPageX;
            var deltaY = event.pageY - this.lastPageY;
            var leftPos = parseInt(this.containerViewChild.nativeElement.style.left);
            var topPos = parseInt(this.containerViewChild.nativeElement.style.top);
            this.containerViewChild.nativeElement.style.left = leftPos + deltaX + 'px';
            this.containerViewChild.nativeElement.style.top = topPos + deltaY + 'px';
            this.lastPageX = event.pageX;
            this.lastPageY = event.pageY;
        }
    };
    Dialog.prototype.endDrag = function (event) {
        if (this.draggable) {
            this.dragging = false;
        }
    };
    Dialog.prototype.initResize = function (event) {
        if (this.resizable) {
            this.preWidth = null;
            this.resizing = true;
            this.lastPageX = event.pageX;
            this.lastPageY = event.pageY;
        }
    };
    Dialog.prototype.onResize = function (event) {
        if (this.resizing) {
            var deltaX = event.pageX - this.lastPageX;
            var deltaY = event.pageY - this.lastPageY;
            var containerWidth = this.domHandler.getOuterWidth(this.containerViewChild.nativeElement);
            var containerHeight = this.domHandler.getOuterHeight(this.containerViewChild.nativeElement);
            var contentHeight = this.domHandler.getOuterHeight(this.contentViewChild.nativeElement);
            var newWidth = containerWidth + deltaX;
            var newHeight = containerHeight + deltaY;
            if (newWidth > this.minWidth) {
                this.containerViewChild.nativeElement.style.width = newWidth + 'px';
            }
            if (newHeight > this.minHeight) {
                this.containerViewChild.nativeElement.style.height = newHeight + 'px';
                this.contentViewChild.nativeElement.style.height = contentHeight + deltaY + 'px';
            }
            this.lastPageX = event.pageX;
            this.lastPageY = event.pageY;
        }
    };
    Dialog.prototype.bindGlobalListeners = function () {
        if (this.draggable) {
            this.bindDocumentDragListener();
        }
        if (this.resizable) {
            this.bindDocumentResizeListeners();
        }
        if (this.responsive) {
            this.bindDocumentResponsiveListener();
        }
        if (this.closeOnEscape && this.closable) {
            this.bindDocumentEscapeListener();
        }
    };
    Dialog.prototype.unbindGlobalListeners = function () {
        this.unbindDocumentDragListener();
        this.unbindDocumentResizeListeners();
        this.unbindDocumentResponsiveListener();
        this.unbindDocumentEscapeListener();
    };
    Dialog.prototype.bindDocumentDragListener = function () {
        var _this = this;
        this.documentDragListener = this.renderer.listen('document', 'mousemove', function (event) {
            _this.onDrag(event);
        });
    };
    Dialog.prototype.unbindDocumentDragListener = function () {
        if (this.documentDragListener) {
            this.documentDragListener();
            this.documentDragListener = null;
        }
    };
    Dialog.prototype.bindDocumentResizeListeners = function () {
        var _this = this;
        this.documentResizeListener = this.renderer.listen('document', 'mousemove', function (event) {
            _this.onResize(event);
        });
        this.documentResizeEndListener = this.renderer.listen('document', 'mouseup', function (event) {
            if (_this.resizing) {
                _this.resizing = false;
            }
        });
    };
    Dialog.prototype.unbindDocumentResizeListeners = function () {
        if (this.documentResizeListener && this.documentResizeEndListener) {
            this.documentResizeListener();
            this.documentResizeEndListener();
            this.documentResizeListener = null;
            this.documentResizeEndListener = null;
        }
    };
    Dialog.prototype.bindDocumentResponsiveListener = function () {
        var _this = this;
        this.documentResponsiveListener = this.renderer.listen('window', 'resize', function (event) {
            var viewport = _this.domHandler.getViewport();
            var width = _this.domHandler.getOuterWidth(_this.containerViewChild.nativeElement);
            if (viewport.width <= _this.breakpoint) {
                if (!_this.preWidth) {
                    _this.preWidth = width;
                }
                _this.containerViewChild.nativeElement.style.left = '0px';
                _this.containerViewChild.nativeElement.style.width = '100%';
            }
            else {
                _this.containerViewChild.nativeElement.style.width = _this.preWidth + 'px';
                _this.positionOverlay();
            }
        });
    };
    Dialog.prototype.unbindDocumentResponsiveListener = function () {
        if (this.documentResponsiveListener) {
            this.documentResponsiveListener();
            this.documentResponsiveListener = null;
        }
    };
    Dialog.prototype.bindDocumentEscapeListener = function () {
        var _this = this;
        this.documentEscapeListener = this.renderer.listen('document', 'keydown', function (event) {
            if (event.which == 27) {
                if (parseInt(_this.containerViewChild.nativeElement.style.zIndex) == domhandler_1.DomHandler.zindex) {
                    _this.close(event);
                }
            }
        });
    };
    Dialog.prototype.unbindDocumentEscapeListener = function () {
        if (this.documentEscapeListener) {
            this.documentEscapeListener();
            this.documentEscapeListener = null;
        }
    };
    Dialog.prototype.ngOnDestroy = function () {
        this.initialized = false;
        this.disableModality();
        this.unbindGlobalListeners();
        if (this.appendTo) {
            this.el.nativeElement.appendChild(this.containerViewChild.nativeElement);
        }
        this.unbindMaskClickListener();
    };
    return Dialog;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Dialog.prototype, "header", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Dialog.prototype, "draggable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Dialog.prototype, "resizable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Dialog.prototype, "minWidth", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Dialog.prototype, "minHeight", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Dialog.prototype, "width", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Dialog.prototype, "height", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Dialog.prototype, "positionLeft", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Dialog.prototype, "positionTop", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Dialog.prototype, "contentStyle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Dialog.prototype, "modal", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Dialog.prototype, "closeOnEscape", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Dialog.prototype, "dismissableMask", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Dialog.prototype, "rtl", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Dialog.prototype, "closable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Dialog.prototype, "responsive", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Dialog.prototype, "appendTo", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Dialog.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Dialog.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Dialog.prototype, "showHeader", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Dialog.prototype, "breakpoint", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Dialog.prototype, "blockScroll", void 0);
__decorate([
    core_1.ContentChild(shared_1.Header),
    __metadata("design:type", Object)
], Dialog.prototype, "headerFacet", void 0);
__decorate([
    core_1.ContentChild(shared_1.Footer),
    __metadata("design:type", Object)
], Dialog.prototype, "footerFacet", void 0);
__decorate([
    core_1.ViewChild('container'),
    __metadata("design:type", core_1.ElementRef)
], Dialog.prototype, "containerViewChild", void 0);
__decorate([
    core_1.ViewChild('titlebar'),
    __metadata("design:type", core_1.ElementRef)
], Dialog.prototype, "headerViewChild", void 0);
__decorate([
    core_1.ViewChild('content'),
    __metadata("design:type", core_1.ElementRef)
], Dialog.prototype, "contentViewChild", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Dialog.prototype, "onShow", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Dialog.prototype, "onHide", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Dialog.prototype, "visibleChange", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], Dialog.prototype, "visible", null);
Dialog = __decorate([
    core_1.Component({
        selector: 'p-dialog',
        template: "\n        <div #container [ngClass]=\"{'ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow':true,'ui-dialog-rtl':rtl,'ui-dialog-draggable':draggable}\" [ngStyle]=\"style\" [class]=\"styleClass\"\n            [style.display]=\"visible ? 'block' : 'none'\" [style.width.px]=\"width\" [style.height.px]=\"height\" [style.minWidth.px]=\"minWidth\" (mousedown)=\"moveOnTop()\" [@dialogState]=\"visible ? 'visible' : 'hidden'\">\n            <div #titlebar class=\"ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top\"\n                (mousedown)=\"initDrag($event)\" (mouseup)=\"endDrag($event)\" *ngIf=\"showHeader\">\n                <span class=\"ui-dialog-title\" *ngIf=\"header\">{{header}}</span>\n                <span class=\"ui-dialog-title\" *ngIf=\"headerFacet\">\n                    <ng-content select=\"p-header\"></ng-content>\n                </span>\n                <a *ngIf=\"closable\" [ngClass]=\"{'ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all':true}\" href=\"#\" role=\"button\" (click)=\"close($event)\" (mousedown)=\"onCloseMouseDown($event)\">\n                    <span class=\"fa fa-fw fa-close\"></span>\n                </a>\n            </div>\n            <div #content class=\"ui-dialog-content ui-widget-content\" [ngStyle]=\"contentStyle\">\n                <ng-content></ng-content>\n            </div>\n            <div class=\"ui-dialog-footer ui-widget-content\" *ngIf=\"footerFacet\">\n                <ng-content select=\"p-footer\"></ng-content>\n            </div>\n            <div *ngIf=\"resizable\" class=\"ui-resizable-handle ui-resizable-se ui-icon ui-icon-gripsmall-diagonal-se\" style=\"z-index: 90;\"\n                (mousedown)=\"initResize($event)\"></div>\n        </div>\n    ",
        animations: [
            animations_1.trigger('dialogState', [
                animations_1.state('hidden', animations_1.style({
                    opacity: 0
                })),
                animations_1.state('visible', animations_1.style({
                    opacity: 1
                })),
                animations_1.transition('visible => hidden', animations_1.animate('400ms ease-in')),
                animations_1.transition('hidden => visible', animations_1.animate('400ms ease-out'))
            ])
        ],
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2])
], Dialog);
exports.Dialog = Dialog;
var DialogModule = (function () {
    function DialogModule() {
    }
    return DialogModule;
}());
DialogModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Dialog, shared_1.SharedModule],
        declarations: [Dialog]
    })
], DialogModule);
exports.DialogModule = DialogModule;
//# sourceMappingURL=dialog.js.map

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var Draggable = (function () {
    function Draggable(el, domHandler) {
        this.el = el;
        this.domHandler = domHandler;
        this.onDragStart = new core_1.EventEmitter();
        this.onDragEnd = new core_1.EventEmitter();
        this.onDrag = new core_1.EventEmitter();
    }
    Draggable.prototype.dragStart = function (event) {
        if (this.allowDrag()) {
            if (this.dragEffect) {
                event.dataTransfer.effectAllowed = this.dragEffect;
            }
            event.dataTransfer.setData('text', this.scope);
            this.onDragStart.emit(event);
        }
        else {
            event.preventDefault();
        }
    };
    Draggable.prototype.drag = function (event) {
        this.onDrag.emit(event);
    };
    Draggable.prototype.dragEnd = function (event) {
        this.onDragEnd.emit(event);
    };
    Draggable.prototype.mouseover = function (event) {
        this.handle = event.target;
    };
    Draggable.prototype.mouseleave = function (event) {
        this.handle = null;
    };
    Draggable.prototype.allowDrag = function () {
        if (this.dragHandle && this.handle)
            return this.domHandler.matches(this.handle, this.dragHandle);
        else
            return true;
    };
    return Draggable;
}());
__decorate([
    core_1.Input('pDraggable'),
    __metadata("design:type", String)
], Draggable.prototype, "scope", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Draggable.prototype, "dragEffect", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Draggable.prototype, "dragHandle", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Draggable.prototype, "onDragStart", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Draggable.prototype, "onDragEnd", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Draggable.prototype, "onDrag", void 0);
__decorate([
    core_1.HostListener('dragstart', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Draggable.prototype, "dragStart", null);
__decorate([
    core_1.HostListener('drag', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Draggable.prototype, "drag", null);
__decorate([
    core_1.HostListener('dragend', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Draggable.prototype, "dragEnd", null);
__decorate([
    core_1.HostListener('mouseover', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Draggable.prototype, "mouseover", null);
__decorate([
    core_1.HostListener('mouseleave', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Draggable.prototype, "mouseleave", null);
Draggable = __decorate([
    core_1.Directive({
        selector: '[pDraggable]',
        host: {
            '[draggable]': 'true'
        },
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler])
], Draggable);
exports.Draggable = Draggable;
var Droppable = (function () {
    function Droppable(el, domHandler) {
        this.el = el;
        this.domHandler = domHandler;
        this.onDragEnter = new core_1.EventEmitter();
        this.onDragLeave = new core_1.EventEmitter();
        this.onDrop = new core_1.EventEmitter();
        this.onDragOver = new core_1.EventEmitter();
    }
    Droppable.prototype.drop = function (event) {
        if (this.allowDrop(event)) {
            event.preventDefault();
            this.onDrop.emit(event);
        }
    };
    Droppable.prototype.dragEnter = function (event) {
        event.preventDefault();
        if (this.dropEffect) {
            event.dataTransfer.dropEffect = this.dropEffect;
        }
        this.onDragEnter.emit(event);
    };
    Droppable.prototype.dragLeave = function (event) {
        event.preventDefault();
        this.onDragLeave.emit(event);
    };
    Droppable.prototype.dragOver = function (event) {
        event.preventDefault();
        this.onDragOver.emit(event);
    };
    Droppable.prototype.allowDrop = function (event) {
        var dragScope = event.dataTransfer.getData('text');
        if (typeof (this.scope) == "string" && dragScope == this.scope) {
            return true;
        }
        else if (this.scope instanceof Array) {
            for (var j = 0; j < this.scope.length; j++) {
                if (dragScope == this.scope[j]) {
                    return true;
                }
            }
        }
        return false;
    };
    return Droppable;
}());
__decorate([
    core_1.Input('pDroppable'),
    __metadata("design:type", Object)
], Droppable.prototype, "scope", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Droppable.prototype, "dropEffect", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Droppable.prototype, "onDragEnter", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Droppable.prototype, "onDragLeave", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Droppable.prototype, "onDrop", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Droppable.prototype, "onDragOver", void 0);
__decorate([
    core_1.HostListener('drop', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Droppable.prototype, "drop", null);
__decorate([
    core_1.HostListener('dragenter', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Droppable.prototype, "dragEnter", null);
__decorate([
    core_1.HostListener('dragleave', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Droppable.prototype, "dragLeave", null);
__decorate([
    core_1.HostListener('dragover', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Droppable.prototype, "dragOver", null);
Droppable = __decorate([
    core_1.Directive({
        selector: '[pDroppable]',
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler])
], Droppable);
exports.Droppable = Droppable;
var DragDropModule = (function () {
    function DragDropModule() {
    }
    return DragDropModule;
}());
DragDropModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Draggable, Droppable],
        declarations: [Draggable, Droppable]
    })
], DragDropModule);
exports.DragDropModule = DragDropModule;
//# sourceMappingURL=dragdrop.js.map

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var animations_1 = __webpack_require__(13);
var common_1 = __webpack_require__(3);
var shared_1 = __webpack_require__(7);
var domhandler_1 = __webpack_require__(4);
var objectutils_1 = __webpack_require__(18);
var forms_1 = __webpack_require__(6);
exports.DROPDOWN_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return Dropdown; }),
    multi: true
};
var Dropdown = (function () {
    function Dropdown(el, domHandler, renderer, cd, objectUtils) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
        this.cd = cd;
        this.objectUtils = objectUtils;
        this.scrollHeight = '200px';
        this.autoWidth = true;
        this.filterBy = 'label';
        this.lazy = true;
        this.onChange = new core_1.EventEmitter();
        this.onFocus = new core_1.EventEmitter();
        this.onBlur = new core_1.EventEmitter();
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
        this.panelVisible = false;
    }
    Dropdown.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.templates.forEach(function (item) {
            switch (item.getType()) {
                case 'item':
                    _this.itemTemplate = item.template;
                    break;
                default:
                    _this.itemTemplate = item.template;
                    break;
            }
        });
    };
    Dropdown.prototype.ngOnInit = function () {
        this.optionsToDisplay = this.options;
        this.updateSelectedOption(null);
    };
    Object.defineProperty(Dropdown.prototype, "options", {
        get: function () {
            return this._options;
        },
        set: function (opts) {
            this._options = opts;
            this.optionsToDisplay = this._options;
            this.updateSelectedOption(this.value);
            this.optionsChanged = true;
            if (this.filterValue && this.filterValue.length) {
                this.activateFilter();
            }
        },
        enumerable: true,
        configurable: true
    });
    Dropdown.prototype.ngAfterViewInit = function () {
        this.container = this.containerViewChild.nativeElement;
        this.panel = this.panelViewChild.nativeElement;
        this.itemsWrapper = this.itemsWrapperViewChild.nativeElement;
        this.updateDimensions();
        this.initialized = true;
        if (this.appendTo) {
            if (this.appendTo === 'body')
                document.body.appendChild(this.panel);
            else
                this.domHandler.appendChild(this.panel, this.appendTo);
        }
    };
    Object.defineProperty(Dropdown.prototype, "label", {
        get: function () {
            return (this.selectedOption ? this.selectedOption.label : this.placeholder);
        },
        enumerable: true,
        configurable: true
    });
    Dropdown.prototype.updateEditableLabel = function () {
        if (this.editableInputViewChild && this.editableInputViewChild.nativeElement) {
            this.editableInputViewChild.nativeElement.value = this.value || (this.selectedOption ? this.selectedOption.label : '');
        }
    };
    Dropdown.prototype.onItemClick = function (event, option) {
        this.itemClick = true;
        this.selectItem(event, option);
        this.focusViewChild.nativeElement.focus();
        this.hide();
    };
    Dropdown.prototype.selectItem = function (event, option) {
        if (this.selectedOption != option) {
            this.selectedOption = option;
            this.value = option.value;
            this.onModelChange(this.value);
            this.updateEditableLabel();
            this.onChange.emit({
                originalEvent: event,
                value: this.value
            });
        }
    };
    Dropdown.prototype.ngAfterViewChecked = function () {
        var _this = this;
        if (this.shown) {
            this.onShow();
            this.shown = false;
        }
        if (this.optionsChanged && this.panelVisible) {
            this.optionsChanged = false;
            setTimeout(function () { return _this.alignPanel(); }, 1);
        }
        if (this.selectedOptionUpdated && this.itemsWrapper) {
            var selectedItem = this.domHandler.findSingle(this.panel, 'li.ui-state-highlight');
            if (selectedItem) {
                this.domHandler.scrollInView(this.itemsWrapper, this.domHandler.findSingle(this.panel, 'li.ui-state-highlight'));
            }
            this.selectedOptionUpdated = false;
        }
    };
    Dropdown.prototype.writeValue = function (value) {
        if (this.filter) {
            this.resetFilter();
        }
        this.value = value;
        this.updateSelectedOption(value);
        this.updateEditableLabel();
        this.cd.markForCheck();
    };
    Dropdown.prototype.resetFilter = function () {
        if (this.filterViewChild && this.filterViewChild.nativeElement) {
            this.filterViewChild.nativeElement.value = '';
        }
        this.optionsToDisplay = this.options;
    };
    Dropdown.prototype.updateSelectedOption = function (val) {
        this.selectedOption = this.findOption(val, this.optionsToDisplay);
        if (!this.placeholder && !this.selectedOption && this.optionsToDisplay && this.optionsToDisplay.length && !this.editable) {
            this.selectedOption = this.optionsToDisplay[0];
        }
        this.selectedOptionUpdated = true;
    };
    Dropdown.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    Dropdown.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    Dropdown.prototype.setDisabledState = function (val) {
        this.disabled = val;
    };
    Dropdown.prototype.updateDimensions = function () {
        if (this.autoWidth) {
            var select = this.domHandler.findSingle(this.el.nativeElement, 'select');
            if (!this.style || (!this.style['width'] && !this.style['min-width'])) {
                this.el.nativeElement.children[0].style.width = select.offsetWidth + 30 + 'px';
            }
        }
    };
    Dropdown.prototype.onMouseclick = function (event) {
        var _this = this;
        if (this.disabled || this.readonly) {
            return;
        }
        this.selfClick = true;
        if (!this.itemClick) {
            this.focusViewChild.nativeElement.focus();
            if (this.panelVisible)
                this.hide();
            else {
                this.show();
                if (this.filterViewChild != undefined) {
                    setTimeout(function () {
                        _this.filterViewChild.nativeElement.focus();
                    }, 200);
                }
            }
        }
    };
    Dropdown.prototype.onEditableInputClick = function (event) {
        this.itemClick = true;
        this.bindDocumentClickListener();
    };
    Dropdown.prototype.onEditableInputFocus = function (event) {
        this.focus = true;
        this.hide();
    };
    Dropdown.prototype.onEditableInputChange = function (event) {
        this.value = event.target.value;
        this.updateSelectedOption(this.value);
        this.onModelChange(this.value);
        this.onChange.emit({
            originalEvent: event,
            value: this.value
        });
    };
    Dropdown.prototype.onShow = function () {
        if (this.options && this.options.length) {
            this.alignPanel();
            this.bindDocumentClickListener();
            var selectedListItem = this.domHandler.findSingle(this.itemsWrapper, '.ui-dropdown-item.ui-state-highlight');
            if (selectedListItem) {
                this.domHandler.scrollInView(this.itemsWrapper, selectedListItem);
            }
        }
    };
    Dropdown.prototype.show = function () {
        if (this.appendTo) {
            this.panel.style.minWidth = this.domHandler.getWidth(this.container) + 'px';
        }
        this.panel.style.zIndex = String(++domhandler_1.DomHandler.zindex);
        this.panelVisible = true;
        this.shown = true;
    };
    Dropdown.prototype.hide = function () {
        this.panelVisible = false;
    };
    Dropdown.prototype.alignPanel = function () {
        if (this.appendTo)
            this.domHandler.absolutePosition(this.panel, this.container);
        else
            this.domHandler.relativePosition(this.panel, this.container);
    };
    Dropdown.prototype.onInputFocus = function (event) {
        this.focus = true;
        this.onFocus.emit(event);
    };
    Dropdown.prototype.onInputBlur = function (event) {
        this.focus = false;
        this.onModelTouched();
        this.onBlur.emit(event);
    };
    Dropdown.prototype.onKeydown = function (event) {
        if (this.readonly) {
            return;
        }
        var selectedItemIndex = this.selectedOption ? this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay) : -1;
        switch (event.which) {
            //down
            case 40:
                if (!this.panelVisible && event.altKey) {
                    this.show();
                }
                else {
                    if (selectedItemIndex != -1) {
                        var nextItemIndex = selectedItemIndex + 1;
                        if (nextItemIndex != (this.optionsToDisplay.length)) {
                            this.selectedOption = this.optionsToDisplay[nextItemIndex];
                            this.selectedOptionUpdated = true;
                            this.selectItem(event, this.selectedOption);
                        }
                    }
                    else if (this.optionsToDisplay) {
                        this.selectedOption = this.optionsToDisplay[0];
                    }
                }
                event.preventDefault();
                break;
            //up
            case 38:
                if (selectedItemIndex > 0) {
                    var prevItemIndex = selectedItemIndex - 1;
                    this.selectedOption = this.optionsToDisplay[prevItemIndex];
                    this.selectedOptionUpdated = true;
                    this.selectItem(event, this.selectedOption);
                }
                event.preventDefault();
                break;
            //space
            case 32:
                this.show();
                event.preventDefault();
                break;
            //enter
            case 13:
                this.hide();
                event.preventDefault();
                break;
            //escape and tab
            case 27:
            case 9:
                this.hide();
                break;
        }
    };
    Dropdown.prototype.findOptionIndex = function (val, opts) {
        var index = -1;
        if (opts) {
            for (var i = 0; i < opts.length; i++) {
                if ((val == null && opts[i].value == null) || this.objectUtils.equals(val, opts[i].value, this.dataKey)) {
                    index = i;
                    break;
                }
            }
        }
        return index;
    };
    Dropdown.prototype.findOption = function (val, opts) {
        var index = this.findOptionIndex(val, opts);
        return (index != -1) ? opts[index] : null;
    };
    Dropdown.prototype.onFilter = function (event) {
        var inputValue = event.target.value.toLowerCase();
        if (inputValue && inputValue.length) {
            this.filterValue = inputValue;
            this.activateFilter();
        }
        else {
            this.filterValue = null;
            this.optionsToDisplay = this.options;
        }
        this.optionsChanged = true;
    };
    Dropdown.prototype.activateFilter = function () {
        var searchFields = this.filterBy.split(',');
        if (this.options && this.options.length) {
            this.optionsToDisplay = this.objectUtils.filter(this.options, searchFields, this.filterValue);
            this.optionsChanged = true;
        }
    };
    Dropdown.prototype.applyFocus = function () {
        if (this.editable)
            this.domHandler.findSingle(this.el.nativeElement, '.ui-dropdown-label.ui-inputtext').focus();
        else
            this.domHandler.findSingle(this.el.nativeElement, 'input[readonly]').focus();
    };
    Dropdown.prototype.bindDocumentClickListener = function () {
        var _this = this;
        if (!this.documentClickListener) {
            this.documentClickListener = this.renderer.listen('document', 'click', function () {
                if (!_this.selfClick && !_this.itemClick) {
                    _this.panelVisible = false;
                    _this.unbindDocumentClickListener();
                }
                _this.selfClick = false;
                _this.itemClick = false;
                _this.cd.markForCheck();
            });
        }
    };
    Dropdown.prototype.unbindDocumentClickListener = function () {
        if (this.documentClickListener) {
            this.documentClickListener();
            this.documentClickListener = null;
        }
    };
    Dropdown.prototype.ngOnDestroy = function () {
        this.initialized = false;
        this.unbindDocumentClickListener();
        if (this.appendTo) {
            this.el.nativeElement.appendChild(this.panel);
        }
    };
    return Dropdown;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Dropdown.prototype, "scrollHeight", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Dropdown.prototype, "filter", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Dropdown.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Dropdown.prototype, "panelStyle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Dropdown.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Dropdown.prototype, "panelStyleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Dropdown.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Dropdown.prototype, "readonly", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Dropdown.prototype, "autoWidth", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Dropdown.prototype, "required", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Dropdown.prototype, "editable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Dropdown.prototype, "appendTo", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Dropdown.prototype, "tabindex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Dropdown.prototype, "placeholder", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Dropdown.prototype, "filterPlaceholder", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Dropdown.prototype, "inputId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Dropdown.prototype, "dataKey", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Dropdown.prototype, "filterBy", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Dropdown.prototype, "lazy", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Dropdown.prototype, "onChange", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Dropdown.prototype, "onFocus", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Dropdown.prototype, "onBlur", void 0);
__decorate([
    core_1.ViewChild('container'),
    __metadata("design:type", core_1.ElementRef)
], Dropdown.prototype, "containerViewChild", void 0);
__decorate([
    core_1.ViewChild('panel'),
    __metadata("design:type", core_1.ElementRef)
], Dropdown.prototype, "panelViewChild", void 0);
__decorate([
    core_1.ViewChild('itemswrapper'),
    __metadata("design:type", core_1.ElementRef)
], Dropdown.prototype, "itemsWrapperViewChild", void 0);
__decorate([
    core_1.ViewChild('filter'),
    __metadata("design:type", core_1.ElementRef)
], Dropdown.prototype, "filterViewChild", void 0);
__decorate([
    core_1.ViewChild('in'),
    __metadata("design:type", core_1.ElementRef)
], Dropdown.prototype, "focusViewChild", void 0);
__decorate([
    core_1.ViewChild('editableInput'),
    __metadata("design:type", core_1.ElementRef)
], Dropdown.prototype, "editableInputViewChild", void 0);
__decorate([
    core_1.ContentChildren(shared_1.PrimeTemplate),
    __metadata("design:type", core_1.QueryList)
], Dropdown.prototype, "templates", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], Dropdown.prototype, "options", null);
Dropdown = __decorate([
    core_1.Component({
        selector: 'p-dropdown',
        template: "\n         <div #container [ngClass]=\"{'ui-dropdown ui-widget ui-state-default ui-corner-all ui-helper-clearfix':true,\n            'ui-state-disabled':disabled,'ui-dropdown-open':panelVisible,'ui-state-focus':focus}\"\n            (click)=\"onMouseclick($event)\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-helper-hidden-accessible\" *ngIf=\"autoWidth\">\n                <select [required]=\"required\" name=\"options\" [attr.aria-label]=\"selectedOption ? selectedOption.label : ' '\" tabindex=\"-1\" aria-hidden=\"true\">\n                    <option *ngFor=\"let option of options\" [value]=\"option.value\" [selected]=\"selectedOption == option\">{{option.label}}</option>\n                </select>\n            </div>\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #in [attr.id]=\"inputId\" type=\"text\" [attr.aria-label]=\"selectedOption ? selectedOption.label : ' '\" readonly (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" (keydown)=\"onKeydown($event)\" [disabled]=\"disabled\" [attr.tabindex]=\"tabindex\">\n            </div>\n            <label [ngClass]=\"{'ui-dropdown-label ui-inputtext ui-corner-all':true,'ui-dropdown-label-empty':!label}\" *ngIf=\"!editable\">{{label||'empty'}}</label>\n            <input #editableInput type=\"text\" [attr.aria-label]=\"selectedOption ? selectedOption.label : ' '\" class=\"ui-dropdown-label ui-inputtext ui-corner-all\" *ngIf=\"editable\" [disabled]=\"disabled\" [attr.placeholder]=\"placeholder\"\n                        (click)=\"onEditableInputClick($event)\" (input)=\"onEditableInputChange($event)\" (focus)=\"onEditableInputFocus($event)\" (blur)=\"onInputBlur($event)\">\n            <div class=\"ui-dropdown-trigger ui-state-default ui-corner-right\">\n                <span class=\"fa fa-fw fa-caret-down ui-clickable\"></span>\n            </div>\n            <div #panel [ngClass]=\"'ui-dropdown-panel ui-widget-content ui-corner-all ui-helper-hidden ui-shadow'\" [@panelState]=\"panelVisible ? 'visible' : 'hidden'\"\n                [style.display]=\"panelVisible ? 'block' : 'none'\" [ngStyle]=\"panelStyle\" [class]=\"panelStyleClass\">\n                <div *ngIf=\"filter\" class=\"ui-dropdown-filter-container\" (input)=\"onFilter($event)\" (click)=\"$event.stopPropagation()\">\n                    <input #filter type=\"text\" autocomplete=\"off\" class=\"ui-dropdown-filter ui-inputtext ui-widget ui-state-default ui-corner-all\" [attr.placeholder]=\"filterPlaceholder\"\n                    (keydown.enter)=\"$event.preventDefault()\">\n                    <span class=\"fa fa-search\"></span>\n                </div>\n                <div #itemswrapper class=\"ui-dropdown-items-wrapper\" [style.max-height]=\"scrollHeight||'auto'\">\n                    <ul class=\"ui-dropdown-items ui-dropdown-list ui-widget-content ui-widget ui-corner-all ui-helper-reset\" *ngIf=\"lazy ? panelVisible : true\">\n                        <li *ngFor=\"let option of optionsToDisplay;let i=index\" \n                            [ngClass]=\"{'ui-dropdown-item ui-corner-all':true, 'ui-state-highlight':(selectedOption == option), \n                            'ui-dropdown-item-empty':!option.label||option.label.length === 0}\"\n                            (click)=\"onItemClick($event, option)\">\n                            <span *ngIf=\"!itemTemplate\">{{option.label||'empty'}}</span>\n                            <ng-template [pTemplateWrapper]=\"itemTemplate\" [item]=\"option\" *ngIf=\"itemTemplate\"></ng-template>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    ",
        animations: [
            animations_1.trigger('panelState', [
                animations_1.state('hidden', animations_1.style({
                    opacity: 0
                })),
                animations_1.state('visible', animations_1.style({
                    opacity: 1
                })),
                animations_1.transition('visible => hidden', animations_1.animate('400ms ease-in')),
                animations_1.transition('hidden => visible', animations_1.animate('400ms ease-out'))
            ])
        ],
        providers: [domhandler_1.DomHandler, objectutils_1.ObjectUtils, exports.DROPDOWN_VALUE_ACCESSOR]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2, core_1.ChangeDetectorRef, objectutils_1.ObjectUtils])
], Dropdown);
exports.Dropdown = Dropdown;
var DropdownModule = (function () {
    function DropdownModule() {
    }
    return DropdownModule;
}());
DropdownModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, shared_1.SharedModule],
        exports: [Dropdown, shared_1.SharedModule],
        declarations: [Dropdown]
    })
], DropdownModule);
exports.DropdownModule = DropdownModule;
//# sourceMappingURL=dropdown.js.map

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var shared_1 = __webpack_require__(7);
var domhandler_1 = __webpack_require__(4);
var forms_1 = __webpack_require__(6);
exports.EDITOR_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return Editor; }),
    multi: true
};
var Editor = (function () {
    function Editor(el, domHandler) {
        this.el = el;
        this.domHandler = domHandler;
        this.onTextChange = new core_1.EventEmitter();
        this.onSelectionChange = new core_1.EventEmitter();
        this.onInit = new core_1.EventEmitter();
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    Editor.prototype.ngAfterViewInit = function () {
        var _this = this;
        var editorElement = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-editor-content');
        var toolbarElement = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-editor-toolbar');
        this.quill = new Quill(editorElement, {
            modules: {
                toolbar: toolbarElement
            },
            placeholder: this.placeholder,
            readOnly: this.readonly,
            theme: 'snow',
            formats: this.formats
        });
        if (this.value) {
            this.quill.pasteHTML(this.value);
        }
        this.quill.on('text-change', function (delta, oldContents, source) {
            var html = editorElement.children[0].innerHTML;
            var text = _this.quill.getText();
            if (html == '<p><br></p>') {
                html = null;
            }
            _this.onTextChange.emit({
                htmlValue: html,
                textValue: text,
                delta: delta,
                source: source
            });
            _this.onModelChange(html);
            if (source === 'user') {
                _this.onModelTouched();
            }
        });
        this.quill.on('selection-change', function (range, oldRange, source) {
            _this.onSelectionChange.emit({
                range: range,
                oldRange: oldRange,
                source: source
            });
        });
        this.onInit.emit({
            editor: this.quill
        });
    };
    Editor.prototype.writeValue = function (value) {
        this.value = value;
        if (this.quill) {
            if (value)
                this.quill.pasteHTML(value);
            else
                this.quill.setText('');
        }
    };
    Editor.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    Editor.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    Editor.prototype.getQuill = function () {
        return this.quill;
    };
    return Editor;
}());
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Editor.prototype, "onTextChange", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Editor.prototype, "onSelectionChange", void 0);
__decorate([
    core_1.ContentChild(shared_1.Header),
    __metadata("design:type", Object)
], Editor.prototype, "toolbar", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Editor.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Editor.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Editor.prototype, "placeholder", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Editor.prototype, "readonly", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], Editor.prototype, "formats", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Editor.prototype, "onInit", void 0);
Editor = __decorate([
    core_1.Component({
        selector: 'p-editor',
        template: "\n        <div [ngClass]=\"'ui-widget ui-editor-container ui-corner-all'\" [class]=\"styleClass\">\n            <div class=\"ui-editor-toolbar ui-widget-header ui-corner-top\" *ngIf=\"toolbar\">\n                <ng-content select=\"p-header\"></ng-content>\n            </div>\n            <div class=\"ui-editor-toolbar ui-widget-header ui-corner-top\" *ngIf=\"!toolbar\">\n                <span class=\"ql-formats\">\n                    <select class=\"ql-header\">\n                      <option value=\"1\">Heading</option>\n                      <option value=\"2\">Subheading</option>\n                      <option selected>Normal</option>\n                    </select>\n                    <select class=\"ql-font\">\n                      <option selected>Sans Serif</option>\n                      <option value=\"serif\">Serif</option>\n                      <option value=\"monospace\">Monospace</option>\n                    </select>\n                </span>\n                <span class=\"ql-formats\">\n                    <button class=\"ql-bold\" aria-label=\"Bold\"></button>\n                    <button class=\"ql-italic\" aria-label=\"Italic\"></button>\n                    <button class=\"ql-underline\" aria-label=\"Underline\"></button>\n                </span>\n                <span class=\"ql-formats\">\n                    <select class=\"ql-color\"></select>\n                    <select class=\"ql-background\"></select>\n                </span>\n                <span class=\"ql-formats\">\n                    <button class=\"ql-list\" value=\"ordered\" aria-label=\"Ordered List\"></button>\n                    <button class=\"ql-list\" value=\"bullet\" aria-label=\"Unordered List\"></button>\n                    <select class=\"ql-align\">\n                        <option selected></option>\n                        <option value=\"center\"></option>\n                        <option value=\"right\"></option>\n                        <option value=\"justify\"></option>\n                    </select>\n                </span>\n                <span class=\"ql-formats\">\n                    <button class=\"ql-link\" aria-label=\"Insert Link\"></button>\n                    <button class=\"ql-image\" aria-label=\"Insert Image\"></button>\n                    <button class=\"ql-code-block\" aria-label=\"Insert Code Block\"></button>\n                </span>\n                <span class=\"ql-formats\">\n                    <button class=\"ql-clean\" aria-label=\"Remove Styles\"></button>\n                </span>\n            </div>\n            <div class=\"ui-editor-content\" [ngStyle]=\"style\"></div>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler, exports.EDITOR_VALUE_ACCESSOR]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler])
], Editor);
exports.Editor = Editor;
var EditorModule = (function () {
    function EditorModule() {
    }
    return EditorModule;
}());
EditorModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Editor, shared_1.SharedModule],
        declarations: [Editor]
    })
], EditorModule);
exports.EditorModule = EditorModule;
//# sourceMappingURL=editor.js.map

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var animations_1 = __webpack_require__(13);
var common_1 = __webpack_require__(3);
var shared_1 = __webpack_require__(7);
var Fieldset = (function () {
    function Fieldset(el) {
        this.el = el;
        this.collapsed = false;
        this.onBeforeToggle = new core_1.EventEmitter();
        this.onAfterToggle = new core_1.EventEmitter();
    }
    Fieldset.prototype.toggle = function (event) {
        if (this.toggleable) {
            if (this.animating) {
                return false;
            }
            this.animating = true;
            this.onBeforeToggle.emit({ originalEvent: event, collapsed: this.collapsed });
            if (this.collapsed)
                this.expand(event);
            else
                this.collapse(event);
            this.onAfterToggle.emit({ originalEvent: event, collapsed: this.collapsed });
        }
    };
    Fieldset.prototype.expand = function (event) {
        this.collapsed = false;
    };
    Fieldset.prototype.collapse = function (event) {
        this.collapsed = true;
    };
    Fieldset.prototype.getBlockableElement = function () {
        return this.el.nativeElement.children[0];
    };
    Fieldset.prototype.onToggleDone = function (event) {
        this.animating = false;
    };
    return Fieldset;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Fieldset.prototype, "legend", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Fieldset.prototype, "toggleable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Fieldset.prototype, "collapsed", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Fieldset.prototype, "onBeforeToggle", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Fieldset.prototype, "onAfterToggle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Fieldset.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Fieldset.prototype, "styleClass", void 0);
Fieldset = __decorate([
    core_1.Component({
        selector: 'p-fieldset',
        template: "\n        <fieldset [ngClass]=\"{'ui-fieldset ui-widget ui-widget-content ui-corner-all': true, 'ui-fieldset-toggleable': toggleable}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <legend class=\"ui-fieldset-legend ui-corner-all ui-state-default ui-unselectable-text\" (click)=\"toggle($event)\">\n                <span *ngIf=\"toggleable\" class=\"ui-fieldset-toggler fa fa-w\" [ngClass]=\"{'fa-minus': !collapsed,'fa-plus':collapsed}\"></span>\n                {{legend}}\n                <ng-content select=\"p-header\"></ng-content>\n            </legend>\n            <div class=\"ui-fieldset-content-wrapper\" [@fieldsetContent]=\"collapsed ? 'hidden' : 'visible'\" \n                        [ngClass]=\"{'ui-fieldset-content-wrapper-overflown': collapsed||animating}\"\n                         (@fieldsetContent.done)=\"onToggleDone($event)\">\n                <div class=\"ui-fieldset-content\">\n                    <ng-content></ng-content>\n                </div>\n            </div>\n        </fieldset>\n    ",
        animations: [
            animations_1.trigger('fieldsetContent', [
                animations_1.state('hidden', animations_1.style({
                    height: '0px'
                })),
                animations_1.state('visible', animations_1.style({
                    height: '*'
                })),
                animations_1.transition('visible => hidden', animations_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                animations_1.transition('hidden => visible', animations_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
            ])
        ]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef])
], Fieldset);
exports.Fieldset = Fieldset;
var FieldsetModule = (function () {
    function FieldsetModule() {
    }
    return FieldsetModule;
}());
FieldsetModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Fieldset, shared_1.SharedModule],
        declarations: [Fieldset]
    })
], FieldsetModule);
exports.FieldsetModule = FieldsetModule;
//# sourceMappingURL=fieldset.js.map

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var platform_browser_1 = __webpack_require__(25);
var button_1 = __webpack_require__(16);
var messages_1 = __webpack_require__(180);
var progressbar_1 = __webpack_require__(181);
var shared_1 = __webpack_require__(7);
var FileUpload = (function () {
    function FileUpload(sanitizer) {
        this.sanitizer = sanitizer;
        this.method = 'POST';
        this.invalidFileSizeMessageSummary = '{0}: Invalid file size, ';
        this.invalidFileSizeMessageDetail = 'maximum upload size is {0}.';
        this.invalidFileTypeMessageSummary = '{0}: Invalid file type, ';
        this.invalidFileTypeMessageDetail = 'allowed file types: {0}.';
        this.previewWidth = 50;
        this.chooseLabel = 'Choose';
        this.uploadLabel = 'Upload';
        this.cancelLabel = 'Cancel';
        this.showUploadButton = true;
        this.showCancelButton = true;
        this.mode = 'advanced';
        this.onBeforeUpload = new core_1.EventEmitter();
        this.onBeforeSend = new core_1.EventEmitter();
        this.onUpload = new core_1.EventEmitter();
        this.onError = new core_1.EventEmitter();
        this.onClear = new core_1.EventEmitter();
        this.onRemove = new core_1.EventEmitter();
        this.onSelect = new core_1.EventEmitter();
        this.onProgress = new core_1.EventEmitter();
        this.uploadHandler = new core_1.EventEmitter();
        this.progress = 0;
    }
    FileUpload.prototype.ngOnInit = function () {
        this.files = [];
    };
    FileUpload.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.templates.forEach(function (item) {
            switch (item.getType()) {
                case 'file':
                    _this.fileTemplate = item.template;
                    break;
                case 'content':
                    _this.contentTemplate = item.template;
                    break;
                case 'toolbar':
                    _this.toolbarTemplate = item.template;
                    break;
                default:
                    _this.fileTemplate = item.template;
                    break;
            }
        });
    };
    FileUpload.prototype.onFileSelect = function (event) {
        this.msgs = [];
        if (!this.multiple) {
            this.files = [];
        }
        var files = event.dataTransfer ? event.dataTransfer.files : event.target.files;
        for (var i = 0; i < files.length; i++) {
            var file = files[i];
            if (this.validate(file)) {
                if (this.isImage(file)) {
                    file.objectURL = this.sanitizer.bypassSecurityTrustUrl((window.URL.createObjectURL(files[i])));
                }
                this.files.push(files[i]);
            }
        }
        this.onSelect.emit({ originalEvent: event, files: files });
        if (this.hasFiles() && this.auto) {
            this.upload();
        }
    };
    FileUpload.prototype.validate = function (file) {
        if (this.accept && !this.isFileTypeValid(file)) {
            this.msgs.push({
                severity: 'error',
                summary: this.invalidFileTypeMessageSummary.replace('{0}', file.name),
                detail: this.invalidFileTypeMessageDetail.replace('{0}', this.accept)
            });
            return false;
        }
        if (this.maxFileSize && file.size > this.maxFileSize) {
            this.msgs.push({
                severity: 'error',
                summary: this.invalidFileSizeMessageSummary.replace('{0}', file.name),
                detail: this.invalidFileSizeMessageDetail.replace('{0}', this.formatSize(this.maxFileSize))
            });
            return false;
        }
        return true;
    };
    FileUpload.prototype.isFileTypeValid = function (file) {
        var acceptableTypes = this.accept.split(',');
        for (var _i = 0, acceptableTypes_1 = acceptableTypes; _i < acceptableTypes_1.length; _i++) {
            var type = acceptableTypes_1[_i];
            var acceptable = this.isWildcard(type) ? this.getTypeClass(file.type) === this.getTypeClass(type)
                : file.type == type || this.getFileExtension(file) === type;
            if (acceptable) {
                return true;
            }
        }
        return false;
    };
    FileUpload.prototype.getTypeClass = function (fileType) {
        return fileType.substring(0, fileType.indexOf('/'));
    };
    FileUpload.prototype.isWildcard = function (fileType) {
        return fileType.indexOf('*') !== -1;
    };
    FileUpload.prototype.getFileExtension = function (file) {
        return '.' + file.name.split('.').pop();
    };
    FileUpload.prototype.isImage = function (file) {
        return /^image\//.test(file.type);
    };
    FileUpload.prototype.onImageLoad = function (img) {
        window.URL.revokeObjectURL(img.src);
    };
    FileUpload.prototype.upload = function () {
        var _this = this;
        if (this.customUpload) {
            this.uploadHandler.emit({
                files: this.files
            });
        }
        else {
            this.msgs = [];
            var xhr_1 = new XMLHttpRequest(), formData = new FormData();
            this.onBeforeUpload.emit({
                'xhr': xhr_1,
                'formData': formData
            });
            for (var i = 0; i < this.files.length; i++) {
                formData.append(this.name, this.files[i], this.files[i].name);
            }
            xhr_1.upload.addEventListener('progress', function (e) {
                if (e.lengthComputable) {
                    _this.progress = Math.round((e.loaded * 100) / e.total);
                }
                _this.onProgress.emit({ originalEvent: e, progress: _this.progress });
            }, false);
            xhr_1.onreadystatechange = function () {
                if (xhr_1.readyState == 4) {
                    _this.progress = 0;
                    if (xhr_1.status >= 200 && xhr_1.status < 300)
                        _this.onUpload.emit({ xhr: xhr_1, files: _this.files });
                    else
                        _this.onError.emit({ xhr: xhr_1, files: _this.files });
                    _this.clear();
                }
            };
            xhr_1.open(this.method, this.url, true);
            this.onBeforeSend.emit({
                'xhr': xhr_1,
                'formData': formData
            });
            xhr_1.withCredentials = this.withCredentials;
            xhr_1.send(formData);
        }
    };
    FileUpload.prototype.clear = function () {
        this.files = [];
        this.onClear.emit();
    };
    FileUpload.prototype.remove = function (event, index) {
        this.onRemove.emit({ originalEvent: event, file: this.files[index] });
        this.files.splice(index, 1);
    };
    FileUpload.prototype.hasFiles = function () {
        return this.files && this.files.length > 0;
    };
    FileUpload.prototype.onDragEnter = function (e) {
        if (!this.disabled) {
            e.stopPropagation();
            e.preventDefault();
        }
    };
    FileUpload.prototype.onDragOver = function (e) {
        if (!this.disabled) {
            this.dragHighlight = true;
            e.stopPropagation();
            e.preventDefault();
        }
    };
    FileUpload.prototype.onDragLeave = function (event) {
        if (!this.disabled) {
            this.dragHighlight = false;
        }
    };
    FileUpload.prototype.onDrop = function (event) {
        if (!this.disabled) {
            this.dragHighlight = false;
            event.stopPropagation();
            event.preventDefault();
            var files = event.dataTransfer ? event.dataTransfer.files : event.target.files;
            var allowDrop = this.multiple || (files && files.length === 1);
            if (allowDrop) {
                this.onFileSelect(event);
            }
        }
    };
    FileUpload.prototype.onFocus = function () {
        this.focus = true;
    };
    FileUpload.prototype.onBlur = function () {
        this.focus = false;
    };
    FileUpload.prototype.formatSize = function (bytes) {
        if (bytes == 0) {
            return '0 B';
        }
        var k = 1000, dm = 3, sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'], i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    };
    FileUpload.prototype.onSimpleUploaderClick = function (event) {
        if (this.hasFiles()) {
            this.upload();
        }
    };
    return FileUpload;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], FileUpload.prototype, "name", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], FileUpload.prototype, "url", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], FileUpload.prototype, "method", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], FileUpload.prototype, "multiple", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], FileUpload.prototype, "accept", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], FileUpload.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], FileUpload.prototype, "auto", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], FileUpload.prototype, "withCredentials", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], FileUpload.prototype, "maxFileSize", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], FileUpload.prototype, "invalidFileSizeMessageSummary", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], FileUpload.prototype, "invalidFileSizeMessageDetail", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], FileUpload.prototype, "invalidFileTypeMessageSummary", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], FileUpload.prototype, "invalidFileTypeMessageDetail", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], FileUpload.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], FileUpload.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], FileUpload.prototype, "previewWidth", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], FileUpload.prototype, "chooseLabel", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], FileUpload.prototype, "uploadLabel", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], FileUpload.prototype, "cancelLabel", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], FileUpload.prototype, "showUploadButton", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], FileUpload.prototype, "showCancelButton", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], FileUpload.prototype, "mode", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], FileUpload.prototype, "customUpload", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], FileUpload.prototype, "onBeforeUpload", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], FileUpload.prototype, "onBeforeSend", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], FileUpload.prototype, "onUpload", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], FileUpload.prototype, "onError", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], FileUpload.prototype, "onClear", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], FileUpload.prototype, "onRemove", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], FileUpload.prototype, "onSelect", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], FileUpload.prototype, "onProgress", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], FileUpload.prototype, "uploadHandler", void 0);
__decorate([
    core_1.ContentChildren(shared_1.PrimeTemplate),
    __metadata("design:type", core_1.QueryList)
], FileUpload.prototype, "templates", void 0);
FileUpload = __decorate([
    core_1.Component({
        selector: 'p-fileUpload',
        template: "\n        <div [ngClass]=\"'ui-fileupload ui-widget'\" [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"mode === 'advanced'\">\n            <div class=\"ui-fileupload-buttonbar ui-widget-header ui-corner-top\">\n                <span class=\"ui-fileupload-choose\" [label]=\"chooseLabel\" icon=\"fa-plus\" pButton  [ngClass]=\"{'ui-fileupload-choose-selected': hasFiles(),'ui-state-focus': focus}\" [attr.disabled]=\"disabled\" > \n                    <input #fileinput type=\"file\" (change)=\"onFileSelect($event)\" [multiple]=\"multiple\" [accept]=\"accept\" [disabled]=\"disabled\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n                </span>\n\n                <button *ngIf=\"!auto&&showUploadButton\" type=\"button\" [label]=\"uploadLabel\" icon=\"fa-upload\" pButton (click)=\"upload()\" [disabled]=\"!hasFiles()\"></button>\n                <button *ngIf=\"!auto&&showCancelButton\" type=\"button\" [label]=\"cancelLabel\" icon=\"fa-close\" pButton (click)=\"clear()\" [disabled]=\"!hasFiles()\"></button>\n            \n                <p-templateLoader [template]=\"toolbarTemplate\"></p-templateLoader>\n            </div>\n            <div [ngClass]=\"{'ui-fileupload-content ui-widget-content ui-corner-bottom':true,'ui-fileupload-highlight':dragHighlight}\" \n                (dragenter)=\"onDragEnter($event)\" (dragover)=\"onDragOver($event)\" (dragleave)=\"onDragLeave($event)\" (drop)=\"onDrop($event)\">\n                <p-progressBar [value]=\"progress\" [showValue]=\"false\" *ngIf=\"hasFiles()\"></p-progressBar>\n                \n                <p-messages [value]=\"msgs\"></p-messages>\n                \n                <div class=\"ui-fileupload-files\" *ngIf=\"hasFiles()\">\n                    <div *ngIf=\"!fileTemplate\">\n                        <div class=\"ui-fileupload-row\" *ngFor=\"let file of files; let i = index;\">\n                            <div><img [src]=\"file.objectURL\" *ngIf=\"isImage(file)\" [width]=\"previewWidth\" /></div>\n                            <div>{{file.name}}</div>\n                            <div>{{formatSize(file.size)}}</div>\n                            <div><button type=\"button\" icon=\"fa-close\" pButton (click)=\"remove($event,i)\"></button></div>\n                        </div>\n                    </div>\n                    <div *ngIf=\"fileTemplate\">\n                        <ng-template ngFor [ngForOf]=\"files\" [ngForTemplate]=\"fileTemplate\"></ng-template>\n                    </div>\n                </div>\n                <p-templateLoader [template]=\"contentTemplate\"></p-templateLoader>\n            </div>\n        </div>\n        <span class=\"ui-button ui-fileupload-choose ui-widget ui-state-default ui-corner-all ui-button-text-icon-left\" *ngIf=\"mode === 'basic'\" \n        (mouseup)=\"onSimpleUploaderClick($event)\"\n        [ngClass]=\"{'ui-fileupload-choose-selected': hasFiles(),'ui-state-focus': focus}\">\n            <span class=\"ui-button-icon-left fa\" [ngClass]=\"{'fa-plus': !hasFiles()||auto, 'fa-upload': hasFiles()&&!auto}\"></span>\n            <span class=\"ui-button-text ui-clickable\">{{auto ? chooseLabel : hasFiles() ? files[0].name : chooseLabel}}</span>\n            <input type=\"file\" [accept]=\"accept\" [multiple]=\"multiple\" [disabled]=\"disabled\"\n                (change)=\"onFileSelect($event)\" *ngIf=\"!hasFiles()\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n        </span>\n    "
    }),
    __metadata("design:paramtypes", [platform_browser_1.DomSanitizer])
], FileUpload);
exports.FileUpload = FileUpload;
var FileUploadModule = (function () {
    function FileUploadModule() {
    }
    return FileUploadModule;
}());
FileUploadModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, shared_1.SharedModule, button_1.ButtonModule, progressbar_1.ProgressBarModule, messages_1.MessagesModule],
        exports: [FileUpload, shared_1.SharedModule, button_1.ButtonModule, progressbar_1.ProgressBarModule, messages_1.MessagesModule],
        declarations: [FileUpload]
    })
], FileUploadModule);
exports.FileUploadModule = FileUploadModule;
//# sourceMappingURL=fileupload.js.map

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var Galleria = (function () {
    function Galleria(el, domHandler) {
        this.el = el;
        this.domHandler = domHandler;
        this.panelWidth = 600;
        this.panelHeight = 400;
        this.frameWidth = 60;
        this.frameHeight = 40;
        this.activeIndex = 0;
        this.showFilmstrip = true;
        this.autoPlay = true;
        this.transitionInterval = 4000;
        this.showCaption = true;
        this.onImageClicked = new core_1.EventEmitter();
        this.stripLeft = 0;
    }
    Galleria.prototype.ngAfterViewChecked = function () {
        if (this.imagesChanged) {
            this.stopSlideshow();
            this.render();
            this.imagesChanged = false;
        }
    };
    Object.defineProperty(Galleria.prototype, "images", {
        get: function () {
            return this._images;
        },
        set: function (value) {
            this._images = value;
            this.activeIndex = 0;
            this.imagesChanged = true;
        },
        enumerable: true,
        configurable: true
    });
    Galleria.prototype.ngAfterViewInit = function () {
        this.container = this.el.nativeElement.children[0];
        this.panelWrapper = this.domHandler.findSingle(this.el.nativeElement, 'ul.ui-galleria-panel-wrapper');
        this.initialized = true;
        if (this.showFilmstrip) {
            this.stripWrapper = this.domHandler.findSingle(this.container, 'div.ui-galleria-filmstrip-wrapper');
            this.strip = this.domHandler.findSingle(this.stripWrapper, 'ul.ui-galleria-filmstrip');
        }
        if (this.images && this.images.length) {
            this.render();
        }
    };
    Galleria.prototype.render = function () {
        this.panels = this.domHandler.find(this.panelWrapper, 'li.ui-galleria-panel');
        if (this.showFilmstrip) {
            this.frames = this.domHandler.find(this.strip, 'li.ui-galleria-frame');
            this.stripWrapper.style.width = this.domHandler.width(this.panelWrapper) - 50 + 'px';
            this.stripWrapper.style.height = this.frameHeight + 'px';
        }
        if (this.showCaption) {
            this.caption = this.domHandler.findSingle(this.container, 'div.ui-galleria-caption');
            this.caption.style.bottom = this.showFilmstrip ? this.domHandler.getOuterHeight(this.stripWrapper, true) + 'px' : 0 + 'px';
            this.caption.style.width = this.domHandler.width(this.panelWrapper) + 'px';
        }
        if (this.autoPlay) {
            this.startSlideshow();
        }
        this.container.style.visibility = 'visible';
    };
    Galleria.prototype.startSlideshow = function () {
        var _this = this;
        this.interval = setInterval(function () {
            _this.next();
        }, this.transitionInterval);
        this.slideshowActive = true;
    };
    Galleria.prototype.stopSlideshow = function () {
        if (this.interval) {
            clearInterval(this.interval);
        }
        this.slideshowActive = false;
    };
    Galleria.prototype.clickNavRight = function () {
        if (this.slideshowActive) {
            this.stopSlideshow();
        }
        this.next();
    };
    Galleria.prototype.clickNavLeft = function () {
        if (this.slideshowActive) {
            this.stopSlideshow();
        }
        this.prev();
    };
    Galleria.prototype.frameClick = function (frame) {
        if (this.slideshowActive) {
            this.stopSlideshow();
        }
        this.select(this.domHandler.index(frame), false);
    };
    Galleria.prototype.prev = function () {
        if (this.activeIndex !== 0) {
            this.select(this.activeIndex - 1, true);
        }
    };
    Galleria.prototype.next = function () {
        if (this.activeIndex !== (this.panels.length - 1)) {
            this.select(this.activeIndex + 1, true);
        }
        else {
            this.select(0, false);
            this.stripLeft = 0;
        }
    };
    Galleria.prototype.select = function (index, reposition) {
        if (index !== this.activeIndex) {
            var oldPanel = this.panels[this.activeIndex], newPanel = this.panels[index];
            this.domHandler.fadeIn(newPanel, 500);
            if (this.showFilmstrip) {
                var oldFrame = this.frames[this.activeIndex], newFrame = this.frames[index];
                if (reposition === undefined || reposition === true) {
                    var frameLeft = newFrame.offsetLeft, stepFactor = this.frameWidth + parseInt(getComputedStyle(newFrame)['margin-right'], 10), stripLeft = this.strip.offsetLeft, frameViewportLeft = frameLeft + stripLeft, frameViewportRight = frameViewportLeft + this.frameWidth;
                    if (frameViewportRight > this.domHandler.width(this.stripWrapper))
                        this.stripLeft -= stepFactor;
                    else if (frameViewportLeft < 0)
                        this.stripLeft += stepFactor;
                }
            }
            this.activeIndex = index;
        }
    };
    Galleria.prototype.clickImage = function (event, image, i) {
        this.onImageClicked.emit({ originalEvent: event, image: image, index: i });
    };
    Galleria.prototype.ngOnDestroy = function () {
        this.stopSlideshow();
    };
    return Galleria;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Galleria.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Galleria.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Galleria.prototype, "panelWidth", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Galleria.prototype, "panelHeight", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Galleria.prototype, "frameWidth", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Galleria.prototype, "frameHeight", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Galleria.prototype, "activeIndex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Galleria.prototype, "showFilmstrip", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Galleria.prototype, "autoPlay", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Galleria.prototype, "transitionInterval", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Galleria.prototype, "showCaption", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], Galleria.prototype, "onImageClicked", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], Galleria.prototype, "images", null);
Galleria = __decorate([
    core_1.Component({
        selector: 'p-galleria',
        template: "\n        <div [ngClass]=\"{'ui-galleria ui-widget ui-widget-content ui-corner-all':true}\" [ngStyle]=\"style\" [class]=\"styleClass\" [style.width.px]=\"panelWidth\">\n            <ul class=\"ui-galleria-panel-wrapper\" [style.width.px]=\"panelWidth\" [style.height.px]=\"panelHeight\">\n                <li *ngFor=\"let image of images;let i=index\" class=\"ui-galleria-panel\" [ngClass]=\"{'ui-helper-hidden':i!=activeIndex}\"\n                    [style.width.px]=\"panelWidth\" [style.height.px]=\"panelHeight\" (click)=\"clickImage($event,image,i)\">\n                    <img class=\"ui-panel-images\" [src]=\"image.source\" [alt]=\"image.alt\" [title]=\"image.title\"/>\n                </li>\n            </ul>\n            <div [ngClass]=\"{'ui-galleria-filmstrip-wrapper':true}\" *ngIf=\"showFilmstrip\">\n                <ul class=\"ui-galleria-filmstrip\" style=\"transition:left 1s\" [style.left.px]=\"stripLeft\">\n                    <li #frame *ngFor=\"let image of images;let i=index\" [ngClass]=\"{'ui-galleria-frame-active':i==activeIndex}\" class=\"ui-galleria-frame\" (click)=\"frameClick(frame)\"\n                        [style.width.px]=\"frameWidth\" [style.height.px]=\"frameHeight\" [style.transition]=\"'opacity 0.75s ease'\">\n                        <div class=\"ui-galleria-frame-content\">\n                            <img [src]=\"image.source\" [alt]=\"image.alt\" [title]=\"image.title\" class=\"ui-galleria-frame-image\"\n                                [style.width.px]=\"frameWidth\" [style.height.px]=\"frameHeight\">\n                        </div>\n                    </li>\n                </ul>\n            </div>\n            <div class=\"ui-galleria-nav-prev fa fa-fw fa-chevron-circle-left\" (click)=\"clickNavLeft()\" [style.bottom.px]=\"frameHeight/2\" *ngIf=\"activeIndex !== 0\"></div>\n            <div class=\"ui-galleria-nav-next fa fa-fw fa-chevron-circle-right\" (click)=\"clickNavRight()\" [style.bottom.px]=\"frameHeight/2\"></div>\n            <div class=\"ui-galleria-caption\" *ngIf=\"showCaption&&images\" style=\"display:block\">\n                <h4>{{images[activeIndex]?.title}}</h4><p>{{images[activeIndex]?.alt}}</p>\n            </div>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler])
], Galleria);
exports.Galleria = Galleria;
var GalleriaModule = (function () {
    function GalleriaModule() {
    }
    return GalleriaModule;
}());
GalleriaModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Galleria],
        declarations: [Galleria]
    })
], GalleriaModule);
exports.GalleriaModule = GalleriaModule;
//# sourceMappingURL=galleria.js.map

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var GMap = (function () {
    function GMap(el, differs, cd, zone) {
        this.el = el;
        this.cd = cd;
        this.zone = zone;
        this.onMapClick = new core_1.EventEmitter();
        this.onOverlayClick = new core_1.EventEmitter();
        this.onOverlayDragStart = new core_1.EventEmitter();
        this.onOverlayDrag = new core_1.EventEmitter();
        this.onOverlayDragEnd = new core_1.EventEmitter();
        this.onMapReady = new core_1.EventEmitter();
        this.onMapDragEnd = new core_1.EventEmitter();
        this.onZoomChanged = new core_1.EventEmitter();
        this.differ = differs.find([]).create(null);
    }
    GMap.prototype.ngAfterViewChecked = function () {
        if (!this.map && this.el.nativeElement.offsetParent) {
            this.initialize();
        }
    };
    GMap.prototype.initialize = function () {
        var _this = this;
        this.map = new google.maps.Map(this.el.nativeElement.children[0], this.options);
        this.onMapReady.emit({
            map: this.map
        });
        if (this.overlays) {
            for (var _i = 0, _a = this.overlays; _i < _a.length; _i++) {
                var overlay = _a[_i];
                overlay.setMap(this.map);
                this.bindOverlayEvents(overlay);
            }
        }
        this.map.addListener('click', function (event) {
            _this.zone.run(function () {
                _this.onMapClick.emit(event);
            });
        });
        this.map.addListener('dragend', function (event) {
            _this.zone.run(function () {
                _this.onMapDragEnd.emit(event);
            });
        });
        this.map.addListener('zoom_changed', function (event) {
            _this.zone.run(function () {
                _this.onZoomChanged.emit(event);
            });
        });
    };
    GMap.prototype.bindOverlayEvents = function (overlay) {
        var _this = this;
        overlay.addListener('click', function (event) {
            _this.zone.run(function () {
                _this.onOverlayClick.emit({
                    originalEvent: event,
                    'overlay': overlay,
                    map: _this.map
                });
            });
        });
        if (overlay.getDraggable()) {
            this.bindDragEvents(overlay);
        }
    };
    GMap.prototype.ngDoCheck = function () {
        var _this = this;
        var changes = this.differ.diff(this.overlays);
        if (changes && this.map) {
            changes.forEachRemovedItem(function (record) { record.item.setMap(null); });
            changes.forEachAddedItem(function (record) {
                record.item.setMap(_this.map);
                record.item.addListener('click', function (event) {
                    _this.zone.run(function () {
                        _this.onOverlayClick.emit({
                            originalEvent: event,
                            overlay: record.item,
                            map: _this.map
                        });
                    });
                });
                if (record.item.getDraggable()) {
                    _this.bindDragEvents(record.item);
                }
            });
        }
    };
    GMap.prototype.bindDragEvents = function (overlay) {
        var _this = this;
        overlay.addListener('dragstart', function (event) {
            _this.zone.run(function () {
                _this.onOverlayDragStart.emit({
                    originalEvent: event,
                    overlay: overlay,
                    map: _this.map
                });
            });
        });
        overlay.addListener('drag', function (event) {
            _this.zone.run(function () {
                _this.onOverlayDrag.emit({
                    originalEvent: event,
                    overlay: overlay,
                    map: _this.map
                });
            });
        });
        overlay.addListener('dragend', function (event) {
            _this.zone.run(function () {
                _this.onOverlayDragEnd.emit({
                    originalEvent: event,
                    overlay: overlay,
                    map: _this.map
                });
            });
        });
    };
    GMap.prototype.getMap = function () {
        return this.map;
    };
    return GMap;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], GMap.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], GMap.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], GMap.prototype, "options", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], GMap.prototype, "overlays", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], GMap.prototype, "onMapClick", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], GMap.prototype, "onOverlayClick", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], GMap.prototype, "onOverlayDragStart", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], GMap.prototype, "onOverlayDrag", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], GMap.prototype, "onOverlayDragEnd", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], GMap.prototype, "onMapReady", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], GMap.prototype, "onMapDragEnd", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], GMap.prototype, "onZoomChanged", void 0);
GMap = __decorate([
    core_1.Component({
        selector: 'p-gmap',
        template: "<div [ngStyle]=\"style\" [class]=\"styleClass\"></div>"
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, core_1.IterableDiffers, core_1.ChangeDetectorRef, core_1.NgZone])
], GMap);
exports.GMap = GMap;
var GMapModule = (function () {
    function GMapModule() {
    }
    return GMapModule;
}());
GMapModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [GMap],
        declarations: [GMap]
    })
], GMapModule);
exports.GMapModule = GMapModule;
//# sourceMappingURL=gmap.js.map

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var Growl = (function () {
    function Growl(el, domHandler, differs) {
        this.el = el;
        this.domHandler = domHandler;
        this.differs = differs;
        this.life = 3000;
        this.immutable = true;
        this.onClick = new core_1.EventEmitter();
        this.onClose = new core_1.EventEmitter();
        this.valueChange = new core_1.EventEmitter();
        this.zIndex = domhandler_1.DomHandler.zindex;
        this.differ = differs.find([]).create(null);
    }
    Growl.prototype.ngAfterViewInit = function () {
        this.container = this.containerViewChild.nativeElement;
        if (this.value && this.value.length) {
            this.clearTrigger();
        }
    };
    Object.defineProperty(Growl.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (val) {
            this._value = val;
            if (this.container && this.immutable) {
                this.handleValueChange();
            }
        },
        enumerable: true,
        configurable: true
    });
    Growl.prototype.ngDoCheck = function () {
        if (!this.immutable && this.container) {
            var changes = this.differ.diff(this.value);
            if (changes) {
                this.handleValueChange();
            }
        }
    };
    Growl.prototype.handleValueChange = function () {
        if (this.preventRerender) {
            this.preventRerender = false;
            return;
        }
        this.zIndex = ++domhandler_1.DomHandler.zindex;
        this.domHandler.fadeIn(this.container, 250);
        this.clearTrigger();
    };
    Growl.prototype.clearTrigger = function () {
        var _this = this;
        if (this.timeout) {
            clearTimeout(this.timeout);
        }
        this.timeout = setTimeout(function () {
            _this.removeAll();
        }, this.life);
    };
    Growl.prototype.remove = function (index, msgel) {
        var _this = this;
        this.domHandler.fadeOut(msgel, 250);
        setTimeout(function () {
            _this.preventRerender = true;
            _this.onClose.emit({ message: _this.value[index] });
            if (_this.immutable) {
                _this._value = _this.value.filter(function (val, i) { return i != index; });
                _this.valueChange.emit(_this._value);
            }
            else {
                _this._value.splice(index, 1);
            }
        }, 250);
    };
    Growl.prototype.removeAll = function () {
        var _this = this;
        if (this.value && this.value.length) {
            this.domHandler.fadeOut(this.container, 250);
            setTimeout(function () {
                _this.value.forEach(function (msg, index) { return _this.onClose.emit({ message: _this.value[index] }); });
                if (_this.immutable) {
                    _this.value = [];
                    _this.valueChange.emit(_this.value);
                }
                else {
                    _this.value.splice(0, _this.value.length);
                }
            }, 250);
        }
    };
    Growl.prototype.onMessageClick = function (i) {
        this.onClick.emit({ message: this.value[i] });
    };
    Growl.prototype.ngOnDestroy = function () {
        if (!this.sticky) {
            clearTimeout(this.timeout);
        }
    };
    return Growl;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Growl.prototype, "sticky", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Growl.prototype, "life", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Growl.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Growl.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Growl.prototype, "immutable", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Growl.prototype, "onClick", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Growl.prototype, "onClose", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Growl.prototype, "valueChange", void 0);
__decorate([
    core_1.ViewChild('container'),
    __metadata("design:type", core_1.ElementRef)
], Growl.prototype, "containerViewChild", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], Growl.prototype, "value", null);
Growl = __decorate([
    core_1.Component({
        selector: 'p-growl',
        template: "\n        <div #container [ngClass]=\"'ui-growl ui-widget'\" [style.zIndex]=\"zIndex\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div #msgel *ngFor=\"let msg of value;let i = index\" class=\"ui-growl-item-container ui-state-highlight ui-corner-all ui-shadow\" aria-live=\"polite\"\n                [ngClass]=\"{'ui-growl-message-info':msg.severity == 'info','ui-growl-message-warn':msg.severity == 'warn',\n                    'ui-growl-message-error':msg.severity == 'error','ui-growl-message-success':msg.severity == 'success'}\" (click)=\"onMessageClick(i)\">\n                <div class=\"ui-growl-item\">\n                     <div class=\"ui-growl-icon-close fa fa-close\" (click)=\"remove(i,msgel)\"></div>\n                     <span class=\"ui-growl-image fa fa-2x\"\n                        [ngClass]=\"{'fa-info-circle':msg.severity == 'info','fa-exclamation-circle':msg.severity == 'warn',\n                                'fa-close':msg.severity == 'error','fa-check':msg.severity == 'success'}\"></span>\n                     <div class=\"ui-growl-message\">\n                        <span class=\"ui-growl-title\">{{msg.summary}}</span>\n                        <p [innerHTML]=\"msg.detail\"></p>\n                     </div>\n                     <div style=\"clear: both;\"></div>\n                </div>\n            </div>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.IterableDiffers])
], Growl);
exports.Growl = Growl;
var GrowlModule = (function () {
    function GrowlModule() {
    }
    return GrowlModule;
}());
GrowlModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Growl],
        declarations: [Growl]
    })
], GrowlModule);
exports.GrowlModule = GrowlModule;
//# sourceMappingURL=growl.js.map

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var button_1 = __webpack_require__(16);
var InplaceDisplay = (function () {
    function InplaceDisplay() {
    }
    return InplaceDisplay;
}());
InplaceDisplay = __decorate([
    core_1.Component({
        selector: 'p-inplaceDisplay',
        template: '<ng-content></ng-content>'
    })
], InplaceDisplay);
exports.InplaceDisplay = InplaceDisplay;
var InplaceContent = (function () {
    function InplaceContent() {
    }
    return InplaceContent;
}());
InplaceContent = __decorate([
    core_1.Component({
        selector: 'p-inplaceContent',
        template: '<ng-content></ng-content>'
    })
], InplaceContent);
exports.InplaceContent = InplaceContent;
var Inplace = (function () {
    function Inplace() {
        this.onActivate = new core_1.EventEmitter();
        this.onDeactivate = new core_1.EventEmitter();
    }
    Inplace.prototype.activate = function (event) {
        if (!this.disabled) {
            this.active = true;
            this.onActivate.emit(event);
        }
    };
    Inplace.prototype.deactivate = function (event) {
        if (!this.disabled) {
            this.active = false;
            this.hover = false;
            this.onDeactivate.emit(event);
        }
    };
    return Inplace;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Inplace.prototype, "active", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Inplace.prototype, "closable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Inplace.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Inplace.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Inplace.prototype, "styleClass", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Inplace.prototype, "onActivate", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Inplace.prototype, "onDeactivate", void 0);
Inplace = __decorate([
    core_1.Component({
        selector: 'p-inplace',
        template: "\n        <div [ngClass]=\"'ui-inplace ui-widget'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-inplace-display\" (click)=\"activate($event)\"\n                [ngClass]=\"{'ui-state-disabled':disabled}\" *ngIf=\"!active\">\n                <ng-content select=\"[pInplaceDisplay]\"></ng-content>\n            </div>\n            <div class=\"ui-inplace-content\" *ngIf=\"active\">\n                <ng-content select=\"[pInplaceContent]\"></ng-content>\n                <button type=\"button\" icon=\"fa-close\" pButton (click)=\"deactivate($event)\" *ngIf=\"closable\"></button>\n            </div>\n        </div>\n    "
    })
], Inplace);
exports.Inplace = Inplace;
var InplaceModule = (function () {
    function InplaceModule() {
    }
    return InplaceModule;
}());
InplaceModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, button_1.ButtonModule],
        exports: [Inplace, InplaceDisplay, InplaceContent, button_1.ButtonModule],
        declarations: [Inplace, InplaceDisplay, InplaceContent]
    })
], InplaceModule);
exports.InplaceModule = InplaceModule;
//# sourceMappingURL=inplace.js.map

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
    Port of jQuery MaskedInput by DigitalBush as a Native Angular2 Component in Typescript without jQuery
    https://github.com/digitalBush/jquery.maskedinput/
    
    Copyright (c) 2007-2014 Josh Bush (digitalbush.com)

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.
*/
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var inputtext_1 = __webpack_require__(20);
var forms_1 = __webpack_require__(6);
exports.INPUTMASK_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return InputMask; }),
    multi: true
};
var InputMask = (function () {
    function InputMask(el, domHandler) {
        this.el = el;
        this.domHandler = domHandler;
        this.type = 'text';
        this.slotChar = '_';
        this.autoClear = true;
        this.onComplete = new core_1.EventEmitter();
        this.onFocus = new core_1.EventEmitter();
        this.onBlur = new core_1.EventEmitter();
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    InputMask.prototype.ngOnInit = function () {
        this.tests = [];
        this.partialPosition = this.mask.length;
        this.len = this.mask.length;
        this.firstNonMaskPos = null;
        this.defs = {
            '9': '[0-9]',
            'a': '[A-Za-z]',
            '*': '[A-Za-z0-9]'
        };
        var ua = this.domHandler.getUserAgent();
        this.androidChrome = /chrome/i.test(ua) && /android/i.test(ua);
        var maskTokens = this.mask.split('');
        for (var i = 0; i < maskTokens.length; i++) {
            var c = maskTokens[i];
            if (c == '?') {
                this.len--;
                this.partialPosition = i;
            }
            else if (this.defs[c]) {
                this.tests.push(new RegExp(this.defs[c]));
                if (this.firstNonMaskPos === null) {
                    this.firstNonMaskPos = this.tests.length - 1;
                }
                if (i < this.partialPosition) {
                    this.lastRequiredNonMaskPos = this.tests.length - 1;
                }
            }
            else {
                this.tests.push(null);
            }
        }
        this.buffer = [];
        for (var i = 0; i < maskTokens.length; i++) {
            var c = maskTokens[i];
            if (c != '?') {
                if (this.defs[c])
                    this.buffer.push(this.getPlaceholder(i));
                else
                    this.buffer.push(c);
            }
        }
        this.defaultBuffer = this.buffer.join('');
    };
    InputMask.prototype.writeValue = function (value) {
        this.value = value;
        if (this.inputViewChild.nativeElement) {
            if (this.value == undefined || this.value == null)
                this.inputViewChild.nativeElement.value = '';
            else
                this.inputViewChild.nativeElement.value = this.value;
            this.checkVal();
            this.focusText = this.inputViewChild.nativeElement.value;
            this.updateFilledState();
        }
    };
    InputMask.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    InputMask.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    InputMask.prototype.setDisabledState = function (val) {
        this.disabled = val;
    };
    InputMask.prototype.caret = function (first, last) {
        var range, begin, end;
        if (!this.inputViewChild.nativeElement.offsetParent || this.inputViewChild.nativeElement !== document.activeElement) {
            return;
        }
        if (typeof first == 'number') {
            begin = first;
            end = (typeof last === 'number') ? last : begin;
            if (this.inputViewChild.nativeElement.setSelectionRange) {
                this.inputViewChild.nativeElement.setSelectionRange(begin, end);
            }
            else if (this.inputViewChild.nativeElement['createTextRange']) {
                range = this.inputViewChild.nativeElement['createTextRange']();
                range.collapse(true);
                range.moveEnd('character', end);
                range.moveStart('character', begin);
                range.select();
            }
        }
        else {
            if (this.inputViewChild.nativeElement.setSelectionRange) {
                begin = this.inputViewChild.nativeElement.selectionStart;
                end = this.inputViewChild.nativeElement.selectionEnd;
            }
            else if (document['selection'] && document['selection'].createRange) {
                range = document['selection'].createRange();
                begin = 0 - range.duplicate().moveStart('character', -100000);
                end = begin + range.text.length;
            }
            return { begin: begin, end: end };
        }
    };
    InputMask.prototype.isCompleted = function () {
        var completed;
        for (var i = this.firstNonMaskPos; i <= this.lastRequiredNonMaskPos; i++) {
            if (this.tests[i] && this.buffer[i] === this.getPlaceholder(i)) {
                return false;
            }
        }
        return true;
    };
    InputMask.prototype.getPlaceholder = function (i) {
        if (i < this.slotChar.length) {
            return this.slotChar.charAt(i);
        }
        return this.slotChar.charAt(0);
    };
    InputMask.prototype.seekNext = function (pos) {
        while (++pos < this.len && !this.tests[pos])
            ;
        return pos;
    };
    InputMask.prototype.seekPrev = function (pos) {
        while (--pos >= 0 && !this.tests[pos])
            ;
        return pos;
    };
    InputMask.prototype.shiftL = function (begin, end) {
        var i, j;
        if (begin < 0) {
            return;
        }
        for (i = begin, j = this.seekNext(end); i < this.len; i++) {
            if (this.tests[i]) {
                if (j < this.len && this.tests[i].test(this.buffer[j])) {
                    this.buffer[i] = this.buffer[j];
                    this.buffer[j] = this.getPlaceholder(j);
                }
                else {
                    break;
                }
                j = this.seekNext(j);
            }
        }
        this.writeBuffer();
        this.caret(Math.max(this.firstNonMaskPos, begin));
    };
    InputMask.prototype.shiftR = function (pos) {
        var i, c, j, t;
        for (i = pos, c = this.getPlaceholder(pos); i < this.len; i++) {
            if (this.tests[i]) {
                j = this.seekNext(i);
                t = this.buffer[i];
                this.buffer[i] = c;
                if (j < this.len && this.tests[j].test(t)) {
                    c = t;
                }
                else {
                    break;
                }
            }
        }
    };
    InputMask.prototype.handleAndroidInput = function (e) {
        var _this = this;
        var curVal = this.inputViewChild.nativeElement.value;
        var pos = this.caret();
        if (this.oldVal && this.oldVal.length && this.oldVal.length > curVal.length) {
            // a deletion or backspace happened
            this.checkVal(true);
            while (pos.begin > 0 && !this.tests[pos.begin - 1])
                pos.begin--;
            if (pos.begin === 0) {
                while (pos.begin < this.firstNonMaskPos && !this.tests[pos.begin])
                    pos.begin++;
            }
            this.caret(pos.begin, pos.begin);
        }
        else {
            this.checkVal(true);
            while (pos.begin < this.len && !this.tests[pos.begin - 1])
                pos.begin++;
            setTimeout(function () { return _this.caret(pos.begin, pos.begin); });
        }
        if (this.isCompleted()) {
            this.onComplete.emit();
        }
    };
    InputMask.prototype.onInputBlur = function (e) {
        this.focus = false;
        this.onModelTouched();
        this.checkVal();
        this.updateModel(e);
        this.updateFilledState();
        this.onBlur.emit(e);
        if (this.inputViewChild.nativeElement.value != this.focusText) {
            var event_1 = document.createEvent('HTMLEvents');
            event_1.initEvent('change', true, false);
            this.inputViewChild.nativeElement.dispatchEvent(event_1);
        }
    };
    InputMask.prototype.onKeyDown = function (e) {
        if (this.readonly) {
            return;
        }
        var k = e.which || e.keyCode, pos, begin, end;
        var iPhone = /iphone/i.test(this.domHandler.getUserAgent());
        this.oldVal = this.inputViewChild.nativeElement.value;
        //backspace, delete, and escape get special treatment
        if (k === 8 || k === 46 || (iPhone && k === 127)) {
            pos = this.caret();
            begin = pos.begin;
            end = pos.end;
            if (end - begin === 0) {
                begin = k !== 46 ? this.seekPrev(begin) : (end = this.seekNext(begin - 1));
                end = k === 46 ? this.seekNext(end) : end;
            }
            this.clearBuffer(begin, end);
            this.shiftL(begin, end - 1);
            this.updateModel(e);
            e.preventDefault();
        }
        else if (k === 13) {
            this.onInputBlur(e);
            this.updateModel(e);
        }
        else if (k === 27) {
            this.inputViewChild.nativeElement.value = this.focusText;
            this.caret(0, this.checkVal());
            this.updateModel(e);
            e.preventDefault();
        }
    };
    InputMask.prototype.onKeyPress = function (e) {
        var _this = this;
        if (this.readonly) {
            return;
        }
        var k = e.which || e.keyCode, pos = this.caret(), p, c, next, completed;
        if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {
            return;
        }
        else if (k && k !== 13) {
            if (pos.end - pos.begin !== 0) {
                this.clearBuffer(pos.begin, pos.end);
                this.shiftL(pos.begin, pos.end - 1);
            }
            p = this.seekNext(pos.begin - 1);
            if (p < this.len) {
                c = String.fromCharCode(k);
                if (this.tests[p].test(c)) {
                    this.shiftR(p);
                    this.buffer[p] = c;
                    this.writeBuffer();
                    next = this.seekNext(p);
                    if (/android/i.test(this.domHandler.getUserAgent())) {
                        //Path for CSP Violation on FireFox OS 1.1
                        var proxy = function () {
                            _this.caret(next);
                        };
                        setTimeout(proxy, 0);
                    }
                    else {
                        this.caret(next);
                    }
                    if (pos.begin <= this.lastRequiredNonMaskPos) {
                        completed = this.isCompleted();
                    }
                }
            }
            e.preventDefault();
        }
        this.updateModel(e);
        this.updateFilledState();
        if (completed) {
            this.onComplete.emit();
        }
    };
    InputMask.prototype.clearBuffer = function (start, end) {
        var i;
        for (i = start; i < end && i < this.len; i++) {
            if (this.tests[i]) {
                this.buffer[i] = this.getPlaceholder(i);
            }
        }
    };
    InputMask.prototype.writeBuffer = function () {
        this.inputViewChild.nativeElement.value = this.buffer.join('');
    };
    InputMask.prototype.checkVal = function (allow) {
        //try to place characters where they belong
        var test = this.inputViewChild.nativeElement.value, lastMatch = -1, i, c, pos;
        for (i = 0, pos = 0; i < this.len; i++) {
            if (this.tests[i]) {
                this.buffer[i] = this.getPlaceholder(i);
                while (pos++ < test.length) {
                    c = test.charAt(pos - 1);
                    if (this.tests[i].test(c)) {
                        this.buffer[i] = c;
                        lastMatch = i;
                        break;
                    }
                }
                if (pos > test.length) {
                    this.clearBuffer(i + 1, this.len);
                    break;
                }
            }
            else {
                if (this.buffer[i] === test.charAt(pos)) {
                    pos++;
                }
                if (i < this.partialPosition) {
                    lastMatch = i;
                }
            }
        }
        if (allow) {
            this.writeBuffer();
        }
        else if (lastMatch + 1 < this.partialPosition) {
            if (this.autoClear || this.buffer.join('') === this.defaultBuffer) {
                // Invalid value. Remove it and replace it with the
                // mask, which is the default behavior.
                if (this.inputViewChild.nativeElement.value)
                    this.inputViewChild.nativeElement.value = '';
                this.clearBuffer(0, this.len);
            }
            else {
                // Invalid value, but we opt to show the value to the
                // user and allow them to correct their mistake.
                this.writeBuffer();
            }
        }
        else {
            this.writeBuffer();
            this.inputViewChild.nativeElement.value = this.inputViewChild.nativeElement.value.substring(0, lastMatch + 1);
        }
        return (this.partialPosition ? i : this.firstNonMaskPos);
    };
    InputMask.prototype.onInputFocus = function (event) {
        var _this = this;
        if (this.readonly) {
            return;
        }
        this.focus = true;
        clearTimeout(this.caretTimeoutId);
        var pos;
        this.focusText = this.inputViewChild.nativeElement.value;
        pos = this.checkVal();
        this.caretTimeoutId = setTimeout(function () {
            if (_this.inputViewChild.nativeElement !== document.activeElement) {
                return;
            }
            _this.writeBuffer();
            if (pos == _this.mask.replace("?", "").length) {
                _this.caret(0, pos);
            }
            else {
                _this.caret(pos);
            }
        }, 10);
        this.onFocus.emit(event);
    };
    InputMask.prototype.onInput = function (event) {
        if (this.androidChrome)
            this.handleAndroidInput(event);
        else
            this.handleInputChange(event);
    };
    InputMask.prototype.handleInputChange = function (event) {
        var _this = this;
        if (this.readonly) {
            return;
        }
        setTimeout(function () {
            var pos = _this.checkVal(true);
            _this.caret(pos);
            _this.updateModel(event);
            if (_this.isCompleted()) {
                _this.onComplete.emit();
            }
        }, 0);
    };
    InputMask.prototype.getUnmaskedValue = function () {
        var unmaskedBuffer = [];
        for (var i = 0; i < this.buffer.length; i++) {
            var c = this.buffer[i];
            if (this.tests[i] && c != this.getPlaceholder(i)) {
                unmaskedBuffer.push(c);
            }
        }
        return unmaskedBuffer.join('');
    };
    InputMask.prototype.updateModel = function (e) {
        this.onModelChange(this.unmask ? this.getUnmaskedValue() : e.target.value);
    };
    InputMask.prototype.updateFilledState = function () {
        this.filled = this.inputViewChild.nativeElement && this.inputViewChild.nativeElement.value != '';
    };
    InputMask.prototype.ngOnDestroy = function () {
    };
    return InputMask;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], InputMask.prototype, "mask", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], InputMask.prototype, "type", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], InputMask.prototype, "slotChar", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], InputMask.prototype, "autoClear", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], InputMask.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], InputMask.prototype, "inputId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], InputMask.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], InputMask.prototype, "placeholder", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], InputMask.prototype, "size", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], InputMask.prototype, "maxlength", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], InputMask.prototype, "tabindex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], InputMask.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], InputMask.prototype, "readonly", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], InputMask.prototype, "unmask", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], InputMask.prototype, "name", void 0);
__decorate([
    core_1.ViewChild('input'),
    __metadata("design:type", core_1.ElementRef)
], InputMask.prototype, "inputViewChild", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], InputMask.prototype, "onComplete", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], InputMask.prototype, "onFocus", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], InputMask.prototype, "onBlur", void 0);
InputMask = __decorate([
    core_1.Component({
        selector: 'p-inputMask',
        template: "<input #input pInputText [attr.id]=\"inputId\" [attr.type]=\"type\" [attr.name]=\"name\" [ngStyle]=\"style\" [ngClass]=\"styleClass\" [attr.placeholder]=\"placeholder\"\n        [attr.size]=\"size\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [disabled]=\"disabled\" [readonly]=\"readonly\"\n        (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" (keydown)=\"onKeyDown($event)\" (keypress)=\"onKeyPress($event)\"\n        (input)=\"onInput($event)\" (paste)=\"handleInputChange($event)\">",
        host: {
            '[class.ui-inputwrapper-filled]': 'filled',
            '[class.ui-inputwrapper-focus]': 'focus'
        },
        providers: [exports.INPUTMASK_VALUE_ACCESSOR, domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler])
], InputMask);
exports.InputMask = InputMask;
var InputMaskModule = (function () {
    function InputMaskModule() {
    }
    return InputMaskModule;
}());
InputMaskModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, inputtext_1.InputTextModule],
        exports: [InputMask],
        declarations: [InputMask]
    })
], InputMaskModule);
exports.InputMaskModule = InputMaskModule;
//# sourceMappingURL=inputmask.js.map

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var forms_1 = __webpack_require__(6);
var domhandler_1 = __webpack_require__(4);
exports.INPUTSWITCH_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return InputSwitch; }),
    multi: true
};
var InputSwitch = (function () {
    function InputSwitch(el, domHandler) {
        this.el = el;
        this.domHandler = domHandler;
        this.onLabel = 'On';
        this.offLabel = 'Off';
        this.ariaLabelTemplate = "InputSwitch {0}";
        this.onChange = new core_1.EventEmitter();
        this.checked = false;
        this.focused = false;
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
        this.initialized = false;
    }
    InputSwitch.prototype.ngAfterViewInit = function () {
        this.container = this.el.nativeElement.children[0];
        this.handle = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-inputswitch-handle');
        this.onContainer = this.domHandler.findSingle(this.container, 'div.ui-inputswitch-on');
        this.offContainer = this.domHandler.findSingle(this.container, 'div.ui-inputswitch-off');
        this.onLabelChild = this.domHandler.findSingle(this.onContainer, 'span.ui-inputswitch-onlabel');
        this.offLabelChild = this.domHandler.findSingle(this.offContainer, 'span.ui-inputswitch-offlabel');
    };
    InputSwitch.prototype.ngAfterViewChecked = function () {
        if (this.container.offsetParent && !this.initialized) {
            this.render();
        }
    };
    InputSwitch.prototype.render = function () {
        var onContainerWidth = this.domHandler.width(this.onContainer), offContainerWidth = this.domHandler.width(this.offContainer), spanPadding = this.domHandler.innerWidth(this.offLabelChild) - this.domHandler.width(this.offLabelChild), handleMargins = this.domHandler.getOuterWidth(this.handle) - this.domHandler.innerWidth(this.handle);
        var containerWidth = (onContainerWidth > offContainerWidth) ? onContainerWidth : offContainerWidth, handleWidth = containerWidth;
        this.handle.style.width = handleWidth + 'px';
        handleWidth = this.domHandler.width(this.handle);
        containerWidth = containerWidth + handleWidth + 6;
        var labelWidth = containerWidth - handleWidth - spanPadding - handleMargins;
        this.container.style.width = containerWidth + 'px';
        this.onLabelChild.style.width = labelWidth + 'px';
        this.offLabelChild.style.width = labelWidth + 'px';
        //position
        this.offContainer.style.width = (this.domHandler.width(this.container) - 5) + 'px';
        this.offset = this.domHandler.width(this.container) - this.domHandler.getOuterWidth(this.handle);
        //default value
        if (this.checked) {
            this.handle.style.left = this.offset + 'px';
            this.onContainer.style.width = this.offset + 'px';
            this.offLabelChild.style.marginRight = -this.offset + 'px';
        }
        else {
            this.onContainer.style.width = 0 + 'px';
            this.onLabelChild.style.marginLeft = -this.offset + 'px';
        }
        this.initialized = true;
    };
    InputSwitch.prototype.toggle = function (event, checkbox) {
        if (!this.disabled) {
            if (this.checked) {
                this.checked = false;
                this.uncheckUI();
            }
            else {
                this.checked = true;
                this.checkUI();
            }
            this.onModelChange(this.checked);
            this.onChange.emit({
                originalEvent: event,
                checked: this.checked
            });
            checkbox.focus();
        }
    };
    InputSwitch.prototype.checkUI = function () {
        this.onContainer.style.width = this.offset + 'px';
        this.onLabelChild.style.marginLeft = 0 + 'px';
        this.offLabelChild.style.marginRight = -this.offset + 'px';
        this.handle.style.left = this.offset + 'px';
        this.updateAriaLabel();
    };
    InputSwitch.prototype.uncheckUI = function () {
        this.onContainer.style.width = 0 + 'px';
        this.onLabelChild.style.marginLeft = -this.offset + 'px';
        this.offLabelChild.style.marginRight = 0 + 'px';
        this.handle.style.left = 0 + 'px';
        this.updateAriaLabel();
    };
    InputSwitch.prototype.onFocus = function (event) {
        this.focused = true;
    };
    InputSwitch.prototype.onBlur = function (event) {
        this.focused = false;
        this.onModelTouched();
    };
    InputSwitch.prototype.writeValue = function (checked) {
        this.checked = checked;
        if (this.initialized) {
            if (this.checked === true)
                this.checkUI();
            else
                this.uncheckUI();
        }
    };
    InputSwitch.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    InputSwitch.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    InputSwitch.prototype.setDisabledState = function (val) {
        this.disabled = val;
    };
    InputSwitch.prototype.updateAriaLabel = function () {
        var pattern = /{(.*?)}/, value = this.checked ? this.onLabel : this.offLabel;
        this.ariaLabel = this.ariaLabelTemplate.replace(this.ariaLabelTemplate.match(pattern)[0], value);
    };
    return InputSwitch;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], InputSwitch.prototype, "onLabel", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], InputSwitch.prototype, "offLabel", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], InputSwitch.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], InputSwitch.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], InputSwitch.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], InputSwitch.prototype, "tabindex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], InputSwitch.prototype, "inputId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], InputSwitch.prototype, "ariaLabelTemplate", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], InputSwitch.prototype, "onChange", void 0);
InputSwitch = __decorate([
    core_1.Component({
        selector: 'p-inputSwitch',
        template: "\n        <div [ngClass]=\"{'ui-inputswitch ui-widget ui-widget-content ui-corner-all': true,\n            'ui-state-disabled': disabled,'ui-inputswitch-checked':checked, 'ui-state-focus':focused}\" (click)=\"toggle($event, in)\"\n            [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-inputswitch-off\">\n                <span class=\"ui-inputswitch-offlabel\">{{offLabel}}</span>\n            </div>\n            <div class=\"ui-inputswitch-on\">\n                <span class=\"ui-inputswitch-onlabel\">{{onLabel}}</span>\n            </div>\n            <div [ngClass]=\"{'ui-inputswitch-handle ui-state-default':true, 'ui-state-focus':focused}\"></div>\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #in type=\"checkbox\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\" aria-live=\"polite\" [attr.id]=\"inputId\" (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\" readonly=\"readonly\" [attr.tabindex]=\"tabindex\"/>\n            </div>\n        </div>\n    ",
        providers: [exports.INPUTSWITCH_VALUE_ACCESSOR, domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler])
], InputSwitch);
exports.InputSwitch = InputSwitch;
var InputSwitchModule = (function () {
    function InputSwitchModule() {
    }
    return InputSwitchModule;
}());
InputSwitchModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [InputSwitch],
        declarations: [InputSwitch]
    })
], InputSwitchModule);
exports.InputSwitchModule = InputSwitchModule;
//# sourceMappingURL=inputswitch.js.map

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var InputTextarea = (function () {
    function InputTextarea(el) {
        this.el = el;
        this.onResize = new core_1.EventEmitter();
    }
    InputTextarea.prototype.ngOnInit = function () {
        this.rowsDefault = this.rows;
        this.colsDefault = this.cols;
    };
    InputTextarea.prototype.ngDoCheck = function () {
        this.updateFilledState();
    };
    //To trigger change detection to manage ui-state-filled for material labels when there is no value binding
    InputTextarea.prototype.onInput = function (e) {
        this.updateFilledState();
    };
    InputTextarea.prototype.updateFilledState = function () {
        this.filled = this.el.nativeElement.value && this.el.nativeElement.value.length;
    };
    InputTextarea.prototype.onFocus = function (e) {
        if (this.autoResize) {
            this.resize(e);
        }
    };
    InputTextarea.prototype.onBlur = function (e) {
        if (this.autoResize) {
            this.resize(e);
        }
    };
    InputTextarea.prototype.onKeyup = function (e) {
        if (this.autoResize) {
            this.resize(e);
        }
    };
    InputTextarea.prototype.resize = function (event) {
        var linesCount = 0, lines = this.el.nativeElement.value.split('\n');
        for (var i = lines.length - 1; i >= 0; --i) {
            linesCount += Math.floor((lines[i].length / this.colsDefault) + 1);
        }
        this.rows = (linesCount >= this.rowsDefault) ? (linesCount + 1) : this.rowsDefault;
        this.onResize.emit(event || {});
    };
    return InputTextarea;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], InputTextarea.prototype, "autoResize", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], InputTextarea.prototype, "rows", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], InputTextarea.prototype, "cols", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], InputTextarea.prototype, "onResize", void 0);
__decorate([
    core_1.HostListener('input', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], InputTextarea.prototype, "onInput", null);
__decorate([
    core_1.HostListener('focus', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], InputTextarea.prototype, "onFocus", null);
__decorate([
    core_1.HostListener('blur', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], InputTextarea.prototype, "onBlur", null);
__decorate([
    core_1.HostListener('keyup', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], InputTextarea.prototype, "onKeyup", null);
InputTextarea = __decorate([
    core_1.Directive({
        selector: '[pInputTextarea]',
        host: {
            '[class.ui-inputtext]': 'true',
            '[class.ui-corner-all]': 'true',
            '[class.ui-state-default]': 'true',
            '[class.ui-widget]': 'true',
            '[class.ui-state-filled]': 'filled',
            '[attr.rows]': 'rows',
            '[attr.cols]': 'cols'
        }
    }),
    __metadata("design:paramtypes", [core_1.ElementRef])
], InputTextarea);
exports.InputTextarea = InputTextarea;
var InputTextareaModule = (function () {
    function InputTextareaModule() {
    }
    return InputTextareaModule;
}());
InputTextareaModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [InputTextarea],
        declarations: [InputTextarea]
    })
], InputTextareaModule);
exports.InputTextareaModule = InputTextareaModule;
//# sourceMappingURL=inputtextarea.js.map

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var Lightbox = (function () {
    function Lightbox(el, domHandler, renderer) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
        this.type = 'image';
        this.effectDuration = '500ms';
    }
    Lightbox.prototype.onImageClick = function (event, image, i, content) {
        this.index = i;
        this.loading = true;
        content.style.width = 32 + 'px';
        content.style.height = 32 + 'px';
        this.show();
        this.displayImage(image);
        this.preventDocumentClickListener = true;
        event.preventDefault();
    };
    Lightbox.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.panel = this.domHandler.findSingle(this.el.nativeElement, '.ui-lightbox ');
        if (this.appendTo) {
            if (this.appendTo === 'body')
                document.body.appendChild(this.panel);
            else
                this.domHandler.appendChild(this.panel, this.appendTo);
        }
        this.documentClickListener = this.renderer.listen('document', 'click', function (event) {
            if (!_this.preventDocumentClickListener && _this.visible) {
                _this.hide(event);
            }
            _this.preventDocumentClickListener = false;
        });
    };
    Lightbox.prototype.onLinkClick = function (event, content) {
        this.show();
        this.preventDocumentClickListener = true;
        event.preventDefault();
    };
    Lightbox.prototype.displayImage = function (image) {
        var _this = this;
        setTimeout(function () {
            _this.currentImage = image;
            _this.captionText = image.title;
            _this.center();
        }, 1000);
    };
    Lightbox.prototype.show = function () {
        this.mask = document.createElement('div');
        this.mask.style.zIndex = ++domhandler_1.DomHandler.zindex;
        this.domHandler.addMultipleClasses(this.mask, 'ui-widget-overlay ui-dialog-mask');
        document.body.appendChild(this.mask);
        this.zindex = ++domhandler_1.DomHandler.zindex;
        this.center();
        this.visible = true;
    };
    Lightbox.prototype.hide = function (event) {
        this.captionText = null;
        this.index = null;
        this.currentImage = null;
        this.visible = false;
        this.panel.style.left = 'auto';
        this.panel.style.top = 'auto';
        if (this.mask) {
            document.body.removeChild(this.mask);
            this.mask = null;
        }
        event.preventDefault();
    };
    Lightbox.prototype.center = function () {
        var elementWidth = this.domHandler.getOuterWidth(this.panel);
        var elementHeight = this.domHandler.getOuterHeight(this.panel);
        if (elementWidth == 0 && elementHeight == 0) {
            this.panel.style.visibility = 'hidden';
            this.panel.style.display = 'block';
            elementWidth = this.domHandler.getOuterWidth(this.panel);
            elementHeight = this.domHandler.getOuterHeight(this.panel);
            this.panel.style.display = 'none';
            this.panel.style.visibility = 'visible';
        }
        var viewport = this.domHandler.getViewport();
        var x = (viewport.width - elementWidth) / 2;
        var y = (viewport.height - elementHeight) / 2;
        this.panel.style.left = x + 'px';
        this.panel.style.top = y + 'px';
    };
    Lightbox.prototype.onImageLoad = function (event, content) {
        var _this = this;
        var image = event.target;
        image.style.visibility = 'hidden';
        image.style.display = 'block';
        var imageWidth = this.domHandler.getOuterWidth(image);
        var imageHeight = this.domHandler.getOuterHeight(image);
        image.style.display = 'none';
        image.style.visibility = 'visible';
        content.style.width = imageWidth + 'px';
        content.style.height = imageHeight + 'px';
        this.panel.style.left = parseInt(this.panel.style.left) + (this.domHandler.getOuterWidth(this.panel) - imageWidth) / 2 + 'px';
        this.panel.style.top = parseInt(this.panel.style.top) + (this.domHandler.getOuterHeight(this.panel) - imageHeight) / 2 + 'px';
        setTimeout(function () {
            _this.domHandler.fadeIn(image, 500);
            image.style.display = 'block';
            //this.captionText = this.currentImage.title;
            _this.loading = false;
        }, parseInt(this.effectDuration));
    };
    Lightbox.prototype.prev = function (placeholder) {
        this.captionText = null;
        this.loading = true;
        placeholder.style.display = 'none';
        if (this.index > 0) {
            this.displayImage(this.images[--this.index]);
        }
    };
    Lightbox.prototype.next = function (placeholder) {
        this.captionText = null;
        this.loading = true;
        placeholder.style.display = 'none';
        if (this.index <= (this.images.length - 1)) {
            this.displayImage(this.images[++this.index]);
        }
    };
    Object.defineProperty(Lightbox.prototype, "leftVisible", {
        get: function () {
            return this.images && this.images.length && this.index != 0 && !this.loading;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Lightbox.prototype, "rightVisible", {
        get: function () {
            return this.images && this.images.length && this.index < (this.images.length - 1) && !this.loading;
        },
        enumerable: true,
        configurable: true
    });
    Lightbox.prototype.ngOnDestroy = function () {
        if (this.documentClickListener) {
            this.documentClickListener();
        }
        if (this.appendTo) {
            this.el.nativeElement.appendChild(this.panel);
        }
    };
    return Lightbox;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], Lightbox.prototype, "images", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Lightbox.prototype, "type", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Lightbox.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Lightbox.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Lightbox.prototype, "appendTo", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Lightbox.prototype, "easing", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Lightbox.prototype, "effectDuration", void 0);
Lightbox = __decorate([
    core_1.Component({
        selector: 'p-lightbox',
        template: "\n        <div [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"(type == 'image')\">\n            <a *ngFor=\"let image of images; let i = index;\" [href]=\"image.source\" (click)=\"onImageClick($event,image,i,content)\">\n                <img [src]=\"image.thumbnail\" [title]=\"image.title\" [alt]=\"image.alt\">\n            </a>\n        </div>\n        <span [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"(type == 'content')\" (click)=\"onLinkClick($event,content)\">\n            <ng-content select=\"a\"></ng-content>\n        </span>\n        <div class=\"ui-lightbox ui-widget ui-helper-hidden ui-corner-all ui-shadow\" [style.display]=\"visible ? 'block' : 'none'\" [style.zIndex]=\"zindex\"\n            [ngClass]=\"{'ui-lightbox-loading': loading}\"\n            [style.transitionProperty]=\"'all'\" [style.transitionDuration]=\"effectDuration\" [style.transitionTimingFunction]=\"easing\" (click)=\"preventDocumentClickListener=true\">\n           <div class=\"ui-lightbox-content-wrapper\">\n              <a class=\"ui-state-default ui-lightbox-nav-left ui-corner-right\" [style.zIndex]=\"zindex + 1\" (click)=\"prev(img)\"\n                [ngClass]=\"{'ui-helper-hidden':!leftVisible}\"><span class=\"fa fa-fw fa-caret-left\"></span></a>\n              <div #content class=\"ui-lightbox-content ui-corner-all\" #content \n                [style.transitionProperty]=\"'width,height'\" [style.transitionDuration]=\"effectDuration\" [style.transitionTimingFunction]=\"easing\">\n                <img #img [src]=\"currentImage ? currentImage.source||'' : ''\" (load)=\"onImageLoad($event,content)\" style=\"display:none\">\n                <ng-content></ng-content>\n              </div>\n              <a class=\"ui-state-default ui-lightbox-nav-right ui-corner-left ui-helper-hidden\" [style.zIndex]=\"zindex + 1\" (click)=\"next(img)\"\n                [ngClass]=\"{'ui-helper-hidden':!rightVisible}\"><span class=\"fa fa-fw fa-caret-right\"></span></a>\n           </div>\n           <div class=\"ui-lightbox-caption ui-widget-header\" [style.display]=\"captionText ? 'block' : 'none'\">\n              <span class=\"ui-lightbox-caption-text\">{{captionText}}</span><a class=\"ui-lightbox-close ui-corner-all\" href=\"#\" (click)=\"hide($event)\"><span class=\"fa fa-fw fa-close\"></span></a>\n              <div style=\"clear:both\"></div>\n           </div>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2])
], Lightbox);
exports.Lightbox = Lightbox;
var LightboxModule = (function () {
    function LightboxModule() {
    }
    return LightboxModule;
}());
LightboxModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Lightbox],
        declarations: [Lightbox]
    })
], LightboxModule);
exports.LightboxModule = LightboxModule;
//# sourceMappingURL=lightbox.js.map

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var shared_1 = __webpack_require__(7);
var domhandler_1 = __webpack_require__(4);
var objectutils_1 = __webpack_require__(18);
var forms_1 = __webpack_require__(6);
exports.LISTBOX_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return Listbox; }),
    multi: true
};
var Listbox = (function () {
    function Listbox(el, domHandler, objectUtils) {
        this.el = el;
        this.domHandler = domHandler;
        this.objectUtils = objectUtils;
        this.checkbox = false;
        this.filter = false;
        this.metaKeySelection = true;
        this.onChange = new core_1.EventEmitter();
        this.onDblClick = new core_1.EventEmitter();
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    Listbox.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.templates.forEach(function (item) {
            switch (item.getType()) {
                case 'item':
                    _this.itemTemplate = item.template;
                    break;
                default:
                    _this.itemTemplate = item.template;
                    break;
            }
        });
    };
    Listbox.prototype.writeValue = function (value) {
        this.value = value;
    };
    Listbox.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    Listbox.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    Listbox.prototype.setDisabledState = function (val) {
        this.disabled = val;
    };
    Listbox.prototype.onOptionClick = function (event, option) {
        if (this.disabled) {
            return;
        }
        if (!this.checkboxClick) {
            if (this.multiple)
                this.onOptionClickMultiple(event, option);
            else
                this.onOptionClickSingle(event, option);
        }
        else {
            this.checkboxClick = false;
        }
        this.optionTouched = false;
    };
    Listbox.prototype.onOptionTouchEnd = function (event, option) {
        if (this.disabled) {
            return;
        }
        this.optionTouched = true;
    };
    Listbox.prototype.onOptionClickSingle = function (event, option) {
        var selected = this.isSelected(option);
        var valueChanged = false;
        var metaSelection = this.optionTouched ? false : this.metaKeySelection;
        if (metaSelection) {
            var metaKey = (event.metaKey || event.ctrlKey);
            if (selected) {
                if (metaKey) {
                    this.value = null;
                    valueChanged = true;
                }
            }
            else {
                this.value = option.value;
                valueChanged = true;
            }
        }
        else {
            this.value = selected ? null : option.value;
            valueChanged = true;
        }
        if (valueChanged) {
            this.onModelChange(this.value);
            this.onChange.emit({
                originalEvent: event,
                value: this.value
            });
        }
    };
    Listbox.prototype.onOptionClickMultiple = function (event, option) {
        var selected = this.isSelected(option);
        var valueChanged = false;
        var metaSelection = this.optionTouched ? false : this.metaKeySelection;
        if (metaSelection) {
            var metaKey = (event.metaKey || event.ctrlKey);
            if (selected) {
                if (metaKey) {
                    this.removeOption(option);
                }
                else {
                    this.value = [option.value];
                }
                valueChanged = true;
            }
            else {
                this.value = (metaKey) ? this.value || [] : [];
                this.value = this.value.concat([option.value]);
                valueChanged = true;
            }
        }
        else {
            if (selected) {
                this.removeOption(option);
            }
            else {
                this.value = (this.value || []).concat([option.value]);
            }
            valueChanged = true;
        }
        if (valueChanged) {
            this.onModelChange(this.value);
            this.onChange.emit({
                originalEvent: event,
                value: this.value
            });
        }
    };
    Listbox.prototype.removeOption = function (option) {
        var _this = this;
        this.value = this.value.filter(function (val) { return !_this.objectUtils.equals(val, option.value, _this.dataKey); });
    };
    Listbox.prototype.isSelected = function (option) {
        var selected = false;
        if (this.multiple) {
            if (this.value) {
                for (var _i = 0, _a = this.value; _i < _a.length; _i++) {
                    var val = _a[_i];
                    if (this.objectUtils.equals(val, option.value, this.dataKey)) {
                        selected = true;
                        break;
                    }
                }
            }
        }
        else {
            selected = this.objectUtils.equals(this.value, option.value, this.dataKey);
        }
        return selected;
    };
    Object.defineProperty(Listbox.prototype, "allChecked", {
        get: function () {
            if (this.filterValue && this.filterValue.trim().length)
                return this.allFilteredSelected();
            else
                return this.value && this.options && (this.value.length == this.options.length);
        },
        enumerable: true,
        configurable: true
    });
    Listbox.prototype.allFilteredSelected = function () {
        var allSelected;
        if (this.value && this.visibleOptions && this.visibleOptions.length) {
            allSelected = true;
            for (var _i = 0, _a = this.visibleOptions; _i < _a.length; _i++) {
                var opt = _a[_i];
                var selected = void 0;
                for (var _b = 0, _c = this.value; _b < _c.length; _b++) {
                    var val = _c[_b];
                    if (this.objectUtils.equals(val, opt.value, this.dataKey)) {
                        selected = true;
                    }
                }
                if (!selected) {
                    allSelected = false;
                    break;
                }
            }
        }
        return allSelected;
    };
    Listbox.prototype.onFilter = function (event) {
        this.filterValue = event.target.value.trim().toLowerCase();
        this.visibleOptions = [];
        for (var i = 0; i < this.options.length; i++) {
            var option = this.options[i];
            if (option.label.toLowerCase().indexOf(this.filterValue.toLowerCase()) > -1) {
                this.visibleOptions.push(option);
            }
        }
        this.filtered = true;
    };
    Listbox.prototype.toggleAll = function (event, checkbox) {
        if (this.disabled || (this.filterValue && this.filterValue.trim().length && (!this.visibleOptions || this.visibleOptions.length === 0))) {
            return;
        }
        if (checkbox.checked) {
            this.value = [];
        }
        else {
            var opts = (this.visibleOptions && this.visibleOptions.length) ? this.visibleOptions : this.options;
            if (opts) {
                this.value = [];
                for (var i = 0; i < opts.length; i++) {
                    this.value.push(opts[i].value);
                }
            }
        }
        checkbox.checked = !checkbox.checked;
        this.onModelChange(this.value);
        this.onChange.emit({ originalEvent: event, value: this.value });
    };
    Listbox.prototype.isItemVisible = function (option) {
        if (this.filterValue && this.filterValue.trim().length) {
            for (var i = 0; i < this.visibleOptions.length; i++) {
                if (this.visibleOptions[i].value == option.value) {
                    return true;
                }
            }
        }
        else {
            return true;
        }
    };
    Listbox.prototype.onDoubleClick = function (event, option) {
        if (this.disabled) {
            return;
        }
        this.onDblClick.emit({
            originalEvent: event,
            value: this.value
        });
    };
    Listbox.prototype.onCheckboxClick = function (event, option) {
        if (this.disabled) {
            return;
        }
        this.checkboxClick = true;
        var selected = this.isSelected(option);
        if (selected) {
            this.removeOption(option);
        }
        else {
            this.value = this.value ? this.value : [];
            this.value = this.value.concat([option.value]);
        }
        this.onModelChange(this.value);
        this.onChange.emit({
            originalEvent: event,
            value: this.value
        });
    };
    return Listbox;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], Listbox.prototype, "options", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Listbox.prototype, "multiple", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Listbox.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Listbox.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Listbox.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Listbox.prototype, "checkbox", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Listbox.prototype, "filter", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Listbox.prototype, "metaKeySelection", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Listbox.prototype, "dataKey", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Listbox.prototype, "onChange", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Listbox.prototype, "onDblClick", void 0);
__decorate([
    core_1.ContentChildren(shared_1.PrimeTemplate),
    __metadata("design:type", core_1.QueryList)
], Listbox.prototype, "templates", void 0);
Listbox = __decorate([
    core_1.Component({
        selector: 'p-listbox',
        template: "\n        <div [ngClass]=\"{'ui-listbox ui-inputtext ui-widget ui-widget-content ui-corner-all':true,'ui-state-disabled':disabled}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-widget-header ui-corner-all ui-listbox-header ui-helper-clearfix\" *ngIf=\"(checkbox && multiple) || filter\" [ngClass]=\"{'ui-listbox-header-w-checkbox': checkbox}\">\n                <div class=\"ui-chkbox ui-widget\" *ngIf=\"checkbox && multiple\">\n                    <div class=\"ui-helper-hidden-accessible\">\n                        <input #cb type=\"checkbox\" readonly=\"readonly\" [checked]=\"allChecked\">\n                    </div>\n                    <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" [ngClass]=\"{'ui-state-active':allChecked}\" (click)=\"toggleAll($event,cb)\">\n                        <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'fa fa-check':allChecked}\"></span>\n                    </div>\n                </div>\n                <div class=\"ui-listbox-filter-container\" *ngIf=\"filter\">\n                    <input type=\"text\" role=\"textbox\" (input)=\"onFilter($event)\" class=\"ui-inputtext ui-widget ui-state-default ui-corner-all\" [disabled]=\"disabled\">\n                    <span class=\"fa fa-search\"></span>\n                </div>\n            </div>\n            <ul class=\"ui-listbox-list\">\n                <li *ngFor=\"let option of options; let i = index;\" [style.display]=\"isItemVisible(option) ? 'block' : 'none'\"\n                    [ngClass]=\"{'ui-listbox-item ui-corner-all':true,'ui-state-highlight':isSelected(option)}\"\n                    (click)=\"onOptionClick($event,option)\" (dblclick)=\"onDoubleClick($event,option)\" (touchend)=\"onOptionTouchEnd($event,option)\">\n                    <div class=\"ui-chkbox ui-widget\" *ngIf=\"checkbox && multiple\" (click)=\"onCheckboxClick($event,option)\">\n                        <div class=\"ui-helper-hidden-accessible\">\n                            <input type=\"checkbox\" [checked]=\"isSelected(option)\" [disabled]=\"disabled\">\n                        </div>\n                        <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" [ngClass]=\"{'ui-state-active':isSelected(option)}\">\n                            <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'fa fa-check':isSelected(option)}\"></span>\n                        </div>\n                    </div>\n                    <span *ngIf=\"!itemTemplate\">{{option.label}}</span>\n                    <ng-template *ngIf=\"itemTemplate\" [pTemplateWrapper]=\"itemTemplate\" [item]=\"option\" [index]=\"i\"></ng-template>\n                </li>\n            </ul>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler, objectutils_1.ObjectUtils, exports.LISTBOX_VALUE_ACCESSOR]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, objectutils_1.ObjectUtils])
], Listbox);
exports.Listbox = Listbox;
var ListboxModule = (function () {
    function ListboxModule() {
    }
    return ListboxModule;
}());
ListboxModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, shared_1.SharedModule],
        exports: [Listbox, shared_1.SharedModule],
        declarations: [Listbox]
    })
], ListboxModule);
exports.ListboxModule = ListboxModule;
//# sourceMappingURL=listbox.js.map

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var router_1 = __webpack_require__(5);
var MegaMenu = (function () {
    function MegaMenu(el, domHandler, renderer) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
        this.orientation = 'horizontal';
    }
    MegaMenu.prototype.onItemMouseEnter = function (event, item, menuitem) {
        if (menuitem.disabled) {
            return;
        }
        this.activeItem = item;
        var submenu = item.children[0].nextElementSibling;
        if (submenu) {
            submenu.style.zIndex = ++domhandler_1.DomHandler.zindex;
            if (this.orientation === 'horizontal') {
                submenu.style.top = this.domHandler.getOuterHeight(item.children[0]) + 'px';
                submenu.style.left = '0px';
            }
            else if (this.orientation === 'vertical') {
                submenu.style.top = '0px';
                submenu.style.left = this.domHandler.getOuterWidth(item.children[0]) + 'px';
            }
        }
    };
    MegaMenu.prototype.onItemMouseLeave = function (event, link) {
        this.activeItem = null;
    };
    MegaMenu.prototype.itemClick = function (event, item) {
        if (item.disabled) {
            event.preventDefault();
            return;
        }
        if (!item.url) {
            event.preventDefault();
        }
        if (item.command) {
            item.command({
                originalEvent: event,
                item: item
            });
        }
        this.activeItem = null;
    };
    MegaMenu.prototype.getColumnClass = function (menuitem) {
        var length = menuitem.items ? menuitem.items.length : 0;
        var columnClass;
        switch (length) {
            case 2:
                columnClass = 'ui-g-6';
                break;
            case 3:
                columnClass = 'ui-g-4';
                break;
            case 4:
                columnClass = 'ui-g-3';
                break;
            case 6:
                columnClass = 'ui-g-2';
                break;
            default:
                columnClass = 'ui-g-12';
                break;
        }
        return columnClass;
    };
    return MegaMenu;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], MegaMenu.prototype, "model", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], MegaMenu.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], MegaMenu.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], MegaMenu.prototype, "orientation", void 0);
MegaMenu = __decorate([
    core_1.Component({
        selector: 'p-megaMenu',
        template: "\n        <div [class]=\"styleClass\" [ngStyle]=\"style\"\n            [ngClass]=\"{'ui-menu ui-menubar ui-megamenu ui-widget ui-widget-content ui-corner-all ui-helper-clearfix':true,'ui-megamenu-vertical': orientation == 'vertical'}\">\n            <ul class=\"ui-menu-list ui-helper-reset ui-menubar-root-list\">\n                <ng-template ngFor let-category [ngForOf]=\"model\">\n                    <li *ngIf=\"category.separator\" class=\"ui-menu-separator ui-widget-content\">\n                    <li *ngIf=\"!category.separator\" #item [ngClass]=\"{'ui-menuitem ui-widget ui-corner-all':true,'ui-menu-parent':category.items,'ui-menuitem-active':item==activeItem}\"\n                        (mouseenter)=\"onItemMouseEnter($event, item, category)\" (mouseleave)=\"onItemMouseLeave($event, item)\">\n                        <a class=\"ui-menuitem-link ui-corner-all ui-submenu-link\" [ngClass]=\"{'ui-state-disabled':category.disabled}\">\n                            <span class=\"ui-menuitem-icon fa fa-fw\" [ngClass]=\"category.icon\"></span>\n                            <span class=\"ui-menuitem-text\">{{category.label}}</span>\n                            <span class=\"ui-submenu-icon fa fa-fw\" [ngClass]=\"{'fa-caret-down':orientation=='horizontal','fa-caret-right':orientation=='vertical'}\"></span>\n                        </a>\n                        <div class=\"ui-megamenu-panel ui-widget-content ui-menu-list ui-corner-all ui-helper-clearfix ui-menu-child ui-shadow\">\n                            <div class=\"ui-g\">\n                                <ng-template ngFor let-column [ngForOf]=\"category.items\">\n                                    <div [class]=\"getColumnClass(category)\">\n                                        <ng-template ngFor let-submenu [ngForOf]=\"column\">\n                                            <ul class=\"ui-menu-list ui-helper-reset\">\n                                                <li class=\"ui-widget-header ui-corner-all\"><h3>{{submenu.label}}</h3></li>\n                                                <ng-template ngFor let-item [ngForOf]=\"submenu.items\">\n                                                    <li *ngIf=\"item.separator\" class=\"ui-menu-separator ui-widget-content\">\n                                                    <li *ngIf=\"!item.separator\" class=\"ui-menuitem ui-widget ui-corner-all\">\n                                                        <a *ngIf=\"!item.routerLink\" [href]=\"item.url||'#'\" class=\"ui-menuitem-link ui-corner-all\" [attr.target]=\"item.target\"\n                                                            [ngClass]=\"{'ui-state-disabled':item.disabled}\" (click)=\"itemClick($event, item)\">\n                                                            <span class=\"ui-menuitem-icon fa fa-fw\" *ngIf=\"item.icon\" [ngClass]=\"item.icon\"></span>\n                                                            <span class=\"ui-menuitem-text\">{{item.label}}</span>\n                                                        </a>\n                                                        <a *ngIf=\"item.routerLink\" [routerLink]=\"item.routerLink\" [routerLinkActive]=\"'ui-state-active'\" [routerLinkActiveOptions]=\"item.routerLinkActiveOptions||{exact:false}\" class=\"ui-menuitem-link ui-corner-all\" [attr.target]=\"item.target\"\n                                                            [ngClass]=\"{'ui-state-disabled':item.disabled}\" (click)=\"itemClick($event, item)\">\n                                                            <span class=\"ui-menuitem-icon fa fa-fw\" *ngIf=\"item.icon\" [ngClass]=\"item.icon\"></span>\n                                                            <span class=\"ui-menuitem-text\">{{item.label}}</span>\n                                                        </a>\n                                                    </li>\n                                                </ng-template>\n                                            </ul>\n                                        </ng-template>\n                                    </div>\n                                </ng-template>\n                            </div>\n                        </div>\n                    </li>\n                </ng-template>\n                <li class=\"ui-menuitem ui-menuitem-custom ui-widget ui-corner-all\" *ngIf=\"orientation === 'horizontal'\">\n                    <ng-content></ng-content>\n                </li>\n            </ul>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2])
], MegaMenu);
exports.MegaMenu = MegaMenu;
var MegaMenuModule = (function () {
    function MegaMenuModule() {
    }
    return MegaMenuModule;
}());
MegaMenuModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, router_1.RouterModule],
        exports: [MegaMenu, router_1.RouterModule],
        declarations: [MegaMenu]
    })
], MegaMenuModule);
exports.MegaMenuModule = MegaMenuModule;
//# sourceMappingURL=megamenu.js.map

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var router_1 = __webpack_require__(5);
var MenuItemContent = (function () {
    function MenuItemContent(menu) {
        this.menu = menu;
    }
    return MenuItemContent;
}());
__decorate([
    core_1.Input("pMenuItemContent"),
    __metadata("design:type", Object)
], MenuItemContent.prototype, "item", void 0);
MenuItemContent = __decorate([
    core_1.Component({
        selector: '[pMenuItemContent]',
        template: "\n        <a *ngIf=\"!item.routerLink\" [href]=\"item.url||'#'\" class=\"ui-menuitem-link ui-corner-all\" [attr.target]=\"item.target\"\n            [ngClass]=\"{'ui-state-disabled':item.disabled}\" (click)=\"menu.itemClick($event, item)\">\n            <span class=\"ui-menuitem-icon fa fa-fw\" *ngIf=\"item.icon\" [ngClass]=\"item.icon\"></span>\n            <span class=\"ui-menuitem-text\">{{item.label}}</span>\n        </a>\n        <a *ngIf=\"item.routerLink\" [routerLink]=\"item.routerLink\" [routerLinkActive]=\"'ui-state-active'\" [routerLinkActiveOptions]=\"item.routerLinkActiveOptions||{exact:false}\" class=\"ui-menuitem-link ui-corner-all\" [attr.target]=\"item.target\"\n            [ngClass]=\"{'ui-state-disabled':item.disabled}\" (click)=\"menu.itemClick($event, item)\">\n            <span class=\"ui-menuitem-icon fa fa-fw\" *ngIf=\"item.icon\" [ngClass]=\"item.icon\"></span>\n            <span class=\"ui-menuitem-text\">{{item.label}}</span>\n        </a>\n    "
    }),
    __param(0, core_1.Inject(core_1.forwardRef(function () { return Menu; }))),
    __metadata("design:paramtypes", [Menu])
], MenuItemContent);
exports.MenuItemContent = MenuItemContent;
var Menu = (function () {
    function Menu(el, domHandler, renderer) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
    }
    Menu.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.container = this.containerViewChild.nativeElement;
        if (this.popup) {
            if (this.appendTo) {
                if (this.appendTo === 'body')
                    document.body.appendChild(this.container);
                else
                    this.domHandler.appendChild(this.container, this.appendTo);
            }
            this.documentClickListener = this.renderer.listen('document', 'click', function () {
                if (!_this.preventDocumentDefault) {
                    _this.hide();
                }
                _this.preventDocumentDefault = false;
            });
        }
    };
    Menu.prototype.toggle = function (event) {
        if (this.container.offsetParent)
            this.hide();
        else
            this.show(event);
        this.preventDocumentDefault = true;
    };
    Menu.prototype.onResize = function (event) {
        if (this.onResizeTarget && this.container.offsetParent) {
            this.domHandler.absolutePosition(this.container, this.onResizeTarget);
        }
    };
    Menu.prototype.show = function (event) {
        var target = event.currentTarget;
        this.onResizeTarget = event.currentTarget;
        this.container.style.display = 'block';
        this.domHandler.absolutePosition(this.container, target);
        this.domHandler.fadeIn(this.container, 250);
        this.preventDocumentDefault = true;
    };
    Menu.prototype.hide = function () {
        this.container.style.display = 'none';
    };
    Menu.prototype.itemClick = function (event, item) {
        if (item.disabled) {
            event.preventDefault();
            return;
        }
        if (!item.url) {
            event.preventDefault();
        }
        if (item.command) {
            item.command({
                originalEvent: event,
                item: item
            });
        }
        if (this.popup) {
            this.hide();
        }
    };
    Menu.prototype.ngOnDestroy = function () {
        if (this.popup) {
            if (this.documentClickListener) {
                this.documentClickListener();
            }
            if (this.appendTo) {
                this.el.nativeElement.appendChild(this.container);
            }
        }
    };
    Menu.prototype.hasSubMenu = function () {
        if (this.model) {
            for (var _i = 0, _a = this.model; _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.items) {
                    return true;
                }
            }
        }
        return false;
    };
    return Menu;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], Menu.prototype, "model", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Menu.prototype, "popup", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Menu.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Menu.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Menu.prototype, "appendTo", void 0);
__decorate([
    core_1.ViewChild('container'),
    __metadata("design:type", core_1.ElementRef)
], Menu.prototype, "containerViewChild", void 0);
Menu = __decorate([
    core_1.Component({
        selector: 'p-menu',
        template: "\n        <div #container [ngClass]=\"{'ui-menu ui-widget ui-widget-content ui-corner-all ui-helper-clearfix':true,'ui-menu-dynamic ui-shadow':popup}\" \n            [class]=\"styleClass\" [ngStyle]=\"style\" (click)=\"preventDocumentDefault=true\">\n            <ul class=\"ui-menu-list ui-helper-reset\">\n                <ng-template ngFor let-submenu [ngForOf]=\"model\" *ngIf=\"hasSubMenu()\">\n                    <li class=\"ui-menu-separator ui-widget-content\" *ngIf=\"submenu.separator\">\n                    <li class=\"ui-widget-header ui-corner-all\" *ngIf=\"!submenu.separator\"><h3>{{submenu.label}}</h3></li>\n                    <ng-template ngFor let-item [ngForOf]=\"submenu.items\">\n                        <li class=\"ui-menu-separator ui-widget-content\" *ngIf=\"item.separator\">\n                        <li class=\"ui-menuitem ui-widget ui-corner-all\" *ngIf=\"!item.separator\" [pMenuItemContent]=\"item\"></li>\n                    </ng-template>\n                </ng-template>\n                <ng-template ngFor let-item [ngForOf]=\"model\" *ngIf=\"!hasSubMenu()\">\n                    <li class=\"ui-menu-separator ui-widget-content\" *ngIf=\"item.separator\">\n                    <li class=\"ui-menuitem ui-widget ui-corner-all\" *ngIf=\"!item.separator\" [pMenuItemContent]=\"item\"></li>\n                </ng-template>\n            </ul>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler],
        host: { '(window:resize)': 'onResize($event)' }
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2])
], Menu);
exports.Menu = Menu;
var MenuModule = (function () {
    function MenuModule() {
    }
    return MenuModule;
}());
MenuModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, router_1.RouterModule],
        exports: [Menu, router_1.RouterModule],
        declarations: [Menu, MenuItemContent]
    })
], MenuModule);
exports.MenuModule = MenuModule;
//# sourceMappingURL=menu.js.map

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var router_1 = __webpack_require__(5);
var MenubarSub = (function () {
    function MenubarSub(domHandler) {
        this.domHandler = domHandler;
    }
    MenubarSub.prototype.onItemMouseEnter = function (event, item, menuitem) {
        if (menuitem.disabled) {
            return;
        }
        this.activeItem = item;
        var nextElement = item.children[0].nextElementSibling;
        if (nextElement) {
            var sublist = nextElement.children[0];
            sublist.style.zIndex = String(++domhandler_1.DomHandler.zindex);
            if (this.root) {
                sublist.style.top = this.domHandler.getOuterHeight(item.children[0]) + 'px';
                sublist.style.left = '0px';
            }
            else {
                sublist.style.top = '0px';
                sublist.style.left = this.domHandler.getOuterWidth(item.children[0]) + 'px';
            }
        }
    };
    MenubarSub.prototype.onItemMouseLeave = function (event) {
        this.activeItem = null;
    };
    MenubarSub.prototype.itemClick = function (event, item) {
        if (item.disabled) {
            event.preventDefault();
            return;
        }
        if (!item.url) {
            event.preventDefault();
        }
        if (item.command) {
            item.command({
                originalEvent: event,
                item: item
            });
        }
        this.activeItem = null;
    };
    MenubarSub.prototype.listClick = function (event) {
        this.activeItem = null;
    };
    return MenubarSub;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], MenubarSub.prototype, "item", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], MenubarSub.prototype, "root", void 0);
MenubarSub = __decorate([
    core_1.Component({
        selector: 'p-menubarSub',
        template: "\n        <ul [ngClass]=\"{'ui-menubar-root-list ui-helper-clearfix':root, 'ui-widget-content ui-corner-all ui-helper-clearfix ui-menu-child ui-shadow':!root}\" class=\"ui-menu-list\"\n            (click)=\"listClick($event)\">\n            <ng-template ngFor let-child [ngForOf]=\"(root ? item : item.items)\">\n                <li *ngIf=\"child.separator\" class=\"ui-menu-separator ui-widget-content\">\n                <li *ngIf=\"!child.separator\" #listItem [ngClass]=\"{'ui-menuitem ui-widget ui-corner-all':true,'ui-menu-parent':child.items,'ui-menuitem-active':listItem==activeItem}\"\n                    (mouseenter)=\"onItemMouseEnter($event,listItem,child)\" (mouseleave)=\"onItemMouseLeave($event)\">\n                    <a *ngIf=\"!child.routerLink\" [href]=\"child.url||'#'\" [attr.target]=\"child.target\" (click)=\"itemClick($event, child)\"\n                         [ngClass]=\"{'ui-menuitem-link ui-corner-all':true,'ui-state-disabled':child.disabled}\" [ngStyle]=\"child.style\" [class]=\"child.styleClass\">\n                        <span class=\"ui-menuitem-icon fa fa-fw\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                        <span class=\"ui-submenu-icon fa fa-fw\" *ngIf=\"child.items\" [ngClass]=\"{'fa-caret-down':root,'fa-caret-right':!root}\"></span>\n                    </a>\n                    <a *ngIf=\"child.routerLink\" [routerLink]=\"child.routerLink\" [routerLinkActive]=\"'ui-state-active'\" [routerLinkActiveOptions]=\"child.routerLinkActiveOptions||{exact:false}\" [attr.target]=\"child.target\"\n                        (click)=\"itemClick($event, child)\" [ngClass]=\"{'ui-menuitem-link ui-corner-all':true,'ui-state-disabled':child.disabled}\" [ngStyle]=\"child.style\" [class]=\"child.styleClass\">\n                        <span class=\"ui-menuitem-icon fa fa-fw\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                        <span class=\"ui-submenu-icon fa fa-fw\" *ngIf=\"child.items\" [ngClass]=\"{'fa-caret-down':root,'fa-caret-right':!root}\"></span>\n                    </a>\n                    <p-menubarSub class=\"ui-submenu\" [item]=\"child\" *ngIf=\"child.items\"></p-menubarSub>\n                </li>\n            </ng-template>\n            <li class=\"ui-menuitem ui-menuitem-custom ui-widget ui-corner-all\">\n                <ng-content></ng-content>\n            </li>\n        </ul>\n    ",
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [domhandler_1.DomHandler])
], MenubarSub);
exports.MenubarSub = MenubarSub;
var Menubar = (function () {
    function Menubar(el, domHandler, renderer) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
    }
    return Menubar;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], Menubar.prototype, "model", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Menubar.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Menubar.prototype, "styleClass", void 0);
Menubar = __decorate([
    core_1.Component({
        selector: 'p-menubar',
        template: "\n        <div [ngClass]=\"{'ui-menubar ui-menu ui-widget ui-widget-content ui-corner-all ui-helper-clearfix':true}\" \n            [class]=\"styleClass\" [ngStyle]=\"style\">\n            <p-menubarSub [item]=\"model\" root=\"root\">\n                <ng-content></ng-content>\n            </p-menubarSub>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2])
], Menubar);
exports.Menubar = Menubar;
var MenubarModule = (function () {
    function MenubarModule() {
    }
    return MenubarModule;
}());
MenubarModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, router_1.RouterModule],
        exports: [Menubar, router_1.RouterModule],
        declarations: [Menubar, MenubarSub]
    })
], MenubarModule);
exports.MenubarModule = MenubarModule;
//# sourceMappingURL=menubar.js.map

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var objectutils_1 = __webpack_require__(18);
var forms_1 = __webpack_require__(6);
exports.MULTISELECT_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return MultiSelect; }),
    multi: true
};
var MultiSelect = (function () {
    function MultiSelect(el, domHandler, renderer, differs, objectUtils, cd) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
        this.objectUtils = objectUtils;
        this.cd = cd;
        this.onChange = new core_1.EventEmitter();
        this.onBlur = new core_1.EventEmitter();
        this.scrollHeight = '200px';
        this.defaultLabel = 'Choose';
        this.filter = true;
        this.displaySelectedLabel = true;
        this.maxSelectedLabels = 3;
        this.selectedItemsLabel = '{0} items selected';
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
        this.valueDiffer = differs.find([]).create(null);
        this.optionsDiffer = differs.find([]).create(null);
    }
    MultiSelect.prototype.ngOnInit = function () {
        this.updateLabel();
    };
    MultiSelect.prototype.ngAfterViewInit = function () {
        this.container = this.containerViewChild.nativeElement;
        this.panel = this.panelViewChild.nativeElement;
        if (this.appendTo) {
            if (this.appendTo === 'body')
                document.body.appendChild(this.panel);
            else
                this.domHandler.appendChild(this.panel, this.appendTo);
        }
        if (this.overlayVisible) {
            this.show();
        }
    };
    MultiSelect.prototype.ngAfterViewChecked = function () {
        if (this.filtered) {
            if (this.appendTo)
                this.domHandler.absolutePosition(this.panel, this.container);
            else
                this.domHandler.relativePosition(this.panel, this.container);
            this.filtered = false;
        }
    };
    MultiSelect.prototype.ngDoCheck = function () {
        var valueChanges = this.valueDiffer.diff(this.value);
        var optionChanges = this.optionsDiffer.diff(this.options);
        if (valueChanges || optionChanges) {
            this.updateLabel();
        }
    };
    MultiSelect.prototype.writeValue = function (value) {
        this.value = value;
        this.updateLabel();
        this.cd.markForCheck();
    };
    MultiSelect.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    MultiSelect.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    MultiSelect.prototype.setDisabledState = function (val) {
        this.disabled = val;
    };
    MultiSelect.prototype.onItemClick = function (event, value) {
        var selectionIndex = this.findSelectionIndex(value);
        if (selectionIndex != -1)
            this.value = this.value.filter(function (val, i) { return i != selectionIndex; });
        else
            this.value = (this.value || []).concat([value]);
        this.onModelChange(this.value);
        this.onChange.emit({ originalEvent: event, value: this.value });
    };
    MultiSelect.prototype.isSelected = function (value) {
        return this.findSelectionIndex(value) != -1;
    };
    MultiSelect.prototype.findSelectionIndex = function (val) {
        var index = -1;
        if (this.value) {
            for (var i = 0; i < this.value.length; i++) {
                if (this.objectUtils.equals(this.value[i], val, this.dataKey)) {
                    index = i;
                    break;
                }
            }
        }
        return index;
    };
    MultiSelect.prototype.toggleAll = function (event, checkbox) {
        if (checkbox.checked) {
            this.value = [];
        }
        else {
            var opts = this.getVisibleOptions();
            if (opts) {
                this.value = [];
                for (var i = 0; i < opts.length; i++) {
                    this.value.push(opts[i].value);
                }
            }
        }
        checkbox.checked = !checkbox.checked;
        this.onModelChange(this.value);
        this.onChange.emit({ originalEvent: event, value: this.value });
    };
    MultiSelect.prototype.isAllChecked = function () {
        if (this.filterValue && this.filterValue.trim().length)
            return this.value && this.visibleOptions && this.visibleOptions.length && (this.value.length == this.visibleOptions.length);
        else
            return this.value && this.options && (this.value.length == this.options.length);
    };
    MultiSelect.prototype.show = function () {
        this.overlayVisible = true;
        this.panel.style.zIndex = String(++domhandler_1.DomHandler.zindex);
        this.bindDocumentClickListener();
        if (this.appendTo)
            this.domHandler.absolutePosition(this.panel, this.container);
        else
            this.domHandler.relativePosition(this.panel, this.container);
        this.domHandler.fadeIn(this.panel, 250);
    };
    MultiSelect.prototype.hide = function () {
        this.overlayVisible = false;
        this.unbindDocumentClickListener();
    };
    MultiSelect.prototype.close = function (event) {
        this.hide();
        event.preventDefault();
        event.stopPropagation();
    };
    MultiSelect.prototype.onMouseclick = function (event, input) {
        if (this.disabled) {
            return;
        }
        if (!this.panelClick) {
            if (this.overlayVisible) {
                this.hide();
            }
            else {
                input.focus();
                this.show();
            }
        }
        this.selfClick = true;
    };
    MultiSelect.prototype.onFocus = function (event) {
        this.focus = true;
    };
    MultiSelect.prototype.onInputBlur = function (event) {
        this.focus = false;
        this.onBlur.emit({ originalEvent: event });
        this.onModelTouched();
    };
    MultiSelect.prototype.updateLabel = function () {
        if (this.value && this.options && this.value.length && this.displaySelectedLabel) {
            var label = '';
            for (var i = 0; i < this.value.length; i++) {
                if (i != 0) {
                    label = label + ', ';
                }
                label = label + this.findLabelByValue(this.value[i]);
            }
            if (this.value.length <= this.maxSelectedLabels) {
                this.valuesAsString = label;
            }
            else {
                var pattern = /{(.*?)}/, newSelectedItemsLabel = this.selectedItemsLabel.replace(this.selectedItemsLabel.match(pattern)[0], this.value.length + '');
                this.valuesAsString = newSelectedItemsLabel;
            }
        }
        else {
            this.valuesAsString = this.defaultLabel;
        }
    };
    MultiSelect.prototype.findLabelByValue = function (val) {
        var label = null;
        for (var i = 0; i < this.options.length; i++) {
            var option = this.options[i];
            if (val == null && option.value == null || this.objectUtils.equals(val, option.value, this.dataKey)) {
                label = option.label;
                break;
            }
        }
        return label;
    };
    MultiSelect.prototype.onFilter = function (event) {
        this.filterValue = event.target.value.trim().toLowerCase();
        this.visibleOptions = [];
        for (var i = 0; i < this.options.length; i++) {
            var option = this.options[i];
            if (option.label.toLowerCase().indexOf(this.filterValue.toLowerCase()) > -1) {
                this.visibleOptions.push(option);
            }
        }
        this.filtered = true;
    };
    MultiSelect.prototype.isItemVisible = function (option) {
        if (this.filterValue && this.filterValue.trim().length) {
            for (var i = 0; i < this.visibleOptions.length; i++) {
                if (this.visibleOptions[i].value == option.value) {
                    return true;
                }
            }
        }
        else {
            return true;
        }
    };
    MultiSelect.prototype.getVisibleOptions = function () {
        if (this.filterValue && this.filterValue.trim().length) {
            var items = [];
            for (var i = 0; i < this.options.length; i++) {
                var option = this.options[i];
                if (option.label.toLowerCase().includes(this.filterValue.toLowerCase())) {
                    items.push(option);
                }
            }
            return items;
        }
        else {
            return this.options;
        }
    };
    MultiSelect.prototype.bindDocumentClickListener = function () {
        var _this = this;
        if (!this.documentClickListener) {
            this.documentClickListener = this.renderer.listen('document', 'click', function () {
                if (!_this.selfClick && !_this.panelClick && _this.overlayVisible) {
                    _this.hide();
                }
                _this.selfClick = false;
                _this.panelClick = false;
                _this.cd.markForCheck();
            });
        }
    };
    MultiSelect.prototype.unbindDocumentClickListener = function () {
        if (this.documentClickListener) {
            this.documentClickListener();
            this.documentClickListener = null;
        }
    };
    MultiSelect.prototype.ngOnDestroy = function () {
        this.unbindDocumentClickListener();
        if (this.appendTo) {
            this.container.appendChild(this.panel);
        }
    };
    return MultiSelect;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], MultiSelect.prototype, "options", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], MultiSelect.prototype, "onChange", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], MultiSelect.prototype, "onBlur", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], MultiSelect.prototype, "scrollHeight", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], MultiSelect.prototype, "defaultLabel", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], MultiSelect.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], MultiSelect.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], MultiSelect.prototype, "inputId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], MultiSelect.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], MultiSelect.prototype, "filter", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], MultiSelect.prototype, "overlayVisible", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], MultiSelect.prototype, "tabindex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], MultiSelect.prototype, "appendTo", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], MultiSelect.prototype, "dataKey", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], MultiSelect.prototype, "displaySelectedLabel", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], MultiSelect.prototype, "maxSelectedLabels", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], MultiSelect.prototype, "selectedItemsLabel", void 0);
__decorate([
    core_1.ViewChild('container'),
    __metadata("design:type", core_1.ElementRef)
], MultiSelect.prototype, "containerViewChild", void 0);
__decorate([
    core_1.ViewChild('panel'),
    __metadata("design:type", core_1.ElementRef)
], MultiSelect.prototype, "panelViewChild", void 0);
MultiSelect = __decorate([
    core_1.Component({
        selector: 'p-multiSelect',
        template: "\n        <div #container [ngClass]=\"{'ui-multiselect ui-widget ui-state-default ui-corner-all':true,'ui-state-focus':focus,'ui-state-disabled': disabled}\" [ngStyle]=\"style\" [class]=\"styleClass\"\n            (click)=\"onMouseclick($event,in)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #in type=\"text\" readonly=\"readonly\" [attr.id]=\"inputId\" (focus)=\"onFocus($event)\" (blur)=\"onInputBlur($event)\" [disabled]=\"disabled\" [attr.tabindex]=\"tabindex\">\n            </div>\n            <div class=\"ui-multiselect-label-container\" [title]=\"valuesAsString\">\n                <label class=\"ui-multiselect-label ui-corner-all\">{{valuesAsString}}</label>\n            </div>\n            <div [ngClass]=\"{'ui-multiselect-trigger ui-state-default ui-corner-right':true}\">\n                <span class=\"fa fa-fw fa-caret-down ui-clickable\"></span>\n            </div>\n            <div #panel class=\"ui-multiselect-panel ui-widget ui-widget-content ui-corner-all ui-shadow\" [style.display]=\"overlayVisible ? 'block' : 'none'\" (click)=\"panelClick=true\">\n                <div class=\"ui-widget-header ui-corner-all ui-multiselect-header ui-helper-clearfix\">\n                    <div class=\"ui-chkbox ui-widget\">\n                        <div class=\"ui-helper-hidden-accessible\">\n                            <input #cb type=\"checkbox\" readonly=\"readonly\" [checked]=\"isAllChecked()\">\n                        </div>\n                        <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" [ngClass]=\"{'ui-state-active':isAllChecked()}\" (click)=\"toggleAll($event,cb)\">\n                            <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'fa fa-check':isAllChecked()}\"></span>\n                        </div>\n                    </div>\n                    <div class=\"ui-multiselect-filter-container\" *ngIf=\"filter\">\n                        <input type=\"text\" role=\"textbox\" (input)=\"onFilter($event)\"\n                                    class=\"ui-inputtext ui-widget ui-state-default ui-corner-all\">\n                        <span class=\"fa fa-fw fa-search\"></span>\n                    </div>\n                    <a class=\"ui-multiselect-close ui-corner-all\" href=\"#\" (click)=\"close($event)\">\n                        <span class=\"fa fa-close\"></span>\n                    </a>\n                </div>\n                <div class=\"ui-multiselect-items-wrapper\">\n                    <ul class=\"ui-multiselect-items ui-multiselect-list ui-widget-content ui-widget ui-corner-all ui-helper-reset\" [style.max-height]=\"scrollHeight||'auto'\">\n                        <li *ngFor=\"let option of options\" class=\"ui-multiselect-item ui-corner-all\" (click)=\"onItemClick($event,option.value)\" \n                            [style.display]=\"isItemVisible(option) ? 'block' : 'none'\" [ngClass]=\"{'ui-state-highlight':isSelected(option.value)}\">\n                            <div class=\"ui-chkbox ui-widget\">\n                                <div class=\"ui-helper-hidden-accessible\">\n                                    <input type=\"checkbox\" readonly=\"readonly\" [checked]=\"isSelected(option.value)\">\n                                </div>\n                                <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" [ngClass]=\"{'ui-state-active':isSelected(option.value)}\">\n                                    <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'fa fa-check':isSelected(option.value)}\"></span>\n                                </div>\n                            </div>\n                            <label>{{option.label}}</label>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler, objectutils_1.ObjectUtils, exports.MULTISELECT_VALUE_ACCESSOR]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2, core_1.IterableDiffers, objectutils_1.ObjectUtils, core_1.ChangeDetectorRef])
], MultiSelect);
exports.MultiSelect = MultiSelect;
var MultiSelectModule = (function () {
    function MultiSelectModule() {
    }
    return MultiSelectModule;
}());
MultiSelectModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [MultiSelect],
        declarations: [MultiSelect]
    })
], MultiSelectModule);
exports.MultiSelectModule = MultiSelectModule;
//# sourceMappingURL=multiselect.js.map

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var button_1 = __webpack_require__(16);
var shared_1 = __webpack_require__(7);
var domhandler_1 = __webpack_require__(4);
var objectutils_1 = __webpack_require__(18);
var OrderList = (function () {
    function OrderList(el, domHandler, objectUtils) {
        this.el = el;
        this.domHandler = domHandler;
        this.objectUtils = objectUtils;
        this.metaKeySelection = true;
        this.onReorder = new core_1.EventEmitter();
        this.onSelectionChange = new core_1.EventEmitter();
        this.onFilterEvent = new core_1.EventEmitter();
    }
    OrderList.prototype.ngAfterViewInit = function () {
        this.listContainer = this.domHandler.findSingle(this.el.nativeElement, 'ul.ui-orderlist-list');
    };
    OrderList.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.templates.forEach(function (item) {
            switch (item.getType()) {
                case 'item':
                    _this.itemTemplate = item.template;
                    break;
                default:
                    _this.itemTemplate = item.template;
                    break;
            }
        });
    };
    OrderList.prototype.ngAfterViewChecked = function () {
        if (this.movedUp || this.movedDown) {
            var listItems = this.domHandler.find(this.listContainer, 'li.ui-state-highlight');
            var listItem = void 0;
            if (this.movedUp)
                listItem = listItems[0];
            else
                listItem = listItems[listItems.length - 1];
            this.domHandler.scrollInView(this.listContainer, listItem);
            this.movedUp = false;
            this.movedDown = false;
        }
    };
    Object.defineProperty(OrderList.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (val) {
            this._value = val ? val.slice() : null;
            if (this.filterValue) {
                this.filter();
            }
        },
        enumerable: true,
        configurable: true
    });
    OrderList.prototype.onItemClick = function (event, item) {
        var index = this.findIndexInList(item, this.selectedItems);
        var selected = (index != -1);
        var metaSelection = this.itemTouched ? false : this.metaKeySelection;
        if (metaSelection) {
            var metaKey = (event.metaKey || event.ctrlKey);
            if (selected && metaKey) {
                this.selectedItems.splice(index, 1);
            }
            else {
                this.selectedItems = (metaKey) ? this.selectedItems || [] : [];
                this.selectedItems.push(item);
            }
        }
        else {
            if (selected) {
                this.selectedItems.splice(index, 1);
            }
            else {
                this.selectedItems = this.selectedItems || [];
                this.selectedItems.push(item);
            }
        }
        this.onSelectionChange.emit({ originalEvent: event, value: this.selectedItems });
        this.itemTouched = false;
    };
    OrderList.prototype.onFilterKeyup = function (event) {
        this.filterValue = event.target.value.trim().toLowerCase();
        this.filter();
        this.onFilterEvent.emit({
            originalEvent: event,
            value: this.visibleOptions
        });
    };
    OrderList.prototype.filter = function () {
        var searchFields = this.filterBy.split(',');
        this.visibleOptions = this.objectUtils.filter(this.value, searchFields, this.filterValue);
    };
    OrderList.prototype.isItemVisible = function (item) {
        if (this.filterValue && this.filterValue.trim().length) {
            for (var i = 0; i < this.visibleOptions.length; i++) {
                if (item == this.visibleOptions[i]) {
                    return true;
                }
            }
        }
        else {
            return true;
        }
    };
    OrderList.prototype.onItemTouchEnd = function (event) {
        this.itemTouched = true;
    };
    OrderList.prototype.isSelected = function (item) {
        return this.findIndexInList(item, this.selectedItems) != -1;
    };
    OrderList.prototype.findIndexInList = function (item, list) {
        var index = -1;
        if (list) {
            for (var i = 0; i < list.length; i++) {
                if (list[i] == item) {
                    index = i;
                    break;
                }
            }
        }
        return index;
    };
    OrderList.prototype.moveUp = function (event, listElement) {
        if (this.selectedItems) {
            for (var i = 0; i < this.selectedItems.length; i++) {
                var selectedItem = this.selectedItems[i];
                var selectedItemIndex = this.findIndexInList(selectedItem, this.value);
                if (selectedItemIndex != 0) {
                    var movedItem = this.value[selectedItemIndex];
                    var temp = this.value[selectedItemIndex - 1];
                    this.value[selectedItemIndex - 1] = movedItem;
                    this.value[selectedItemIndex] = temp;
                }
                else {
                    break;
                }
            }
            this.movedUp = true;
            this.onReorder.emit(event);
        }
    };
    OrderList.prototype.moveTop = function (event, listElement) {
        if (this.selectedItems) {
            for (var i = 0; i < this.selectedItems.length; i++) {
                var selectedItem = this.selectedItems[i];
                var selectedItemIndex = this.findIndexInList(selectedItem, this.value);
                if (selectedItemIndex != 0) {
                    var movedItem = this.value.splice(selectedItemIndex, 1)[0];
                    this.value.unshift(movedItem);
                    listElement.scrollTop = 0;
                }
                else {
                    break;
                }
            }
            this.onReorder.emit(event);
            listElement.scrollTop = 0;
        }
    };
    OrderList.prototype.moveDown = function (event, listElement) {
        if (this.selectedItems) {
            for (var i = this.selectedItems.length - 1; i >= 0; i--) {
                var selectedItem = this.selectedItems[i];
                var selectedItemIndex = this.findIndexInList(selectedItem, this.value);
                if (selectedItemIndex != (this.value.length - 1)) {
                    var movedItem = this.value[selectedItemIndex];
                    var temp = this.value[selectedItemIndex + 1];
                    this.value[selectedItemIndex + 1] = movedItem;
                    this.value[selectedItemIndex] = temp;
                }
                else {
                    break;
                }
            }
            this.movedDown = true;
            this.onReorder.emit(event);
        }
    };
    OrderList.prototype.moveBottom = function (event, listElement) {
        if (this.selectedItems) {
            for (var i = this.selectedItems.length - 1; i >= 0; i--) {
                var selectedItem = this.selectedItems[i];
                var selectedItemIndex = this.findIndexInList(selectedItem, this.value);
                if (selectedItemIndex != (this.value.length - 1)) {
                    var movedItem = this.value.splice(selectedItemIndex, 1)[0];
                    this.value.push(movedItem);
                }
                else {
                    break;
                }
            }
            this.onReorder.emit(event);
            listElement.scrollTop = listElement.scrollHeight;
        }
    };
    OrderList.prototype.onDragStart = function (event, index) {
        this.dragging = true;
        this.draggedItemIndex = index;
        if (this.dragdropScope) {
            event.dataTransfer.setData("text", this.dragdropScope);
        }
    };
    OrderList.prototype.onDragOver = function (event, index) {
        if (this.draggedItemIndex !== index && this.draggedItemIndex + 1 !== index) {
            this.dragOverItemIndex = index;
            event.preventDefault();
        }
    };
    OrderList.prototype.onDragLeave = function (event, index) {
        this.dragOverItemIndex = null;
    };
    OrderList.prototype.onDrop = function (event, index) {
        var dropIndex = (this.draggedItemIndex > index) ? index : (index === 0) ? 0 : index - 1;
        this.objectUtils.reorderArray(this.value, this.draggedItemIndex, dropIndex);
        this.dragOverItemIndex = null;
    };
    OrderList.prototype.onDragEnd = function (event) {
        this.dragging = false;
    };
    OrderList.prototype.onListMouseMove = function (event) {
        if (this.dragging) {
            var offsetY = this.listViewChild.nativeElement.getBoundingClientRect().top + document.body.scrollTop;
            var bottomDiff = (offsetY + this.listViewChild.nativeElement.clientHeight) - event.pageY;
            var topDiff = (event.pageY - offsetY);
            if (bottomDiff < 25 && bottomDiff > 0)
                this.listViewChild.nativeElement.scrollTop += 15;
            else if (topDiff < 25 && topDiff > 0)
                this.listViewChild.nativeElement.scrollTop -= 15;
        }
    };
    return OrderList;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], OrderList.prototype, "header", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], OrderList.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], OrderList.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], OrderList.prototype, "listStyle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], OrderList.prototype, "responsive", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], OrderList.prototype, "filterBy", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], OrderList.prototype, "filterPlaceholder", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], OrderList.prototype, "metaKeySelection", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], OrderList.prototype, "dragdrop", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], OrderList.prototype, "dragdropScope", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], OrderList.prototype, "onReorder", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], OrderList.prototype, "onSelectionChange", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], OrderList.prototype, "onFilterEvent", void 0);
__decorate([
    core_1.ViewChild('listelement'),
    __metadata("design:type", core_1.ElementRef)
], OrderList.prototype, "listViewChild", void 0);
__decorate([
    core_1.ContentChildren(shared_1.PrimeTemplate),
    __metadata("design:type", core_1.QueryList)
], OrderList.prototype, "templates", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], OrderList.prototype, "value", null);
OrderList = __decorate([
    core_1.Component({
        selector: 'p-orderList',
        template: "\n        <div [ngClass]=\"{'ui-orderlist ui-widget':true,'ui-orderlist-responsive':responsive}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-orderlist-controls\">\n                <button type=\"button\" pButton icon=\"fa-angle-up\" (click)=\"moveUp($event,listelement)\"></button>\n                <button type=\"button\" pButton icon=\"fa-angle-double-up\" (click)=\"moveTop($event,listelement)\"></button>\n                <button type=\"button\" pButton icon=\"fa-angle-down\" (click)=\"moveDown($event,listelement)\"></button>\n                <button type=\"button\" pButton icon=\"fa-angle-double-down\" (click)=\"moveBottom($event,listelement)\"></button>\n            </div>\n            <div class=\"ui-orderlist-list-container\">\n                <div class=\"ui-orderlist-caption ui-widget-header ui-corner-top\" *ngIf=\"header\">{{header}}</div>\n                <div class=\"ui-orderlist-filter-container ui-widget-content\" *ngIf=\"filterBy\">\n                    <input type=\"text\" role=\"textbox\" (keyup)=\"onFilterKeyup($event)\" class=\"ui-inputtext ui-widget ui-state-default ui-corner-all\" [disabled]=\"disabled\" [attr.placeholder]=\"filterPlaceholder\">\n                    <span class=\"fa fa-search\"></span>\n                </div>\n                <ul #listelement class=\"ui-widget-content ui-orderlist-list ui-corner-bottom\" [ngStyle]=\"listStyle\" (dragover)=\"onListMouseMove($event)\">\n                    <ng-template ngFor let-item [ngForOf]=\"value\" let-i=\"index\" let-l=\"last\">\n                        <li class=\"ui-orderlist-droppoint\" *ngIf=\"dragdrop && isItemVisible(item)\" (dragover)=\"onDragOver($event, i)\" (drop)=\"onDrop($event, i)\" (dragleave)=\"onDragLeave($event)\" \n                            [ngClass]=\"{'ui-state-highlight': (i === dragOverItemIndex)}\"></li>\n                        <li class=\"ui-orderlist-item\"\n                            [ngClass]=\"{'ui-state-highlight':isSelected(item)}\" \n                            (click)=\"onItemClick($event,item)\" (touchend)=\"onItemTouchEnd($event)\"\n                            [style.display]=\"isItemVisible(item) ? 'block' : 'none'\"\n                            [draggable]=\"dragdrop\" (dragstart)=\"onDragStart($event, i)\" (dragend)=\"onDragEnd($event)\">\n                            <ng-template [pTemplateWrapper]=\"itemTemplate\" [item]=\"item\"></ng-template>\n                        </li>\n                        <li class=\"ui-orderlist-droppoint\" *ngIf=\"dragdrop && l\" (dragover)=\"onDragOver($event, i + 1)\" (drop)=\"onDrop($event, i + 1)\" (dragleave)=\"onDragLeave($event)\" \n                            [ngClass]=\"{'ui-state-highlight': (i + 1 === dragOverItemIndex)}\"></li>\n                    </ng-template>\n                </ul>\n            </div>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler, objectutils_1.ObjectUtils]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, objectutils_1.ObjectUtils])
], OrderList);
exports.OrderList = OrderList;
var OrderListModule = (function () {
    function OrderListModule() {
    }
    return OrderListModule;
}());
OrderListModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, button_1.ButtonModule, shared_1.SharedModule],
        exports: [OrderList, shared_1.SharedModule],
        declarations: [OrderList]
    })
], OrderListModule);
exports.OrderListModule = OrderListModule;
//# sourceMappingURL=orderlist.js.map

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var animations_1 = __webpack_require__(13);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var shared_1 = __webpack_require__(7);
var shared_2 = __webpack_require__(7);
var OrganizationChartNodeTemplateLoader = (function () {
    function OrganizationChartNodeTemplateLoader(viewContainer) {
        this.viewContainer = viewContainer;
    }
    OrganizationChartNodeTemplateLoader.prototype.ngOnInit = function () {
        this.view = this.viewContainer.createEmbeddedView(this.template, {
            '\$implicit': this.node
        });
    };
    OrganizationChartNodeTemplateLoader.prototype.ngOnDestroy = function () {
        this.view.destroy();
    };
    return OrganizationChartNodeTemplateLoader;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], OrganizationChartNodeTemplateLoader.prototype, "node", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", core_1.TemplateRef)
], OrganizationChartNodeTemplateLoader.prototype, "template", void 0);
OrganizationChartNodeTemplateLoader = __decorate([
    core_1.Component({
        selector: 'p-organizationChartNodeTemplateLoader',
        template: ""
    }),
    __metadata("design:paramtypes", [core_1.ViewContainerRef])
], OrganizationChartNodeTemplateLoader);
exports.OrganizationChartNodeTemplateLoader = OrganizationChartNodeTemplateLoader;
var OrganizationChartNode = (function () {
    function OrganizationChartNode(chart) {
        this.chart = chart;
    }
    Object.defineProperty(OrganizationChartNode.prototype, "leaf", {
        get: function () {
            return this.node.leaf == false ? false : !(this.node.children && this.node.children.length);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OrganizationChartNode.prototype, "colspan", {
        get: function () {
            return (this.node.children && this.node.children.length) ? this.node.children.length * 2 : null;
        },
        enumerable: true,
        configurable: true
    });
    OrganizationChartNode.prototype.onNodeClick = function (event, node) {
        this.chart.onNodeClick(event, node);
    };
    OrganizationChartNode.prototype.toggleNode = function (event, node) {
        node.expanded = !node.expanded;
        event.preventDefault();
    };
    OrganizationChartNode.prototype.isSelected = function () {
        return this.chart.isSelected(this.node);
    };
    return OrganizationChartNode;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], OrganizationChartNode.prototype, "node", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], OrganizationChartNode.prototype, "root", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], OrganizationChartNode.prototype, "first", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], OrganizationChartNode.prototype, "last", void 0);
OrganizationChartNode = __decorate([
    core_1.Component({
        selector: '[pOrganizationChartNode]',
        template: "\n        <tr>\n            <td [attr.colspan]=\"colspan\">\n                <div class=\"ui-organizationchart-node-content ui-widget-content ui-corner-all {{node.styleClass}}\" \n                    [ngClass]=\"{'ui-organizationchart-selectable-node': chart.selectionMode && node.selectable !== false,'ui-state-highlight':isSelected()}\"\n                    (click)=\"onNodeClick($event,node)\">\n                    <div *ngIf=\"!chart.getTemplateForNode(node)\">{{node.label}}</div>\n                    <div *ngIf=\"chart.getTemplateForNode(node)\">\n                        <p-organizationChartNodeTemplateLoader [node]=\"node\" [template]=\"chart.getTemplateForNode(node)\"></p-organizationChartNodeTemplateLoader>\n                    </div>\n                    <a *ngIf=\"!leaf\" href=\"#\" class=\"ui-node-toggler\" (click)=\"toggleNode($event, node)\">\n                        <i class=\"fa ui-node-toggler-icon\" [ngClass]=\"{'fa-chevron-down': node.expanded, 'fa-chevron-up': !node.expanded}\"></i>\n                    </a>\n                </div>\n            </td>\n        </tr>\n        <tr [style.visibility]=\"!leaf&&node.expanded ? 'inherit' : 'hidden'\" class=\"ui-organizationchart-lines\" [@childState]=\"'in'\">\n            <td [attr.colspan]=\"colspan\">\n                <div class=\"ui-organizationchart-line-down\"></div>\n            </td>\n        </tr>\n        <tr [style.visibility]=\"!leaf&&node.expanded ? 'inherit' : 'hidden'\" class=\"ui-organizationchart-lines\" [@childState]=\"'in'\">\n            <ng-template ngFor let-child [ngForOf]=\"node.children\" let-first=\"first\" let-last=\"last\">\n                <td class=\"ui-organizationchart-line-left\" [ngClass]=\"{'ui-organizationchart-line-top':!first}\">&nbsp;</td>\n                <td class=\"ui-organizationchart-line-right\" [ngClass]=\"{'ui-organizationchart-line-top':!last}\">&nbsp;</td>\n            </ng-template>\n        </tr>\n        <tr [style.visibility]=\"!leaf&&node.expanded ? 'inherit' : 'hidden'\" class=\"ui-organizationchart-nodes\" [@childState]=\"'in'\">\n            <td *ngFor=\"let child of node.children\" colspan=\"2\">\n                <table class=\"ui-organizationchart-table\" pOrganizationChartNode [node]=\"child\"></table>\n            </td>\n        </tr>\n    ",
        animations: [
            animations_1.trigger('childState', [
                animations_1.state('in', animations_1.style({ opacity: 1 })),
                animations_1.transition('void => *', [
                    animations_1.style({ opacity: 0 }),
                    animations_1.animate(150)
                ]),
                animations_1.transition('* => void', [
                    animations_1.animate(150, animations_1.style({ opacity: 0 }))
                ])
            ])
        ],
    }),
    __param(0, core_1.Inject(core_1.forwardRef(function () { return OrganizationChart; }))),
    __metadata("design:paramtypes", [OrganizationChart])
], OrganizationChartNode);
exports.OrganizationChartNode = OrganizationChartNode;
var OrganizationChart = (function () {
    function OrganizationChart(el, domHandler) {
        this.el = el;
        this.domHandler = domHandler;
        this.selectionChange = new core_1.EventEmitter();
        this.onNodeSelect = new core_1.EventEmitter();
        this.onNodeUnselect = new core_1.EventEmitter();
    }
    Object.defineProperty(OrganizationChart.prototype, "root", {
        get: function () {
            return this.value && this.value.length ? this.value[0] : null;
        },
        enumerable: true,
        configurable: true
    });
    OrganizationChart.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.templates.length) {
            this.templateMap = {};
        }
        this.templates.forEach(function (item) {
            _this.templateMap[item.getType()] = item.template;
        });
    };
    OrganizationChart.prototype.getTemplateForNode = function (node) {
        if (this.templateMap)
            return node.type ? this.templateMap[node.type] : this.templateMap['default'];
        else
            return null;
    };
    OrganizationChart.prototype.onNodeClick = function (event, node) {
        var eventTarget = event.target;
        if (eventTarget.className && (eventTarget.className.indexOf('ui-node-toggler') !== -1 || eventTarget.className.indexOf('ui-node-toggler-icon') !== -1)) {
            return;
        }
        else if (this.selectionMode) {
            if (node.selectable === false) {
                return;
            }
            var index_1 = this.findIndexInSelection(node);
            var selected = (index_1 >= 0);
            if (this.selectionMode === 'single') {
                if (selected) {
                    this.selection = null;
                    this.onNodeUnselect.emit({ originalEvent: event, node: node });
                }
                else {
                    this.selection = node;
                    this.onNodeSelect.emit({ originalEvent: event, node: node });
                }
            }
            else if (this.selectionMode === 'multiple') {
                if (selected) {
                    this.selection = this.selection.filter(function (val, i) { return i != index_1; });
                    this.onNodeUnselect.emit({ originalEvent: event, node: node });
                }
                else {
                    this.selection = (this.selection || []).concat([node]);
                    this.onNodeSelect.emit({ originalEvent: event, node: node });
                }
            }
            this.selectionChange.emit(this.selection);
        }
    };
    OrganizationChart.prototype.findIndexInSelection = function (node) {
        var index = -1;
        if (this.selectionMode && this.selection) {
            if (this.selectionMode === 'single') {
                index = (this.selection == node) ? 0 : -1;
            }
            else if (this.selectionMode === 'multiple') {
                for (var i = 0; i < this.selection.length; i++) {
                    if (this.selection[i] == node) {
                        index = i;
                        break;
                    }
                }
            }
        }
        return index;
    };
    OrganizationChart.prototype.isSelected = function (node) {
        return this.findIndexInSelection(node) != -1;
    };
    return OrganizationChart;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], OrganizationChart.prototype, "value", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], OrganizationChart.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], OrganizationChart.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], OrganizationChart.prototype, "selectionMode", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], OrganizationChart.prototype, "selection", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], OrganizationChart.prototype, "selectionChange", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], OrganizationChart.prototype, "onNodeSelect", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], OrganizationChart.prototype, "onNodeUnselect", void 0);
__decorate([
    core_1.ContentChildren(shared_2.PrimeTemplate),
    __metadata("design:type", core_1.QueryList)
], OrganizationChart.prototype, "templates", void 0);
OrganizationChart = __decorate([
    core_1.Component({
        selector: 'p-organizationChart',
        template: "\n        <div [ngStyle]=\"style\" [class]=\"styleClass\" [ngClass]=\"'ui-organizationchart ui-widget'\">\n            <table class=\"ui-organizationchart-table\" pOrganizationChartNode [node]=\"root\"></table>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler])
], OrganizationChart);
exports.OrganizationChart = OrganizationChart;
var OrganizationChartModule = (function () {
    function OrganizationChartModule() {
    }
    return OrganizationChartModule;
}());
OrganizationChartModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [OrganizationChart, shared_1.SharedModule],
        declarations: [OrganizationChart, OrganizationChartNode, OrganizationChartNodeTemplateLoader]
    })
], OrganizationChartModule);
exports.OrganizationChartModule = OrganizationChartModule;
//# sourceMappingURL=organizationchart.js.map

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var OverlayPanel = (function () {
    function OverlayPanel(el, domHandler, renderer, cd) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
        this.cd = cd;
        this.dismissable = true;
        this.onBeforeShow = new core_1.EventEmitter();
        this.onAfterShow = new core_1.EventEmitter();
        this.onBeforeHide = new core_1.EventEmitter();
        this.onAfterHide = new core_1.EventEmitter();
        this.visible = false;
    }
    OverlayPanel.prototype.ngOnInit = function () {
        var _this = this;
        if (this.dismissable) {
            this.documentClickListener = this.renderer.listen('document', 'click', function () {
                if (!_this.selfClick && !_this.targetEvent) {
                    _this.hide();
                }
                _this.selfClick = false;
                _this.targetEvent = false;
                _this.cd.markForCheck();
            });
        }
    };
    OverlayPanel.prototype.ngAfterViewInit = function () {
        this.container = this.el.nativeElement.children[0];
        if (this.appendTo) {
            if (this.appendTo === 'body')
                document.body.appendChild(this.container);
            else
                this.domHandler.appendChild(this.container, this.appendTo);
        }
    };
    OverlayPanel.prototype.toggle = function (event, target) {
        var currentTarget = (target || event.currentTarget || event.target);
        if (!this.target || this.target == currentTarget) {
            if (this.visible)
                this.hide();
            else
                this.show(event, target);
        }
        else {
            this.show(event, target);
        }
        if (this.dismissable) {
            this.targetEvent = true;
        }
        this.target = currentTarget;
    };
    OverlayPanel.prototype.show = function (event, target) {
        if (this.dismissable) {
            this.targetEvent = true;
        }
        this.onBeforeShow.emit(null);
        var elementTarget = target || event.currentTarget || event.target;
        this.container.style.zIndex = ++domhandler_1.DomHandler.zindex;
        if (this.visible) {
            this.domHandler.absolutePosition(this.container, elementTarget);
        }
        else {
            this.visible = true;
            this.domHandler.absolutePosition(this.container, elementTarget);
            this.domHandler.fadeIn(this.container, 250);
        }
        this.onAfterShow.emit(null);
    };
    OverlayPanel.prototype.hide = function () {
        if (this.visible) {
            this.onBeforeHide.emit(null);
            this.visible = false;
            this.onAfterHide.emit(null);
        }
    };
    OverlayPanel.prototype.onPanelClick = function () {
        if (this.dismissable) {
            this.selfClick = true;
        }
    };
    OverlayPanel.prototype.onCloseClick = function (event) {
        this.hide();
        if (this.dismissable) {
            this.selfClick = true;
        }
        event.preventDefault();
    };
    OverlayPanel.prototype.ngOnDestroy = function () {
        if (this.documentClickListener) {
            this.documentClickListener();
        }
        if (this.appendTo) {
            this.el.nativeElement.appendChild(this.container);
        }
        this.target = null;
    };
    return OverlayPanel;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], OverlayPanel.prototype, "dismissable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], OverlayPanel.prototype, "showCloseIcon", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], OverlayPanel.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], OverlayPanel.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], OverlayPanel.prototype, "appendTo", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], OverlayPanel.prototype, "onBeforeShow", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], OverlayPanel.prototype, "onAfterShow", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], OverlayPanel.prototype, "onBeforeHide", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], OverlayPanel.prototype, "onAfterHide", void 0);
OverlayPanel = __decorate([
    core_1.Component({
        selector: 'p-overlayPanel',
        template: "\n        <div [ngClass]=\"'ui-overlaypanel ui-widget ui-widget-content ui-corner-all ui-shadow'\" [ngStyle]=\"style\" [class]=\"styleClass\"\n            [style.display]=\"visible ? 'block' : 'none'\" (click)=\"onPanelClick()\">\n            <div class=\"ui-overlaypanel-content\">\n                <ng-content></ng-content>\n            </div>\n            <a href=\"#\" *ngIf=\"showCloseIcon\" class=\"ui-overlaypanel-close ui-state-default\" (click)=\"onCloseClick($event)\">\n                <span class=\"fa fa-fw fa-close\"></span>\n            </a>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2, core_1.ChangeDetectorRef])
], OverlayPanel);
exports.OverlayPanel = OverlayPanel;
var OverlayPanelModule = (function () {
    function OverlayPanelModule() {
    }
    return OverlayPanelModule;
}());
OverlayPanelModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [OverlayPanel],
        declarations: [OverlayPanel]
    })
], OverlayPanelModule);
exports.OverlayPanelModule = OverlayPanelModule;
//# sourceMappingURL=overlaypanel.js.map

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var shared_1 = __webpack_require__(7);
var animations_1 = __webpack_require__(13);
var Panel = (function () {
    function Panel(el) {
        this.el = el;
        this.collapsed = false;
        this.expandIcon = 'fa-plus';
        this.collapseIcon = 'fa-minus';
        this.collapsedChange = new core_1.EventEmitter();
        this.onBeforeToggle = new core_1.EventEmitter();
        this.onAfterToggle = new core_1.EventEmitter();
    }
    Panel.prototype.toggle = function (event) {
        if (this.animating) {
            return false;
        }
        this.animating = true;
        this.onBeforeToggle.emit({ originalEvent: event, collapsed: this.collapsed });
        if (this.toggleable) {
            if (this.collapsed)
                this.expand(event);
            else
                this.collapse(event);
        }
        this.onAfterToggle.emit({ originalEvent: event, collapsed: this.collapsed });
        event.preventDefault();
    };
    Panel.prototype.expand = function (event) {
        this.collapsed = false;
        this.collapsedChange.emit(this.collapsed);
    };
    Panel.prototype.collapse = function (event) {
        this.collapsed = true;
        this.collapsedChange.emit(this.collapsed);
    };
    Panel.prototype.getBlockableElement = function () {
        return this.el.nativeElement.children[0];
    };
    Panel.prototype.onToggleDone = function (event) {
        this.animating = false;
    };
    return Panel;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Panel.prototype, "toggleable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Panel.prototype, "header", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Panel.prototype, "collapsed", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Panel.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Panel.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Panel.prototype, "expandIcon", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Panel.prototype, "collapseIcon", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Panel.prototype, "collapsedChange", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Panel.prototype, "onBeforeToggle", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Panel.prototype, "onAfterToggle", void 0);
__decorate([
    core_1.ContentChild(shared_1.Footer),
    __metadata("design:type", Object)
], Panel.prototype, "footerFacet", void 0);
Panel = __decorate([
    core_1.Component({
        selector: 'p-panel',
        template: "\n        <div [ngClass]=\"'ui-panel ui-widget ui-widget-content ui-corner-all'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-panel-titlebar ui-widget-header ui-helper-clearfix ui-corner-all\">\n                <span class=\"ui-panel-title\" *ngIf=\"header\">{{header}}</span>\n                <ng-content select=\"p-header\"></ng-content>\n                <a *ngIf=\"toggleable\" class=\"ui-panel-titlebar-icon ui-panel-titlebar-toggler ui-corner-all ui-state-default\" href=\"#\"\n                    (click)=\"toggle($event)\">\n                    <span [class]=\"collapsed ? 'fa fa-fw ' + expandIcon : 'fa fa-fw ' + collapseIcon\"></span>\n                </a>\n            </div>\n            <div class=\"ui-panel-content-wrapper\" [@panelContent]=\"collapsed ? 'hidden' : 'visible'\" (@panelContent.done)=\"onToggleDone($event)\"\n                [ngClass]=\"{'ui-panel-content-wrapper-overflown': collapsed||animating}\">\n                <div class=\"ui-panel-content ui-widget-content\">\n                    <ng-content></ng-content>\n                </div>\n                \n                <div class=\"ui-panel-footer ui-widget-content\" *ngIf=\"footerFacet\">\n                    <ng-content select=\"p-footer\"></ng-content>\n                </div>\n            </div>\n        </div>\n    ",
        animations: [
            animations_1.trigger('panelContent', [
                animations_1.state('hidden', animations_1.style({
                    height: '0'
                })),
                animations_1.state('visible', animations_1.style({
                    height: '*'
                })),
                animations_1.transition('visible <=> hidden', animations_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
            ])
        ]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef])
], Panel);
exports.Panel = Panel;
var PanelModule = (function () {
    function PanelModule() {
    }
    return PanelModule;
}());
PanelModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Panel, shared_1.SharedModule],
        declarations: [Panel]
    })
], PanelModule);
exports.PanelModule = PanelModule;
//# sourceMappingURL=panel.js.map

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var animations_1 = __webpack_require__(13);
var common_1 = __webpack_require__(3);
var router_1 = __webpack_require__(5);
var BasePanelMenuItem = (function () {
    function BasePanelMenuItem() {
    }
    BasePanelMenuItem.prototype.handleClick = function (event, item) {
        if (item.disabled) {
            event.preventDefault();
            return;
        }
        item.expanded = !item.expanded;
        if (!item.url) {
            event.preventDefault();
        }
        if (item.command) {
            item.command({
                originalEvent: event,
                item: item
            });
        }
    };
    return BasePanelMenuItem;
}());
exports.BasePanelMenuItem = BasePanelMenuItem;
var PanelMenuSub = (function (_super) {
    __extends(PanelMenuSub, _super);
    function PanelMenuSub() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return PanelMenuSub;
}(BasePanelMenuItem));
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], PanelMenuSub.prototype, "item", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], PanelMenuSub.prototype, "expanded", void 0);
PanelMenuSub = __decorate([
    core_1.Component({
        selector: 'p-panelMenuSub',
        template: "\n        <ul class=\"ui-menu-list ui-helper-reset\" [@submenu]=\"expanded ? 'visible' : 'hidden'\">\n            <ng-template ngFor let-child [ngForOf]=\"item.items\">\n                <li *ngIf=\"child.separator\" class=\"ui-menu-separator ui-widget-content\">\n                <li *ngIf=\"!child.separator\" class=\"ui-menuitem ui-corner-all\" [ngClass]=\"{'ui-menu-parent':child.items}\" [class]=\"child.styleClass\" [ngStyle]=\"child.style\">\n                    <a *ngIf=\"!child.routerLink\" [href]=\"child.url||'#'\" class=\"ui-menuitem-link ui-corner-all\" [attr.tabindex]=\"item.expanded ? null : '-1'\"\n                        [ngClass]=\"{'ui-menuitem-link-hasicon':child.icon&&child.items,'ui-state-disabled':child.disabled}\" \n                        (click)=\"handleClick($event,child)\" [attr.target]=\"child.target\">\n                        <span class=\"ui-panelmenu-icon fa fa-fw\" [ngClass]=\"{'fa-caret-right':!child.expanded,'fa-caret-down':child.expanded}\" *ngIf=\"child.items\"></span\n                        ><span class=\"ui-menuitem-icon fa fa-fw\" [ngClass]=\"child.icon\" *ngIf=\"child.icon\"></span\n                        ><span class=\"ui-menuitem-text\">{{child.label}}</span>\n                    </a>\n                    <a *ngIf=\"child.routerLink\" [routerLink]=\"child.routerLink\" [routerLinkActive]=\"'ui-state-active'\" [routerLinkActiveOptions]=\"child.routerLinkActiveOptions||{exact:false}\" class=\"ui-menuitem-link ui-corner-all\" \n                        [ngClass]=\"{'ui-menuitem-link-hasicon':child.icon&&child.items,'ui-state-disabled':child.disabled}\" [attr.tabindex]=\"item.expanded ? null : '-1'\" \n                        (click)=\"handleClick($event,child)\" [attr.target]=\"child.target\">\n                        <span class=\"ui-panelmenu-icon fa fa-fw\" [ngClass]=\"{'fa-caret-right':!child.expanded,'fa-caret-down':child.expanded}\" *ngIf=\"child.items\"></span\n                        ><span class=\"ui-menuitem-icon fa fa-fw\" [ngClass]=\"child.icon\" *ngIf=\"child.icon\"></span\n                        ><span class=\"ui-menuitem-text\">{{child.label}}</span>\n                    </a>\n                    <p-panelMenuSub [item]=\"child\" [expanded]=\"child.expanded\" *ngIf=\"child.items\"></p-panelMenuSub>\n                </li>\n            </ng-template>\n        </ul>\n    ",
        animations: [
            animations_1.trigger('submenu', [
                animations_1.state('hidden', animations_1.style({
                    height: '0px'
                })),
                animations_1.state('visible', animations_1.style({
                    height: '*'
                })),
                animations_1.transition('visible => hidden', animations_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                animations_1.transition('hidden => visible', animations_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
            ])
        ]
    })
], PanelMenuSub);
exports.PanelMenuSub = PanelMenuSub;
var PanelMenu = (function (_super) {
    __extends(PanelMenu, _super);
    function PanelMenu() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PanelMenu.prototype.handleClick = function (event, item) {
        this.animating = true;
        _super.prototype.handleClick.call(this, event, item);
    };
    PanelMenu.prototype.onToggleDone = function () {
        this.animating = false;
    };
    return PanelMenu;
}(BasePanelMenuItem));
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], PanelMenu.prototype, "model", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], PanelMenu.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], PanelMenu.prototype, "styleClass", void 0);
PanelMenu = __decorate([
    core_1.Component({
        selector: 'p-panelMenu',
        template: "\n        <div [class]=\"styleClass\" [ngStyle]=\"style\" [ngClass]=\"'ui-panelmenu ui-widget'\">\n            <div *ngFor=\"let item of model;let f=first;let l=last;\" class=\"ui-panelmenu-panel\">\n                <div [ngClass]=\"{'ui-widget ui-panelmenu-header ui-state-default':true,'ui-corner-top':f,'ui-corner-bottom':l&&!item.expanded,\n                    'ui-state-active':item.expanded,'ui-state-disabled':item.disabled}\" [class]=\"item.styleClass\" [ngStyle]=\"item.style\">\n                    <a *ngIf=\"!item.routerLink\" [href]=\"item.url||'#'\" [ngClass]=\"{'ui-panelmenu-headerlink-hasicon':item.icon}\" (click)=\"handleClick($event,item)\"\n                        [attr.target]=\"item.target\">\n                        <span *ngIf=\"item.items\" class=\"ui-panelmenu-icon fa\" [ngClass]=\"{'fa-caret-right':!item.expanded,'fa-caret-down':item.expanded}\"></span\n                        ><span class=\"ui-menuitem-icon fa\" [ngClass]=\"item.icon\" *ngIf=\"item.icon\"></span\n                        ><span class=\"ui-menuitem-text\">{{item.label}}</span>\n                    </a>\n                    <a *ngIf=\"item.routerLink\" [routerLink]=\"item.routerLink\" [routerLinkActive]=\"'ui-state-active'\" [routerLinkActiveOptions]=\"item.routerLinkActiveOptions||{exact:false}\" [ngClass]=\"{'ui-panelmenu-headerlink-hasicon':item.icon}\" (click)=\"handleClick($event,item)\"\n                        [attr.target]=\"item.target\">\n                        <span *ngIf=\"item.items\" class=\"ui-panelmenu-icon fa\" [ngClass]=\"{'fa-caret-right':!item.expanded,'fa-caret-down':item.expanded}\"></span\n                        ><span class=\"ui-menuitem-icon fa\" [ngClass]=\"item.icon\" *ngIf=\"item.icon\"></span\n                        ><span class=\"ui-menuitem-text\">{{item.label}}</span>\n                    </a>\n                </div>\n                <div *ngIf=\"item.items\" class=\"ui-panelmenu-content-wrapper\" [@rootItem]=\"item.expanded ? 'visible' : 'hidden'\"  (@rootItem.done)=\"onToggleDone($event)\"\n                    [ngClass]=\"{'ui-panelmenu-content-wrapper-overflown': !item.expanded||animating}\">\n                    <div class=\"ui-panelmenu-content ui-widget-content\">\n                        <p-panelMenuSub [item]=\"item\" [expanded]=\"true\"></p-panelMenuSub>\n                    </div>\n                </div>\n            </div>\n        </div>\n    ",
        animations: [
            animations_1.trigger('rootItem', [
                animations_1.state('hidden', animations_1.style({
                    height: '0px'
                })),
                animations_1.state('visible', animations_1.style({
                    height: '*'
                })),
                animations_1.transition('visible => hidden', animations_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                animations_1.transition('hidden => visible', animations_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
            ])
        ]
    })
], PanelMenu);
exports.PanelMenu = PanelMenu;
var PanelMenuModule = (function () {
    function PanelMenuModule() {
    }
    return PanelMenuModule;
}());
PanelMenuModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, router_1.RouterModule],
        exports: [PanelMenu, router_1.RouterModule],
        declarations: [PanelMenu, PanelMenuSub]
    })
], PanelMenuModule);
exports.PanelMenuModule = PanelMenuModule;
//# sourceMappingURL=panelmenu.js.map

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var Password = (function () {
    function Password(el, domHandler) {
        this.el = el;
        this.domHandler = domHandler;
        this.promptLabel = 'Please enter a password';
        this.weakLabel = 'Weak';
        this.mediumLabel = 'Medium';
        this.strongLabel = 'Strong';
        this.feedback = true;
    }
    Password.prototype.ngAfterViewInit = function () {
        this.panel = document.createElement('div');
        this.panel.className = 'ui-password-panel ui-widget ui-state-highlight ui-corner-all ui-helper-hidden ui-password-panel-overlay';
        this.meter = document.createElement('div');
        this.meter.className = 'ui-password-meter';
        this.info = document.createElement('div');
        this.info.className = 'ui-password-info';
        this.info.textContent = this.promptLabel;
        if (this.feedback) {
            this.panel.appendChild(this.meter);
            this.panel.appendChild(this.info);
            document.body.appendChild(this.panel);
        }
    };
    Password.prototype.ngDoCheck = function () {
        this.updateFilledState();
    };
    //To trigger change detection to manage ui-state-filled for material labels when there is no value binding
    Password.prototype.onInput = function (e) {
        this.updateFilledState();
    };
    Password.prototype.updateFilledState = function () {
        this.filled = this.el.nativeElement.value && this.el.nativeElement.value.length;
    };
    Password.prototype.onFocus = function (e) {
        this.panel.style.zIndex = String(++domhandler_1.DomHandler.zindex);
        this.domHandler.removeClass(this.panel, 'ui-helper-hidden');
        this.domHandler.absolutePosition(this.panel, this.el.nativeElement);
        this.domHandler.fadeIn(this.panel, 250);
    };
    Password.prototype.onBlur = function (e) {
        this.domHandler.addClass(this.panel, 'ui-helper-hidden');
    };
    Password.prototype.onKeyup = function (e) {
        var value = e.target.value, label = null, meterPos = null;
        if (value.length === 0) {
            label = this.promptLabel;
            meterPos = '0px 0px';
        }
        else {
            var score = this.testStrength(value);
            if (score < 30) {
                label = this.weakLabel;
                meterPos = '0px -10px';
            }
            else if (score >= 30 && score < 80) {
                label = this.mediumLabel;
                meterPos = '0px -20px';
            }
            else if (score >= 80) {
                label = this.strongLabel;
                meterPos = '0px -30px';
            }
        }
        this.meter.style.backgroundPosition = meterPos;
        this.info.textContent = label;
    };
    Password.prototype.testStrength = function (str) {
        var grade = 0;
        var val;
        val = str.match('[0-9]');
        grade += this.normalize(val ? val.length : 1 / 4, 1) * 25;
        val = str.match('[a-zA-Z]');
        grade += this.normalize(val ? val.length : 1 / 2, 3) * 10;
        val = str.match('[!@#$%^&*?_~.,;=]');
        grade += this.normalize(val ? val.length : 1 / 6, 1) * 35;
        val = str.match('[A-Z]');
        grade += this.normalize(val ? val.length : 1 / 6, 1) * 30;
        grade *= str.length / 8;
        return grade > 100 ? 100 : grade;
    };
    Password.prototype.normalize = function (x, y) {
        var diff = x - y;
        if (diff <= 0)
            return x / y;
        else
            return 1 + 0.5 * (x / (x + y / 4));
    };
    Object.defineProperty(Password.prototype, "disabled", {
        get: function () {
            return this.el.nativeElement.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Password.prototype.ngOnDestroy = function () {
        if (!this.feedback)
            return;
        this.panel.removeChild(this.meter);
        this.panel.removeChild(this.info);
        document.body.removeChild(this.panel);
        this.panel = null;
        this.meter = null;
        this.info = null;
    };
    return Password;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Password.prototype, "promptLabel", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Password.prototype, "weakLabel", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Password.prototype, "mediumLabel", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Password.prototype, "strongLabel", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Password.prototype, "feedback", void 0);
__decorate([
    core_1.HostListener('input', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Password.prototype, "onInput", null);
__decorate([
    core_1.HostListener('focus', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Password.prototype, "onFocus", null);
__decorate([
    core_1.HostListener('blur', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Password.prototype, "onBlur", null);
__decorate([
    core_1.HostListener('keyup', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Password.prototype, "onKeyup", null);
Password = __decorate([
    core_1.Directive({
        selector: '[pPassword]',
        host: {
            '[class.ui-inputtext]': 'true',
            '[class.ui-corner-all]': 'true',
            '[class.ui-state-default]': 'true',
            '[class.ui-widget]': 'true',
            '[class.ui-state-filled]': 'filled'
        },
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler])
], Password);
exports.Password = Password;
var PasswordModule = (function () {
    function PasswordModule() {
    }
    return PasswordModule;
}());
PasswordModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Password],
        declarations: [Password]
    })
], PasswordModule);
exports.PasswordModule = PasswordModule;
//# sourceMappingURL=password.js.map

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var button_1 = __webpack_require__(16);
var shared_1 = __webpack_require__(7);
var domhandler_1 = __webpack_require__(4);
var objectutils_1 = __webpack_require__(18);
var PickList = (function () {
    function PickList(el, domHandler, objectUtils) {
        this.el = el;
        this.domHandler = domHandler;
        this.objectUtils = objectUtils;
        this.metaKeySelection = true;
        this.showSourceControls = true;
        this.showTargetControls = true;
        this.onMoveToSource = new core_1.EventEmitter();
        this.onMoveAllToSource = new core_1.EventEmitter();
        this.onMoveAllToTarget = new core_1.EventEmitter();
        this.onMoveToTarget = new core_1.EventEmitter();
        this.onSourceReorder = new core_1.EventEmitter();
        this.onTargetReorder = new core_1.EventEmitter();
        this.selectedItemsSource = [];
        this.selectedItemsTarget = [];
    }
    PickList.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.templates.forEach(function (item) {
            switch (item.getType()) {
                case 'item':
                    _this.itemTemplate = item.template;
                    break;
                default:
                    _this.itemTemplate = item.template;
                    break;
            }
        });
    };
    PickList.prototype.ngAfterViewChecked = function () {
        if (this.movedUp || this.movedDown) {
            var listItems = this.domHandler.find(this.reorderedListElement, 'li.ui-state-highlight');
            var listItem = void 0;
            if (this.movedUp)
                listItem = listItems[0];
            else
                listItem = listItems[listItems.length - 1];
            this.domHandler.scrollInView(this.reorderedListElement, listItem);
            this.movedUp = false;
            this.movedDown = false;
            this.reorderedListElement = null;
        }
    };
    PickList.prototype.onItemClick = function (event, item, selectedItems) {
        var index = this.findIndexInSelection(item, selectedItems);
        var selected = (index != -1);
        var metaSelection = this.itemTouched ? false : this.metaKeySelection;
        if (metaSelection) {
            var metaKey = (event.metaKey || event.ctrlKey);
            if (selected && metaKey) {
                selectedItems.splice(index, 1);
            }
            else {
                if (!metaKey) {
                    selectedItems.length = 0;
                }
                selectedItems.push(item);
            }
        }
        else {
            if (selected)
                selectedItems.splice(index, 1);
            else
                selectedItems.push(item);
        }
        this.itemTouched = false;
    };
    PickList.prototype.onSourceItemDblClick = function () {
        this.moveRight();
    };
    PickList.prototype.onTargetItemDblClick = function () {
        this.moveLeft();
    };
    PickList.prototype.onFilter = function (event, data, listType) {
        var query = event.target.value.trim().toLowerCase();
        if (listType === -1)
            this.filterValueSource = query;
        else
            this.filterValueTarget = query;
        this.activateFilter(data, listType);
    };
    PickList.prototype.activateFilter = function (data, listType) {
        var searchFields = this.filterBy.split(',');
        if (listType === -1)
            this.visibleOptionsSource = this.objectUtils.filter(data, searchFields, this.filterValueSource);
        else
            this.visibleOptionsTarget = this.objectUtils.filter(data, searchFields, this.filterValueTarget);
    };
    PickList.prototype.isItemVisible = function (item, listType) {
        if (listType == -1)
            return this.isVisibleInList(this.visibleOptionsSource, item, this.filterValueSource);
        else
            return this.isVisibleInList(this.visibleOptionsTarget, item, this.filterValueTarget);
    };
    PickList.prototype.isVisibleInList = function (data, item, filterValue) {
        if (filterValue && filterValue.trim().length) {
            for (var i = 0; i < data.length; i++) {
                if (item == data[i]) {
                    return true;
                }
            }
        }
        else {
            return true;
        }
    };
    PickList.prototype.onItemTouchEnd = function (event) {
        this.itemTouched = true;
    };
    PickList.prototype.moveUp = function (listElement, list, selectedItems, callback) {
        if (selectedItems && selectedItems.length) {
            for (var i = 0; i < selectedItems.length; i++) {
                var selectedItem = selectedItems[i];
                var selectedItemIndex = this.findIndexInList(selectedItem, list);
                if (selectedItemIndex != 0) {
                    var movedItem = list[selectedItemIndex];
                    var temp = list[selectedItemIndex - 1];
                    list[selectedItemIndex - 1] = movedItem;
                    list[selectedItemIndex] = temp;
                }
                else {
                    break;
                }
            }
            this.movedUp = true;
            this.reorderedListElement = listElement;
            callback.emit({ items: selectedItems });
        }
    };
    PickList.prototype.moveTop = function (listElement, list, selectedItems, callback) {
        if (selectedItems && selectedItems.length) {
            for (var i = 0; i < selectedItems.length; i++) {
                var selectedItem = selectedItems[i];
                var selectedItemIndex = this.findIndexInList(selectedItem, list);
                if (selectedItemIndex != 0) {
                    var movedItem = list.splice(selectedItemIndex, 1)[0];
                    list.unshift(movedItem);
                }
                else {
                    break;
                }
            }
            listElement.scrollTop = 0;
            callback.emit({ items: selectedItems });
        }
    };
    PickList.prototype.moveDown = function (listElement, list, selectedItems, callback) {
        if (selectedItems && selectedItems.length) {
            for (var i = selectedItems.length - 1; i >= 0; i--) {
                var selectedItem = selectedItems[i];
                var selectedItemIndex = this.findIndexInList(selectedItem, list);
                if (selectedItemIndex != (list.length - 1)) {
                    var movedItem = list[selectedItemIndex];
                    var temp = list[selectedItemIndex + 1];
                    list[selectedItemIndex + 1] = movedItem;
                    list[selectedItemIndex] = temp;
                }
                else {
                    break;
                }
            }
            this.movedDown = true;
            this.reorderedListElement = listElement;
            callback.emit({ items: selectedItems });
        }
    };
    PickList.prototype.moveBottom = function (listElement, list, selectedItems, callback) {
        if (selectedItems && selectedItems.length) {
            for (var i = selectedItems.length - 1; i >= 0; i--) {
                var selectedItem = selectedItems[i];
                var selectedItemIndex = this.findIndexInList(selectedItem, list);
                if (selectedItemIndex != (list.length - 1)) {
                    var movedItem = list.splice(selectedItemIndex, 1)[0];
                    list.push(movedItem);
                }
                else {
                    break;
                }
            }
            listElement.scrollTop = listElement.scrollHeight;
            callback.emit({ items: selectedItems });
        }
    };
    PickList.prototype.moveRight = function () {
        if (this.selectedItemsSource && this.selectedItemsSource.length) {
            for (var i = 0; i < this.selectedItemsSource.length; i++) {
                var selectedItem = this.selectedItemsSource[i];
                if (this.findIndexInList(selectedItem, this.target) == -1) {
                    this.target.push(this.source.splice(this.findIndexInList(selectedItem, this.source), 1)[0]);
                }
            }
            this.onMoveToTarget.emit({
                items: this.selectedItemsSource
            });
            this.selectedItemsSource = [];
        }
    };
    PickList.prototype.moveAllRight = function () {
        if (this.source) {
            for (var i = 0; i < this.source.length; i++) {
                this.target.push(this.source[i]);
            }
            this.onMoveToTarget.emit({
                items: this.source
            });
            this.onMoveAllToTarget.emit({
                items: this.source
            });
            this.source.splice(0, this.source.length);
            this.selectedItemsSource = [];
        }
    };
    PickList.prototype.moveLeft = function () {
        if (this.selectedItemsTarget && this.selectedItemsTarget.length) {
            for (var i = 0; i < this.selectedItemsTarget.length; i++) {
                var selectedItem = this.selectedItemsTarget[i];
                if (this.findIndexInList(selectedItem, this.source) == -1) {
                    this.source.push(this.target.splice(this.findIndexInList(selectedItem, this.target), 1)[0]);
                }
            }
            this.onMoveToSource.emit({
                items: this.selectedItemsTarget
            });
            this.selectedItemsTarget = [];
        }
    };
    PickList.prototype.moveAllLeft = function () {
        if (this.target) {
            for (var i = 0; i < this.target.length; i++) {
                this.source.push(this.target[i]);
            }
            this.onMoveToSource.emit({
                items: this.target
            });
            this.onMoveAllToSource.emit({
                items: this.target
            });
            this.target.splice(0, this.target.length);
            this.selectedItemsTarget = [];
        }
    };
    PickList.prototype.isSelected = function (item, selectedItems) {
        return this.findIndexInSelection(item, selectedItems) != -1;
    };
    PickList.prototype.findIndexInSelection = function (item, selectedItems) {
        return this.findIndexInList(item, selectedItems);
    };
    PickList.prototype.findIndexInList = function (item, list) {
        var index = -1;
        if (list) {
            for (var i = 0; i < list.length; i++) {
                if (list[i] == item) {
                    index = i;
                    break;
                }
            }
        }
        return index;
    };
    PickList.prototype.onDragStart = function (event, index, listType) {
        this.dragging = true;
        this.fromListType = listType;
        if (listType === -1)
            this.draggedItemIndexSource = index;
        else
            this.draggedItemIndexTarget = index;
        if (this.dragdropScope) {
            event.dataTransfer.setData("text", this.dragdropScope);
        }
    };
    PickList.prototype.onDragOver = function (event, index, listType) {
        if (listType == -1) {
            if (this.draggedItemIndexSource !== index && this.draggedItemIndexSource + 1 !== index || (this.fromListType === 1)) {
                this.dragOverItemIndexSource = index;
                event.preventDefault();
            }
        }
        else {
            if (this.draggedItemIndexTarget !== index && this.draggedItemIndexTarget + 1 !== index || (this.fromListType === -1)) {
                this.dragOverItemIndexTarget = index;
                event.preventDefault();
            }
        }
        this.onListItemDroppoint = true;
    };
    PickList.prototype.onDragLeave = function (event, listType) {
        this.dragOverItemIndexSource = null;
        this.dragOverItemIndexTarget = null;
        this.onListItemDroppoint = false;
    };
    PickList.prototype.onDrop = function (event, index, listType) {
        if (this.onListItemDroppoint) {
            if (listType === -1) {
                if (this.fromListType === 1)
                    this.insert(this.draggedItemIndexTarget, this.target, index, this.source);
                else
                    this.objectUtils.reorderArray(this.source, this.draggedItemIndexSource, (this.draggedItemIndexSource > index) ? index : (index === 0) ? 0 : index - 1);
                this.dragOverItemIndexSource = null;
            }
            else {
                if (this.fromListType === -1)
                    this.insert(this.draggedItemIndexSource, this.source, index, this.target);
                else
                    this.objectUtils.reorderArray(this.target, this.draggedItemIndexTarget, (this.draggedItemIndexTarget > index) ? index : (index === 0) ? 0 : index - 1);
                this.dragOverItemIndexTarget = null;
            }
            this.listHighlightTarget = false;
            this.listHighlightSource = false;
            event.preventDefault();
        }
    };
    PickList.prototype.onDragEnd = function (event) {
        this.dragging = false;
    };
    PickList.prototype.onListDrop = function (event, listType) {
        if (!this.onListItemDroppoint) {
            if (listType === -1) {
                if (this.fromListType === 1)
                    this.insert(this.draggedItemIndexTarget, this.target, null, this.source);
            }
            else {
                if (this.fromListType === -1)
                    this.insert(this.draggedItemIndexSource, this.source, null, this.target);
            }
            this.listHighlightTarget = false;
            this.listHighlightSource = false;
            event.preventDefault();
        }
    };
    PickList.prototype.insert = function (fromIndex, fromList, toIndex, toList) {
        if (toIndex === null)
            toList.push(fromList.splice(fromIndex, 1)[0]);
        else
            toList.splice(toIndex, 0, fromList.splice(fromIndex, 1)[0]);
    };
    PickList.prototype.onListMouseMove = function (event, listType) {
        if (this.dragging) {
            var moveListType = (listType == 0 ? this.listViewSourceChild : this.listViewTargetChild);
            var offsetY = moveListType.nativeElement.getBoundingClientRect().top + document.body.scrollTop;
            var bottomDiff = (offsetY + moveListType.nativeElement.clientHeight) - event.pageY;
            var topDiff = (event.pageY - offsetY);
            if (bottomDiff < 25 && bottomDiff > 0)
                moveListType.nativeElement.scrollTop += 15;
            else if (topDiff < 25 && topDiff > 0)
                moveListType.nativeElement.scrollTop -= 15;
        }
        if (listType === -1) {
            if (this.fromListType === 1)
                this.listHighlightSource = true;
        }
        else {
            if (this.fromListType === -1)
                this.listHighlightTarget = true;
        }
        event.preventDefault();
    };
    PickList.prototype.onListDragLeave = function () {
        this.listHighlightTarget = false;
        this.listHighlightSource = false;
    };
    return PickList;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], PickList.prototype, "source", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], PickList.prototype, "target", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], PickList.prototype, "sourceHeader", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], PickList.prototype, "targetHeader", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], PickList.prototype, "responsive", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], PickList.prototype, "filterBy", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], PickList.prototype, "metaKeySelection", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], PickList.prototype, "dragdrop", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], PickList.prototype, "dragdropScope", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], PickList.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], PickList.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], PickList.prototype, "sourceStyle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], PickList.prototype, "targetStyle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], PickList.prototype, "showSourceControls", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], PickList.prototype, "showTargetControls", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], PickList.prototype, "sourceFilterPlaceholder", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], PickList.prototype, "targetFilterPlaceholder", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], PickList.prototype, "onMoveToSource", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], PickList.prototype, "onMoveAllToSource", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], PickList.prototype, "onMoveAllToTarget", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], PickList.prototype, "onMoveToTarget", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], PickList.prototype, "onSourceReorder", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], PickList.prototype, "onTargetReorder", void 0);
__decorate([
    core_1.ViewChild('sourcelist'),
    __metadata("design:type", core_1.ElementRef)
], PickList.prototype, "listViewSourceChild", void 0);
__decorate([
    core_1.ViewChild('targetlist'),
    __metadata("design:type", core_1.ElementRef)
], PickList.prototype, "listViewTargetChild", void 0);
__decorate([
    core_1.ContentChildren(shared_1.PrimeTemplate),
    __metadata("design:type", core_1.QueryList)
], PickList.prototype, "templates", void 0);
PickList = __decorate([
    core_1.Component({
        selector: 'p-pickList',
        template: "\n        <div [class]=\"styleClass\" [ngStyle]=\"style\" [ngClass]=\"{'ui-picklist ui-widget ui-helper-clearfix': true,'ui-picklist-responsive': responsive}\">\n            <div class=\"ui-picklist-source-controls ui-picklist-buttons\" *ngIf=\"showSourceControls\">\n                <div class=\"ui-picklist-buttons-cell\">\n                    <button type=\"button\" pButton icon=\"fa-angle-up\" (click)=\"moveUp(sourcelist,source,selectedItemsSource,onSourceReorder)\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-double-up\" (click)=\"moveTop(sourcelist,source,selectedItemsSource,onSourceReorder)\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-down\" (click)=\"moveDown(sourcelist,source,selectedItemsSource,onSourceReorder)\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-double-down\" (click)=\"moveBottom(sourcelist,source,selectedItemsSource,onSourceReorder)\"></button>\n                </div>\n            </div>\n            <div class=\"ui-picklist-listwrapper ui-picklist-source-wrapper\" [ngClass]=\"{'ui-picklist-listwrapper-nocontrols':!showSourceControls}\">\n                <div class=\"ui-picklist-caption ui-widget-header ui-corner-tl ui-corner-tr\" *ngIf=\"sourceHeader\">{{sourceHeader}}</div>\n                <div class=\"ui-picklist-filter-container ui-widget-content\" *ngIf=\"filterBy\">\n                    <input type=\"text\" role=\"textbox\" (keyup)=\"onFilter($event,source,-1)\" class=\"ui-picklist-filter ui-inputtext ui-widget ui-state-default ui-corner-all\" [disabled]=\"disabled\" [attr.placeholder]=\"sourceFilterPlaceholder\">\n                    <span class=\"fa fa-search\"></span>\n                </div>\n                <ul #sourcelist class=\"ui-widget-content ui-picklist-list ui-picklist-source ui-corner-bottom\" [ngClass]=\"{'ui-picklist-highlight': listHighlightSource}\" [ngStyle]=\"sourceStyle\" (dragover)=\"onListMouseMove($event,-1)\" (dragleave)=\"onListDragLeave()\" (drop)=\"onListDrop($event, -1)\">\n                    <ng-template ngFor let-item [ngForOf]=\"source\" let-i=\"index\" let-l=\"last\">\n                        <li class=\"ui-picklist-droppoint\" *ngIf=\"dragdrop\" (dragover)=\"onDragOver($event, i, -1)\" (drop)=\"onDrop($event, i, -1)\" (dragleave)=\"onDragLeave($event, -1)\" \n                        [ngClass]=\"{'ui-picklist-droppoint-highlight': (i === dragOverItemIndexSource)}\" [style.display]=\"isItemVisible(item, -1) ? 'block' : 'none'\"></li>\n                        <li [ngClass]=\"{'ui-picklist-item':true,'ui-state-highlight':isSelected(item,selectedItemsSource)}\"\n                            (click)=\"onItemClick($event,item,selectedItemsSource)\" (dblclick)=\"onSourceItemDblClick()\" (touchend)=\"onItemTouchEnd($event)\"\n                            [style.display]=\"isItemVisible(item, -1) ? 'block' : 'none'\"\n                            [draggable]=\"dragdrop\" (dragstart)=\"onDragStart($event, i, -1)\" (dragend)=\"onDragEnd($event)\">\n                            <ng-template [pTemplateWrapper]=\"itemTemplate\" [item]=\"item\"></ng-template>\n                        </li>\n                        <li class=\"ui-picklist-droppoint\" *ngIf=\"dragdrop&&l\" (dragover)=\"onDragOver($event, i + 1, -1)\" (drop)=\"onDrop($event, i + 1, -1)\" (dragleave)=\"onDragLeave($event, -1)\" \n                        [ngClass]=\"{'ui-picklist-droppoint-highlight': (i + 1 === dragOverItemIndexSource)}\"></li>\n                    </ng-template>\n                </ul>\n            </div>\n            <div class=\"ui-picklist-buttons\">\n                <div class=\"ui-picklist-buttons-cell\">\n                    <button type=\"button\" pButton icon=\"fa-angle-right\" (click)=\"moveRight()\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-double-right\" (click)=\"moveAllRight()\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-left\" (click)=\"moveLeft()\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-double-left\" (click)=\"moveAllLeft()\"></button>\n                </div>\n            </div>\n            <div class=\"ui-picklist-listwrapper ui-picklist-target-wrapper\" [ngClass]=\"{'ui-picklist-listwrapper-nocontrols':!showTargetControls}\">\n                <div class=\"ui-picklist-caption ui-widget-header ui-corner-tl ui-corner-tr\" *ngIf=\"targetHeader\">{{targetHeader}}</div>\n                <div class=\"ui-picklist-filter-container ui-widget-content\" *ngIf=\"filterBy\">\n                    <input type=\"text\" role=\"textbox\" (keyup)=\"onFilter($event,target,1)\" class=\"ui-picklist-filter ui-inputtext ui-widget ui-state-default ui-corner-all\" [disabled]=\"disabled\" [attr.placeholder]=\"targetFilterPlaceholder\">\n                    <span class=\"fa fa-search\"></span>\n                </div>\n                <ul #targetlist class=\"ui-widget-content ui-picklist-list ui-picklist-target ui-corner-bottom\" [ngClass]=\"{'ui-picklist-highlight': listHighlightTarget}\" [ngStyle]=\"targetStyle\" (dragover)=\"onListMouseMove($event,1)\" (dragleave)=\"onListDragLeave()\" (drop)=\"onListDrop($event,1)\">\n                    <ng-template ngFor let-item [ngForOf]=\"target\" let-i=\"index\" let-l=\"last\">\n                        <li class=\"ui-picklist-droppoint\" *ngIf=\"dragdrop\" (dragover)=\"onDragOver($event, i, 1)\" (drop)=\"onDrop($event, i, 1)\" (dragleave)=\"onDragLeave($event, 1)\" \n                        [ngClass]=\"{'ui-picklist-droppoint-highlight': (i === dragOverItemIndexTarget)}\" [style.display]=\"isItemVisible(item, 1) ? 'block' : 'none'\"></li>\n                        <li [ngClass]=\"{'ui-picklist-item':true,'ui-state-highlight':isSelected(item,selectedItemsTarget)}\"\n                            (click)=\"onItemClick($event,item,selectedItemsTarget)\" (dblclick)=\"onTargetItemDblClick()\" (touchend)=\"onItemTouchEnd($event)\"\n                            [style.display]=\"isItemVisible(item, 1) ? 'block' : 'none'\"\n                            [draggable]=\"dragdrop\" (dragstart)=\"onDragStart($event, i, 1)\" (dragend)=\"onDragEnd($event)\">\n                            <ng-template [pTemplateWrapper]=\"itemTemplate\" [item]=\"item\"></ng-template>\n                        </li>\n                        <li class=\"ui-picklist-droppoint\" *ngIf=\"dragdrop&&l\" (dragover)=\"onDragOver($event, i + 1, 1)\" (drop)=\"onDrop($event, i + 1, 1)\" (dragleave)=\"onDragLeave($event, 1)\" \n                        [ngClass]=\"{'ui-picklist-droppoint-highlight': (i + 1 === dragOverItemIndexTarget)}\"></li>\n                    </ng-template>\n                </ul>\n            </div>\n            <div class=\"ui-picklist-target-controls ui-picklist-buttons\" *ngIf=\"showTargetControls\">\n                <div class=\"ui-picklist-buttons-cell\">\n                    <button type=\"button\" pButton icon=\"fa-angle-up\" (click)=\"moveUp(targetlist,target,selectedItemsTarget,onTargetReorder)\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-double-up\" (click)=\"moveTop(targetlist,target,selectedItemsTarget,onTargetReorder)\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-down\" (click)=\"moveDown(targetlist,target,selectedItemsTarget,onTargetReorder)\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-double-down\" (click)=\"moveBottom(targetlist,target,selectedItemsTarget,onTargetReorder)\"></button>\n                </div>\n            </div>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler, objectutils_1.ObjectUtils]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, objectutils_1.ObjectUtils])
], PickList);
exports.PickList = PickList;
var PickListModule = (function () {
    function PickListModule() {
    }
    return PickListModule;
}());
PickListModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, button_1.ButtonModule, shared_1.SharedModule],
        exports: [PickList, shared_1.SharedModule],
        declarations: [PickList]
    })
], PickListModule);
exports.PickListModule = PickListModule;
//# sourceMappingURL=picklist.js.map

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var forms_1 = __webpack_require__(6);
exports.RADIO_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return RadioButton; }),
    multi: true
};
var RadioButton = (function () {
    function RadioButton(cd) {
        this.cd = cd;
        this.onClick = new core_1.EventEmitter();
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    RadioButton.prototype.handleClick = function () {
        if (!this.disabled) {
            this.onClick.emit(null);
            this.select();
        }
    };
    RadioButton.prototype.select = function () {
        if (!this.disabled) {
            this.inputViewChild.nativeElement.checked = true;
            this.checked = true;
            this.onModelChange(this.value);
        }
    };
    RadioButton.prototype.writeValue = function (value) {
        this.checked = (value == this.value);
        if (this.inputViewChild.nativeElement) {
            this.inputViewChild.nativeElement.checked = this.checked;
        }
        this.cd.markForCheck();
    };
    RadioButton.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    RadioButton.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    RadioButton.prototype.setDisabledState = function (val) {
        this.disabled = val;
    };
    RadioButton.prototype.onFocus = function (event) {
        this.focused = true;
    };
    RadioButton.prototype.onBlur = function (event) {
        this.focused = false;
        this.onModelTouched();
    };
    RadioButton.prototype.onChange = function (event) {
        this.select();
    };
    return RadioButton;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], RadioButton.prototype, "value", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], RadioButton.prototype, "name", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], RadioButton.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], RadioButton.prototype, "label", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], RadioButton.prototype, "tabindex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], RadioButton.prototype, "inputId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], RadioButton.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], RadioButton.prototype, "styleClass", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], RadioButton.prototype, "onClick", void 0);
__decorate([
    core_1.ViewChild('rb'),
    __metadata("design:type", core_1.ElementRef)
], RadioButton.prototype, "inputViewChild", void 0);
RadioButton = __decorate([
    core_1.Component({
        selector: 'p-radioButton',
        template: "\n        <div [ngStyle]=\"style\" [ngClass]=\"'ui-radiobutton ui-widget'\" [class]=\"styleClass\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #rb type=\"radio\" [attr.id]=\"inputId\" [attr.name]=\"name\" [attr.value]=\"value\" [attr.tabindex]=\"tabindex\" \n                    [checked]=\"checked\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\">\n            </div>\n            <div (click)=\"handleClick()\"\n                [ngClass]=\"{'ui-radiobutton-box ui-widget ui-state-default':true,\n                'ui-state-active':rb.checked,'ui-state-disabled':disabled,'ui-state-focus':focused}\">\n                <span class=\"ui-radiobutton-icon ui-clickable\" [ngClass]=\"{'fa fa-circle':rb.checked}\"></span>\n            </div>\n        </div>\n        <label class=\"ui-radiobutton-label\" (click)=\"select()\" *ngIf=\"label\">{{label}}</label>\n    ",
        providers: [exports.RADIO_VALUE_ACCESSOR]
    }),
    __metadata("design:paramtypes", [core_1.ChangeDetectorRef])
], RadioButton);
exports.RadioButton = RadioButton;
var RadioButtonModule = (function () {
    function RadioButtonModule() {
    }
    return RadioButtonModule;
}());
RadioButtonModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [RadioButton],
        declarations: [RadioButton]
    })
], RadioButtonModule);
exports.RadioButtonModule = RadioButtonModule;
//# sourceMappingURL=radiobutton.js.map

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var forms_1 = __webpack_require__(6);
exports.RATING_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return Rating; }),
    multi: true
};
var Rating = (function () {
    function Rating() {
        this.stars = 5;
        this.cancel = true;
        this.onRate = new core_1.EventEmitter();
        this.onCancel = new core_1.EventEmitter();
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    Rating.prototype.ngOnInit = function () {
        this.starsArray = [];
        for (var i = 0; i < this.stars; i++) {
            this.starsArray[i] = i;
        }
    };
    Rating.prototype.rate = function (event, i) {
        if (!this.readonly && !this.disabled) {
            this.value = (i + 1);
            this.onModelChange(this.value);
            this.onModelTouched();
            this.onRate.emit({
                originalEvent: event,
                value: (i + 1)
            });
        }
        event.preventDefault();
    };
    Rating.prototype.clear = function (event) {
        if (!this.readonly && !this.disabled) {
            this.value = null;
            this.onModelChange(this.value);
            this.onModelTouched();
            this.onCancel.emit(event);
        }
        event.preventDefault();
    };
    Rating.prototype.writeValue = function (value) {
        this.value = value;
    };
    Rating.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    Rating.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    Rating.prototype.setDisabledState = function (val) {
        this.disabled = val;
    };
    return Rating;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Rating.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Rating.prototype, "readonly", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Rating.prototype, "stars", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Rating.prototype, "cancel", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Rating.prototype, "onRate", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Rating.prototype, "onCancel", void 0);
Rating = __decorate([
    core_1.Component({
        selector: 'p-rating',
        template: "\n        <div class=\"ui-rating\" [ngClass]=\"{'ui-state-disabled': disabled}\">\n            <a href=\"#\" *ngIf=\"cancel\" (click)=\"clear($event)\">\n                <span class=\"fa fa-ban\"></span>\n            </a>\n            <a href=\"#\" *ngFor=\"let star of starsArray;let i=index\" (click)=\"rate($event,i)\">\n                <span class=\"fa\" [ngClass]=\"{'fa-star-o': (!value || i >= value), 'fa-star':(i < value)}\"></span>\n            </a>\n        </div>\n    ",
        providers: [exports.RATING_VALUE_ACCESSOR]
    })
], Rating);
exports.Rating = Rating;
var RatingModule = (function () {
    function RatingModule() {
    }
    return RatingModule;
}());
RatingModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Rating],
        declarations: [Rating]
    })
], RatingModule);
exports.RatingModule = RatingModule;
//# sourceMappingURL=rating.js.map

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var Schedule = (function () {
    function Schedule(el, differs) {
        this.el = el;
        this.aspectRatio = 1.35;
        this.defaultView = 'month';
        this.allDaySlot = true;
        this.allDayText = 'all-day';
        this.slotDuration = '00:30:00';
        this.scrollTime = '06:00:00';
        this.minTime = '00:00:00';
        this.maxTime = '24:00:00';
        this.slotEventOverlap = true;
        this.dragRevertDuration = 500;
        this.dragOpacity = .75;
        this.dragScroll = true;
        this.timezone = false;
        this.timeFormat = null;
        this.onDayClick = new core_1.EventEmitter();
        this.onDrop = new core_1.EventEmitter();
        this.onEventClick = new core_1.EventEmitter();
        this.onEventMouseover = new core_1.EventEmitter();
        this.onEventMouseout = new core_1.EventEmitter();
        this.onEventDragStart = new core_1.EventEmitter();
        this.onEventDragStop = new core_1.EventEmitter();
        this.onEventDrop = new core_1.EventEmitter();
        this.onEventResizeStart = new core_1.EventEmitter();
        this.onEventResizeStop = new core_1.EventEmitter();
        this.onEventResize = new core_1.EventEmitter();
        this.onViewRender = new core_1.EventEmitter();
        this.onViewDestroy = new core_1.EventEmitter();
        this.differ = differs.find([]).create(null);
        this.initialized = false;
    }
    Schedule.prototype.ngOnInit = function () {
        var _this = this;
        this.config = {
            theme: true,
            header: this.header,
            isRTL: this.rtl,
            weekends: this.weekends,
            hiddenDays: this.hiddenDays,
            fixedWeekCount: this.fixedWeekCount,
            weekNumbers: this.weekNumbers,
            businessHours: this.businessHours,
            height: this.height,
            contentHeight: this.contentHeight,
            aspectRatio: this.aspectRatio,
            eventLimit: this.eventLimit,
            defaultDate: this.defaultDate,
            locale: this.locale,
            timezone: this.timezone,
            timeFormat: this.timeFormat,
            editable: this.editable,
            droppable: this.droppable,
            eventStartEditable: this.eventStartEditable,
            eventDurationEditable: this.eventDurationEditable,
            defaultView: this.defaultView,
            allDaySlot: this.allDaySlot,
            allDayText: this.allDayText,
            slotDuration: this.slotDuration,
            slotLabelInterval: this.slotLabelInterval,
            snapDuration: this.snapDuration,
            scrollTime: this.scrollTime,
            minTime: this.minTime,
            maxTime: this.maxTime,
            slotEventOverlap: this.slotEventOverlap,
            nowIndicator: this.nowIndicator,
            dragRevertDuration: this.dragRevertDuration,
            dragOpacity: this.dragOpacity,
            dragScroll: this.dragScroll,
            eventOverlap: this.eventOverlap,
            eventConstraint: this.eventConstraint,
            eventRender: this.eventRender,
            dayRender: this.dayRender,
            dayClick: function (date, jsEvent, view) {
                _this.onDayClick.emit({
                    'date': date,
                    'jsEvent': jsEvent,
                    'view': view
                });
            },
            drop: function (date, jsEvent, ui, resourceId) {
                _this.onDrop.emit({
                    'date': date,
                    'jsEvent': jsEvent,
                    'ui': ui,
                    'resourceId': resourceId
                });
            },
            eventClick: function (calEvent, jsEvent, view) {
                _this.onEventClick.emit({
                    'calEvent': calEvent,
                    'jsEvent': jsEvent,
                    'view': view
                });
            },
            eventMouseover: function (calEvent, jsEvent, view) {
                _this.onEventMouseover.emit({
                    'calEvent': calEvent,
                    'jsEvent': jsEvent,
                    'view': view
                });
            },
            eventMouseout: function (calEvent, jsEvent, view) {
                _this.onEventMouseout.emit({
                    'calEvent': calEvent,
                    'jsEvent': jsEvent,
                    'view': view
                });
            },
            eventDragStart: function (event, jsEvent, ui, view) {
                _this.onEventDragStart.emit({
                    'event': event,
                    'jsEvent': jsEvent,
                    'view': view
                });
            },
            eventDragStop: function (event, jsEvent, ui, view) {
                _this.onEventDragStop.emit({
                    'event': event,
                    'jsEvent': jsEvent,
                    'view': view
                });
            },
            eventDrop: function (event, delta, revertFunc, jsEvent, ui, view) {
                _this.updateEvent(event);
                _this.onEventDrop.emit({
                    'event': event,
                    'delta': delta,
                    'revertFunc': revertFunc,
                    'jsEvent': jsEvent,
                    'view': view
                });
            },
            eventResizeStart: function (event, jsEvent, ui, view) {
                _this.onEventResizeStart.emit({
                    'event': event,
                    'jsEvent': jsEvent,
                    'view': view
                });
            },
            eventResizeStop: function (event, jsEvent, ui, view) {
                _this.onEventResizeStop.emit({
                    'event': event,
                    'jsEvent': jsEvent,
                    'view': view
                });
            },
            eventResize: function (event, delta, revertFunc, jsEvent, ui, view) {
                _this.updateEvent(event);
                _this.onEventResize.emit({
                    'event': event,
                    'delta': delta,
                    'revertFunc': revertFunc,
                    'jsEvent': jsEvent,
                    'view': view
                });
            },
            viewRender: function (view, element) {
                _this.onViewRender.emit({
                    'view': view,
                    'element': element
                });
            },
            viewDestroy: function (view, element) {
                _this.onViewDestroy.emit({
                    'view': view,
                    'element': element
                });
            }
        };
        if (this.options) {
            for (var prop in this.options) {
                this.config[prop] = this.options[prop];
            }
        }
    };
    Schedule.prototype.ngAfterViewChecked = function () {
        if (!this.initialized && this.el.nativeElement.offsetParent) {
            this.initialize();
        }
    };
    Schedule.prototype.ngOnChanges = function (changes) {
        if (this.schedule) {
            var options = {};
            for (var change in changes) {
                if (change !== 'events') {
                    options[change] = changes[change].currentValue;
                }
            }
            if (Object.keys(options).length) {
                this.schedule.fullCalendar('option', options);
            }
        }
    };
    Schedule.prototype.initialize = function () {
        this.schedule = jQuery(this.el.nativeElement.children[0]);
        this.schedule.fullCalendar(this.config);
        this.schedule.fullCalendar('addEventSource', this.events);
        this.initialized = true;
    };
    Schedule.prototype.ngDoCheck = function () {
        var changes = this.differ.diff(this.events);
        if (this.schedule && changes) {
            this.schedule.fullCalendar('removeEventSources');
            this.schedule.fullCalendar('addEventSource', this.events);
        }
    };
    Schedule.prototype.ngOnDestroy = function () {
        jQuery(this.el.nativeElement.children[0]).fullCalendar('destroy');
        this.initialized = false;
        this.schedule = null;
    };
    Schedule.prototype.gotoDate = function (date) {
        this.schedule.fullCalendar('gotoDate', date);
    };
    Schedule.prototype.prev = function () {
        this.schedule.fullCalendar('prev');
    };
    Schedule.prototype.next = function () {
        this.schedule.fullCalendar('next');
    };
    Schedule.prototype.prevYear = function () {
        this.schedule.fullCalendar('prevYear');
    };
    Schedule.prototype.nextYear = function () {
        this.schedule.fullCalendar('nextYear');
    };
    Schedule.prototype.today = function () {
        this.schedule.fullCalendar('today');
    };
    Schedule.prototype.incrementDate = function (duration) {
        this.schedule.fullCalendar('incrementDate', duration);
    };
    Schedule.prototype.changeView = function (viewName) {
        this.schedule.fullCalendar('changeView', viewName);
    };
    Schedule.prototype.getDate = function () {
        return this.schedule.fullCalendar('getDate');
    };
    Schedule.prototype.findEvent = function (id) {
        var event;
        if (this.events) {
            for (var _i = 0, _a = this.events; _i < _a.length; _i++) {
                var e = _a[_i];
                if (e.id === id) {
                    event = e;
                    break;
                }
            }
        }
        return event;
    };
    Schedule.prototype.updateEvent = function (event) {
        var sourceEvent = this.findEvent(event.id);
        if (sourceEvent) {
            sourceEvent.start = event.start.format();
            if (event.end) {
                sourceEvent.end = event.end.format();
            }
        }
    };
    return Schedule;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], Schedule.prototype, "events", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Schedule.prototype, "header", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Schedule.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Schedule.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Schedule.prototype, "rtl", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Schedule.prototype, "weekends", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], Schedule.prototype, "hiddenDays", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Schedule.prototype, "fixedWeekCount", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Schedule.prototype, "weekNumbers", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Schedule.prototype, "businessHours", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Schedule.prototype, "height", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Schedule.prototype, "contentHeight", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Schedule.prototype, "aspectRatio", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Schedule.prototype, "eventLimit", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Schedule.prototype, "defaultDate", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Schedule.prototype, "editable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Schedule.prototype, "droppable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Schedule.prototype, "eventStartEditable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Schedule.prototype, "eventDurationEditable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Schedule.prototype, "defaultView", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Schedule.prototype, "allDaySlot", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Schedule.prototype, "allDayText", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Schedule.prototype, "slotDuration", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Schedule.prototype, "slotLabelInterval", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Schedule.prototype, "snapDuration", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Schedule.prototype, "scrollTime", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Schedule.prototype, "minTime", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Schedule.prototype, "maxTime", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Schedule.prototype, "slotEventOverlap", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Schedule.prototype, "nowIndicator", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Schedule.prototype, "dragRevertDuration", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Schedule.prototype, "dragOpacity", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Schedule.prototype, "dragScroll", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Schedule.prototype, "eventOverlap", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Schedule.prototype, "eventConstraint", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Schedule.prototype, "locale", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Schedule.prototype, "timezone", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Schedule.prototype, "timeFormat", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Function)
], Schedule.prototype, "eventRender", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Function)
], Schedule.prototype, "dayRender", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Schedule.prototype, "options", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Schedule.prototype, "onDayClick", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Schedule.prototype, "onDrop", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Schedule.prototype, "onEventClick", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Schedule.prototype, "onEventMouseover", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Schedule.prototype, "onEventMouseout", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Schedule.prototype, "onEventDragStart", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Schedule.prototype, "onEventDragStop", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Schedule.prototype, "onEventDrop", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Schedule.prototype, "onEventResizeStart", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Schedule.prototype, "onEventResizeStop", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Schedule.prototype, "onEventResize", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Schedule.prototype, "onViewRender", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Schedule.prototype, "onViewDestroy", void 0);
Schedule = __decorate([
    core_1.Component({
        selector: 'p-schedule',
        template: '<div [ngStyle]="style" [class]="styleClass"></div>'
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, core_1.IterableDiffers])
], Schedule);
exports.Schedule = Schedule;
var ScheduleModule = (function () {
    function ScheduleModule() {
    }
    return ScheduleModule;
}());
ScheduleModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Schedule],
        declarations: [Schedule]
    })
], ScheduleModule);
exports.ScheduleModule = ScheduleModule;
//# sourceMappingURL=schedule.js.map

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var forms_1 = __webpack_require__(6);
exports.SELECTBUTTON_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return SelectButton; }),
    multi: true
};
var SelectButton = (function () {
    function SelectButton() {
        this.onChange = new core_1.EventEmitter();
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    SelectButton.prototype.writeValue = function (value) {
        this.value = value;
    };
    SelectButton.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    SelectButton.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    SelectButton.prototype.setDisabledState = function (val) {
        this.disabled = val;
    };
    SelectButton.prototype.onItemClick = function (event, option, checkbox) {
        if (this.disabled) {
            return;
        }
        checkbox.focus();
        if (this.multiple) {
            var itemIndex_1 = this.findItemIndex(option);
            if (itemIndex_1 != -1)
                this.value = this.value.filter(function (val, i) { return i != itemIndex_1; });
            else
                this.value = (this.value || []).concat([option.value]);
        }
        else {
            this.value = option.value;
        }
        this.onModelChange(this.value);
        this.onChange.emit({
            originalEvent: event,
            value: this.value
        });
    };
    SelectButton.prototype.onFocus = function (event) {
        this.focusedItem = event.target;
    };
    SelectButton.prototype.onBlur = function (event) {
        this.focusedItem = null;
        this.onModelTouched();
    };
    SelectButton.prototype.isSelected = function (option) {
        if (this.multiple)
            return this.findItemIndex(option) != -1;
        else
            return option.value == this.value;
    };
    SelectButton.prototype.findItemIndex = function (option) {
        var index = -1;
        if (this.value) {
            for (var i = 0; i < this.value.length; i++) {
                if (this.value[i] == option.value) {
                    index = i;
                    break;
                }
            }
        }
        return index;
    };
    return SelectButton;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], SelectButton.prototype, "options", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], SelectButton.prototype, "tabindex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], SelectButton.prototype, "multiple", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], SelectButton.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], SelectButton.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], SelectButton.prototype, "disabled", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], SelectButton.prototype, "onChange", void 0);
SelectButton = __decorate([
    core_1.Component({
        selector: 'p-selectButton',
        template: "\n        <div [ngClass]=\"'ui-selectbutton ui-buttonset ui-widget ui-corner-all ui-buttonset-' + options.length\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div *ngFor=\"let option of options;\" class=\"ui-button ui-widget ui-state-default ui-button-text-only\"\n                [ngClass]=\"{'ui-state-active':isSelected(option), 'ui-state-disabled':disabled, 'ui-state-focus': cbox == focusedItem}\" (click)=\"onItemClick($event,option,cbox)\">\n                <span class=\"ui-button-text ui-clickable\">{{option.label}}</span>\n                <div class=\"ui-helper-hidden-accessible\">\n                    <input #cbox type=\"checkbox\" [checked]=\"isSelected(option)\" (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\" [attr.tabindex]=\"tabindex\" [attr.disabled]=\"disabled\">\n                </div>\n            </div>\n        </div>\n    ",
        providers: [exports.SELECTBUTTON_VALUE_ACCESSOR]
    })
], SelectButton);
exports.SelectButton = SelectButton;
var SelectButtonModule = (function () {
    function SelectButtonModule() {
    }
    return SelectButtonModule;
}());
SelectButtonModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [SelectButton],
        declarations: [SelectButton]
    })
], SelectButtonModule);
exports.SelectButtonModule = SelectButtonModule;
//# sourceMappingURL=selectbutton.js.map

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var router_1 = __webpack_require__(5);
var SlideMenuSub = (function () {
    function SlideMenuSub(slideMenu) {
        this.slideMenu = slideMenu;
        this.backLabel = 'Back';
        this.easing = 'ease-out';
    }
    SlideMenuSub.prototype.itemClick = function (event, item, listitem) {
        var _this = this;
        if (item.disabled) {
            event.preventDefault();
            return;
        }
        if (!item.url) {
            event.preventDefault();
        }
        if (item.command) {
            item.command({
                originalEvent: event,
                item: item
            });
        }
        if (item.items && !this.slideMenu.animating) {
            this.slideMenu.left -= this.slideMenu.menuWidth;
            this.activeItem = listitem;
            this.slideMenu.animating = true;
            setTimeout(function () { return _this.slideMenu.animating = false; }, this.effectDuration);
        }
    };
    SlideMenuSub.prototype.ngOnDestroy = function () {
        this.activeItem = null;
    };
    return SlideMenuSub;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], SlideMenuSub.prototype, "item", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], SlideMenuSub.prototype, "root", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], SlideMenuSub.prototype, "backLabel", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], SlideMenuSub.prototype, "menuWidth", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], SlideMenuSub.prototype, "effectDuration", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], SlideMenuSub.prototype, "easing", void 0);
SlideMenuSub = __decorate([
    core_1.Component({
        selector: 'p-slideMenuSub',
        template: "\n        <ul [ngClass]=\"{'ui-helper-reset ui-menu-rootlist':root, 'ui-widget-content ui-corner-all ui-helper-clearfix ui-menu-child':!root}\" class=\"ui-menu-list\"\n            [style.width.px]=\"menuWidth\" [style.left.px]=\"root ? slideMenu.left : slideMenu.menuWidth\" \n            [style.transitionProperty]=\"root ? 'left' : 'none'\" [style.transitionDuration]=\"effectDuration + 'ms'\" [style.transitionTimingFunction]=\"easing\">\n            <ng-template ngFor let-child [ngForOf]=\"(root ? item : item.items)\">\n                <li *ngIf=\"child.separator\" class=\"ui-menu-separator ui-widget-content\">\n                <li *ngIf=\"!child.separator\" #listitem [ngClass]=\"{'ui-menuitem ui-widget ui-corner-all':true,'ui-menu-parent':child.items,'ui-slidemenuitem-active':listitem==activeItem}\">\n                    <a *ngIf=\"!child.routerLink\" [href]=\"child.url||'#'\" class=\"ui-menuitem-link ui-corner-all\" [attr.target]=\"child.target\"\n                        [ngClass]=\"{'ui-menuitem-link-parent':child.items,'ui-state-disabled':child.disabled}\" \n                        (click)=\"itemClick($event, child, listitem)\">\n                        <span class=\"ui-submenu-icon fa fa-fw fa-caret-right\" *ngIf=\"child.items\"></span>\n                        <span class=\"ui-menuitem-icon fa fa-fw\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                    </a>\n                    <a *ngIf=\"child.routerLink\" [routerLink]=\"child.routerLink\" [routerLinkActive]=\"'ui-state-active'\" [routerLinkActiveOptions]=\"child.routerLinkActiveOptions||{exact:false}\" [href]=\"child.url||'#'\" class=\"ui-menuitem-link ui-corner-all\" [attr.target]=\"child.target\"\n                        [ngClass]=\"{'ui-menuitem-link-parent':child.items,'ui-state-disabled':child.disabled}\" \n                        (click)=\"itemClick($event, child, listitem)\">\n                        <span class=\"ui-submenu-icon fa fa-fw fa-caret-right\" *ngIf=\"child.items\"></span>\n                        <span class=\"ui-menuitem-icon fa fa-fw\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                    </a>\n                    <p-slideMenuSub class=\"ui-submenu\" [item]=\"child\" [menuWidth]=\"menuWidth\" *ngIf=\"child.items\"></p-slideMenuSub>\n                </li>\n            </ng-template>\n        </ul>\n    "
    }),
    __param(0, core_1.Inject(core_1.forwardRef(function () { return SlideMenu; }))),
    __metadata("design:paramtypes", [SlideMenu])
], SlideMenuSub);
exports.SlideMenuSub = SlideMenuSub;
var SlideMenu = (function () {
    function SlideMenu(el, domHandler, renderer) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
        this.menuWidth = 190;
        this.viewportHeight = 175;
        this.effectDuration = 250;
        this.easing = 'ease-out';
        this.backLabel = 'Back';
        this.left = 0;
        this.animating = false;
    }
    SlideMenu.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.container = this.containerViewChild.nativeElement;
        this.backwardElement = this.backwardViewChild.nativeElement;
        this.slideMenuContentElement = this.slideMenuContentViewChild.nativeElement;
        this.slideMenuContentElement.style.height = this.viewportHeight - this.domHandler.getHiddenElementOuterHeight(this.backwardElement) + 'px';
        if (this.popup) {
            this.documentClickListener = this.renderer.listen('document', 'click', function () {
                if (!_this.preventDocumentDefault) {
                    _this.hide();
                }
                _this.preventDocumentDefault = false;
            });
        }
    };
    SlideMenu.prototype.toggle = function (event) {
        if (this.container.offsetParent)
            this.hide();
        else
            this.show(event);
    };
    SlideMenu.prototype.show = function (event) {
        this.preventDocumentDefault = true;
        this.container.style.display = 'block';
        this.domHandler.absolutePosition(this.container, event.target);
        this.domHandler.fadeIn(this.container, 250);
    };
    SlideMenu.prototype.hide = function () {
        this.container.style.display = 'none';
    };
    SlideMenu.prototype.onClick = function (event) {
        this.preventDocumentDefault = true;
    };
    SlideMenu.prototype.goBack = function () {
        this.left += this.menuWidth;
    };
    SlideMenu.prototype.ngOnDestroy = function () {
        if (this.documentClickListener) {
            this.documentClickListener();
        }
    };
    return SlideMenu;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], SlideMenu.prototype, "model", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], SlideMenu.prototype, "popup", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], SlideMenu.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], SlideMenu.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], SlideMenu.prototype, "menuWidth", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], SlideMenu.prototype, "viewportHeight", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], SlideMenu.prototype, "effectDuration", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], SlideMenu.prototype, "easing", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], SlideMenu.prototype, "backLabel", void 0);
__decorate([
    core_1.ViewChild('container'),
    __metadata("design:type", core_1.ElementRef)
], SlideMenu.prototype, "containerViewChild", void 0);
__decorate([
    core_1.ViewChild('backward'),
    __metadata("design:type", core_1.ElementRef)
], SlideMenu.prototype, "backwardViewChild", void 0);
__decorate([
    core_1.ViewChild('slideMenuContent'),
    __metadata("design:type", core_1.ElementRef)
], SlideMenu.prototype, "slideMenuContentViewChild", void 0);
SlideMenu = __decorate([
    core_1.Component({
        selector: 'p-slideMenu',
        template: "\n        <div #container [ngClass]=\"{'ui-menu ui-slidemenu ui-widget ui-widget-content ui-corner-all':true,'ui-menu-dynamic ui-shadow':popup}\" \n            [class]=\"styleClass\" [ngStyle]=\"style\" (click)=\"onClick($event)\">\n            <div class=\"ui-slidemenu-wrapper\" [style.height.px]=\"viewportHeight\">\n                <div #slideMenuContent class=\"ui-slidemenu-content\">\n                    <p-slideMenuSub [item]=\"model\" root=\"root\" [menuWidth]=\"menuWidth\" [effectDuration]=\"effectDuration\" [easing]=\"easing\"></p-slideMenuSub>\n                </div>\n                <div #backward class=\"ui-slidemenu-backward ui-widget-header ui-corner-all\" [style.display]=\"left ? 'block' : 'none'\" (click)=\"goBack()\">\n                    <span class=\"fa fa-fw fa-caret-left\"></span><span>{{backLabel}}</span>\n                </div>\n            </div>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2])
], SlideMenu);
exports.SlideMenu = SlideMenu;
var SlideMenuModule = (function () {
    function SlideMenuModule() {
    }
    return SlideMenuModule;
}());
SlideMenuModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, router_1.RouterModule],
        exports: [SlideMenu, router_1.RouterModule],
        declarations: [SlideMenu, SlideMenuSub]
    })
], SlideMenuModule);
exports.SlideMenuModule = SlideMenuModule;
//# sourceMappingURL=slidemenu.js.map

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var forms_1 = __webpack_require__(6);
exports.SLIDER_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return Slider; }),
    multi: true
};
var Slider = (function () {
    function Slider(el, domHandler, renderer) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
        this.min = 0;
        this.max = 100;
        this.orientation = 'horizontal';
        this.onChange = new core_1.EventEmitter();
        this.onSlideEnd = new core_1.EventEmitter();
        this.handleValues = [];
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    Slider.prototype.onMouseDown = function (event, index) {
        if (this.disabled) {
            return;
        }
        this.dragging = true;
        this.updateDomData();
        this.sliderHandleClick = true;
        this.handleIndex = index;
        event.preventDefault();
    };
    Slider.prototype.onTouchStart = function (event, index) {
        var touchobj = event.changedTouches[0];
        this.startHandleValue = (this.range) ? this.handleValues[index] : this.handleValue;
        this.dragging = true;
        this.handleIndex = index;
        if (this.orientation === 'horizontal') {
            this.startx = parseInt(touchobj.clientX, 10);
            this.barWidth = this.el.nativeElement.children[0].offsetWidth;
        }
        else {
            this.starty = parseInt(touchobj.clientY, 10);
            this.barHeight = this.el.nativeElement.children[0].offsetHeight;
        }
        event.preventDefault();
    };
    Slider.prototype.onTouchMove = function (event, index) {
        var touchobj = event.changedTouches[0], handleValue = 0;
        if (this.orientation === 'horizontal') {
            handleValue = Math.floor(((parseInt(touchobj.clientX, 10) - this.startx) * 100) / (this.barWidth)) + this.startHandleValue;
        }
        else {
            handleValue = Math.floor(((this.starty - parseInt(touchobj.clientY, 10)) * 100) / (this.barHeight)) + this.startHandleValue;
        }
        this.setValueFromHandle(event, handleValue);
        event.preventDefault();
    };
    Slider.prototype.onBarClick = function (event) {
        if (this.disabled) {
            return;
        }
        if (!this.sliderHandleClick) {
            this.updateDomData();
            this.handleChange(event);
        }
        this.sliderHandleClick = false;
    };
    Slider.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.disabled) {
            return;
        }
        this.dragListener = this.renderer.listen('document', 'mousemove', function (event) {
            if (_this.dragging) {
                _this.handleChange(event);
            }
        });
        this.mouseupListener = this.renderer.listen('document', 'mouseup', function (event) {
            if (_this.dragging) {
                _this.dragging = false;
                if (_this.range) {
                    _this.onSlideEnd.emit({ originalEvent: event, values: _this.values });
                }
                else {
                    _this.onSlideEnd.emit({ originalEvent: event, value: _this.value });
                }
            }
        });
    };
    Slider.prototype.handleChange = function (event) {
        var handleValue = this.calculateHandleValue(event);
        this.setValueFromHandle(event, handleValue);
    };
    Slider.prototype.setValueFromHandle = function (event, handleValue) {
        var newValue = this.getValueFromHandle(handleValue);
        if (this.range) {
            if (this.step) {
                this.handleStepChange(newValue, this.values[this.handleIndex]);
            }
            else {
                this.handleValues[this.handleIndex] = handleValue;
                this.updateValue(newValue, event);
            }
        }
        else {
            if (this.step) {
                this.handleStepChange(newValue, this.value);
            }
            else {
                this.handleValue = handleValue;
                this.updateValue(newValue, event);
            }
        }
    };
    Slider.prototype.handleStepChange = function (newValue, oldValue) {
        var diff = (newValue - oldValue);
        if (diff < 0 && (-1 * diff) >= this.step / 2) {
            newValue = oldValue - this.step;
            this.updateValue(newValue);
            this.updateHandleValue();
        }
        else if (diff > 0 && diff >= this.step / 2) {
            newValue = oldValue + this.step;
            this.updateValue(newValue);
            this.updateHandleValue();
        }
    };
    Slider.prototype.writeValue = function (value) {
        if (this.range)
            this.values = value || [0, 0];
        else
            this.value = value || 0;
        this.updateHandleValue();
    };
    Slider.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    Slider.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    Slider.prototype.setDisabledState = function (val) {
        this.disabled = val;
    };
    Slider.prototype.updateDomData = function () {
        var rect = this.el.nativeElement.children[0].getBoundingClientRect();
        this.initX = rect.left + this.domHandler.getWindowScrollLeft();
        this.initY = rect.top + this.domHandler.getWindowScrollTop();
        this.barWidth = this.el.nativeElement.children[0].offsetWidth;
        this.barHeight = this.el.nativeElement.children[0].offsetHeight;
    };
    Slider.prototype.calculateHandleValue = function (event) {
        if (this.orientation === 'horizontal')
            return Math.floor(((event.pageX - this.initX) * 100) / (this.barWidth));
        else
            return Math.floor((((this.initY + this.barHeight) - event.pageY) * 100) / (this.barHeight));
    };
    Slider.prototype.updateHandleValue = function () {
        if (this.range) {
            this.handleValues[0] = (this.values[0] < this.min ? 0 : this.values[0] - this.min) * 100 / (this.max - this.min);
            this.handleValues[1] = (this.values[1] > this.max ? 100 : this.values[1] - this.min) * 100 / (this.max - this.min);
        }
        else {
            if (this.value < this.min)
                this.handleValue = 0;
            else if (this.value > this.max)
                this.handleValue = 100;
            else
                this.handleValue = (this.value - this.min) * 100 / (this.max - this.min);
        }
    };
    Slider.prototype.updateValue = function (val, event) {
        if (this.range) {
            var value = val;
            if (this.handleIndex == 0) {
                if (value < this.min) {
                    value = this.min;
                    this.handleValues[0] = 0;
                }
                else if (value > this.values[1]) {
                    value = this.values[1];
                    this.handleValues[0] = this.handleValues[1];
                }
            }
            else {
                if (value > this.max) {
                    value = this.max;
                    this.handleValues[1] = 100;
                }
                else if (value < this.values[0]) {
                    value = this.values[0];
                    this.handleValues[1] = this.handleValues[0];
                }
            }
            this.values[this.handleIndex] = Math.floor(value);
            this.onModelChange(this.values);
            this.onChange.emit({ event: event, values: this.values });
        }
        else {
            if (val < this.min) {
                val = this.min;
                this.handleValue = 0;
            }
            else if (val > this.max) {
                val = this.max;
                this.handleValue = 100;
            }
            this.value = Math.floor(val);
            this.onModelChange(this.value);
            this.onChange.emit({ event: event, value: this.value });
        }
    };
    Slider.prototype.getValueFromHandle = function (handleValue) {
        return (this.max - this.min) * (handleValue / 100) + this.min;
    };
    Slider.prototype.ngOnDestroy = function () {
        if (this.dragListener) {
            this.dragListener();
        }
        if (this.mouseupListener) {
            this.mouseupListener();
        }
    };
    return Slider;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Slider.prototype, "animate", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Slider.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Slider.prototype, "min", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Slider.prototype, "max", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Slider.prototype, "orientation", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Slider.prototype, "step", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Slider.prototype, "range", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Slider.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Slider.prototype, "styleClass", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Slider.prototype, "onChange", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Slider.prototype, "onSlideEnd", void 0);
Slider = __decorate([
    core_1.Component({
        selector: 'p-slider',
        template: "\n        <div [ngStyle]=\"style\" [class]=\"styleClass\" [ngClass]=\"{'ui-slider ui-widget ui-widget-content ui-corner-all':true,'ui-state-disabled':disabled,\n            'ui-slider-horizontal':orientation == 'horizontal','ui-slider-vertical':orientation == 'vertical','ui-slider-animate':animate}\"\n            (click)=\"onBarClick($event)\">\n            <span *ngIf=\"range\" class=\"ui-slider-range ui-widget-header ui-corner-all\" [ngStyle]=\"{'left':handleValues[0] + '%',width: (handleValues[1] - handleValues[0] + '%')}\"></span>\n            <span *ngIf=\"orientation=='vertical'\" class=\"ui-slider-range ui-slider-range-min ui-widget-header ui-corner-all\" [ngStyle]=\"{'height': handleValue + '%'}\"></span>\n            <span *ngIf=\"!range\" class=\"ui-slider-handle ui-state-default ui-corner-all ui-clickable\" (mousedown)=\"onMouseDown($event)\" (touchstart)=\"onTouchStart($event)\" (touchmove)=\"onTouchMove($event)\" (touchend)=\"dragging=false\"\n                [style.transition]=\"dragging ? 'none': null\" [ngStyle]=\"{'left': orientation == 'horizontal' ? handleValue + '%' : null,'bottom': orientation == 'vertical' ? handleValue + '%' : null}\"></span>\n            <span *ngIf=\"range\" (mousedown)=\"onMouseDown($event,0)\" (touchstart)=\"onTouchStart($event,0)\" (touchmove)=\"onTouchMove($event,0)\" (touchend)=\"dragging=false\" [style.transition]=\"dragging ? 'none': null\" class=\"ui-slider-handle ui-state-default ui-corner-all ui-clickable\" \n                [ngStyle]=\"{'left':handleValues[0] + '%'}\" [ngClass]=\"{'ui-slider-handle-active':handleIndex==0}\"></span>\n            <span *ngIf=\"range\" (mousedown)=\"onMouseDown($event,1)\" (touchstart)=\"onTouchStart($event,1)\" (touchmove)=\"onTouchMove($event,1)\" (touchend)=\"dragging=false\" [style.transition]=\"dragging ? 'none': null\" class=\"ui-slider-handle ui-state-default ui-corner-all ui-clickable\" \n                [ngStyle]=\"{'left':handleValues[1] + '%'}\" [ngClass]=\"{'ui-slider-handle-active':handleIndex==1}\"></span>\n        </div>\n    ",
        providers: [exports.SLIDER_VALUE_ACCESSOR, domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2])
], Slider);
exports.Slider = Slider;
var SliderModule = (function () {
    function SliderModule() {
    }
    return SliderModule;
}());
SliderModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Slider],
        declarations: [Slider]
    })
], SliderModule);
exports.SliderModule = SliderModule;
//# sourceMappingURL=slider.js.map

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var inputtext_1 = __webpack_require__(20);
var domhandler_1 = __webpack_require__(4);
var forms_1 = __webpack_require__(6);
exports.SPINNER_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return Spinner; }),
    multi: true
};
var Spinner = (function () {
    function Spinner(el, domHandler) {
        this.el = el;
        this.domHandler = domHandler;
        this.onChange = new core_1.EventEmitter();
        this.onBlur = new core_1.EventEmitter();
        this.step = 1;
        this.decimalSeparator = '.';
        this.thousandSeparator = ',';
        this.formatInput = true;
        this.type = 'text';
        this.valueAsString = '';
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
        this.keyPattern = /[0-9\+\-]/;
    }
    Spinner.prototype.ngOnInit = function () {
        if (Math.floor(this.step) === 0) {
            this.precision = this.step.toString().split(/[,]|[.]/)[1].length;
        }
    };
    Spinner.prototype.repeat = function (interval, dir) {
        var _this = this;
        var i = interval || 500;
        this.clearTimer();
        this.timer = setTimeout(function () {
            _this.repeat(40, dir);
        }, i);
        this.spin(dir);
    };
    Spinner.prototype.spin = function (dir) {
        var step = this.step * dir;
        var currentValue = this.value || 0;
        var newValue = null;
        if (this.precision)
            this.value = parseFloat(this.toFixed(currentValue + step, this.precision));
        else
            this.value = currentValue + step;
        if (this.maxlength !== undefined && this.value.toString().length > this.maxlength) {
            this.value = currentValue;
        }
        if (this.min !== undefined && this.value < this.min) {
            this.value = this.min;
        }
        if (this.max !== undefined && this.value > this.max) {
            this.value = this.max;
        }
        this.formatValue();
        this.onModelChange(this.value);
        this.onChange.emit();
    };
    Spinner.prototype.toFixed = function (value, precision) {
        var power = Math.pow(10, precision || 0);
        return String(Math.round(value * power) / power);
    };
    Spinner.prototype.onUpButtonMousedown = function (event, input) {
        if (!this.disabled) {
            input.focus();
            this.repeat(null, 1);
            this.updateFilledState();
        }
    };
    Spinner.prototype.onUpButtonMouseup = function (event) {
        if (!this.disabled) {
            this.clearTimer();
        }
    };
    Spinner.prototype.onUpButtonMouseleave = function (event) {
        if (!this.disabled) {
            this.clearTimer();
        }
    };
    Spinner.prototype.onDownButtonMousedown = function (event, input) {
        if (!this.disabled) {
            input.focus();
            this.repeat(null, -1);
            this.updateFilledState();
        }
    };
    Spinner.prototype.onDownButtonMouseup = function (event) {
        if (!this.disabled) {
            this.clearTimer();
        }
    };
    Spinner.prototype.onDownButtonMouseleave = function (event) {
        if (!this.disabled) {
            this.clearTimer();
        }
    };
    Spinner.prototype.onInputKeydown = function (event) {
        if (event.which == 38) {
            this.spin(1);
            event.preventDefault();
        }
        else if (event.which == 40) {
            this.spin(-1);
            event.preventDefault();
        }
    };
    Spinner.prototype.onInputKeyPress = function (event) {
        var inputChar = String.fromCharCode(event.charCode);
        if (!this.keyPattern.test(inputChar) && inputChar != this.decimalSeparator && event.keyCode != 9 && event.keyCode != 8 && event.keyCode != 37 && event.keyCode != 39 && event.keyCode != 46) {
            event.preventDefault();
        }
    };
    Spinner.prototype.onInput = function (event, inputValue) {
        this.value = this.parseValue(inputValue);
        this.formatValue();
        this.onModelChange(this.value);
        this.updateFilledState();
    };
    Spinner.prototype.onInputBlur = function (event) {
        this.focus = false;
        this.onModelTouched();
        this.onBlur.emit(event);
    };
    Spinner.prototype.onFocus = function () {
        this.focus = true;
    };
    Spinner.prototype.parseValue = function (val) {
        var value;
        if (this.formatInput) {
            val = val.split(this.thousandSeparator).join('');
        }
        if (val.trim() === '') {
            value = null;
        }
        else {
            if (this.precision) {
                value = parseFloat(val.replace(',', '.'));
            }
            else {
                value = parseInt(val);
            }
            if (!isNaN(value)) {
                if (this.max !== undefined && value > this.max) {
                    value = this.max;
                }
                if (this.min !== undefined && value < this.min) {
                    value = this.min;
                }
            }
            else {
                value = null;
            }
        }
        return value;
    };
    Spinner.prototype.formatValue = function () {
        if (this.value !== null && this.value !== undefined) {
            var textValue = String(this.value).replace('.', this.decimalSeparator);
            if (this.formatInput) {
                textValue = textValue.replace(/\B(?=(\d{3})+(?!\d))/g, this.thousandSeparator);
            }
            this.valueAsString = textValue;
        }
        else {
            this.valueAsString = '';
        }
    };
    Spinner.prototype.handleChange = function (event) {
        this.onChange.emit(event);
    };
    Spinner.prototype.clearTimer = function () {
        if (this.timer) {
            clearInterval(this.timer);
        }
    };
    Spinner.prototype.writeValue = function (value) {
        this.value = value;
        this.formatValue();
        this.updateFilledState();
    };
    Spinner.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    Spinner.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    Spinner.prototype.setDisabledState = function (val) {
        this.disabled = val;
    };
    Spinner.prototype.updateFilledState = function () {
        this.filled = (this.value !== undefined && this.value != null);
    };
    return Spinner;
}());
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Spinner.prototype, "onChange", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Spinner.prototype, "onBlur", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Spinner.prototype, "step", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Spinner.prototype, "min", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Spinner.prototype, "max", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Spinner.prototype, "maxlength", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Spinner.prototype, "size", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Spinner.prototype, "placeholder", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Spinner.prototype, "inputId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Spinner.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Spinner.prototype, "readonly", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Spinner.prototype, "decimalSeparator", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Spinner.prototype, "thousandSeparator", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Spinner.prototype, "tabindex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Spinner.prototype, "formatInput", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Spinner.prototype, "type", void 0);
Spinner = __decorate([
    core_1.Component({
        selector: 'p-spinner',
        template: "\n        <span class=\"ui-spinner ui-widget ui-corner-all\">\n            <input #in [attr.type]=\"type\" [attr.id]=\"inputId\" class=\"ui-spinner-input\" [value]=\"valueAsString\" class=\"ui-inputtext ui-widget ui-state-default ui-corner-all\"\n            [attr.size]=\"size\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [attr.placeholder]=\"placeholder\" [disabled]=\"disabled\" [readonly]=\"readonly\"\n            (keydown)=\"onInputKeydown($event)\" (keyup)=\"onInput($event,in.value)\" (keypress)=\"onInputKeyPress($event)\" (blur)=\"onInputBlur($event)\" (change)=\"handleChange($event)\" (focus)=\"onFocus()\">\n            <button type=\"button\" [ngClass]=\"{'ui-spinner-button ui-spinner-up ui-corner-tr ui-button ui-widget ui-state-default':true,'ui-state-disabled':disabled}\" [disabled]=\"disabled\"\n                (mouseleave)=\"onUpButtonMouseleave($event)\" (mousedown)=\"onUpButtonMousedown($event,in)\" (mouseup)=\"onUpButtonMouseup($event)\">\n                <span class=\"fa fa-caret-up ui-clickable\"></span>\n            </button>\n            <button type=\"button\" [ngClass]=\"{'ui-spinner-button ui-spinner-down ui-corner-br ui-button ui-widget ui-state-default':true,'ui-state-disabled':disabled}\" [disabled]=\"disabled\"\n                (mouseleave)=\"onDownButtonMouseleave($event)\" (mousedown)=\"onDownButtonMousedown($event,in)\" (mouseup)=\"onDownButtonMouseup($event)\">\n                <span class=\"fa fa-caret-down ui-clickable\"></span>\n            </button>\n        </span>\n    ",
        host: {
            '[class.ui-inputwrapper-filled]': 'filled',
            '[class.ui-inputwrapper-focus]': 'focus'
        },
        providers: [domhandler_1.DomHandler, exports.SPINNER_VALUE_ACCESSOR],
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler])
], Spinner);
exports.Spinner = Spinner;
var SpinnerModule = (function () {
    function SpinnerModule() {
    }
    return SpinnerModule;
}());
SpinnerModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, inputtext_1.InputTextModule],
        exports: [Spinner],
        declarations: [Spinner]
    })
], SpinnerModule);
exports.SpinnerModule = SpinnerModule;
//# sourceMappingURL=spinner.js.map

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var animations_1 = __webpack_require__(13);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var button_1 = __webpack_require__(16);
var router_1 = __webpack_require__(5);
var router_2 = __webpack_require__(5);
var SplitButton = (function () {
    function SplitButton(el, domHandler, renderer, router, cd) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
        this.router = router;
        this.cd = cd;
        this.iconPos = 'left';
        this.onClick = new core_1.EventEmitter();
        this.onDropdownClick = new core_1.EventEmitter();
        this.menuVisible = false;
    }
    SplitButton.prototype.ngAfterViewInit = function () {
        if (this.appendTo) {
            if (this.appendTo === 'body')
                document.body.appendChild(this.overlayViewChild.nativeElement);
            else
                this.domHandler.appendChild(this.overlayViewChild.nativeElement, this.appendTo);
        }
    };
    SplitButton.prototype.ngAfterViewChecked = function () {
        if (this.shown) {
            this.onShow();
            this.shown = false;
        }
    };
    SplitButton.prototype.onDefaultButtonClick = function (event) {
        this.onClick.emit(event);
    };
    SplitButton.prototype.itemClick = function (event, item) {
        if (item.disabled) {
            event.preventDefault();
            return;
        }
        if (!item.url) {
            event.preventDefault();
        }
        if (item.command) {
            item.command({
                originalEvent: event,
                item: item
            });
        }
        this.menuVisible = false;
    };
    SplitButton.prototype.show = function () {
        this.shown = true;
        this.menuVisible = !this.menuVisible;
        this.alignPanel();
        this.overlayViewChild.nativeElement.style.zIndex = String(++domhandler_1.DomHandler.zindex);
    };
    SplitButton.prototype.onShow = function () {
        this.alignPanel();
        this.bindDocumentClickListener();
    };
    SplitButton.prototype.onDropdownButtonClick = function (event) {
        this.onDropdownClick.emit(event);
        this.dropdownClick = true;
        this.show();
    };
    SplitButton.prototype.alignPanel = function () {
        if (this.appendTo)
            this.domHandler.absolutePosition(this.overlayViewChild.nativeElement, this.buttonViewChild.nativeElement);
        else
            this.domHandler.relativePosition(this.overlayViewChild.nativeElement, this.buttonViewChild.nativeElement);
    };
    SplitButton.prototype.bindDocumentClickListener = function () {
        var _this = this;
        if (!this.documentClickListener) {
            this.documentClickListener = this.renderer.listen('document', 'click', function () {
                if (_this.dropdownClick) {
                    _this.dropdownClick = false;
                }
                else {
                    _this.menuVisible = false;
                    _this.unbindDocumentClickListener();
                    _this.cd.markForCheck();
                }
            });
        }
    };
    SplitButton.prototype.unbindDocumentClickListener = function () {
        if (this.documentClickListener) {
            this.documentClickListener();
            this.documentClickListener = null;
        }
    };
    SplitButton.prototype.ngOnDestroy = function () {
        this.unbindDocumentClickListener();
    };
    return SplitButton;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], SplitButton.prototype, "model", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], SplitButton.prototype, "icon", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], SplitButton.prototype, "iconPos", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], SplitButton.prototype, "label", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], SplitButton.prototype, "onClick", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], SplitButton.prototype, "onDropdownClick", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], SplitButton.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], SplitButton.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], SplitButton.prototype, "menuStyle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], SplitButton.prototype, "menuStyleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], SplitButton.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], SplitButton.prototype, "tabindex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], SplitButton.prototype, "appendTo", void 0);
__decorate([
    core_1.ViewChild('defaultbtn'),
    __metadata("design:type", core_1.ElementRef)
], SplitButton.prototype, "buttonViewChild", void 0);
__decorate([
    core_1.ViewChild('overlay'),
    __metadata("design:type", core_1.ElementRef)
], SplitButton.prototype, "overlayViewChild", void 0);
SplitButton = __decorate([
    core_1.Component({
        selector: 'p-splitButton',
        template: "\n        <div #container [ngClass]=\"{'ui-splitbutton ui-buttonset ui-widget':true,'ui-state-disabled':disabled}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <button #defaultbtn type=\"button\" pButton [icon]=\"icon\" [iconPos]=\"iconPos\" [label]=\"label\" cornerStyleClass=\"ui-corner-left\" (click)=\"onDefaultButtonClick($event)\" [disabled]=\"disabled\" [attr.tabindex]=\"tabindex\">\n            </button><button type=\"button\" pButton class=\"ui-splitbutton-menubutton\" icon=\"fa-caret-down\" cornerStyleClass=\"ui-corner-right\" (click)=\"onDropdownButtonClick($event)\" [disabled]=\"disabled\"></button>\n            <div #overlay [ngClass]=\"'ui-menu ui-menu-dynamic ui-widget ui-widget-content ui-corner-all ui-helper-clearfix ui-shadow'\" [style.display]=\"menuVisible ? 'block' : 'none'\"\n                    [ngStyle]=\"menuStyle\" [class]=\"menuStyleClass\" [@overlayState]=\"menuVisible ? 'visible' : 'hidden'\">\n                <ul class=\"ui-menu-list ui-helper-reset\">\n                    <li class=\"ui-menuitem ui-widget ui-corner-all\" role=\"menuitem\" *ngFor=\"let item of model\">\n                        <a *ngIf=\"!item.routerLink\" [href]=\"item.url||'#'\" class=\"ui-menuitem-link ui-corner-all\" [attr.target]=\"item.target\"\n                            [ngClass]=\"{'ui-state-disabled':item.disabled}\" (click)=\"itemClick($event, item)\">\n                            <span [ngClass]=\"'ui-menuitem-icon fa fa-fw'\" [class]=\"item.icon\" *ngIf=\"item.icon\"></span>\n                            <span class=\"ui-menuitem-text\">{{item.label}}</span>\n                        </a>\n                        <a *ngIf=\"item.routerLink\" [routerLink]=\"item.routerLink\"\n                            class=\"ui-menuitem-link ui-corner-all\" [attr.target]=\"item.target\" [ngClass]=\"{'ui-state-disabled':item.disabled}\" (click)=\"itemClick($event, item)\">\n                            <span [ngClass]=\"'ui-menuitem-icon fa fa-fw'\" [class]=\"item.icon\" *ngIf=\"item.icon\"></span>\n                            <span class=\"ui-menuitem-text\">{{item.label}}</span>\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    ",
        animations: [
            animations_1.trigger('overlayState', [
                animations_1.state('hidden', animations_1.style({
                    opacity: 0
                })),
                animations_1.state('visible', animations_1.style({
                    opacity: 1
                })),
                animations_1.transition('visible => hidden', animations_1.animate('400ms ease-in')),
                animations_1.transition('hidden => visible', animations_1.animate('400ms ease-out'))
            ])
        ],
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2, router_1.Router, core_1.ChangeDetectorRef])
], SplitButton);
exports.SplitButton = SplitButton;
var SplitButtonModule = (function () {
    function SplitButtonModule() {
    }
    return SplitButtonModule;
}());
SplitButtonModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, button_1.ButtonModule, router_2.RouterModule],
        exports: [SplitButton, button_1.ButtonModule, router_2.RouterModule],
        declarations: [SplitButton]
    })
], SplitButtonModule);
exports.SplitButtonModule = SplitButtonModule;
//# sourceMappingURL=splitbutton.js.map

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var router_1 = __webpack_require__(5);
var Steps = (function () {
    function Steps() {
        this.activeIndex = 0;
        this.readonly = true;
        this.activeIndexChange = new core_1.EventEmitter();
    }
    Steps.prototype.itemClick = function (event, item, i) {
        if (this.readonly || item.disabled) {
            event.preventDefault();
            return;
        }
        this.activeIndexChange.emit(i);
        if (!item.url) {
            event.preventDefault();
        }
        if (item.command) {
            item.command({
                originalEvent: event,
                item: item,
                index: i
            });
        }
    };
    return Steps;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Steps.prototype, "activeIndex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], Steps.prototype, "model", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Steps.prototype, "readonly", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Steps.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Steps.prototype, "styleClass", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Steps.prototype, "activeIndexChange", void 0);
Steps = __decorate([
    core_1.Component({
        selector: 'p-steps',
        template: "\n        <div [ngClass]=\"{'ui-steps ui-widget ui-helper-clearfix':true,'ui-steps-readonly':readonly}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <ul role=\"tablist\">\n                <li *ngFor=\"let item of model; let i = index\" class=\"ui-steps-item\" #menuitem\n                    [ngClass]=\"{'ui-state-highlight':(i === activeIndex),'ui-state-default':(i !== activeIndex),\n                        'ui-state-disabled':item.disabled||(i !== activeIndex && readonly)}\">\n                    <a *ngIf=\"!item.routerLink\" [href]=\"item.url||'#'\" class=\"ui-menuitem-link\" (click)=\"itemClick($event, item, i)\" [attr.target]=\"item.target\">\n                        <span class=\"ui-steps-number\">{{i + 1}}</span>\n                        <span class=\"ui-steps-title\">{{item.label}}</span>\n                    </a>\n                    <a *ngIf=\"item.routerLink\" [routerLink]=\"item.routerLink\" [routerLinkActive]=\"'ui-state-active'\" [routerLinkActiveOptions]=\"item.routerLinkActiveOptions||{exact:false}\" class=\"ui-menuitem-link\" (click)=\"itemClick($event, item, i)\" [attr.target]=\"item.target\">\n                        <span class=\"ui-steps-number\">{{i + 1}}</span>\n                        <span class=\"ui-steps-title\">{{item.label}}</span>\n                    </a>\n                </li>\n            </ul>\n        </div>\n    "
    })
], Steps);
exports.Steps = Steps;
var StepsModule = (function () {
    function StepsModule() {
    }
    return StepsModule;
}());
StepsModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, router_1.RouterModule],
        exports: [Steps, router_1.RouterModule],
        declarations: [Steps]
    })
], StepsModule);
exports.StepsModule = StepsModule;
//# sourceMappingURL=steps.js.map

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var router_1 = __webpack_require__(5);
var TabMenu = (function () {
    function TabMenu() {
    }
    TabMenu.prototype.ngOnInit = function () {
        if (!this.activeItem && this.model && this.model.length) {
            this.activeItem = this.model[0];
        }
    };
    TabMenu.prototype.itemClick = function (event, item) {
        if (item.disabled) {
            event.preventDefault();
            return;
        }
        if (!item.url) {
            event.preventDefault();
        }
        if (item.command) {
            item.command({
                originalEvent: event,
                item: item
            });
        }
        this.activeItem = item;
    };
    return TabMenu;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], TabMenu.prototype, "model", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], TabMenu.prototype, "activeItem", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], TabMenu.prototype, "popup", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], TabMenu.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TabMenu.prototype, "styleClass", void 0);
TabMenu = __decorate([
    core_1.Component({
        selector: 'p-tabMenu',
        template: "\n        <div [ngClass]=\"'ui-tabmenu ui-widget ui-widget-content ui-corner-all'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <ul class=\"ui-tabmenu-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\" role=\"tablist\">\n                <li *ngFor=\"let item of model\" \n                    [ngClass]=\"{'ui-tabmenuitem ui-state-default ui-corner-top':true,'ui-state-disabled':item.disabled,\n                        'ui-tabmenuitem-hasicon':item.icon,'ui-state-active':activeItem==item}\">\n                    <a *ngIf=\"!item.routerLink\" [href]=\"item.url||'#'\" class=\"ui-menuitem-link ui-corner-all\" (click)=\"itemClick($event,item)\"\n                        [attr.target]=\"item.target\">\n                        <span class=\"ui-menuitem-icon fa\" [ngClass]=\"item.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{item.label}}</span>\n                    </a>\n                    <a *ngIf=\"item.routerLink\" [routerLink]=\"item.routerLink\" [routerLinkActive]=\"'ui-state-active'\"  [routerLinkActiveOptions]=\"item.routerLinkActiveOptions||{exact:false}\" class=\"ui-menuitem-link ui-corner-all\" (click)=\"itemClick($event,item)\"\n                        [attr.target]=\"item.target\">\n                        <span class=\"ui-menuitem-icon fa\" [ngClass]=\"item.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{item.label}}</span>\n                    </a>\n                </li>\n            </ul>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler]
    })
], TabMenu);
exports.TabMenu = TabMenu;
var TabMenuModule = (function () {
    function TabMenuModule() {
    }
    return TabMenuModule;
}());
TabMenuModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, router_1.RouterModule],
        exports: [TabMenu, router_1.RouterModule],
        declarations: [TabMenu]
    })
], TabMenuModule);
exports.TabMenuModule = TabMenuModule;
//# sourceMappingURL=tabmenu.js.map

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var TabViewNav = (function () {
    function TabViewNav() {
        this.orientation = 'top';
        this.onTabClick = new core_1.EventEmitter();
        this.onTabCloseClick = new core_1.EventEmitter();
    }
    TabViewNav.prototype.getDefaultHeaderClass = function (tab) {
        var styleClass = 'ui-state-default ui-corner-' + this.orientation;
        if (tab.headerStyleClass) {
            styleClass = styleClass + " " + tab.headerStyleClass;
        }
        return styleClass;
    };
    TabViewNav.prototype.clickTab = function (event, tab) {
        this.onTabClick.emit({
            originalEvent: event,
            tab: tab
        });
    };
    TabViewNav.prototype.clickClose = function (event, tab) {
        this.onTabCloseClick.emit({
            originalEvent: event,
            tab: tab
        });
    };
    return TabViewNav;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], TabViewNav.prototype, "tabs", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TabViewNav.prototype, "orientation", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], TabViewNav.prototype, "onTabClick", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], TabViewNav.prototype, "onTabCloseClick", void 0);
TabViewNav = __decorate([
    core_1.Component({
        selector: '[p-tabViewNav]',
        host: {
            '[class.ui-tabview-nav]': 'true',
            '[class.ui-helper-reset]': 'true',
            '[class.ui-helper-clearfix]': 'true',
            '[class.ui-widget-header]': 'true',
            '[class.ui-corner-all]': 'true'
        },
        template: "\n        <ng-template ngFor let-tab [ngForOf]=\"tabs\">\n            <li [class]=\"getDefaultHeaderClass(tab)\" [ngStyle]=\"tab.headerStyle\" role=\"tab\"\n                [ngClass]=\"{'ui-tabview-selected ui-state-active': tab.selected, 'ui-state-disabled': tab.disabled}\"\n                (click)=\"clickTab($event,tab)\" *ngIf=\"!tab.closed\"\n                [attr.aria-expanded]=\"tab.selected\" [attr.aria-selected]=\"tab.selected\">\n                <a href=\"#\">\n                    <span class=\"ui-tabview-left-icon fa\" [ngClass]=\"tab.leftIcon\" *ngIf=\"tab.leftIcon\"></span>\n                    <span class=\"ui-tabview-title\">{{tab.header}}</span>\n                    <span class=\"ui-tabview-right-icon fa\" [ngClass]=\"tab.rightIcon\" *ngIf=\"tab.rightIcon\"></span>\n                </a>\n                <span *ngIf=\"tab.closable\" class=\"ui-tabview-close fa fa-close\" (click)=\"clickClose($event,tab)\"></span>\n            </li>\n        </ng-template>\n    ",
    })
], TabViewNav);
exports.TabViewNav = TabViewNav;
var TabPanel = (function () {
    function TabPanel() {
    }
    return TabPanel;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TabPanel.prototype, "header", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], TabPanel.prototype, "selected", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], TabPanel.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], TabPanel.prototype, "closable", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], TabPanel.prototype, "headerStyle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TabPanel.prototype, "headerStyleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TabPanel.prototype, "leftIcon", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TabPanel.prototype, "rightIcon", void 0);
TabPanel = __decorate([
    core_1.Component({
        selector: 'p-tabPanel',
        template: "\n        <div class=\"ui-tabview-panel ui-widget-content\" [style.display]=\"selected ? 'block' : 'none'\" \n            role=\"tabpanel\" [attr.aria-hidden]=\"!selected\" *ngIf=\"closed ? false :\u00A0(lazy ? selected : true)\">\n            <ng-content></ng-content>\n        </div>\n    "
    })
], TabPanel);
exports.TabPanel = TabPanel;
var TabView = (function () {
    function TabView(el) {
        this.el = el;
        this.orientation = 'top';
        this.onChange = new core_1.EventEmitter();
        this.onClose = new core_1.EventEmitter();
    }
    TabView.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.initTabs();
        this.tabPanels.changes.subscribe(function (_) {
            _this.initTabs();
        });
    };
    TabView.prototype.initTabs = function () {
        this.tabs = this.tabPanels.toArray();
        for (var _i = 0, _a = this.tabs; _i < _a.length; _i++) {
            var tab = _a[_i];
            tab.lazy = this.lazy;
        }
        var selectedTab = this.findSelectedTab();
        if (!selectedTab && this.tabs.length) {
            if (this.activeIndex != null && this.tabs.length > this.activeIndex)
                this.tabs[this.activeIndex].selected = true;
            else
                this.tabs[0].selected = true;
        }
    };
    TabView.prototype.open = function (event, tab) {
        if (tab.disabled) {
            if (event) {
                event.preventDefault();
            }
            return;
        }
        if (!tab.selected) {
            var selectedTab = this.findSelectedTab();
            if (selectedTab) {
                selectedTab.selected = false;
            }
            tab.selected = true;
            this.onChange.emit({ originalEvent: event, index: this.findTabIndex(tab) });
        }
        if (event) {
            event.preventDefault();
        }
    };
    TabView.prototype.close = function (event, tab) {
        var _this = this;
        if (this.controlClose) {
            this.onClose.emit({
                originalEvent: event,
                index: this.findTabIndex(tab),
                close: function () {
                    _this.closeTab(tab);
                }
            });
        }
        else {
            this.closeTab(tab);
            this.onClose.emit({
                originalEvent: event,
                index: this.findTabIndex(tab)
            });
        }
        event.stopPropagation();
    };
    TabView.prototype.closeTab = function (tab) {
        if (tab.selected) {
            tab.selected = false;
            for (var i = 0; i < this.tabs.length; i++) {
                var tabPanel = this.tabs[i];
                if (!tabPanel.closed && !tab.disabled) {
                    tabPanel.selected = true;
                    break;
                }
            }
        }
        tab.closed = true;
    };
    TabView.prototype.findSelectedTab = function () {
        for (var i = 0; i < this.tabs.length; i++) {
            if (this.tabs[i].selected) {
                return this.tabs[i];
            }
        }
        return null;
    };
    TabView.prototype.findTabIndex = function (tab) {
        var index = -1;
        for (var i = 0; i < this.tabs.length; i++) {
            if (this.tabs[i] == tab) {
                index = i;
                break;
            }
        }
        return index;
    };
    TabView.prototype.getBlockableElement = function () {
        return this.el.nativeElement.children[0];
    };
    Object.defineProperty(TabView.prototype, "activeIndex", {
        get: function () {
            return this._activeIndex;
        },
        set: function (val) {
            this._activeIndex = val;
            if (this.tabs && this.tabs.length && this._activeIndex != null) {
                this.findSelectedTab().selected = false;
                this.tabs[this._activeIndex].selected = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    return TabView;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TabView.prototype, "orientation", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], TabView.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TabView.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], TabView.prototype, "controlClose", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], TabView.prototype, "lazy", void 0);
__decorate([
    core_1.ContentChildren(TabPanel),
    __metadata("design:type", core_1.QueryList)
], TabView.prototype, "tabPanels", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], TabView.prototype, "onChange", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], TabView.prototype, "onClose", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], TabView.prototype, "activeIndex", null);
TabView = __decorate([
    core_1.Component({
        selector: 'p-tabView',
        template: "\n        <div [ngClass]=\"'ui-tabview ui-widget ui-widget-content ui-corner-all ui-tabview-' + orientation\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <ul p-tabViewNav role=\"tablist\" *ngIf=\"orientation!='bottom'\" [tabs]=\"tabs\" [orientation]=\"orientation\" \n                (onTabClick)=\"open($event.originalEvent, $event.tab)\" (onTabCloseClick)=\"close($event.originalEvent, $event.tab)\"></ul>\n            <div class=\"ui-tabview-panels\">\n                <ng-content></ng-content>\n            </div>\n            <ul p-tabViewNav role=\"tablist\" *ngIf=\"orientation=='bottom'\" [tabs]=\"tabs\" [orientation]=\"orientation\"\n                (onTabClick)=\"open($event.originalEvent, $event.tab)\" (onTabCloseClick)=\"close($event.originalEvent, $event.tab)\"></ul>\n        </div>\n    ",
    }),
    __metadata("design:paramtypes", [core_1.ElementRef])
], TabView);
exports.TabView = TabView;
var TabViewModule = (function () {
    function TabViewModule() {
    }
    return TabViewModule;
}());
TabViewModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [TabView, TabPanel, TabViewNav],
        declarations: [TabView, TabPanel, TabViewNav]
    })
], TabViewModule);
exports.TabViewModule = TabViewModule;
//# sourceMappingURL=tabview.js.map

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var forms_1 = __webpack_require__(6);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var Terminal = (function () {
    function Terminal(el, domHandler) {
        this.el = el;
        this.domHandler = domHandler;
        this.responseChange = new core_1.EventEmitter();
        this.handler = new core_1.EventEmitter();
        this.commands = [];
    }
    Terminal.prototype.ngAfterViewInit = function () {
        this.container = this.domHandler.find(this.el.nativeElement, '.ui-terminal')[0];
    };
    Terminal.prototype.ngAfterViewChecked = function () {
        if (this.commandProcessed) {
            this.container.scrollTop = this.container.scrollHeight;
            this.commandProcessed = false;
        }
    };
    Object.defineProperty(Terminal.prototype, "response", {
        set: function (value) {
            if (value) {
                this.commands[this.commands.length - 1].response = value;
                this.commandProcessed = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    Terminal.prototype.handleCommand = function (event) {
        if (event.keyCode == 13) {
            this.commands.push({ text: this.command });
            this.handler.emit({ originalEvent: event, command: this.command });
            this.command = '';
        }
    };
    Terminal.prototype.focus = function (element) {
        element.focus();
    };
    return Terminal;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Terminal.prototype, "welcomeMessage", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Terminal.prototype, "prompt", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Terminal.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Terminal.prototype, "styleClass", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Terminal.prototype, "responseChange", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Terminal.prototype, "handler", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], Terminal.prototype, "response", null);
Terminal = __decorate([
    core_1.Component({
        selector: 'p-terminal',
        template: "\n        <div [ngClass]=\"'ui-terminal ui-widget ui-widget-content ui-corner-all'\" [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"focus(in)\">\n            <div *ngIf=\"welcomeMessage\">{{welcomeMessage}}</div>\n            <div class=\"ui-terminal-content\">\n                <div *ngFor=\"let command of commands\">\n                    <span>{{prompt}}</span>\n                    <span class=\"ui-terminal-command\">{{command.text}}</span>\n                    <div>{{command.response}}</div>\n                </div>\n            </div>\n            <div>\n                <span class=\"ui-terminal-content-prompt\">{{prompt}}</span>\n                <input #in type=\"text\" [(ngModel)]=\"command\" class=\"ui-terminal-input\" autocomplete=\"off\" (keydown)=\"handleCommand($event)\" autofocus>\n            </div>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler])
], Terminal);
exports.Terminal = Terminal;
var TerminalModule = (function () {
    function TerminalModule() {
    }
    return TerminalModule;
}());
TerminalModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, forms_1.FormsModule],
        exports: [Terminal],
        declarations: [Terminal]
    })
], TerminalModule);
exports.TerminalModule = TerminalModule;
//# sourceMappingURL=terminal.js.map

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var router_1 = __webpack_require__(5);
var TieredMenuSub = (function () {
    function TieredMenuSub(domHandler) {
        this.domHandler = domHandler;
    }
    TieredMenuSub.prototype.onItemMouseEnter = function (event, item, menuitem) {
        if (menuitem.disabled) {
            return;
        }
        this.activeItem = item;
        var nextElement = item.children[0].nextElementSibling;
        if (nextElement) {
            var sublist = nextElement.children[0];
            sublist.style.zIndex = String(++domhandler_1.DomHandler.zindex);
            sublist.style.top = '0px';
            sublist.style.left = this.domHandler.getOuterWidth(item.children[0]) + 'px';
        }
    };
    TieredMenuSub.prototype.onItemMouseLeave = function (event) {
        this.activeItem = null;
    };
    TieredMenuSub.prototype.itemClick = function (event, item) {
        if (item.disabled) {
            event.preventDefault();
            return true;
        }
        if (!item.url) {
            event.preventDefault();
        }
        if (item.command) {
            item.command({
                originalEvent: event,
                item: item
            });
        }
    };
    TieredMenuSub.prototype.listClick = function (event) {
        this.activeItem = null;
    };
    return TieredMenuSub;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], TieredMenuSub.prototype, "item", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], TieredMenuSub.prototype, "root", void 0);
TieredMenuSub = __decorate([
    core_1.Component({
        selector: 'p-tieredMenuSub',
        template: "\n        <ul [ngClass]=\"{'ui-helper-reset':root, 'ui-widget-content ui-corner-all ui-helper-clearfix ui-menu-child ui-shadow':!root}\" class=\"ui-menu-list\"\n            (click)=\"listClick($event)\">\n            <ng-template ngFor let-child [ngForOf]=\"(root ? item : item.items)\">\n                <li *ngIf=\"child.separator\" class=\"ui-menu-separator ui-widget-content\">\n                <li *ngIf=\"!child.separator\" #listItem [ngClass]=\"{'ui-menuitem ui-widget ui-corner-all':true,'ui-menu-parent':child.items,'ui-menuitem-active':listItem==activeItem}\"\n                    (mouseenter)=\"onItemMouseEnter($event, listItem, child)\" (mouseleave)=\"onItemMouseLeave($event)\">\n                    <a *ngIf=\"!child.routerLink\" [href]=\"child.url||'#'\" class=\"ui-menuitem-link ui-corner-all\" [attr.target]=\"child.target\"\n                        [ngClass]=\"{'ui-state-disabled':child.disabled}\" (click)=\"itemClick($event, child)\">\n                        <span class=\"ui-submenu-icon fa fa-fw fa-caret-right\" *ngIf=\"child.items\"></span>\n                        <span class=\"ui-menuitem-icon fa fa-fw\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                    </a>\n                    <a *ngIf=\"child.routerLink\" [routerLink]=\"child.routerLink\" [routerLinkActive]=\"'ui-state-active'\" [routerLinkActiveOptions]=\"child.routerLinkActiveOptions||{exact:false}\" [href]=\"child.url||'#'\" class=\"ui-menuitem-link ui-corner-all\" [attr.target]=\"child.target\"\n                        [ngClass]=\"{'ui-state-disabled':child.disabled}\" (click)=\"itemClick($event, child)\">\n                        <span class=\"ui-submenu-icon fa fa-fw fa-caret-right\" *ngIf=\"child.items\"></span>\n                        <span class=\"ui-menuitem-icon fa fa-fw\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                    </a>\n                    <p-tieredMenuSub class=\"ui-submenu\" [item]=\"child\" *ngIf=\"child.items\"></p-tieredMenuSub>\n                </li>\n            </ng-template>\n        </ul>\n    ",
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [domhandler_1.DomHandler])
], TieredMenuSub);
exports.TieredMenuSub = TieredMenuSub;
var TieredMenu = (function () {
    function TieredMenu(el, domHandler, renderer) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
    }
    TieredMenu.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.container = this.el.nativeElement.children[0];
        if (this.popup) {
            if (this.appendTo) {
                if (this.appendTo === 'body')
                    document.body.appendChild(this.container);
                else
                    this.domHandler.appendChild(this.container, this.appendTo);
            }
            this.documentClickListener = this.renderer.listen('document', 'click', function () {
                if (!_this.preventDocumentDefault) {
                    _this.hide();
                }
                _this.preventDocumentDefault = false;
            });
        }
    };
    TieredMenu.prototype.toggle = function (event) {
        if (this.container.offsetParent)
            this.hide();
        else
            this.show(event);
    };
    TieredMenu.prototype.show = function (event) {
        this.preventDocumentDefault = true;
        this.container.style.display = 'block';
        this.domHandler.absolutePosition(this.container, event.target);
        this.domHandler.fadeIn(this.container, 250);
    };
    TieredMenu.prototype.hide = function () {
        this.container.style.display = 'none';
    };
    TieredMenu.prototype.ngOnDestroy = function () {
        if (this.popup && this.documentClickListener) {
            this.documentClickListener();
            if (this.appendTo) {
                this.el.nativeElement.appendChild(this.container);
            }
        }
    };
    return TieredMenu;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], TieredMenu.prototype, "model", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], TieredMenu.prototype, "popup", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], TieredMenu.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TieredMenu.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], TieredMenu.prototype, "appendTo", void 0);
TieredMenu = __decorate([
    core_1.Component({
        selector: 'p-tieredMenu',
        template: "\n        <div [ngClass]=\"{'ui-tieredmenu ui-menu ui-widget ui-widget-content ui-corner-all ui-helper-clearfix':true,'ui-menu-dynamic ui-shadow':popup}\" \n            [class]=\"styleClass\" [ngStyle]=\"style\">\n            <p-tieredMenuSub [item]=\"model\" root=\"root\"></p-tieredMenuSub>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2])
], TieredMenu);
exports.TieredMenu = TieredMenu;
var TieredMenuModule = (function () {
    function TieredMenuModule() {
    }
    return TieredMenuModule;
}());
TieredMenuModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, router_1.RouterModule],
        exports: [TieredMenu, router_1.RouterModule],
        declarations: [TieredMenu, TieredMenuSub]
    })
], TieredMenuModule);
exports.TieredMenuModule = TieredMenuModule;
//# sourceMappingURL=tieredmenu.js.map

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var forms_1 = __webpack_require__(6);
exports.TOGGLEBUTTON_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return ToggleButton; }),
    multi: true
};
var ToggleButton = (function () {
    function ToggleButton() {
        this.onLabel = 'Yes';
        this.offLabel = 'No';
        this.onChange = new core_1.EventEmitter();
        this.checked = false;
        this.focus = false;
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    ToggleButton.prototype.ngAfterViewInit = function () {
        this.checkbox = this.checkboxViewChild.nativeElement;
    };
    ToggleButton.prototype.getIconClass = function () {
        var baseClass = 'ui-button-icon-left fa fa-fw';
        return baseClass + ' ' + (this.checked ? this.onIcon : this.offIcon);
    };
    ToggleButton.prototype.toggle = function (event) {
        if (!this.disabled) {
            this.checked = !this.checked;
            this.onModelChange(this.checked);
            this.onModelTouched();
            this.onChange.emit({
                originalEvent: event,
                checked: this.checked
            });
            this.checkbox.focus();
        }
    };
    ToggleButton.prototype.onFocus = function () {
        this.focus = true;
    };
    ToggleButton.prototype.onBlur = function () {
        this.focus = false;
        this.onModelTouched();
    };
    ToggleButton.prototype.writeValue = function (value) {
        this.checked = value;
    };
    ToggleButton.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    ToggleButton.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    ToggleButton.prototype.setDisabledState = function (val) {
        this.disabled = val;
    };
    Object.defineProperty(ToggleButton.prototype, "hasOnLabel", {
        get: function () {
            return this.onLabel && this.onLabel.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToggleButton.prototype, "hasOffLabel", {
        get: function () {
            return this.onLabel && this.onLabel.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    return ToggleButton;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ToggleButton.prototype, "onLabel", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ToggleButton.prototype, "offLabel", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ToggleButton.prototype, "onIcon", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ToggleButton.prototype, "offIcon", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ToggleButton.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ToggleButton.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ToggleButton.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ToggleButton.prototype, "inputId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], ToggleButton.prototype, "tabindex", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ToggleButton.prototype, "onChange", void 0);
__decorate([
    core_1.ViewChild('checkbox'),
    __metadata("design:type", core_1.ElementRef)
], ToggleButton.prototype, "checkboxViewChild", void 0);
ToggleButton = __decorate([
    core_1.Component({
        selector: 'p-toggleButton',
        template: "\n        <div [ngClass]=\"{'ui-button ui-togglebutton ui-widget ui-state-default ui-corner-all': true, 'ui-button-text-only': (!onIcon&&!offIcon), \n                'ui-button-text-icon-left': (onIcon&&offIcon&&hasOnLabel&&hasOffLabel), 'ui-button-icon-only': (onIcon&&offIcon&&!hasOnLabel&&!hasOffLabel),\n                'ui-state-active': checked,'ui-state-focus':focus,'ui-state-disabled':disabled}\" [ngStyle]=\"style\" [class]=\"styleClass\" \n                (click)=\"toggle($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #checkbox type=\"checkbox\" [attr.id]=\"inputId\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [attr.tabindex]=\"tabindex\">\n            </div>\n            <span *ngIf=\"onIcon||offIcon\" [class]=\"getIconClass()\"></span>\n            <span class=\"ui-button-text ui-unselectable-text\">{{checked ? hasOnLabel ? onLabel : 'ui-btn' : hasOffLabel ? offLabel : 'ui-btn'}}</span>\n        </div>\n    ",
        providers: [exports.TOGGLEBUTTON_VALUE_ACCESSOR]
    })
], ToggleButton);
exports.ToggleButton = ToggleButton;
var ToggleButtonModule = (function () {
    function ToggleButtonModule() {
    }
    return ToggleButtonModule;
}());
ToggleButtonModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [ToggleButton],
        declarations: [ToggleButton]
    })
], ToggleButtonModule);
exports.ToggleButtonModule = ToggleButtonModule;
//# sourceMappingURL=togglebutton.js.map

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var Toolbar = (function () {
    function Toolbar() {
    }
    return Toolbar;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Toolbar.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Toolbar.prototype, "styleClass", void 0);
Toolbar = __decorate([
    core_1.Component({
        selector: 'p-toolbar',
        template: "\n        <div [ngClass]=\"'ui-toolbar ui-widget ui-widget-header ui-corner-all ui-helper-clearfix'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <ng-content></ng-content>\n        </div>\n    "
    })
], Toolbar);
exports.Toolbar = Toolbar;
var ToolbarModule = (function () {
    function ToolbarModule() {
    }
    return ToolbarModule;
}());
ToolbarModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Toolbar],
        declarations: [Toolbar]
    })
], ToolbarModule);
exports.ToolbarModule = ToolbarModule;
//# sourceMappingURL=toolbar.js.map

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var domhandler_1 = __webpack_require__(4);
var Tooltip = (function () {
    function Tooltip(el, domHandler, renderer) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
        this.tooltipPosition = 'right';
        this.tooltipEvent = 'hover';
        this.appendTo = 'body';
        this.escape = true;
    }
    Tooltip.prototype.onMouseEnter = function (e) {
        if (this.tooltipEvent === 'hover') {
            this.activate();
        }
    };
    Tooltip.prototype.onMouseLeave = function (e) {
        if (this.tooltipEvent === 'hover') {
            this.deactivate();
        }
    };
    Tooltip.prototype.onFocus = function (e) {
        if (this.tooltipEvent === 'focus') {
            this.activate();
        }
    };
    Tooltip.prototype.onBlur = function (e) {
        if (this.tooltipEvent === 'focus') {
            this.deactivate();
        }
    };
    Tooltip.prototype.activate = function () {
        var _this = this;
        this.active = true;
        if (this.hideTimeout) {
            clearTimeout(this.hideTimeout);
        }
        if (this.showDelay)
            this.showTimeout = setTimeout(function () { _this.show(); }, this.showDelay);
        else
            this.show();
    };
    Tooltip.prototype.deactivate = function () {
        var _this = this;
        this.active = false;
        if (this.showTimeout) {
            clearTimeout(this.showTimeout);
        }
        if (this.hideDelay)
            this.hideTimeout = setTimeout(function () { _this.hide(); }, this.hideDelay);
        else
            this.hide();
    };
    Object.defineProperty(Tooltip.prototype, "text", {
        get: function () {
            return this._text;
        },
        set: function (text) {
            this._text = text;
            if (this.active) {
                if (this._text) {
                    if (this.container && this.container.offsetParent)
                        this.updateText();
                    else
                        this.show();
                }
                else {
                    this.hide();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Tooltip.prototype.create = function () {
        this.container = document.createElement('div');
        var tooltipArrow = document.createElement('div');
        tooltipArrow.className = 'ui-tooltip-arrow';
        this.container.appendChild(tooltipArrow);
        this.tooltipText = document.createElement('div');
        this.tooltipText.className = 'ui-tooltip-text ui-shadow ui-corner-all';
        this.updateText();
        if (this.positionStyle) {
            this.container.style.position = this.positionStyle;
        }
        this.container.appendChild(this.tooltipText);
        if (this.appendTo === 'body')
            document.body.appendChild(this.container);
        else if (this.appendTo === 'target')
            this.domHandler.appendChild(this.container, this.el.nativeElement);
        else
            this.domHandler.appendChild(this.container, this.appendTo);
        this.container.style.display = 'inline-block';
    };
    Tooltip.prototype.show = function () {
        if (!this.text || this.disabled) {
            return;
        }
        this.create();
        this.align();
        if (this.tooltipStyleClass) {
            this.container.className = this.container.className + ' ' + this.tooltipStyleClass;
        }
        this.domHandler.fadeIn(this.container, 250);
        this.container.style.zIndex = ++domhandler_1.DomHandler.zindex;
        this.bindDocumentResizeListener();
    };
    Tooltip.prototype.hide = function () {
        this.destroy();
    };
    Tooltip.prototype.updateText = function () {
        if (this.escape) {
            this.tooltipText.innerHTML = null;
            this.tooltipText.appendChild(document.createTextNode(this._text));
        }
        else {
            this.tooltipText.innerHTML = this._text;
        }
    };
    Tooltip.prototype.align = function () {
        var position = this.tooltipPosition;
        switch (position) {
            case 'top':
                this.alignTop();
                if (this.isOutOfBounds()) {
                    this.alignBottom();
                }
                break;
            case 'bottom':
                this.alignBottom();
                if (this.isOutOfBounds()) {
                    this.alignTop();
                }
                break;
            case 'left':
                this.alignLeft();
                if (this.isOutOfBounds()) {
                    this.alignRight();
                    if (this.isOutOfBounds()) {
                        this.alignTop();
                        if (this.isOutOfBounds()) {
                            this.alignBottom();
                        }
                    }
                }
                break;
            case 'right':
                this.alignRight();
                if (this.isOutOfBounds()) {
                    this.alignLeft();
                    if (this.isOutOfBounds()) {
                        this.alignTop();
                        if (this.isOutOfBounds()) {
                            this.alignBottom();
                        }
                    }
                }
                break;
        }
    };
    Tooltip.prototype.getHostOffset = function () {
        var offset = this.el.nativeElement.getBoundingClientRect();
        var targetLeft = offset.left + this.domHandler.getWindowScrollLeft();
        var targetTop = offset.top + this.domHandler.getWindowScrollTop();
        return { left: targetLeft, top: targetTop };
    };
    Tooltip.prototype.alignRight = function () {
        this.preAlign();
        this.container.className = 'ui-tooltip ui-widget ui-tooltip-right';
        var hostOffset = this.getHostOffset();
        var left = hostOffset.left + this.domHandler.getOuterWidth(this.el.nativeElement);
        var top = hostOffset.top + (this.domHandler.getOuterHeight(this.el.nativeElement) - this.domHandler.getOuterHeight(this.container)) / 2;
        this.container.style.left = left + 'px';
        this.container.style.top = top + 'px';
    };
    Tooltip.prototype.alignLeft = function () {
        this.preAlign();
        this.container.className = 'ui-tooltip ui-widget ui-tooltip-left';
        var hostOffset = this.getHostOffset();
        var left = hostOffset.left - this.domHandler.getOuterWidth(this.container);
        var top = hostOffset.top + (this.domHandler.getOuterHeight(this.el.nativeElement) - this.domHandler.getOuterHeight(this.container)) / 2;
        this.container.style.left = left + 'px';
        this.container.style.top = top + 'px';
    };
    Tooltip.prototype.alignTop = function () {
        this.preAlign();
        this.container.className = 'ui-tooltip ui-widget ui-tooltip-top';
        var hostOffset = this.getHostOffset();
        var left = hostOffset.left + (this.domHandler.getOuterWidth(this.el.nativeElement) - this.domHandler.getOuterWidth(this.container)) / 2;
        var top = hostOffset.top - this.domHandler.getOuterHeight(this.container);
        this.container.style.left = left + 'px';
        this.container.style.top = top + 'px';
    };
    Tooltip.prototype.alignBottom = function () {
        this.preAlign();
        this.container.className = 'ui-tooltip ui-widget ui-tooltip-bottom';
        var hostOffset = this.getHostOffset();
        var left = hostOffset.left + (this.domHandler.getOuterWidth(this.el.nativeElement) - this.domHandler.getOuterWidth(this.container)) / 2;
        var top = hostOffset.top + this.domHandler.getOuterHeight(this.el.nativeElement);
        this.container.style.left = left + 'px';
        this.container.style.top = top + 'px';
    };
    Tooltip.prototype.preAlign = function () {
        this.container.style.left = -999 + 'px';
        this.container.style.top = -999 + 'px';
    };
    Tooltip.prototype.isOutOfBounds = function () {
        var offset = this.container.getBoundingClientRect();
        var targetTop = offset.top;
        var targetLeft = offset.left;
        var width = this.domHandler.getOuterWidth(this.container);
        var height = this.domHandler.getOuterHeight(this.container);
        var viewport = this.domHandler.getViewport();
        return (targetLeft + width > viewport.width) || (targetLeft < 0) || (targetTop < 0) || (targetTop + height > viewport.height);
    };
    Tooltip.prototype.bindDocumentResizeListener = function () {
        var _this = this;
        this.documentResizeListener = this.renderer.listen('window', 'resize', function (event) {
            _this.hide();
        });
    };
    Tooltip.prototype.unbindDocumentResizeListener = function () {
        if (this.documentResizeListener) {
            this.documentResizeListener();
            this.documentResizeListener = null;
        }
    };
    Tooltip.prototype.destroy = function () {
        this.unbindDocumentResizeListener();
        if (this.container && this.container.parentElement) {
            if (this.appendTo === 'body')
                document.body.removeChild(this.container);
            else if (this.appendTo === 'target')
                this.el.nativeElement.removeChild(this.container);
            else
                this.domHandler.removeChild(this.container, this.appendTo);
        }
        this.container = null;
    };
    Tooltip.prototype.ngOnDestroy = function () {
        this.destroy();
    };
    return Tooltip;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Tooltip.prototype, "tooltipPosition", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Tooltip.prototype, "tooltipEvent", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Tooltip.prototype, "appendTo", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Tooltip.prototype, "positionStyle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Tooltip.prototype, "tooltipStyleClass", void 0);
__decorate([
    core_1.Input("tooltipDisabled"),
    __metadata("design:type", Boolean)
], Tooltip.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Tooltip.prototype, "escape", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Tooltip.prototype, "showDelay", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], Tooltip.prototype, "hideDelay", void 0);
__decorate([
    core_1.HostListener('mouseenter', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Event]),
    __metadata("design:returntype", void 0)
], Tooltip.prototype, "onMouseEnter", null);
__decorate([
    core_1.HostListener('mouseleave', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Event]),
    __metadata("design:returntype", void 0)
], Tooltip.prototype, "onMouseLeave", null);
__decorate([
    core_1.HostListener('focus', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Event]),
    __metadata("design:returntype", void 0)
], Tooltip.prototype, "onFocus", null);
__decorate([
    core_1.HostListener('blur', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Event]),
    __metadata("design:returntype", void 0)
], Tooltip.prototype, "onBlur", null);
__decorate([
    core_1.Input('pTooltip'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], Tooltip.prototype, "text", null);
Tooltip = __decorate([
    core_1.Directive({
        selector: '[pTooltip]',
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2])
], Tooltip);
exports.Tooltip = Tooltip;
var TooltipModule = (function () {
    function TooltipModule() {
    }
    return TooltipModule;
}());
TooltipModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Tooltip],
        declarations: [Tooltip]
    })
], TooltipModule);
exports.TooltipModule = TooltipModule;
//# sourceMappingURL=tooltip.js.map

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var core_2 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var shared_1 = __webpack_require__(7);
var shared_2 = __webpack_require__(7);
var treedragdropservice_1 = __webpack_require__(179);
var TreeNodeTemplateLoader = (function () {
    function TreeNodeTemplateLoader(viewContainer) {
        this.viewContainer = viewContainer;
    }
    TreeNodeTemplateLoader.prototype.ngOnInit = function () {
        this.view = this.viewContainer.createEmbeddedView(this.template, {
            '\$implicit': this.node
        });
    };
    TreeNodeTemplateLoader.prototype.ngOnDestroy = function () {
        this.view.destroy();
    };
    return TreeNodeTemplateLoader;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], TreeNodeTemplateLoader.prototype, "node", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", core_1.TemplateRef)
], TreeNodeTemplateLoader.prototype, "template", void 0);
TreeNodeTemplateLoader = __decorate([
    core_1.Component({
        selector: 'p-treeNodeTemplateLoader',
        template: ""
    }),
    __metadata("design:paramtypes", [core_1.ViewContainerRef])
], TreeNodeTemplateLoader);
exports.TreeNodeTemplateLoader = TreeNodeTemplateLoader;
var UITreeNode = UITreeNode_1 = (function () {
    function UITreeNode(tree) {
        this.tree = tree;
    }
    UITreeNode.prototype.ngOnInit = function () {
        this.node.parent = this.parentNode;
    };
    UITreeNode.prototype.getIcon = function () {
        var icon;
        if (this.node.icon)
            icon = this.node.icon;
        else
            icon = this.node.expanded && this.node.children && this.node.children.length ? this.node.expandedIcon : this.node.collapsedIcon;
        return UITreeNode_1.ICON_CLASS + ' ' + icon;
    };
    UITreeNode.prototype.isLeaf = function () {
        return this.node.leaf == false ? false : !(this.node.children && this.node.children.length);
    };
    UITreeNode.prototype.toggle = function (event) {
        if (this.node.expanded)
            this.tree.onNodeCollapse.emit({ originalEvent: event, node: this.node });
        else
            this.tree.onNodeExpand.emit({ originalEvent: event, node: this.node });
        this.node.expanded = !this.node.expanded;
    };
    UITreeNode.prototype.onNodeClick = function (event) {
        this.tree.onNodeClick(event, this.node);
    };
    UITreeNode.prototype.onNodeTouchEnd = function () {
        this.tree.onNodeTouchEnd();
    };
    UITreeNode.prototype.onNodeRightClick = function (event) {
        this.tree.onNodeRightClick(event, this.node);
    };
    UITreeNode.prototype.isSelected = function () {
        return this.tree.isSelected(this.node);
    };
    UITreeNode.prototype.onDropPoint = function (event, position) {
        event.preventDefault();
        var dragNode = this.tree.dragNode;
        var dragNodeIndex = this.tree.dragNodeIndex;
        var dragNodeScope = this.tree.dragNodeScope;
        var isValidDropPointIndex = this.tree.dragNodeTree === this.tree ? (position === 1 || dragNodeIndex !== this.index - 1) : true;
        if (this.tree.allowDrop(dragNode, this.node, dragNodeScope) && isValidDropPointIndex) {
            var newNodeList = this.node.parent ? this.node.parent.children : this.tree.value;
            this.tree.dragNodeSubNodes.splice(dragNodeIndex, 1);
            if (position < 0) {
                var dropIndex = (this.tree.dragNodeSubNodes === newNodeList) ? ((this.tree.dragNodeIndex > this.index) ? this.index : this.index - 1) : this.index;
                newNodeList.splice(dropIndex, 0, dragNode);
            }
            else {
                newNodeList.push(dragNode);
            }
            this.tree.dragDropService.stopDrag({
                node: dragNode,
                subNodes: this.node.parent ? this.node.parent.children : this.tree.value,
                index: dragNodeIndex
            });
            this.tree.onNodeDrop.emit({
                originalEvent: event,
                dragNode: dragNode
            });
        }
        this.draghoverPrev = false;
        this.draghoverNext = false;
    };
    UITreeNode.prototype.onDropPointDragOver = function (event) {
        event.dataTransfer.dropEffect = 'move';
        event.preventDefault();
    };
    UITreeNode.prototype.onDropPointDragEnter = function (event, position) {
        if (this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {
            if (position < 0)
                this.draghoverPrev = true;
            else
                this.draghoverNext = true;
        }
    };
    UITreeNode.prototype.onDropPointDragLeave = function (event) {
        this.draghoverPrev = false;
        this.draghoverNext = false;
    };
    UITreeNode.prototype.onDragStart = function (event) {
        if (this.tree.draggableNodes && this.node.draggable !== false) {
            event.dataTransfer.setData("text", "data");
            this.tree.dragDropService.startDrag({
                tree: this,
                node: this.node,
                subNodes: this.node.parent ? this.node.parent.children : this.tree.value,
                index: this.index,
                scope: this.tree.draggableScope
            });
        }
        else {
            event.preventDefault();
        }
    };
    UITreeNode.prototype.onDragStop = function (event) {
        this.tree.dragDropService.stopDrag({
            node: this.node,
            subNodes: this.node.parent ? this.node.parent.children : this.tree.value,
            index: this.index
        });
    };
    UITreeNode.prototype.onDropNodeDragOver = function (event) {
        event.dataTransfer.dropEffect = 'move';
        if (this.tree.droppableNodes) {
            event.preventDefault();
            event.stopPropagation();
        }
    };
    UITreeNode.prototype.onDropNode = function (event) {
        if (this.tree.droppableNodes && this.node.droppable !== false) {
            event.preventDefault();
            event.stopPropagation();
            var dragNode = this.tree.dragNode;
            if (this.tree.allowDrop(dragNode, this.node, this.tree.dragNodeScope)) {
                var dragNodeIndex = this.tree.dragNodeIndex;
                this.tree.dragNodeSubNodes.splice(dragNodeIndex, 1);
                if (this.node.children)
                    this.node.children.push(dragNode);
                else
                    this.node.children = [dragNode];
                this.tree.dragDropService.stopDrag({
                    node: dragNode,
                    subNodes: this.node.parent ? this.node.parent.children : this.tree.value,
                    index: this.tree.dragNodeIndex
                });
                this.tree.onNodeDrop.emit({
                    originalEvent: event,
                    dragNode: dragNode,
                    dropNode: this.node
                });
            }
        }
        this.draghoverNode = false;
    };
    UITreeNode.prototype.onDropNodeDragEnter = function (event) {
        if (this.tree.droppableNodes && this.node.droppable !== false && this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {
            this.draghoverNode = true;
        }
    };
    UITreeNode.prototype.onDropNodeDragLeave = function (event) {
        if (this.tree.droppableNodes) {
            var rect = event.currentTarget.getBoundingClientRect();
            if (event.x > rect.left + rect.width || event.x < rect.left || event.y >= Math.floor(rect.top + rect.height) || event.y < rect.top) {
                this.draghoverNode = false;
            }
        }
    };
    return UITreeNode;
}());
UITreeNode.ICON_CLASS = 'ui-treenode-icon fa fa-fw';
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], UITreeNode.prototype, "node", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], UITreeNode.prototype, "parentNode", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], UITreeNode.prototype, "root", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], UITreeNode.prototype, "index", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], UITreeNode.prototype, "firstChild", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], UITreeNode.prototype, "lastChild", void 0);
UITreeNode = UITreeNode_1 = __decorate([
    core_1.Component({
        selector: 'p-treeNode',
        template: "\n        <ng-template [ngIf]=\"node\">\n            <li *ngIf=\"tree.droppableNodes\" class=\"ui-treenode-droppoint\" [ngClass]=\"{'ui-treenode-droppoint-active ui-state-highlight':draghoverPrev}\"\n            (drop)=\"onDropPoint($event,-1)\" (dragover)=\"onDropPointDragOver($event)\" (dragenter)=\"onDropPointDragEnter($event,-1)\" (dragleave)=\"onDropPointDragLeave($event)\"></li>\n            <li class=\"ui-treenode {{node.styleClass}}\" *ngIf=\"!tree.horizontal\" [ngClass]=\"{'ui-treenode-leaf': isLeaf()}\">\n                <div class=\"ui-treenode-content\" (click)=\"onNodeClick($event)\" (contextmenu)=\"onNodeRightClick($event)\" (touchend)=\"onNodeTouchEnd()\"\n                    (drop)=\"onDropNode($event)\" (dragover)=\"onDropNodeDragOver($event)\" (dragenter)=\"onDropNodeDragEnter($event)\" (dragleave)=\"onDropNodeDragLeave($event)\"\n                    [ngClass]=\"{'ui-treenode-selectable':tree.selectionMode && node.selectable !== false,'ui-treenode-dragover':draghoverNode}\" [draggable]=\"tree.draggableNodes\" (dragstart)=\"onDragStart($event)\" (dragend)=\"onDragStop($event)\">\n                    <span class=\"ui-tree-toggler  fa fa-fw\" [ngClass]=\"{'fa-caret-right':!node.expanded,'fa-caret-down':node.expanded}\"\n                            (click)=\"toggle($event)\"></span\n                    ><div class=\"ui-chkbox\" *ngIf=\"tree.selectionMode == 'checkbox'\"><div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\">\n                        <span class=\"ui-chkbox-icon ui-clickable fa\" \n                            [ngClass]=\"{'fa-check':isSelected(),'fa-minus':node.partialSelected}\"></span></div></div\n                    ><span [class]=\"getIcon()\" *ngIf=\"node.icon||node.expandedIcon||node.collapsedIcon\"></span\n                    ><span class=\"ui-treenode-label ui-corner-all\" \n                        [ngClass]=\"{'ui-state-highlight':isSelected()}\">\n                            <span *ngIf=\"!tree.getTemplateForNode(node)\">{{node.label}}</span>\n                            <span *ngIf=\"tree.getTemplateForNode(node)\">\n                                <p-treeNodeTemplateLoader [node]=\"node\" [template]=\"tree.getTemplateForNode(node)\"></p-treeNodeTemplateLoader>\n                            </span>\n                    </span>\n                </div>\n                <ul class=\"ui-treenode-children\" style=\"display: none;\" *ngIf=\"node.children && node.expanded\" [style.display]=\"node.expanded ? 'block' : 'none'\">\n                    <p-treeNode *ngFor=\"let childNode of node.children;let firstChild=first;let lastChild=last; let index=index\" [node]=\"childNode\" [parentNode]=\"node\"\n                        [firstChild]=\"firstChild\" [lastChild]=\"lastChild\" [index]=\"index\"></p-treeNode>\n                </ul>\n            </li>\n            <li *ngIf=\"tree.droppableNodes&&lastChild\" class=\"ui-treenode-droppoint\" [ngClass]=\"{'ui-treenode-droppoint-active ui-state-highlight':draghoverNext}\"\n            (drop)=\"onDropPoint($event,1)\" (dragover)=\"onDropPointDragOver($event)\" (dragenter)=\"onDropPointDragEnter($event,1)\" (dragleave)=\"onDropPointDragLeave($event)\"></li>\n            <table *ngIf=\"tree.horizontal\" [class]=\"node.styleClass\">\n                <tbody>\n                    <tr>\n                        <td class=\"ui-treenode-connector\" *ngIf=\"!root\">\n                            <table class=\"ui-treenode-connector-table\">\n                                <tbody>\n                                    <tr>\n                                        <td [ngClass]=\"{'ui-treenode-connector-line':!firstChild}\"></td>\n                                    </tr>\n                                    <tr>\n                                        <td [ngClass]=\"{'ui-treenode-connector-line':!lastChild}\"></td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </td>\n                        <td class=\"ui-treenode\" [ngClass]=\"{'ui-treenode-collapsed':!node.expanded}\">\n                            <div class=\"ui-treenode-content ui-state-default ui-corner-all\" \n                                [ngClass]=\"{'ui-treenode-selectable':tree.selectionMode,'ui-state-highlight':isSelected()}\" (click)=\"onNodeClick($event)\" (contextmenu)=\"onNodeRightClick($event)\"\n                                (touchend)=\"onNodeTouchEnd()\">\n                                <span class=\"ui-tree-toggler fa fa-fw\" [ngClass]=\"{'fa-plus':!node.expanded,'fa-minus':node.expanded}\" *ngIf=\"!isLeaf()\"\n                                        (click)=\"toggle($event)\"></span\n                                ><span [class]=\"getIcon()\" *ngIf=\"node.icon||node.expandedIcon||node.collapsedIcon\"></span\n                                ><span class=\"ui-treenode-label ui-corner-all\">\n                                        <span *ngIf=\"!tree.getTemplateForNode(node)\">{{node.label}}</span>\n                                        <span *ngIf=\"tree.getTemplateForNode(node)\">\n                                            <p-treeNodeTemplateLoader [node]=\"node\" [template]=\"tree.getTemplateForNode(node)\"></p-treeNodeTemplateLoader>\n                                        </span>\n                                </span>\n                            </div>\n                        </td>\n                        <td class=\"ui-treenode-children-container\" *ngIf=\"node.children && node.expanded\" [style.display]=\"node.expanded ? 'table-cell' : 'none'\">\n                            <div class=\"ui-treenode-children\">\n                                <p-treeNode *ngFor=\"let childNode of node.children;let firstChild=first;let lastChild=last;\" [node]=\"childNode\" \n                                        [firstChild]=\"firstChild\" [lastChild]=\"lastChild\"></p-treeNode>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </ng-template>\n    "
    }),
    __param(0, core_1.Inject(core_1.forwardRef(function () { return Tree; }))),
    __metadata("design:paramtypes", [Tree])
], UITreeNode);
exports.UITreeNode = UITreeNode;
var Tree = (function () {
    function Tree(dragDropService) {
        this.dragDropService = dragDropService;
        this.selectionChange = new core_1.EventEmitter();
        this.onNodeSelect = new core_1.EventEmitter();
        this.onNodeUnselect = new core_1.EventEmitter();
        this.onNodeExpand = new core_1.EventEmitter();
        this.onNodeCollapse = new core_1.EventEmitter();
        this.onNodeContextMenuSelect = new core_1.EventEmitter();
        this.onNodeDrop = new core_1.EventEmitter();
        this.layout = 'vertical';
        this.metaKeySelection = true;
        this.propagateSelectionUp = true;
        this.propagateSelectionDown = true;
    }
    Tree.prototype.ngOnInit = function () {
        var _this = this;
        if (this.droppableNodes) {
            this.dragStartSubscription = this.dragDropService.dragStart$.subscribe(function (event) {
                _this.dragNodeTree = event.tree;
                _this.dragNode = event.node;
                _this.dragNodeSubNodes = event.subNodes;
                _this.dragNodeIndex = event.index;
                _this.dragNodeScope = event.scope;
            });
            this.dragStopSubscription = this.dragDropService.dragStop$.subscribe(function (event) {
                _this.dragNodeTree = null;
                _this.dragNode = null;
                _this.dragNodeSubNodes = null;
                _this.dragNodeIndex = null;
                _this.dragNodeScope = null;
                _this.dragHover = false;
            });
        }
    };
    Object.defineProperty(Tree.prototype, "horizontal", {
        get: function () {
            return this.layout == 'horizontal';
        },
        enumerable: true,
        configurable: true
    });
    Tree.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.templates.length) {
            this.templateMap = {};
        }
        this.templates.forEach(function (item) {
            _this.templateMap[item.name] = item.template;
        });
    };
    Tree.prototype.onNodeClick = function (event, node) {
        var eventTarget = event.target;
        if (eventTarget.className && eventTarget.className.indexOf('ui-tree-toggler') === 0) {
            return;
        }
        else if (this.selectionMode) {
            if (node.selectable === false) {
                return;
            }
            var index_1 = this.findIndexInSelection(node);
            var selected = (index_1 >= 0);
            if (this.isCheckboxSelectionMode()) {
                if (selected) {
                    if (this.propagateSelectionDown)
                        this.propagateDown(node, false);
                    else
                        this.selection = this.selection.filter(function (val, i) { return i != index_1; });
                    if (this.propagateSelectionUp && node.parent) {
                        this.propagateUp(node.parent, false);
                    }
                    this.selectionChange.emit(this.selection);
                    this.onNodeUnselect.emit({ originalEvent: event, node: node });
                }
                else {
                    if (this.propagateSelectionDown)
                        this.propagateDown(node, true);
                    else
                        this.selection = (this.selection || []).concat([node]);
                    if (this.propagateSelectionUp && node.parent) {
                        this.propagateUp(node.parent, true);
                    }
                    this.selectionChange.emit(this.selection);
                    this.onNodeSelect.emit({ originalEvent: event, node: node });
                }
            }
            else {
                var metaSelection = this.nodeTouched ? false : this.metaKeySelection;
                if (metaSelection) {
                    var metaKey = (event.metaKey || event.ctrlKey);
                    if (selected && metaKey) {
                        if (this.isSingleSelectionMode()) {
                            this.selectionChange.emit(null);
                        }
                        else {
                            this.selection = this.selection.filter(function (val, i) { return i != index_1; });
                            this.selectionChange.emit(this.selection);
                        }
                        this.onNodeUnselect.emit({ originalEvent: event, node: node });
                    }
                    else {
                        if (this.isSingleSelectionMode()) {
                            this.selectionChange.emit(node);
                        }
                        else if (this.isMultipleSelectionMode()) {
                            this.selection = (!metaKey) ? [] : this.selection || [];
                            this.selection = this.selection.concat([node]);
                            this.selectionChange.emit(this.selection);
                        }
                        this.onNodeSelect.emit({ originalEvent: event, node: node });
                    }
                }
                else {
                    if (this.isSingleSelectionMode()) {
                        if (selected) {
                            this.selection = null;
                            this.onNodeUnselect.emit({ originalEvent: event, node: node });
                        }
                        else {
                            this.selection = node;
                            this.onNodeSelect.emit({ originalEvent: event, node: node });
                        }
                    }
                    else {
                        if (selected) {
                            this.selection = this.selection.filter(function (val, i) { return i != index_1; });
                            this.onNodeUnselect.emit({ originalEvent: event, node: node });
                        }
                        else {
                            this.selection = (this.selection || []).concat([node]);
                            this.onNodeSelect.emit({ originalEvent: event, node: node });
                        }
                    }
                    this.selectionChange.emit(this.selection);
                }
            }
        }
        this.nodeTouched = false;
    };
    Tree.prototype.onNodeTouchEnd = function () {
        this.nodeTouched = true;
    };
    Tree.prototype.onNodeRightClick = function (event, node) {
        if (this.contextMenu) {
            var eventTarget = event.target;
            if (eventTarget.className && eventTarget.className.indexOf('ui-tree-toggler') === 0) {
                return;
            }
            else {
                var index = this.findIndexInSelection(node);
                var selected = (index >= 0);
                if (!selected) {
                    if (this.isSingleSelectionMode())
                        this.selectionChange.emit(node);
                    else
                        this.selectionChange.emit([node]);
                }
                this.contextMenu.show(event);
                this.onNodeContextMenuSelect.emit({ originalEvent: event, node: node });
            }
        }
    };
    Tree.prototype.findIndexInSelection = function (node) {
        var index = -1;
        if (this.selectionMode && this.selection) {
            if (this.isSingleSelectionMode()) {
                index = (this.selection == node) ? 0 : -1;
            }
            else {
                for (var i = 0; i < this.selection.length; i++) {
                    if (this.selection[i] == node) {
                        index = i;
                        break;
                    }
                }
            }
        }
        return index;
    };
    Tree.prototype.propagateUp = function (node, select) {
        if (node.children && node.children.length) {
            var selectedCount = 0;
            var childPartialSelected = false;
            for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
                var child = _a[_i];
                if (this.isSelected(child)) {
                    selectedCount++;
                }
                else if (child.partialSelected) {
                    childPartialSelected = true;
                }
            }
            if (select && selectedCount == node.children.length) {
                this.selection = (this.selection || []).concat([node]);
                node.partialSelected = false;
            }
            else {
                if (!select) {
                    var index_2 = this.findIndexInSelection(node);
                    if (index_2 >= 0) {
                        this.selection = this.selection.filter(function (val, i) { return i != index_2; });
                    }
                }
                if (childPartialSelected || selectedCount > 0 && selectedCount != node.children.length)
                    node.partialSelected = true;
                else
                    node.partialSelected = false;
            }
        }
        var parent = node.parent;
        if (parent) {
            this.propagateUp(parent, select);
        }
    };
    Tree.prototype.propagateDown = function (node, select) {
        var index = this.findIndexInSelection(node);
        if (select && index == -1) {
            this.selection = (this.selection || []).concat([node]);
        }
        else if (!select && index > -1) {
            this.selection = this.selection.filter(function (val, i) { return i != index; });
        }
        node.partialSelected = false;
        if (node.children && node.children.length) {
            for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
                var child = _a[_i];
                this.propagateDown(child, select);
            }
        }
    };
    Tree.prototype.isSelected = function (node) {
        return this.findIndexInSelection(node) != -1;
    };
    Tree.prototype.isSingleSelectionMode = function () {
        return this.selectionMode && this.selectionMode == 'single';
    };
    Tree.prototype.isMultipleSelectionMode = function () {
        return this.selectionMode && this.selectionMode == 'multiple';
    };
    Tree.prototype.isCheckboxSelectionMode = function () {
        return this.selectionMode && this.selectionMode == 'checkbox';
    };
    Tree.prototype.getTemplateForNode = function (node) {
        if (this.templateMap)
            return node.type ? this.templateMap[node.type] : this.templateMap['default'];
        else
            return null;
    };
    Tree.prototype.onDragOver = function (event) {
        if (this.droppableNodes && (!this.value || this.value.length === 0)) {
            event.dataTransfer.dropEffect = 'move';
            event.preventDefault();
        }
    };
    Tree.prototype.onDrop = function (event) {
        if (this.droppableNodes && (!this.value || this.value.length === 0)) {
            event.preventDefault();
            var dragNode = this.dragNode;
            if (this.allowDrop(dragNode, null, this.dragNodeScope)) {
                var dragNodeIndex = this.dragNodeIndex;
                this.dragNodeSubNodes.splice(dragNodeIndex, 1);
                this.value = this.value || [];
                this.value.push(dragNode);
                this.dragDropService.stopDrag({
                    node: dragNode
                });
            }
        }
    };
    Tree.prototype.onDragEnter = function (event) {
        if (this.droppableNodes && this.allowDrop(this.dragNode, null, this.dragNodeScope)) {
            this.dragHover = true;
        }
    };
    Tree.prototype.onDragLeave = function (event) {
        if (this.droppableNodes) {
            var rect = event.currentTarget.getBoundingClientRect();
            if (event.x > rect.left + rect.width || event.x < rect.left || event.y > rect.top + rect.height || event.y < rect.top) {
                this.dragHover = false;
            }
        }
    };
    Tree.prototype.allowDrop = function (dragNode, dropNode, dragNodeScope) {
        if (this.isValidDragScope(dragNodeScope)) {
            var allow = true;
            if (dropNode) {
                if (dragNode === dropNode) {
                    allow = false;
                }
                else {
                    var parent_1 = dropNode.parent;
                    while (parent_1 != null) {
                        if (parent_1 === dragNode) {
                            allow = false;
                            break;
                        }
                        parent_1 = parent_1.parent;
                    }
                }
            }
            return allow;
        }
        else {
            return false;
        }
    };
    Tree.prototype.isValidDragScope = function (dragScope) {
        var dropScope = this.droppableScope;
        if (dropScope) {
            if (typeof dropScope === 'string') {
                if (typeof dragScope === 'string')
                    return dropScope === dragScope;
                else if (dragScope instanceof Array)
                    return dragScope.indexOf(dropScope) != -1;
            }
            else if (dropScope instanceof Array) {
                if (typeof dragScope === 'string') {
                    return dropScope.indexOf(dragScope) != -1;
                }
                else if (dragScope instanceof Array) {
                    for (var _i = 0, dropScope_1 = dropScope; _i < dropScope_1.length; _i++) {
                        var s = dropScope_1[_i];
                        for (var _a = 0, dragScope_1 = dragScope; _a < dragScope_1.length; _a++) {
                            var ds = dragScope_1[_a];
                            if (s === ds) {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }
        else {
            return true;
        }
    };
    Tree.prototype.ngOnDestroy = function () {
        if (this.dragStartSubscription) {
            this.dragStartSubscription.unsubscribe();
        }
        if (this.dragStopSubscription) {
            this.dragStopSubscription.unsubscribe();
        }
    };
    return Tree;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], Tree.prototype, "value", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Tree.prototype, "selectionMode", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Tree.prototype, "selection", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Tree.prototype, "selectionChange", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Tree.prototype, "onNodeSelect", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Tree.prototype, "onNodeUnselect", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Tree.prototype, "onNodeExpand", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Tree.prototype, "onNodeCollapse", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Tree.prototype, "onNodeContextMenuSelect", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Tree.prototype, "onNodeDrop", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Tree.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Tree.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Tree.prototype, "contextMenu", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Tree.prototype, "layout", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Tree.prototype, "draggableScope", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Tree.prototype, "droppableScope", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Tree.prototype, "draggableNodes", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Tree.prototype, "droppableNodes", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Tree.prototype, "metaKeySelection", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Tree.prototype, "propagateSelectionUp", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Tree.prototype, "propagateSelectionDown", void 0);
__decorate([
    core_1.ContentChildren(shared_2.PrimeTemplate),
    __metadata("design:type", core_1.QueryList)
], Tree.prototype, "templates", void 0);
Tree = __decorate([
    core_1.Component({
        selector: 'p-tree',
        template: "\n        <div [ngClass]=\"{'ui-tree ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode,'ui-treenode-dragover':dragHover}\" [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"!horizontal\"\n            (drop)=\"onDrop($event)\" (dragover)=\"onDragOver($event)\" (dragenter)=\"onDragEnter($event)\" (dragleave)=\"onDragLeave($event)\">\n            <ul class=\"ui-tree-container\">\n                <p-treeNode *ngFor=\"let node of value;let firstChild=first;let lastChild=last; let index=index\" [node]=\"node\" \n                [firstChild]=\"firstChild\" [lastChild]=\"lastChild\" [index]=\"index\"></p-treeNode>\n            </ul>\n        </div>\n        <div [ngClass]=\"{'ui-tree ui-tree-horizontal ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode}\"  [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"horizontal\">\n            <table *ngIf=\"value&&value[0]\">\n                <p-treeNode [node]=\"value[0]\" [root]=\"true\"></p-treeNode>\n            </table>\n        </div>\n    "
    }),
    __param(0, core_2.Optional()),
    __metadata("design:paramtypes", [treedragdropservice_1.TreeDragDropService])
], Tree);
exports.Tree = Tree;
var TreeModule = (function () {
    function TreeModule() {
    }
    return TreeModule;
}());
TreeModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [Tree, shared_1.SharedModule],
        declarations: [Tree, UITreeNode, TreeNodeTemplateLoader]
    })
], TreeModule);
exports.TreeModule = TreeModule;
var UITreeNode_1;
//# sourceMappingURL=tree.js.map

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var shared_1 = __webpack_require__(7);
var shared_2 = __webpack_require__(7);
var domhandler_1 = __webpack_require__(4);
var UITreeRow = (function () {
    function UITreeRow(treeTable) {
        this.treeTable = treeTable;
        this.level = 0;
        this.labelExpand = "Expand";
        this.labelCollapse = "Collapse";
    }
    UITreeRow.prototype.ngOnInit = function () {
        this.node.parent = this.parentNode;
    };
    UITreeRow.prototype.toggle = function (event) {
        if (this.node.expanded)
            this.treeTable.onNodeCollapse.emit({ originalEvent: event, node: this.node });
        else
            this.treeTable.onNodeExpand.emit({ originalEvent: event, node: this.node });
        this.node.expanded = !this.node.expanded;
        event.preventDefault();
    };
    UITreeRow.prototype.isLeaf = function () {
        return this.node.leaf == false ? false : !(this.node.children && this.node.children.length);
    };
    UITreeRow.prototype.isSelected = function () {
        return this.treeTable.isSelected(this.node);
    };
    UITreeRow.prototype.onRowClick = function (event) {
        this.treeTable.onRowClick(event, this.node);
    };
    UITreeRow.prototype.onRowRightClick = function (event) {
        this.treeTable.onRowRightClick(event, this.node);
    };
    UITreeRow.prototype.rowDblClick = function (event) {
        this.treeTable.onRowDblclick.emit({ originalEvent: event, node: this.node });
    };
    UITreeRow.prototype.onRowTouchEnd = function () {
        this.treeTable.onRowTouchEnd();
    };
    UITreeRow.prototype.resolveFieldData = function (data, field) {
        if (data && field) {
            if (field.indexOf('.') == -1) {
                return data[field];
            }
            else {
                var fields = field.split('.');
                var value = data;
                for (var i = 0, len = fields.length; i < len; ++i) {
                    value = value[fields[i]];
                }
                return value;
            }
        }
        else {
            return null;
        }
    };
    return UITreeRow;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], UITreeRow.prototype, "node", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], UITreeRow.prototype, "parentNode", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], UITreeRow.prototype, "level", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], UITreeRow.prototype, "labelExpand", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], UITreeRow.prototype, "labelCollapse", void 0);
UITreeRow = __decorate([
    core_1.Component({
        selector: '[pTreeRow]',
        template: "\n        <div class=\"ui-treetable-row\" [ngClass]=\"{'ui-state-highlight':isSelected(),'ui-treetable-row-selectable':treeTable.selectionMode && node.selectable !== false}\">\n            <td *ngFor=\"let col of treeTable.columns; let i=index\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\" (click)=\"onRowClick($event)\" (dblclick)=\"rowDblClick($event)\" (touchend)=\"onRowTouchEnd()\" (contextmenu)=\"onRowRightClick($event)\">\n                <a href=\"#\" *ngIf=\"i == treeTable.toggleColumnIndex\" class=\"ui-treetable-toggler fa fa-fw ui-clickable\" [ngClass]=\"{'fa-caret-down':node.expanded,'fa-caret-right':!node.expanded}\"\n                    [ngStyle]=\"{'margin-left':level*16 + 'px','visibility': isLeaf() ? 'hidden' : 'visible'}\"\n                    (click)=\"toggle($event)\"\n                    [title]=\"node.expanded ? labelCollapse : labelExpand\">\n                </a>\n                <div class=\"ui-chkbox ui-treetable-checkbox\" *ngIf=\"treeTable.selectionMode == 'checkbox' && i==0\"><div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\">\n                    <span class=\"ui-chkbox-icon ui-clickable fa\" \n                        [ngClass]=\"{'fa-check':isSelected(),'fa-minus':node.partialSelected}\"></span></div></div\n                ><span *ngIf=\"!col.template\">{{resolveFieldData(node.data,col.field)}}</span>\n                <p-columnBodyTemplateLoader [column]=\"col\" [rowData]=\"node\" *ngIf=\"col.template\"></p-columnBodyTemplateLoader>\n            </td>\n        </div>\n        <div *ngIf=\"node.children && node.expanded\" class=\"ui-treetable-row\" style=\"display:table-row\">\n            <td [attr.colspan]=\"treeTable.columns.length\" class=\"ui-treetable-child-table-container\">\n                <table>\n                    <tbody pTreeRow *ngFor=\"let childNode of node.children\" [node]=\"childNode\" [level]=\"level+1\" [labelExpand]=\"labelExpand\" [labelCollapse]=\"labelCollapse\" [parentNode]=\"node\"></tbody>\n                </table>\n            </td>\n        </div>\n    "
    }),
    __param(0, core_1.Inject(core_1.forwardRef(function () { return TreeTable; }))),
    __metadata("design:paramtypes", [TreeTable])
], UITreeRow);
exports.UITreeRow = UITreeRow;
var TreeTable = (function () {
    function TreeTable(el, domHandler, changeDetector, renderer) {
        this.el = el;
        this.domHandler = domHandler;
        this.changeDetector = changeDetector;
        this.renderer = renderer;
        this.labelExpand = "Expand";
        this.labelCollapse = "Collapse";
        this.metaKeySelection = true;
        this.toggleColumnIndex = 0;
        this.onRowDblclick = new core_1.EventEmitter();
        this.selectionChange = new core_1.EventEmitter();
        this.onNodeSelect = new core_1.EventEmitter();
        this.onNodeUnselect = new core_1.EventEmitter();
        this.onNodeExpand = new core_1.EventEmitter();
        this.onNodeCollapse = new core_1.EventEmitter();
        this.onContextMenuSelect = new core_1.EventEmitter();
    }
    TreeTable.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.initColumns();
        this.columnsSubscription = this.cols.changes.subscribe(function (_) {
            _this.initColumns();
            _this.changeDetector.markForCheck();
        });
    };
    TreeTable.prototype.initColumns = function () {
        this.columns = this.cols.toArray();
    };
    TreeTable.prototype.onRowClick = function (event, node) {
        var eventTarget = event.target;
        if (eventTarget.className && eventTarget.className.indexOf('ui-treetable-toggler') === 0) {
            return;
        }
        else if (this.selectionMode) {
            if (node.selectable === false) {
                return;
            }
            var metaSelection = this.rowTouched ? false : this.metaKeySelection;
            var index_1 = this.findIndexInSelection(node);
            var selected = (index_1 >= 0);
            if (this.isCheckboxSelectionMode()) {
                if (selected) {
                    this.propagateSelectionDown(node, false);
                    if (node.parent) {
                        this.propagateSelectionUp(node.parent, false);
                    }
                    this.selectionChange.emit(this.selection);
                    this.onNodeUnselect.emit({ originalEvent: event, node: node });
                }
                else {
                    this.propagateSelectionDown(node, true);
                    if (node.parent) {
                        this.propagateSelectionUp(node.parent, true);
                    }
                    this.selectionChange.emit(this.selection);
                    this.onNodeSelect.emit({ originalEvent: event, node: node });
                }
            }
            else {
                if (metaSelection) {
                    var metaKey = (event.metaKey || event.ctrlKey);
                    if (selected && metaKey) {
                        if (this.isSingleSelectionMode()) {
                            this.selectionChange.emit(null);
                        }
                        else {
                            this.selection = this.selection.filter(function (val, i) { return i != index_1; });
                            this.selectionChange.emit(this.selection);
                        }
                        this.onNodeUnselect.emit({ originalEvent: event, node: node });
                    }
                    else {
                        if (this.isSingleSelectionMode()) {
                            this.selectionChange.emit(node);
                        }
                        else if (this.isMultipleSelectionMode()) {
                            this.selection = (!metaKey) ? [] : this.selection || [];
                            this.selection = this.selection.concat([node]);
                            this.selectionChange.emit(this.selection);
                        }
                        this.onNodeSelect.emit({ originalEvent: event, node: node });
                    }
                }
                else {
                    if (this.isSingleSelectionMode()) {
                        if (selected) {
                            this.selection = null;
                            this.onNodeUnselect.emit({ originalEvent: event, node: node });
                        }
                        else {
                            this.selection = node;
                            this.onNodeSelect.emit({ originalEvent: event, node: node });
                        }
                    }
                    else {
                        if (selected) {
                            this.selection = this.selection.filter(function (val, i) { return i != index_1; });
                            this.onNodeUnselect.emit({ originalEvent: event, node: node });
                        }
                        else {
                            this.selection = (this.selection || []).concat([node]);
                            this.onNodeSelect.emit({ originalEvent: event, node: node });
                        }
                    }
                    this.selectionChange.emit(this.selection);
                }
            }
        }
        this.rowTouched = false;
    };
    TreeTable.prototype.onRowTouchEnd = function () {
        this.rowTouched = true;
    };
    TreeTable.prototype.onRowRightClick = function (event, node) {
        if (this.contextMenu) {
            var index = this.findIndexInSelection(node);
            var selected = (index >= 0);
            if (!selected) {
                if (this.isSingleSelectionMode()) {
                    this.selection = node;
                }
                else if (this.isMultipleSelectionMode()) {
                    this.selection = [node];
                    this.selectionChange.emit(this.selection);
                }
                this.selectionChange.emit(this.selection);
            }
            this.contextMenu.show(event);
            this.onContextMenuSelect.emit({ originalEvent: event, node: node });
        }
    };
    TreeTable.prototype.findIndexInSelection = function (node) {
        var index = -1;
        if (this.selectionMode && this.selection) {
            if (this.isSingleSelectionMode()) {
                index = (this.selection == node) ? 0 : -1;
            }
            else {
                for (var i = 0; i < this.selection.length; i++) {
                    if (this.selection[i] == node) {
                        index = i;
                        break;
                    }
                }
            }
        }
        return index;
    };
    TreeTable.prototype.propagateSelectionUp = function (node, select) {
        if (node.children && node.children.length) {
            var selectedCount = 0;
            var childPartialSelected = false;
            for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
                var child = _a[_i];
                if (this.isSelected(child)) {
                    selectedCount++;
                }
                else if (child.partialSelected) {
                    childPartialSelected = true;
                }
            }
            if (select && selectedCount == node.children.length) {
                this.selection = (this.selection || []).concat([node]);
                node.partialSelected = false;
            }
            else {
                if (!select) {
                    var index_2 = this.findIndexInSelection(node);
                    if (index_2 >= 0) {
                        this.selection = this.selection.filter(function (val, i) { return i != index_2; });
                    }
                }
                if (childPartialSelected || selectedCount > 0 && selectedCount != node.children.length)
                    node.partialSelected = true;
                else
                    node.partialSelected = false;
            }
        }
        var parent = node.parent;
        if (parent) {
            this.propagateSelectionUp(parent, select);
        }
    };
    TreeTable.prototype.propagateSelectionDown = function (node, select) {
        var index = this.findIndexInSelection(node);
        if (select && index == -1) {
            this.selection = (this.selection || []).concat([node]);
        }
        else if (!select && index > -1) {
            this.selection = this.selection.filter(function (val, i) { return i != index; });
        }
        node.partialSelected = false;
        if (node.children && node.children.length) {
            for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
                var child = _a[_i];
                this.propagateSelectionDown(child, select);
            }
        }
    };
    TreeTable.prototype.isSelected = function (node) {
        return this.findIndexInSelection(node) != -1;
    };
    TreeTable.prototype.isSingleSelectionMode = function () {
        return this.selectionMode && this.selectionMode == 'single';
    };
    TreeTable.prototype.isMultipleSelectionMode = function () {
        return this.selectionMode && this.selectionMode == 'multiple';
    };
    TreeTable.prototype.isCheckboxSelectionMode = function () {
        return this.selectionMode && this.selectionMode == 'checkbox';
    };
    TreeTable.prototype.hasFooter = function () {
        if (this.columns) {
            var columnsArr = this.cols.toArray();
            for (var i = 0; i < columnsArr.length; i++) {
                if (columnsArr[i].footer) {
                    return true;
                }
            }
        }
        return false;
    };
    return TreeTable;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], TreeTable.prototype, "value", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TreeTable.prototype, "selectionMode", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], TreeTable.prototype, "selection", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], TreeTable.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TreeTable.prototype, "styleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TreeTable.prototype, "labelExpand", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TreeTable.prototype, "labelCollapse", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], TreeTable.prototype, "metaKeySelection", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], TreeTable.prototype, "contextMenu", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], TreeTable.prototype, "toggleColumnIndex", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], TreeTable.prototype, "onRowDblclick", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], TreeTable.prototype, "selectionChange", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], TreeTable.prototype, "onNodeSelect", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], TreeTable.prototype, "onNodeUnselect", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], TreeTable.prototype, "onNodeExpand", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], TreeTable.prototype, "onNodeCollapse", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], TreeTable.prototype, "onContextMenuSelect", void 0);
__decorate([
    core_1.ContentChild(shared_1.Header),
    __metadata("design:type", shared_1.Header)
], TreeTable.prototype, "header", void 0);
__decorate([
    core_1.ContentChild(shared_1.Footer),
    __metadata("design:type", shared_1.Footer)
], TreeTable.prototype, "footer", void 0);
__decorate([
    core_1.ContentChildren(shared_1.Column),
    __metadata("design:type", core_1.QueryList)
], TreeTable.prototype, "cols", void 0);
__decorate([
    core_1.ViewChild('tbl'),
    __metadata("design:type", core_1.ElementRef)
], TreeTable.prototype, "tableViewChild", void 0);
TreeTable = __decorate([
    core_1.Component({
        selector: 'p-treeTable',
        template: "\n        <div [ngClass]=\"'ui-treetable ui-widget'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-treetable-header ui-widget-header\" *ngIf=\"header\">\n                <ng-content select=\"p-header\"></ng-content>\n            </div>\n            <div class=\"ui-treetable-tablewrapper\">\n                <table #tbl class=\"ui-widget-content\">\n                    <thead>\n                        <tr class=\"ui-state-default\">\n                            <th #headerCell *ngFor=\"let col of columns; let lastCol=last \"  [ngStyle]=\"col.style\" [class]=\"col.styleClass\" \n                                [ngClass]=\"'ui-state-default ui-unselectable-text'\">\n                                <span class=\"ui-column-title\" *ngIf=\"!col.headerTemplate\">{{col.header}}</span>\n                                <span class=\"ui-column-title\" *ngIf=\"col.headerTemplate\">\n                                    <p-columnHeaderTemplateLoader [column]=\"col\"></p-columnHeaderTemplateLoader>\n                                </span>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tfoot *ngIf=\"hasFooter()\">\n                        <tr>\n                            <td *ngFor=\"let col of columns\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\" [ngClass]=\"{'ui-state-default':true}\">\n                                <span class=\"ui-column-footer\" *ngIf=\"!col.footerTemplate\">{{col.footer}}</span>\n                                <span class=\"ui-column-footer\" *ngIf=\"col.footerTemplate\">\n                                    <p-columnFooterTemplateLoader [column]=\"col\"></p-columnFooterTemplateLoader>\n                                </span>\n                            </td>\n                        </tr>\n                    </tfoot>\n                    <tbody pTreeRow *ngFor=\"let node of value\" class=\"ui-treetable-data ui-widget-content\" [node]=\"node\" [level]=\"0\" [labelExpand]=\"labelExpand\" [labelCollapse]=\"labelCollapse\"></tbody>\n                </table>\n            </div>\n            \n            <div class=\"ui-treetable-footer ui-widget-header\" *ngIf=\"footer\">\n                <ng-content select=\"p-footer\"></ng-content>\n            </div>\n        </div>\n    ",
        providers: [domhandler_1.DomHandler]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, domhandler_1.DomHandler, core_1.ChangeDetectorRef, core_1.Renderer2])
], TreeTable);
exports.TreeTable = TreeTable;
var TreeTableModule = (function () {
    function TreeTableModule() {
    }
    return TreeTableModule;
}());
TreeTableModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule, shared_2.SharedModule],
        exports: [TreeTable, shared_2.SharedModule],
        declarations: [TreeTable, UITreeRow]
    })
], TreeTableModule);
exports.TreeTableModule = TreeTableModule;
//# sourceMappingURL=treetable.js.map

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var common_1 = __webpack_require__(3);
var forms_1 = __webpack_require__(6);
exports.TRISTATECHECKBOX_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return TriStateCheckbox; }),
    multi: true
};
var TriStateCheckbox = (function () {
    function TriStateCheckbox(cd) {
        this.cd = cd;
        this.onChange = new core_1.EventEmitter();
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    TriStateCheckbox.prototype.onClick = function (event, input) {
        if (!this.disabled) {
            this.toggle(event);
            this.focus = true;
            input.focus();
        }
    };
    TriStateCheckbox.prototype.onKeydown = function (event) {
        if (event.keyCode == 32) {
            event.preventDefault();
        }
    };
    TriStateCheckbox.prototype.onKeyup = function (event) {
        if (event.keyCode == 32) {
            this.toggle(event);
            event.preventDefault();
        }
    };
    TriStateCheckbox.prototype.toggle = function (event) {
        if (this.value == null || this.value == undefined)
            this.value = true;
        else if (this.value == true)
            this.value = false;
        else if (this.value == false)
            this.value = null;
        this.onModelChange(this.value);
        this.onChange.emit({
            originalEvent: event,
            value: this.value
        });
    };
    TriStateCheckbox.prototype.onFocus = function () {
        this.focus = true;
    };
    TriStateCheckbox.prototype.onBlur = function () {
        this.focus = false;
        this.onModelTouched();
    };
    TriStateCheckbox.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    TriStateCheckbox.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    TriStateCheckbox.prototype.writeValue = function (value) {
        this.value = value;
        this.cd.markForCheck();
    };
    TriStateCheckbox.prototype.setDisabledState = function (disabled) {
        this.disabled = disabled;
    };
    return TriStateCheckbox;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], TriStateCheckbox.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TriStateCheckbox.prototype, "name", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], TriStateCheckbox.prototype, "tabindex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TriStateCheckbox.prototype, "inputId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], TriStateCheckbox.prototype, "style", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TriStateCheckbox.prototype, "styleClass", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], TriStateCheckbox.prototype, "onChange", void 0);
TriStateCheckbox = __decorate([
    core_1.Component({
        selector: 'p-triStateCheckbox',
        template: "\n        <div [ngStyle]=\"style\" [ngClass]=\"'ui-chkbox ui-tristatechkbox ui-widget'\" [class]=\"styleClass\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #input type=\"text\" [attr.id]=\"inputId\" [name]=\"name\" [attr.tabindex]=\"tabindex\" readonly [disabled]=\"disabled\" (keyup)=\"onKeyup($event)\" (keydown)=\"onKeydown($event)\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n            </div>\n            <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" (click)=\"onClick($event,input)\"\n                [ngClass]=\"{'ui-state-active':value!=null,'ui-state-disabled':disabled,'ui-state-focus':focus}\">\n                <span class=\"ui-chkbox-icon fa ui-clickable\" [ngClass]=\"{'fa-check':value==true,'fa-close':value==false}\"></span>\n            </div>\n        </div>\n    ",
        providers: [exports.TRISTATECHECKBOX_VALUE_ACCESSOR]
    }),
    __metadata("design:paramtypes", [core_1.ChangeDetectorRef])
], TriStateCheckbox);
exports.TriStateCheckbox = TriStateCheckbox;
var TriStateCheckboxModule = (function () {
    function TriStateCheckboxModule() {
    }
    return TriStateCheckboxModule;
}());
TriStateCheckboxModule = __decorate([
    core_1.NgModule({
        imports: [common_1.CommonModule],
        exports: [TriStateCheckbox],
        declarations: [TriStateCheckbox]
    })
], TriStateCheckboxModule);
exports.TriStateCheckboxModule = TriStateCheckboxModule;
//# sourceMappingURL=tristatecheckbox.js.map

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(295);
exports.encode = exports.stringify = __webpack_require__(296);


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ansiRegex = __webpack_require__(195)();

module.exports = function (str) {
	return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
};


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

/*eslint-env browser*/

var clientOverlay = document.createElement('div');
clientOverlay.id = 'webpack-hot-middleware-clientOverlay';
var styles = {
  background: 'rgba(0,0,0,0.85)',
  color: '#E8E8E8',
  lineHeight: '1.2',
  whiteSpace: 'pre',
  fontFamily: 'Menlo, Consolas, monospace',
  fontSize: '13px',
  position: 'fixed',
  zIndex: 9999,
  padding: '10px',
  left: 0,
  right: 0,
  top: 0,
  bottom: 0,
  overflow: 'auto',
  dir: 'ltr',
  textAlign: 'left'
};
for (var key in styles) {
  clientOverlay.style[key] = styles[key];
}

var ansiHTML = __webpack_require__(194);
var colors = {
  reset: ['transparent', 'transparent'],
  black: '181818',
  red: 'E36049',
  green: 'B3CB74',
  yellow: 'FFD080',
  blue: '7CAFC2',
  magenta: '7FACCA',
  cyan: 'C3C2EF',
  lightgrey: 'EBE7E3',
  darkgrey: '6D7891'
};
ansiHTML.setColors(colors);

var Entities = __webpack_require__(199).AllHtmlEntities;
var entities = new Entities();

exports.showProblems =
function showProblems(type, lines) {
  clientOverlay.innerHTML = '';
  lines.forEach(function(msg) {
    msg = ansiHTML(entities.encode(msg));
    var div = document.createElement('div');
    div.style.marginBottom = '26px';
    div.innerHTML = problemType(type) + ' in ' + msg;
    clientOverlay.appendChild(div);
  });
  if (document.body) {
    document.body.appendChild(clientOverlay);
  }
};

exports.clear =
function clear() {
  if (document.body && clientOverlay.parentNode) {
    document.body.removeChild(clientOverlay);
  }
};

var problemColors = {
  errors: colors.red,
  warnings: colors.yellow
};

function problemType (type) {
  var color = problemColors[type] || colors.red;
  return (
    '<span style="background-color:#' + color + '; color:#fff; padding:2px 4px; border-radius: 2px">' +
      type.slice(0, -1).toUpperCase() +
    '</span>'
  );
}


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Based heavily on https://github.com/webpack/webpack/blob/
 *  c0afdf9c6abc1dd70707c594e473802a566f7b6e/hot/only-dev-server.js
 * Original copyright Tobias Koppers @sokra (MIT license)
 */

/* global window __webpack_hash__ */

if (false) {
  throw new Error("[HMR] Hot Module Replacement is disabled.");
}

var hmrDocsUrl = "http://webpack.github.io/docs/hot-module-replacement-with-webpack.html"; // eslint-disable-line max-len

var lastHash;
var failureStatuses = { abort: 1, fail: 1 };
var applyOptions = { ignoreUnaccepted: true };

function upToDate(hash) {
  if (hash) lastHash = hash;
  return lastHash == __webpack_require__.h();
}

module.exports = function(hash, moduleMap, options) {
  var reload = options.reload;
  if (!upToDate(hash) && module.hot.status() == "idle") {
    if (options.log) console.log("[HMR] Checking for updates on the server...");
    check();
  }

  function check() {
    var cb = function(err, updatedModules) {
      if (err) return handleError(err);

      if(!updatedModules) {
        if (options.warn) {
          console.warn("[HMR] Cannot find update (Full reload needed)");
          console.warn("[HMR] (Probably because of restarting the server)");
        }
        performReload();
        return null;
      }

      var applyCallback = function(applyErr, renewedModules) {
        if (applyErr) return handleError(applyErr);

        if (!upToDate()) check();

        logUpdates(updatedModules, renewedModules);
      };

      var applyResult = module.hot.apply(applyOptions, applyCallback);
      // webpack 2 promise
      if (applyResult && applyResult.then) {
        // HotModuleReplacement.runtime.js refers to the result as `outdatedModules`
        applyResult.then(function(outdatedModules) {
          applyCallback(null, outdatedModules);
        });
        applyResult.catch(applyCallback);
      }

    };

    var result = module.hot.check(false, cb);
    // webpack 2 promise
    if (result && result.then) {
        result.then(function(updatedModules) {
            cb(null, updatedModules);
        });
        result.catch(cb);
    }
  }

  function logUpdates(updatedModules, renewedModules) {
    var unacceptedModules = updatedModules.filter(function(moduleId) {
      return renewedModules && renewedModules.indexOf(moduleId) < 0;
    });

    if(unacceptedModules.length > 0) {
      if (options.warn) {
        console.warn(
          "[HMR] The following modules couldn't be hot updated: " +
          "(Full reload needed)\n" +
          "This is usually because the modules which have changed " +
          "(and their parents) do not know how to hot reload themselves. " +
          "See " + hmrDocsUrl + " for more details."
        );
        unacceptedModules.forEach(function(moduleId) {
          console.warn("[HMR]  - " + moduleMap[moduleId]);
        });
      }
      performReload();
      return;
    }

    if (options.log) {
      if(!renewedModules || renewedModules.length === 0) {
        console.log("[HMR] Nothing hot updated.");
      } else {
        console.log("[HMR] Updated modules:");
        renewedModules.forEach(function(moduleId) {
          console.log("[HMR]  - " + moduleMap[moduleId]);
        });
      }

      if (upToDate()) {
        console.log("[HMR] App is up to date.");
      }
    }
  }

  function handleError(err) {
    if (module.hot.status() in failureStatuses) {
      if (options.warn) {
        console.warn("[HMR] Cannot check for update (Full reload needed)");
        console.warn("[HMR] " + err.stack || err.message);
      }
      performReload();
      return;
    }
    if (options.warn) {
      console.warn("[HMR] Update check failed: " + err.stack || err.message);
    }
  }

  function performReload() {
    if (reload) {
      if (options.warn) console.warn("[HMR] Reloading page");
      window.location.reload();
    }
  }
};


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(313)

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(315)

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(316)

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(317)

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(322)

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(427)

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(428)

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(429)

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(430)

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(431)

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(432)

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(433)

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(434)

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(435)

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(436)

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(437)

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(438)

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(439)

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(440)

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(498)

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(499)

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(500)

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(501)

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(502)

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(503)

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(504)

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(505)

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(10))(506)

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(536)

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(537)

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(543)

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(550)

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(554)

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(563)

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(578)

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(581)

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(587)

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(612)

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(9))(618)

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(187);
module.exports = __webpack_require__(186);


/***/ })
/******/ ]);
//# sourceMappingURL=main.js.map